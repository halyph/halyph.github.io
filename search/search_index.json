{"config":{"indexing":"full","lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about/","text":"About About this blog This is another attempt to write a blog. My aim is to capture my thoughts, findings, and similar things around tech which are interesting to me. I am not sure whether it will be valuable for other people. So you are warned \ud83d\ude09.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#about-this-blog","text":"This is another attempt to write a blog. My aim is to capture my thoughts, findings, and similar things around tech which are interesting to me. I am not sure whether it will be valuable for other people. So you are warned \ud83d\ude09.","title":"About this blog"},{"location":"bookshelf/","text":"Bookshelf Here is a list of books I\u2019ve read or listened from the beginning till the end . See my Googreads profile. 2022 Read (Book or EBook) \u041a\u0443\u043b\u044c\u0442\u0443\u0440\u043d\u0430 \u043a\u0430\u0440\u0442\u0430. \u0411\u0430\u0440\u2019\u0454\u0440\u0438 \u043c\u0456\u0436\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0441\u043f\u0456\u043b\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0432 \u0431\u0456\u0437\u043d\u0435\u0441\u0456 , by \u0415\u0440\u0456\u043d \u041c\u0435\u0454\u0440 (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2020), ISBN 9786177863297 \u041c\u0438 \u2014 Bellingcat. \u041e\u043d\u043b\u0430\u0439\u043d-\u0440\u043e\u0437\u0441\u043b\u0456\u0434\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u0456\u0436\u043d\u0430\u0440\u043e\u0434\u043d\u0438\u0445 \u0437\u043b\u043e\u0447\u0438\u043d\u0456\u0432 \u0442\u0430 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0439\u043d\u0430 \u0432\u0456\u0439\u043d\u0430 \u0437 \u0420\u043e\u0441\u0456\u0454\u044e , by Eliot Higgins (\u041d\u0430\u0448 \u0444\u043e\u0440\u043c\u0430\u0442, 2022), ISBN 9786177973811 \u041f\u0440\u0438\u0437\u043c\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u043e\u0433\u043e \u0448\u043f\u0438\u0433\u0443\u043d\u0430. \u0411\u043e\u0440\u043e\u0442\u044c\u0431\u0430 \u0437 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u043e\u044e \u0430\u0433\u0440\u0435\u0441\u0456\u0454\u044e , by Jack Devine (\u0424\u043e\u043b\u0456\u043e, 2021), ISBN 9789660397644 Listened (Audiobook) \u0422\u0430 \u0432\u0438 \u0436\u0430\u0440\u0442\u0443\u0454\u0442\u0435, \u043c\u0456\u0441\u0442\u0435\u0440\u0435 \u0424\u0435\u0439\u043d\u043c\u0430\u043d! \u041f\u0440\u0438\u0433\u043e\u0434\u0438 \u0434\u043e\u043f\u0438\u0442\u043b\u0438\u0432\u043e\u0433\u043e \u0434\u0438\u0432\u0430\u043a\u0430 , by Richard P. Feynman (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2018), ISBN 9786177552160 \u041d\u0456\u043a\u043e\u043b\u0438 \u043d\u0435 \u0439\u0434\u0456\u0442\u044c \u043d\u0430 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0456\u0441. \u0422\u0435\u0445\u043d\u0456\u043a\u0430 \u0435\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0438\u0445 \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , by Chris Voss (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2019), ISBN 9786177682225 Sapiens: \u041b\u044e\u0434\u0438\u043d\u0430 \u0440\u043e\u0437\u0443\u043c\u043d\u0430 , by \u042e\u0432\u0430\u043b \u041d\u043e\u0439 \u0425\u0430\u0440\u0430\u0440\u0456 (BookChef, 2021), ISBN 9789669937155 \u0421\u043c\u0456\u0445 \u0443 \u043a\u0456\u043d\u0446\u0456 \u0442\u0443\u043d\u0435\u043b\u044e. \u041d\u043e\u0442\u0430\u0442\u043a\u0438 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043d\u0435\u0441\u0442\u0435\u0437\u0456\u043e\u043b\u043e\u0433\u0430 , by \u0406\u0432\u0430\u043d \u0427\u0435\u0440\u043d\u0435\u043d\u043a\u043e (\u0412\u0456\u0445\u043e\u043b\u0430, 2021), ISBN 9786177960361 \u0420\u043e\u0437\u0433\u0430\u0434\u043a\u0430 \u0433\u0435\u043d\u0456\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0456. \u042f\u043a \u043f\u0440\u0430\u0446\u044e\u0454 \u0456\u043d\u0436\u0435\u043d\u0435\u0440\u0456\u044f \u0456\u0434\u0435\u0439 , by Ron Friedman (\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0456\u044f, 2021), ISBN 9786177965748 \u041c\u043e\u0441\u0441\u0430\u0434. \u041d\u0430\u0439\u0432\u0438\u0434\u0430\u0442\u043d\u0456\u0448\u0456 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u0456\u0437\u0440\u0430\u0457\u043b\u044c\u0441\u044c\u043a\u043e\u0457 \u0440\u043e\u0437\u0432\u0456\u0434\u043a\u0438 , by Michael Bar-Zohar , Nissim Mishal (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2022), ISBN 9786177973873 \u0424\u0430\u043a\u0442\u043e\u0440 \u0427\u0435\u0440\u0447\u0438\u043b\u044f. \u042f\u043a \u043e\u0434\u043d\u0430 \u043b\u044e\u0434\u0438\u043d\u0430 \u0437\u043c\u0456\u043d\u0438\u043b\u0430 \u0456\u0441\u0442\u043e\u0440\u0456\u044e , by \u0411\u043e\u0440\u0456\u0441 \u0414\u0436\u043e\u043d\u0441\u043e\u043d (\u0412\u0456\u0432\u0430\u0442, 2019), ISBN 9789669427960 Where Wizards Stay Up Late: The Origins of the Internet , by Katie Hafner , Matthew Lyon (Simon Schuste, 1998), ISBN 9780684832678 Escaping the Build Trap: How Effective Product Management Creates Real Value , by Melissa Perri (O\u2019Reilly Media, 2018), ISBN 9781491973790 The Manager\u2019s Path: A Guide for Tech Leaders Navigating Growth and Change , by Camille Fournier (O\u2019Reilly Media, 2017), ISBN 9781491973899 Hackers & Painters: Big Ideas from the Computer Age , by Paul Graham , Allen Noren (O\u2019Reilly Media, 2004), ISBN 9780596006624 2021 Read (Book or EBook) Serious Python: Black-Belt Advice on Deployment, Scalability, Testing, and More , by Julien Danjou (No Starch Press, 2018), ISBN 1593278780 A Brief History of Artificial Intelligence: What It Is, Where We Are, and Where We Are Going , by Michael Wooldridge (Flatiron Books, 2021), ISBN 1250770734 The Hundred-Page Machine Learning Book , by Andriy Burkov (Andriy Burkov, 2019)), ISBN 1777005477 \u0411\u0435\u0437\u043c\u0435\u0436\u043d\u0430 \u0441\u0438\u043b\u0430 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438. \u042f\u043a \u0437\u0430\u0432\u0434\u044f\u043a\u0438 \u043c\u0430\u0442\u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0432\u0438\u043d\u0430\u0439\u0448\u043b\u0438 \u0441\u043c\u0430\u0440\u0442\u0444\u043e\u043d\u0438, \u0442\u0435\u043b\u0435\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u0456 GPS , by \u0421\u0442\u0456\u0432\u0435\u043d \u0421\u0442\u0440\u043e\u0491\u0430\u0446 (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2020), ISBN 9786177866212 Kingpin: How One Hacker Took Over the Billion-Dollar Cybercrime Underground , by Kevin Poulsen (Crown, 2011), ISBN 0307588688 \u041f\u2019\u044f\u0442\u044c \u0432\u0430\u0434 \u0443 \u0440\u043e\u0431\u043e\u0442\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438. \u0406\u0441\u0442\u043e\u0440\u0456\u0457 \u0440\u0435\u0430\u043b\u044c\u043d\u0438\u0445 \u0432\u0438\u043a\u043b\u0438\u043a\u0456\u0432 \u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u043e\u0433 , by \u041f\u0430\u0442\u0440\u0456\u043a \u041b\u0435\u043d\u0441\u0456\u043e\u043d\u0456 (\u041a\u043d\u0438\u0436\u043a\u043e\u0432\u0438\u0439 \u041a\u043b\u0443\u0431 \u00ab\u041a\u043b\u0443\u0431 \u0421\u0456\u043c\u0435\u0439\u043d\u043e\u0433\u043e \u0414\u043e\u0437\u0432\u0456\u043b\u043b\u044f\u00bb, 2017), ISBN 9786171224643 \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0441 \u043c\u0443\u0434\u0430\u043a\u0430\u043c\u0438. \u0418 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0432\u043e\u043a\u0440\u0443\u0433 \u0432\u0430\u0441 , by \u0420\u043e\u0431\u0435\u0440\u0442 \u0421\u0430\u0442\u0442\u043e\u043d (\u041c\u0430\u043d\u043d, \u0418\u0432\u0430\u043d\u043e\u0432 \u0438 \u0424\u0435\u0440\u0431\u0435\u0440, 2015), ISBN 9785000576175 Go Bootcamp , by Matt Aimonetti (2014), ISBN N/A 97 Things Every Java Programmer Should Know: Collective Wisdom from the Experts , by Kevlin Henney (O\u2019Reilly Media, 2020), ISBN 1491952695 Listened (Audiobook) Countdown to Zero Day: Stuxnet and the Launch of the World\u2019s First Digital Weapon , by Kim Zetter (Crown, 2014), ISBN 9780770436179 2020 Read (Book or EBook) Live Work Work Work Die: A Journey into the Savage Heart of Silicon Valley , by Corey Pein (Metropolitan Books, 2018), ISBN 9781627794855 Python Interviews: Discussions with Python Experts , by Michael Driscoll (Packt Publishing, 2018), ISBN 9781788391764 1984 , by George Orwell , ISBN 9789662355574 Animal Farm, by George Orwell , ISBN 9780452284241 \u0412\u0442\u043e\u0440\u0436\u0435\u043d\u0438\u0435. \u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0440\u0443\u0441\u0441\u043a\u0438\u0445 \u0445\u0430\u043a\u0435\u0440\u043e\u0432 , by \u0414\u0430\u043d\u0438\u0438\u043b \u0422\u0443\u0440\u043e\u0432\u0441\u043a\u0438\u0439 (\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0443\u043c \u043f\u0430\u0431\u043b\u0438\u0448\u0438\u043d\u0433, 2019), ISBN 9785604262733 UNIX: A History and a Memoir , by Brian W. Kernighan (Independently Published, 2019), ISBN 9781695978553 Lab Rats: How Silicon Valley Made Work Miserable for the Rest of Us , by Dan Lyons (Hachette Books, 2018), ISBN 9780316561860 Listened (Audiobook) Sandworm: A New Era of Cyberwar and the Hunt for the Kremlin\u2019s Most Dangerous Hackers , by Andy Greenberg (Doubleday Books, 2019), ISBN 9780385544405 AI Superpowers: China, Silicon Valley, and the New World Order , by Kai-Fu Lee (Brilliance Audio, 2018), ISBN 9781328546395 Ghost in the Wires: My Adventures as the World\u2019s Most Wanted Hacker , by Kevin D. Mitnick , William L. Simon (Little, Brown and Company, 2011), ISBN 9780316037709 Hackers: Heroes of the Computer Revolution , by Steven Levy (O\u2019Reilly Media, 2010), ISBN 9781449388393 American Kingpin: The Epic Hunt for the Criminal Mastermind Behind the Silk Road , by Nick Bilton (Portfolio, 2017), ISBN 9781591848141 Bad Blood: Secrets and Lies in a Silicon Valley Startup , by John Carreyrou (Knopf Publishing Group, 2018), ISBN 9781524731656 The Innovators: How a Group of Hackers, Geniuses and Geeks Created the Digital Revolution , by Walter Isaacson (Simon and Schuster, 2014), ISBN 9781476708690 Extreme Ownership: How U.S. Navy SEALs Lead and Win , by Jocko Willink (St. Martin\u2019s Press, 2015), ISBN 9781250067050 Chaos Monkeys Revised Edition: Obscene Fortune and Random Failure in Silicon Valley , by Antonio Garc\u00eda Mart\u00ednez (HarperAudio, 2018), ISBN 9780062884503 Creativity, Inc.: Overcoming the Unseen Forces That Stand in the Way of True Inspiration , by Ed Catmull , Amy Wallace (Random House, 2014), ISBN 9780812993011 Permanent Record , by Edward Snowden (Metropolitan Books, 2019), ISBN 9781250237231 \u041d\u0430\u0432\u0447\u0438\u0442\u0438\u0441\u044f \u0432\u0447\u0438\u0442\u0438\u0441\u044f. \u042f\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u0441\u0432\u0456\u0439 \u043c\u043e\u0437\u043e\u043a \u043d\u0430 \u043f\u043e\u0432\u043d\u0443 , by Barbara Oakley , \u0410\u0440\u0442\u0435\u043c \u0417\u0430\u043c\u043e\u0446\u043d\u0438\u0439 (Translator) (\u041d\u0430\u0448 \u0444\u043e\u0440\u043c\u0430\u0442, 2018), ISBN 9786177552870 The Power of Habit: Why We Do What We Do in Life and Business , by Charles Duhigg (Random House, 2012), ISBN 9781400069286 Facebook: The Inside Story , by Steven Levy (Penguin Audio, 2020), ISBN 9780735213159 Super Pumped: The Battle for Uber , by Mike Isaac (W. W. Norton Company, 2019), ISBN 9780393652246 We Are Anonymous: Inside the Hacker World of LulzSec, Anonymous, and the Global Cyber Insurgency , by Parmy Olson (Little, Brown and Company, 2012), ISBN 9780316213547 Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones , by James Clear (Avery, 2018), ISBN 9780735211292 The Unicorn Project , by Gene Kim (It Revolution Press, 2019), ISBN 9781942788768 Masters of Doom: How Two Guys Created an Empire and Transformed Pop Culture , by David Kushner (Random House, 2004), ISBN 9780375505249 The Cuckoo\u2019s Egg: Tracking a Spy Through the Maze of Computer Espionage , by Clifford Stoll (Gallery Books, 2005), ISBN 9781416507789 The 7 Habits of Highly Effective People , by Stephen R. Covey (Simon Schuster Audio, 2012), ISBN 9781442350809 2019 Read (Book or EBook) \u041f\u0440\u043e\u043a\u0440\u0430\u0441\u0442\u0438\u043d\u0430\u0446\u0456\u044f. \u0427\u043e\u043c\u0443 \u0432\u0438 \u0432\u0434\u0430\u0454\u0442\u0435\u0441\u044f \u0434\u043e \u043d\u0435\u0457 \u0456 \u0449\u043e \u043c\u043e\u0436\u043d\u0430 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0456\u0437 \u0446\u0438\u043c \u0432\u0436\u0435 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 , by \u0414\u0436\u0435\u0439\u043d \u0411. \u0411\u0443\u0440\u043a\u0430 (Jane B. Burka) , \u041b\u0435\u043d\u043e\u0440\u0430 \u041c. \u042e\u0435\u043d (Lenora M. Yuen) (\u0412\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u043e \u0421\u0442\u0430\u0440\u043e\u0433\u043e \u041b\u0435\u0432\u0430, 2018), ISBN 9786176795643 The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win , by Gene Kim , Kevin Behr , George Spafford (It Revolution Press, 2014), ISBN 9780988262508 The Pragmatic Programmer: Your Journey to Mastery , by David Thomas , Andrew Hunt (Addison-Wesley Professional, 2019), ISBN 9780201616224 2018 Read (Book or EBook) \u041c\u043e\u0454 \u0436\u0438\u0442\u0442\u044f \u0442\u0430 \u0440\u043e\u0431\u043e\u0442\u0430 , by Henry Ford (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2015), ISBN 9789669742551 \u041a\u043c\u0456\u0442\u043b\u0438\u0432\u0456\u0448\u0456, \u0448\u0432\u0438\u0434\u0448\u0456, \u043a\u0440\u0430\u0449\u0456. \u0421\u0435\u043a\u0440\u0435\u0442\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0456 \u0432 \u0436\u0438\u0442\u0442\u0456 \u0442\u0430 \u0431\u0456\u0437\u043d\u0435\u0441\u0456 , by Charles Duhigg (\u041a\u0421\u0414, 2017), ISBN 9786171222809 Effective Python: 59 Specific Ways to Write Better Python , by Brett Slatkin (Addison-Wesley Professional, 2015), ISBN 9780134034287 2017 Read (Book or EBook) The Neophyte\u2019s Guide to Scala , by Daniel Westheide (2013) Building Microservices: Designing Fine-Grained Systems , by Sam Newman (O\u2019Reilly Media, 2015), ISBN 9781491950357 Reactive Microservices Architecture , by Jonas Bon\u00e9r (O\u2019Reilly Media, 2016) SBT in Action , by Joshua Suereth , Matthew Farwell (Manning, 2014), ISBN 9781617291272 Hatching Twitter: A True Story of Money, Power, Friendship, and Betrayal , by Nick Bilton (Portfolio Hardcover, 2013), ISBN 9781591846017 Underground: Tales of Hacking, Madness, and Obsession on the Electronic Frontier , by Suelette Dreyfus (Mandarin, 1997), ISBN 9781863305952 2016 Read (Book or EBook) Pro Vagrant , by Wlodzimierz Gajda (Apress, 2015), ISBN 9781484200742 Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions , by Venkat Subramaniam (Pragmatic Press, 2013), ISBN 9781937785468 Object-Oriented vs. Functional Programming , by Richard Warburton (O\u2019Reilly Media, 2015), ISBN 9781491933428 Release It!: Design and Deploy Production-Ready Software , by Michael T. Nygard (Pragmatic Bookshelf, 2007), ISBN 9780978739218 \u0421\u0442\u0456\u0432 \u0414\u0436\u043e\u0431\u0441 : \u043b\u044e\u0434\u0438\u043d\u0430, \u044f\u043a\u0430 \u043c\u0438\u0441\u043b\u0438\u043b\u0430 \u043f\u043e- \u0456\u043d\u0448\u043e\u043c\u0443 , by \u041a\u0430\u0440\u0435\u043d \u0411\u043b\u044e\u043c\u0435\u043d\u0442\u0430\u043b\u044c ( \u041d\u0430\u0432\u0447\u0430\u043b\u044c\u043d\u0430 \u043a\u043d\u0438\u0433\u0430 - \u0411\u043e\u0433\u0434\u0430\u043d, 2016), ISBN 9789661032889. (Translation of: Steve Jobs: The Man Who Thought Different ) \u00ab\u042f\u043a \u043f\u0440\u0430\u0446\u044e\u0454 Google\u00bb , by \u0415\u0440\u0456\u043a \u0428\u043c\u0456\u0434\u0442 (Eric Schmidt) , \u0414\u0436\u043e\u043d\u0430\u0442\u0430\u043d \u0420\u043e\u0437\u0435\u043d\u0431\u0435\u0440\u0433 (Jonathan Rosenberg) , ISBN 9781455582327. (Translation of: How Google Works ) \u0406\u043b\u043e\u043d \u041c\u0430\u0441\u043a: Tesla, SpaceX \u0456 \u0448\u043b\u044f\u0445 \u0443 \u0444\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u0447\u043d\u0435 \u043c\u0430\u0439\u0431\u0443\u0442\u043d\u0454 , by \u0415\u0448\u043b\u0456 \u0412\u0435\u043d\u0441 (Ashlee Vance) (\u0422\u0410\u041e, 2015), ISBN 9780062301239 Data Scientists at Work , by Sebastian Gutierrez (Apress, 2014), ISBN 9781430265986 2015 Read (Book or EBook) The Well-Grounded Java Developer: Vital techniques of Java 7 and polyglot programming , by Benjamin J. Evans , Martijn Verburg (Manning Publications, 2012), ISBN 9781617290060 Lisp Hackers , by Vsevolod Dyomkin (Leanpub, 2013) Functional Programming for Java Developers: Tools for Better Concurrency, Abstraction, and Agility , by Dean Wampler (O\u2019Reilly Media, 2011), ISBN 9781449311032 Clean Code: A Handbook of Agile Software Craftsmanship , by Robert C. Martin (Prentice Hall, 2008), ISBN 9780132350884 Grails 2: A Quick-Start Guide , by Dave Klein , Ben Klein (Pragmatic Bookshelf, 2013), ISBN 9781937785772 2014 Read (Book or EBook) Making Java Groovy , by Kenneth Kousen (Manning, 2013), ISBN 9781935182948 Single Page Web Applications , by Michael S. Mikowski , Josh C. Powell (Manning Publications, 2012), ISBN 9781617290756 Programming Groovy 2 , by Venkat Subramaniam (Pragmatic Bookshelf, 2013), ISBN 9781937785307 Just for Fun: The Story of an Accidental Revolutionary , by Linus Torvalds , David Diamond (Harper Business, 2002), ISBN 9780066620732 2013 Read (Book or EBook) Pro Spring 3 , by Rob Harrop , Clarence Ho (Apress, 2012), ISBN 9781430241072 Scrum and XP from the Trenches , by Henrik Kniberg (Lulu.com, 2007), ISBN 9781430322641 iText in Action , by Bruno Lowagie (Manning Publications, 2010), ISBN 9781935182610 Deploying with JRuby: Deliver Scalable Web Apps using the JVM , by Joe Kutner (The Pragmatic Programmers, 2012), ISBN 9781934356975 Refactoring: Improving the Design of Existing Code , by Martin Fowler , Kent Beck (Contributor), Don Roberts (Contributor) (Addison-Wesley Object Technology Series, 1999), ISBN 9780201485677 Software Estimation: Demystifying the Black Art , by Steve McConnell (Microsoft Press, 2006), ISBN 9780735605350 2012 - 2000 Read (Book or EBook) C++ In Action: Industrial Strength Programming Techniques , by Bartosz Milewski (Addison Wesley Publishing Company, 2001), ISBN 9780201699487 The Deadline: A Novel about Project Management , by Tom DeMarco (Dorset House, 2002), ISBN 9780932633392 Programming Scala: Scalability = Functional Programming + Objects , by Dean Wampler , Alex Payne ( O\u2019Reilly Media, 2009), ISBN 9780596155957 Spring Persistence with Hibernate , by Paul Fisher , Solomon Duskis (Apress, 2010), ISBN 9781430226321 The Productive Programmer , by Neal Ford (O\u2019Reilly Media, 2008), ISBN 9780596519780 Learning Play! Framework 2 (Tips Techniques) , by Andy Petrella (Packt Publishing, 2013), ISBN 9781782160120 Scala for Java Developers , by Thomas Alexandre (Packt Publishing, 2014), ISBN 9781783283637 Practices of an Agile Developer: Working in the Real World , by Venkat Subramaniam , Andy Hunt (Pragmatic Bookshelf, 2006), ISBN 9780974514086 Pragmatic Thinking and Learning: Refactor Your Wetware , by Andy Hunt (Pragmatic Bookshelf, 2008), ISBN 9781934356050 The Passionate Programmer , by Chad Fowler (Pragmatic Bookshelf, 2009), ISBN 9781934356340 The Pragmatic Programmer: From Journeyman to Master , by Andy Hunt , Dave Thomas (Addison-Wesley Professional, 1999), ISBN 9780201616224 Patterns of Enterprise Application Architecture , by Martin Fowler , David Rice , Matthew Foemmel , Edward Hieatt , Robert Mee , Randy Stafford (Addison-Wesley Professional, 2002), ISBN 9780321127426 Pomodoro Technique Illustrated , by Staffan N\u00f6teberg (Pragmatic Bookshelf, 2010), ISBN 9781934356500 Design Patterns: Elements of Reusable Object-Oriented Software , by Erich Gamma , Ralph Johnson , John Vlissides , Richard Helm (Addison-Wesley Professional, 1994), ISBN 9780201633610 SCJP Sun Certified Programmer for Java 6 Study Guide , by Kathy Sierra , Bert Bates (McGraw-Hill, 2008), ISBN 9780071591065 The Mythical Man-Month: Essays on Software Engineering , by Frederick P. Brooks Jr. (Addison-Wesley Professional, 1995), ISBN 9780201835953 Programming Ruby: The Pragmatic Programmers\u2019 Guide , by Dave Thomas , Chad Fowler , Andy Hunt (Pragmatic Bookshelf, 2004), ISBN 9780974514055 The Clean Coder: A Code of Conduct for Professional Programmers , by Robert C. Martin (Prentice Hall, 2011), ISBN 9780137081073 Pro Git , by Scott Chacon (Apress, 2009), ISBN 9781430218333","title":"Bookshelf"},{"location":"bookshelf/#bookshelf","text":"Here is a list of books I\u2019ve read or listened from the beginning till the end . See my Googreads profile.","title":"Bookshelf"},{"location":"bookshelf/#2022","text":"Read (Book or EBook) \u041a\u0443\u043b\u044c\u0442\u0443\u0440\u043d\u0430 \u043a\u0430\u0440\u0442\u0430. \u0411\u0430\u0440\u2019\u0454\u0440\u0438 \u043c\u0456\u0436\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0441\u043f\u0456\u043b\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0432 \u0431\u0456\u0437\u043d\u0435\u0441\u0456 , by \u0415\u0440\u0456\u043d \u041c\u0435\u0454\u0440 (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2020), ISBN 9786177863297 \u041c\u0438 \u2014 Bellingcat. \u041e\u043d\u043b\u0430\u0439\u043d-\u0440\u043e\u0437\u0441\u043b\u0456\u0434\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u0456\u0436\u043d\u0430\u0440\u043e\u0434\u043d\u0438\u0445 \u0437\u043b\u043e\u0447\u0438\u043d\u0456\u0432 \u0442\u0430 \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0439\u043d\u0430 \u0432\u0456\u0439\u043d\u0430 \u0437 \u0420\u043e\u0441\u0456\u0454\u044e , by Eliot Higgins (\u041d\u0430\u0448 \u0444\u043e\u0440\u043c\u0430\u0442, 2022), ISBN 9786177973811 \u041f\u0440\u0438\u0437\u043c\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u043e\u0433\u043e \u0448\u043f\u0438\u0433\u0443\u043d\u0430. \u0411\u043e\u0440\u043e\u0442\u044c\u0431\u0430 \u0437 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u043e\u044e \u0430\u0433\u0440\u0435\u0441\u0456\u0454\u044e , by Jack Devine (\u0424\u043e\u043b\u0456\u043e, 2021), ISBN 9789660397644 Listened (Audiobook) \u0422\u0430 \u0432\u0438 \u0436\u0430\u0440\u0442\u0443\u0454\u0442\u0435, \u043c\u0456\u0441\u0442\u0435\u0440\u0435 \u0424\u0435\u0439\u043d\u043c\u0430\u043d! \u041f\u0440\u0438\u0433\u043e\u0434\u0438 \u0434\u043e\u043f\u0438\u0442\u043b\u0438\u0432\u043e\u0433\u043e \u0434\u0438\u0432\u0430\u043a\u0430 , by Richard P. Feynman (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2018), ISBN 9786177552160 \u041d\u0456\u043a\u043e\u043b\u0438 \u043d\u0435 \u0439\u0434\u0456\u0442\u044c \u043d\u0430 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0456\u0441. \u0422\u0435\u0445\u043d\u0456\u043a\u0430 \u0435\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0438\u0445 \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , by Chris Voss (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2019), ISBN 9786177682225 Sapiens: \u041b\u044e\u0434\u0438\u043d\u0430 \u0440\u043e\u0437\u0443\u043c\u043d\u0430 , by \u042e\u0432\u0430\u043b \u041d\u043e\u0439 \u0425\u0430\u0440\u0430\u0440\u0456 (BookChef, 2021), ISBN 9789669937155 \u0421\u043c\u0456\u0445 \u0443 \u043a\u0456\u043d\u0446\u0456 \u0442\u0443\u043d\u0435\u043b\u044e. \u041d\u043e\u0442\u0430\u0442\u043a\u0438 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043d\u0435\u0441\u0442\u0435\u0437\u0456\u043e\u043b\u043e\u0433\u0430 , by \u0406\u0432\u0430\u043d \u0427\u0435\u0440\u043d\u0435\u043d\u043a\u043e (\u0412\u0456\u0445\u043e\u043b\u0430, 2021), ISBN 9786177960361 \u0420\u043e\u0437\u0433\u0430\u0434\u043a\u0430 \u0433\u0435\u043d\u0456\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0456. \u042f\u043a \u043f\u0440\u0430\u0446\u044e\u0454 \u0456\u043d\u0436\u0435\u043d\u0435\u0440\u0456\u044f \u0456\u0434\u0435\u0439 , by Ron Friedman (\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0456\u044f, 2021), ISBN 9786177965748 \u041c\u043e\u0441\u0441\u0430\u0434. \u041d\u0430\u0439\u0432\u0438\u0434\u0430\u0442\u043d\u0456\u0448\u0456 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u0456\u0437\u0440\u0430\u0457\u043b\u044c\u0441\u044c\u043a\u043e\u0457 \u0440\u043e\u0437\u0432\u0456\u0434\u043a\u0438 , by Michael Bar-Zohar , Nissim Mishal (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2022), ISBN 9786177973873 \u0424\u0430\u043a\u0442\u043e\u0440 \u0427\u0435\u0440\u0447\u0438\u043b\u044f. \u042f\u043a \u043e\u0434\u043d\u0430 \u043b\u044e\u0434\u0438\u043d\u0430 \u0437\u043c\u0456\u043d\u0438\u043b\u0430 \u0456\u0441\u0442\u043e\u0440\u0456\u044e , by \u0411\u043e\u0440\u0456\u0441 \u0414\u0436\u043e\u043d\u0441\u043e\u043d (\u0412\u0456\u0432\u0430\u0442, 2019), ISBN 9789669427960 Where Wizards Stay Up Late: The Origins of the Internet , by Katie Hafner , Matthew Lyon (Simon Schuste, 1998), ISBN 9780684832678 Escaping the Build Trap: How Effective Product Management Creates Real Value , by Melissa Perri (O\u2019Reilly Media, 2018), ISBN 9781491973790 The Manager\u2019s Path: A Guide for Tech Leaders Navigating Growth and Change , by Camille Fournier (O\u2019Reilly Media, 2017), ISBN 9781491973899 Hackers & Painters: Big Ideas from the Computer Age , by Paul Graham , Allen Noren (O\u2019Reilly Media, 2004), ISBN 9780596006624","title":"2022"},{"location":"bookshelf/#2021","text":"Read (Book or EBook) Serious Python: Black-Belt Advice on Deployment, Scalability, Testing, and More , by Julien Danjou (No Starch Press, 2018), ISBN 1593278780 A Brief History of Artificial Intelligence: What It Is, Where We Are, and Where We Are Going , by Michael Wooldridge (Flatiron Books, 2021), ISBN 1250770734 The Hundred-Page Machine Learning Book , by Andriy Burkov (Andriy Burkov, 2019)), ISBN 1777005477 \u0411\u0435\u0437\u043c\u0435\u0436\u043d\u0430 \u0441\u0438\u043b\u0430 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438. \u042f\u043a \u0437\u0430\u0432\u0434\u044f\u043a\u0438 \u043c\u0430\u0442\u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0432\u0438\u043d\u0430\u0439\u0448\u043b\u0438 \u0441\u043c\u0430\u0440\u0442\u0444\u043e\u043d\u0438, \u0442\u0435\u043b\u0435\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u0456 GPS , by \u0421\u0442\u0456\u0432\u0435\u043d \u0421\u0442\u0440\u043e\u0491\u0430\u0446 (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2020), ISBN 9786177866212 Kingpin: How One Hacker Took Over the Billion-Dollar Cybercrime Underground , by Kevin Poulsen (Crown, 2011), ISBN 0307588688 \u041f\u2019\u044f\u0442\u044c \u0432\u0430\u0434 \u0443 \u0440\u043e\u0431\u043e\u0442\u0456 \u043a\u043e\u043c\u0430\u043d\u0434\u0438. \u0406\u0441\u0442\u043e\u0440\u0456\u0457 \u0440\u0435\u0430\u043b\u044c\u043d\u0438\u0445 \u0432\u0438\u043a\u043b\u0438\u043a\u0456\u0432 \u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u043e\u0433 , by \u041f\u0430\u0442\u0440\u0456\u043a \u041b\u0435\u043d\u0441\u0456\u043e\u043d\u0456 (\u041a\u043d\u0438\u0436\u043a\u043e\u0432\u0438\u0439 \u041a\u043b\u0443\u0431 \u00ab\u041a\u043b\u0443\u0431 \u0421\u0456\u043c\u0435\u0439\u043d\u043e\u0433\u043e \u0414\u043e\u0437\u0432\u0456\u043b\u043b\u044f\u00bb, 2017), ISBN 9786171224643 \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0441 \u043c\u0443\u0434\u0430\u043a\u0430\u043c\u0438. \u0418 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0432\u043e\u043a\u0440\u0443\u0433 \u0432\u0430\u0441 , by \u0420\u043e\u0431\u0435\u0440\u0442 \u0421\u0430\u0442\u0442\u043e\u043d (\u041c\u0430\u043d\u043d, \u0418\u0432\u0430\u043d\u043e\u0432 \u0438 \u0424\u0435\u0440\u0431\u0435\u0440, 2015), ISBN 9785000576175 Go Bootcamp , by Matt Aimonetti (2014), ISBN N/A 97 Things Every Java Programmer Should Know: Collective Wisdom from the Experts , by Kevlin Henney (O\u2019Reilly Media, 2020), ISBN 1491952695 Listened (Audiobook) Countdown to Zero Day: Stuxnet and the Launch of the World\u2019s First Digital Weapon , by Kim Zetter (Crown, 2014), ISBN 9780770436179","title":"2021"},{"location":"bookshelf/#2020","text":"Read (Book or EBook) Live Work Work Work Die: A Journey into the Savage Heart of Silicon Valley , by Corey Pein (Metropolitan Books, 2018), ISBN 9781627794855 Python Interviews: Discussions with Python Experts , by Michael Driscoll (Packt Publishing, 2018), ISBN 9781788391764 1984 , by George Orwell , ISBN 9789662355574 Animal Farm, by George Orwell , ISBN 9780452284241 \u0412\u0442\u043e\u0440\u0436\u0435\u043d\u0438\u0435. \u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0440\u0443\u0441\u0441\u043a\u0438\u0445 \u0445\u0430\u043a\u0435\u0440\u043e\u0432 , by \u0414\u0430\u043d\u0438\u0438\u043b \u0422\u0443\u0440\u043e\u0432\u0441\u043a\u0438\u0439 (\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0443\u043c \u043f\u0430\u0431\u043b\u0438\u0448\u0438\u043d\u0433, 2019), ISBN 9785604262733 UNIX: A History and a Memoir , by Brian W. Kernighan (Independently Published, 2019), ISBN 9781695978553 Lab Rats: How Silicon Valley Made Work Miserable for the Rest of Us , by Dan Lyons (Hachette Books, 2018), ISBN 9780316561860 Listened (Audiobook) Sandworm: A New Era of Cyberwar and the Hunt for the Kremlin\u2019s Most Dangerous Hackers , by Andy Greenberg (Doubleday Books, 2019), ISBN 9780385544405 AI Superpowers: China, Silicon Valley, and the New World Order , by Kai-Fu Lee (Brilliance Audio, 2018), ISBN 9781328546395 Ghost in the Wires: My Adventures as the World\u2019s Most Wanted Hacker , by Kevin D. Mitnick , William L. Simon (Little, Brown and Company, 2011), ISBN 9780316037709 Hackers: Heroes of the Computer Revolution , by Steven Levy (O\u2019Reilly Media, 2010), ISBN 9781449388393 American Kingpin: The Epic Hunt for the Criminal Mastermind Behind the Silk Road , by Nick Bilton (Portfolio, 2017), ISBN 9781591848141 Bad Blood: Secrets and Lies in a Silicon Valley Startup , by John Carreyrou (Knopf Publishing Group, 2018), ISBN 9781524731656 The Innovators: How a Group of Hackers, Geniuses and Geeks Created the Digital Revolution , by Walter Isaacson (Simon and Schuster, 2014), ISBN 9781476708690 Extreme Ownership: How U.S. Navy SEALs Lead and Win , by Jocko Willink (St. Martin\u2019s Press, 2015), ISBN 9781250067050 Chaos Monkeys Revised Edition: Obscene Fortune and Random Failure in Silicon Valley , by Antonio Garc\u00eda Mart\u00ednez (HarperAudio, 2018), ISBN 9780062884503 Creativity, Inc.: Overcoming the Unseen Forces That Stand in the Way of True Inspiration , by Ed Catmull , Amy Wallace (Random House, 2014), ISBN 9780812993011 Permanent Record , by Edward Snowden (Metropolitan Books, 2019), ISBN 9781250237231 \u041d\u0430\u0432\u0447\u0438\u0442\u0438\u0441\u044f \u0432\u0447\u0438\u0442\u0438\u0441\u044f. \u042f\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u0441\u0432\u0456\u0439 \u043c\u043e\u0437\u043e\u043a \u043d\u0430 \u043f\u043e\u0432\u043d\u0443 , by Barbara Oakley , \u0410\u0440\u0442\u0435\u043c \u0417\u0430\u043c\u043e\u0446\u043d\u0438\u0439 (Translator) (\u041d\u0430\u0448 \u0444\u043e\u0440\u043c\u0430\u0442, 2018), ISBN 9786177552870 The Power of Habit: Why We Do What We Do in Life and Business , by Charles Duhigg (Random House, 2012), ISBN 9781400069286 Facebook: The Inside Story , by Steven Levy (Penguin Audio, 2020), ISBN 9780735213159 Super Pumped: The Battle for Uber , by Mike Isaac (W. W. Norton Company, 2019), ISBN 9780393652246 We Are Anonymous: Inside the Hacker World of LulzSec, Anonymous, and the Global Cyber Insurgency , by Parmy Olson (Little, Brown and Company, 2012), ISBN 9780316213547 Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones , by James Clear (Avery, 2018), ISBN 9780735211292 The Unicorn Project , by Gene Kim (It Revolution Press, 2019), ISBN 9781942788768 Masters of Doom: How Two Guys Created an Empire and Transformed Pop Culture , by David Kushner (Random House, 2004), ISBN 9780375505249 The Cuckoo\u2019s Egg: Tracking a Spy Through the Maze of Computer Espionage , by Clifford Stoll (Gallery Books, 2005), ISBN 9781416507789 The 7 Habits of Highly Effective People , by Stephen R. Covey (Simon Schuster Audio, 2012), ISBN 9781442350809","title":"2020"},{"location":"bookshelf/#2019","text":"Read (Book or EBook) \u041f\u0440\u043e\u043a\u0440\u0430\u0441\u0442\u0438\u043d\u0430\u0446\u0456\u044f. \u0427\u043e\u043c\u0443 \u0432\u0438 \u0432\u0434\u0430\u0454\u0442\u0435\u0441\u044f \u0434\u043e \u043d\u0435\u0457 \u0456 \u0449\u043e \u043c\u043e\u0436\u043d\u0430 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0456\u0437 \u0446\u0438\u043c \u0432\u0436\u0435 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 , by \u0414\u0436\u0435\u0439\u043d \u0411. \u0411\u0443\u0440\u043a\u0430 (Jane B. Burka) , \u041b\u0435\u043d\u043e\u0440\u0430 \u041c. \u042e\u0435\u043d (Lenora M. Yuen) (\u0412\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u043e \u0421\u0442\u0430\u0440\u043e\u0433\u043e \u041b\u0435\u0432\u0430, 2018), ISBN 9786176795643 The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win , by Gene Kim , Kevin Behr , George Spafford (It Revolution Press, 2014), ISBN 9780988262508 The Pragmatic Programmer: Your Journey to Mastery , by David Thomas , Andrew Hunt (Addison-Wesley Professional, 2019), ISBN 9780201616224","title":"2019"},{"location":"bookshelf/#2018","text":"Read (Book or EBook) \u041c\u043e\u0454 \u0436\u0438\u0442\u0442\u044f \u0442\u0430 \u0440\u043e\u0431\u043e\u0442\u0430 , by Henry Ford (\u041d\u0430\u0448 \u0424\u043e\u0440\u043c\u0430\u0442, 2015), ISBN 9789669742551 \u041a\u043c\u0456\u0442\u043b\u0438\u0432\u0456\u0448\u0456, \u0448\u0432\u0438\u0434\u0448\u0456, \u043a\u0440\u0430\u0449\u0456. \u0421\u0435\u043a\u0440\u0435\u0442\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0456 \u0432 \u0436\u0438\u0442\u0442\u0456 \u0442\u0430 \u0431\u0456\u0437\u043d\u0435\u0441\u0456 , by Charles Duhigg (\u041a\u0421\u0414, 2017), ISBN 9786171222809 Effective Python: 59 Specific Ways to Write Better Python , by Brett Slatkin (Addison-Wesley Professional, 2015), ISBN 9780134034287","title":"2018"},{"location":"bookshelf/#2017","text":"Read (Book or EBook) The Neophyte\u2019s Guide to Scala , by Daniel Westheide (2013) Building Microservices: Designing Fine-Grained Systems , by Sam Newman (O\u2019Reilly Media, 2015), ISBN 9781491950357 Reactive Microservices Architecture , by Jonas Bon\u00e9r (O\u2019Reilly Media, 2016) SBT in Action , by Joshua Suereth , Matthew Farwell (Manning, 2014), ISBN 9781617291272 Hatching Twitter: A True Story of Money, Power, Friendship, and Betrayal , by Nick Bilton (Portfolio Hardcover, 2013), ISBN 9781591846017 Underground: Tales of Hacking, Madness, and Obsession on the Electronic Frontier , by Suelette Dreyfus (Mandarin, 1997), ISBN 9781863305952","title":"2017"},{"location":"bookshelf/#2016","text":"Read (Book or EBook) Pro Vagrant , by Wlodzimierz Gajda (Apress, 2015), ISBN 9781484200742 Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions , by Venkat Subramaniam (Pragmatic Press, 2013), ISBN 9781937785468 Object-Oriented vs. Functional Programming , by Richard Warburton (O\u2019Reilly Media, 2015), ISBN 9781491933428 Release It!: Design and Deploy Production-Ready Software , by Michael T. Nygard (Pragmatic Bookshelf, 2007), ISBN 9780978739218 \u0421\u0442\u0456\u0432 \u0414\u0436\u043e\u0431\u0441 : \u043b\u044e\u0434\u0438\u043d\u0430, \u044f\u043a\u0430 \u043c\u0438\u0441\u043b\u0438\u043b\u0430 \u043f\u043e- \u0456\u043d\u0448\u043e\u043c\u0443 , by \u041a\u0430\u0440\u0435\u043d \u0411\u043b\u044e\u043c\u0435\u043d\u0442\u0430\u043b\u044c ( \u041d\u0430\u0432\u0447\u0430\u043b\u044c\u043d\u0430 \u043a\u043d\u0438\u0433\u0430 - \u0411\u043e\u0433\u0434\u0430\u043d, 2016), ISBN 9789661032889. (Translation of: Steve Jobs: The Man Who Thought Different ) \u00ab\u042f\u043a \u043f\u0440\u0430\u0446\u044e\u0454 Google\u00bb , by \u0415\u0440\u0456\u043a \u0428\u043c\u0456\u0434\u0442 (Eric Schmidt) , \u0414\u0436\u043e\u043d\u0430\u0442\u0430\u043d \u0420\u043e\u0437\u0435\u043d\u0431\u0435\u0440\u0433 (Jonathan Rosenberg) , ISBN 9781455582327. (Translation of: How Google Works ) \u0406\u043b\u043e\u043d \u041c\u0430\u0441\u043a: Tesla, SpaceX \u0456 \u0448\u043b\u044f\u0445 \u0443 \u0444\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u0447\u043d\u0435 \u043c\u0430\u0439\u0431\u0443\u0442\u043d\u0454 , by \u0415\u0448\u043b\u0456 \u0412\u0435\u043d\u0441 (Ashlee Vance) (\u0422\u0410\u041e, 2015), ISBN 9780062301239 Data Scientists at Work , by Sebastian Gutierrez (Apress, 2014), ISBN 9781430265986","title":"2016"},{"location":"bookshelf/#2015","text":"Read (Book or EBook) The Well-Grounded Java Developer: Vital techniques of Java 7 and polyglot programming , by Benjamin J. Evans , Martijn Verburg (Manning Publications, 2012), ISBN 9781617290060 Lisp Hackers , by Vsevolod Dyomkin (Leanpub, 2013) Functional Programming for Java Developers: Tools for Better Concurrency, Abstraction, and Agility , by Dean Wampler (O\u2019Reilly Media, 2011), ISBN 9781449311032 Clean Code: A Handbook of Agile Software Craftsmanship , by Robert C. Martin (Prentice Hall, 2008), ISBN 9780132350884 Grails 2: A Quick-Start Guide , by Dave Klein , Ben Klein (Pragmatic Bookshelf, 2013), ISBN 9781937785772","title":"2015"},{"location":"bookshelf/#2014","text":"Read (Book or EBook) Making Java Groovy , by Kenneth Kousen (Manning, 2013), ISBN 9781935182948 Single Page Web Applications , by Michael S. Mikowski , Josh C. Powell (Manning Publications, 2012), ISBN 9781617290756 Programming Groovy 2 , by Venkat Subramaniam (Pragmatic Bookshelf, 2013), ISBN 9781937785307 Just for Fun: The Story of an Accidental Revolutionary , by Linus Torvalds , David Diamond (Harper Business, 2002), ISBN 9780066620732","title":"2014"},{"location":"bookshelf/#2013","text":"Read (Book or EBook) Pro Spring 3 , by Rob Harrop , Clarence Ho (Apress, 2012), ISBN 9781430241072 Scrum and XP from the Trenches , by Henrik Kniberg (Lulu.com, 2007), ISBN 9781430322641 iText in Action , by Bruno Lowagie (Manning Publications, 2010), ISBN 9781935182610 Deploying with JRuby: Deliver Scalable Web Apps using the JVM , by Joe Kutner (The Pragmatic Programmers, 2012), ISBN 9781934356975 Refactoring: Improving the Design of Existing Code , by Martin Fowler , Kent Beck (Contributor), Don Roberts (Contributor) (Addison-Wesley Object Technology Series, 1999), ISBN 9780201485677 Software Estimation: Demystifying the Black Art , by Steve McConnell (Microsoft Press, 2006), ISBN 9780735605350","title":"2013"},{"location":"bookshelf/#2012-2000","text":"Read (Book or EBook) C++ In Action: Industrial Strength Programming Techniques , by Bartosz Milewski (Addison Wesley Publishing Company, 2001), ISBN 9780201699487 The Deadline: A Novel about Project Management , by Tom DeMarco (Dorset House, 2002), ISBN 9780932633392 Programming Scala: Scalability = Functional Programming + Objects , by Dean Wampler , Alex Payne ( O\u2019Reilly Media, 2009), ISBN 9780596155957 Spring Persistence with Hibernate , by Paul Fisher , Solomon Duskis (Apress, 2010), ISBN 9781430226321 The Productive Programmer , by Neal Ford (O\u2019Reilly Media, 2008), ISBN 9780596519780 Learning Play! Framework 2 (Tips Techniques) , by Andy Petrella (Packt Publishing, 2013), ISBN 9781782160120 Scala for Java Developers , by Thomas Alexandre (Packt Publishing, 2014), ISBN 9781783283637 Practices of an Agile Developer: Working in the Real World , by Venkat Subramaniam , Andy Hunt (Pragmatic Bookshelf, 2006), ISBN 9780974514086 Pragmatic Thinking and Learning: Refactor Your Wetware , by Andy Hunt (Pragmatic Bookshelf, 2008), ISBN 9781934356050 The Passionate Programmer , by Chad Fowler (Pragmatic Bookshelf, 2009), ISBN 9781934356340 The Pragmatic Programmer: From Journeyman to Master , by Andy Hunt , Dave Thomas (Addison-Wesley Professional, 1999), ISBN 9780201616224 Patterns of Enterprise Application Architecture , by Martin Fowler , David Rice , Matthew Foemmel , Edward Hieatt , Robert Mee , Randy Stafford (Addison-Wesley Professional, 2002), ISBN 9780321127426 Pomodoro Technique Illustrated , by Staffan N\u00f6teberg (Pragmatic Bookshelf, 2010), ISBN 9781934356500 Design Patterns: Elements of Reusable Object-Oriented Software , by Erich Gamma , Ralph Johnson , John Vlissides , Richard Helm (Addison-Wesley Professional, 1994), ISBN 9780201633610 SCJP Sun Certified Programmer for Java 6 Study Guide , by Kathy Sierra , Bert Bates (McGraw-Hill, 2008), ISBN 9780071591065 The Mythical Man-Month: Essays on Software Engineering , by Frederick P. Brooks Jr. (Addison-Wesley Professional, 1995), ISBN 9780201835953 Programming Ruby: The Pragmatic Programmers\u2019 Guide , by Dave Thomas , Chad Fowler , Andy Hunt (Pragmatic Bookshelf, 2004), ISBN 9780974514055 The Clean Coder: A Code of Conduct for Professional Programmers , by Robert C. Martin (Prentice Hall, 2011), ISBN 9780137081073 Pro Git , by Scott Chacon (Apress, 2009), ISBN 9781430218333","title":"2012 - 2000"},{"location":"blog/","text":"Blog Posts 2022 2022-12-23 - Blog, Digital Garden, Wiki. FTW? 2022-12-20 - Python is the second best language for anything 2022-12-01 - ZSH on MacOS 2022-11-17 - Popularity of Programming Languages - 2022 2022-09-09 - Lightbend is Changing the License for Akka 2022-08-20 - Rethinking Bloging 2021 2021-11-22 - base64 encoding/decoding on MacOS 2021-05-20 - Haskell: Development Environment Setup 2021-04-13 - OpenCV tutorials and learning materials 2021-04-05 - How to remove image background color using JVM? 2021-02-07 - Thoughts about Audiobooks 2020 2020-12-30 - Ruby 3 and static typing 2020-08-25 - Personal Techradar for Programming Languages - 2020 H2 2019 2019-09-30 - Python Bad Practices 2019-09-27 - Design Patterns in Scala/FP Java 2019-09-26 - Scala Best Practices 2019-04-28 - Scala vs Kotlin 2019-04-10 - Common misuses of Java 8+ features 2019-03-02 - Scala and FP Conferences 2019-02-27 - Lambda Days - Krakow, 2019 - Report 2019-02-10 - Data Science Learning Resources 2019-02-07 - Data Science YouTube Channels (Python, R) 2019-01-26 - Machine Learning and Data Science MOOCs 2019-01-23 - Go vs Python comparison 2019-01-22 - PostgreSQL command line cheatsheet 2019-01-20 - Ruby vs Javascript comparison 2019-01-19 - Python vs Javascript comparison 2019-01-17 - Algorithms, System Design, Interview Preparation - Github Repos 2019-01-13 - Top \u201cAlgorithms and Data Structures\u201d Books 2018 2018-12-31 - Thoughts about Blogging 2018-12-30 - Functional programming in Haskell - Part 1 2018-12-29 - Resources for System Design Interview 2018-12-28 - Resources for Practicing Coding Interview 2018-12-21 - [WIP] Scala vs Haskell 2018-12-20 - Scala for -comprehensions 2018-12-20 - Git Notes 2018-12-19 - How to configure docker bash completion on Mac 2018-12-18 - [WIP] Verify Ruby github/markup gem for markdown rendering 2018-10-30 - Russian MOOCs 2018-05-20 - Scala Days - Berlin, 2018 - Report 2018-04-05 - Programming Quizzes 2018-03-15 - REST API Guidelines 2017 2017-11-05 - My Favorite Podcasts 2017-10-31 - Reflection about the next main scripting language 2016 2016-12-02 - Scala for Ruby Developers 2016-12-01 - Scala for Python Developers by Kevin Stanton 2016-11-30 - Python vs. Ruby: A Battle to The Death by Gary Bernhardt 2016-11-29 - Ruby: The Bad Parts by Bozhidar Batsov 2016-11-28 - Ruby and Rails: The Bad Parts by Volodymyr Melnyk 2016-11-28 - Reserved Words of Programming languages 2016-11-27 - Who left Ruby Community? 2016-06-15 - Gradle, Groovy, Kotlin. FTW? 2016-05-22 - JEEConf\u200a- Kyiv, 2016\u200a- Report 2016-05-14 - The state of Groovy and other JVM Languages 2015 2015-11-08 - Java Day - Kiev, 2015 - Report 2015-10-20 - How to run Netflix Eureka via Webapp Runner? 2015-09-25 - Distribute application as Native Single binary 2015-09-20 - JDay - Lviv, 2015 - Report 2015-07-20 - Grails 2.x best practices collection 2015-06-29 - DevoxxPL - Krakow, 2015 - Report 2015-05-25 - JEEConf - Kyiv, 2015 - Report 2015-05-19 - Grails 2.5.0 debug in IntelliJ IDEA 2015-05-18 - Go presentation tool 2015-04-06 - Java full stack web framework 2015-04-04 - Rails Architecture and Scalability 2015-03-17 - How to download jars from Maven Central 2015-02-17 - How to Install Octopress on Windows? 2015-02-13 - Maven Flow for Simple App Creation 2015-02-12 - Do We Need Java for Everything? 2015-02-05 - How to Generate PermGen leak? 2015-02-02 - Scripting in Scala 2015-01-22 - How to Use Embedded H2 with web Console? 2014 2014-11-16 - How to Fix Textmate OSX Yosemite ruby 1.8 issues? 2014-10-20 - Switching to Textmate 2 2014-10-09 - How to use block comments in Bash Script 2014-09-07 - Migration to Octopress 2014-08-13 - Groovy Notes: Pretty print JSON from the command line 2014-08-12 - How to disable Tomcat session serialization 2014-07-23 - Review: Programming Groovy 2: Dynamic Productivity for the Java Developer 2014-05-25 - JEEConf - Kyiv, 2014 - Report 2014-04-19 - Thor notes 2014-03-17 - Review: Making Java Groovy 2014-01-26 - About Learning New Programming Languages 2013 2013-12-03 - List of Real Spring-Based Projects 2013-10-21 - REST with JAX-RS: Part 3 - Embedded Jetty 2013-10-20 - REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement 2013-10-19 - REST with JAX-RS: Part 1 - Spring Java Config 2013-10-03 - Java Object to Object Mapper 2013-08-27 - How to remove .svn folders recursively? 2013-08-17 - Git, Jenkins, Gerrit, Code Review and pre-tested commits 2013-07-02 - Concurrency vs. Parallelism Definitions 2013-07-01 - JAI and Image Processing in Java 2013-06-14 - Java Barcode Generation and Scanning Library 2013-05-27 - JEEConf - Kyiv, 2013 - Report 2013-05-23 - Graphics Unit Conversion 2013-05-20 - Equals, HashCode and toString in Java 2013-05-13 - iText Useful Resources 2013-04-27 - The long way to Evernote 2013-04-23 - Java PDF Libraries 2013-02-09 - i18n vs l10n 2013-01-26 - Jenkins hierarchical jobs and jobs status aggregation 2013-01-21 - Auto install required Ruby gems via script 2012 2012-12-31 - Jenkins enhancements without plugins 2012-12-12 - Groovy or JRuby for Java developer 2012-11-02 - How to Configure Git Diff and Merge Tools? 2012-10-27 - Mac OS X terminal supports colored output 2012-10-20 - Git command extension 2012-10-01 - RubyShift 2012 Conference Report 2012-09-10 - Ruby Style Guides 2012-09-04 - How to prepare to pass Oracle Web Component Developer Certified Expert Exam 2012-06-27 - Maven Build Number Plugin - Sample Usage 2012-06-12 - How to improve cmd.exe prompt 2012-06-11 - Maven Resource Filtering 2012-05-20 - JEEConf - Kyiv, 2012 - Report 2012-03-27 - Why you should join a user group? 2012-02-26 - State of numerical computation languages 2012-02-13 - UML Sketching Tools 2012-01-21 - Quick way to join array of String in Java without third party libraries 2011 2011-12-25 - How to decide which technology hype is worth personal investments? 2011-11-03 - How to run ANT script from .BAT/.CMD? 2011-10-21 - Java Reflection: Invoke Constructor Issue 2011-10-10 - Overview: Optimistic vs. Pessimistic Locking 2011-08-31 - Java Code Quality Tools - Overview 2011-08-15 - My reflection on \u201cProgramming Achievements: How to Level Up as a Developer\u201d 2011-07-20 - How to disable System.out? 2011-06-28 - How to Add Jars at Runtime? 2011-06-20 - @Override Java Annotation Issue 2011-05-24 - JEEConf - Kyiv, 2011 - Report 2011-02-15 - Lisp Balkanization? 2011-02-11 - How to choose the next programming language to learn? 2011-01-26 - Review: Language Grubbing 2011-01-25 - Review: Beating the Averages 2011-01-22 - Lisp, Ruby, Acceptable and not Acceptable 2011-01-14 - Review: You Should Write Blogs? 2011-01-12 - Should I Learn Lisp? 2011-01-10 - Review: How To Become A Hacker? 2010 2010-12-15 - Java Build Tools and Future 2010-10-31 - Why Should I Attend Conferences? 2010-08-12 - (J)Ruby or Groovy for scripting in Java environment 2010-04-22 - How to setup Ruby/Rails development environment, Part 2 - E-TextEditor 2010-04-16 - How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM 2009 2009-12-27 - Why I\u2019ve chosen Ruby as main scripting language for my toolbox 2009-11-18 - *nix-like environments for Windows 2009-11-08 - GNUstep Getting Started","title":"Blog Posts"},{"location":"blog/#blog-posts","text":"","title":"Blog Posts"},{"location":"blog/#2022","text":"2022-12-23 - Blog, Digital Garden, Wiki. FTW? 2022-12-20 - Python is the second best language for anything 2022-12-01 - ZSH on MacOS 2022-11-17 - Popularity of Programming Languages - 2022 2022-09-09 - Lightbend is Changing the License for Akka 2022-08-20 - Rethinking Bloging","title":"2022"},{"location":"blog/#2021","text":"2021-11-22 - base64 encoding/decoding on MacOS 2021-05-20 - Haskell: Development Environment Setup 2021-04-13 - OpenCV tutorials and learning materials 2021-04-05 - How to remove image background color using JVM? 2021-02-07 - Thoughts about Audiobooks","title":"2021"},{"location":"blog/#2020","text":"2020-12-30 - Ruby 3 and static typing 2020-08-25 - Personal Techradar for Programming Languages - 2020 H2","title":"2020"},{"location":"blog/#2019","text":"2019-09-30 - Python Bad Practices 2019-09-27 - Design Patterns in Scala/FP Java 2019-09-26 - Scala Best Practices 2019-04-28 - Scala vs Kotlin 2019-04-10 - Common misuses of Java 8+ features 2019-03-02 - Scala and FP Conferences 2019-02-27 - Lambda Days - Krakow, 2019 - Report 2019-02-10 - Data Science Learning Resources 2019-02-07 - Data Science YouTube Channels (Python, R) 2019-01-26 - Machine Learning and Data Science MOOCs 2019-01-23 - Go vs Python comparison 2019-01-22 - PostgreSQL command line cheatsheet 2019-01-20 - Ruby vs Javascript comparison 2019-01-19 - Python vs Javascript comparison 2019-01-17 - Algorithms, System Design, Interview Preparation - Github Repos 2019-01-13 - Top \u201cAlgorithms and Data Structures\u201d Books","title":"2019"},{"location":"blog/#2018","text":"2018-12-31 - Thoughts about Blogging 2018-12-30 - Functional programming in Haskell - Part 1 2018-12-29 - Resources for System Design Interview 2018-12-28 - Resources for Practicing Coding Interview 2018-12-21 - [WIP] Scala vs Haskell 2018-12-20 - Scala for -comprehensions 2018-12-20 - Git Notes 2018-12-19 - How to configure docker bash completion on Mac 2018-12-18 - [WIP] Verify Ruby github/markup gem for markdown rendering 2018-10-30 - Russian MOOCs 2018-05-20 - Scala Days - Berlin, 2018 - Report 2018-04-05 - Programming Quizzes 2018-03-15 - REST API Guidelines","title":"2018"},{"location":"blog/#2017","text":"2017-11-05 - My Favorite Podcasts 2017-10-31 - Reflection about the next main scripting language","title":"2017"},{"location":"blog/#2016","text":"2016-12-02 - Scala for Ruby Developers 2016-12-01 - Scala for Python Developers by Kevin Stanton 2016-11-30 - Python vs. Ruby: A Battle to The Death by Gary Bernhardt 2016-11-29 - Ruby: The Bad Parts by Bozhidar Batsov 2016-11-28 - Ruby and Rails: The Bad Parts by Volodymyr Melnyk 2016-11-28 - Reserved Words of Programming languages 2016-11-27 - Who left Ruby Community? 2016-06-15 - Gradle, Groovy, Kotlin. FTW? 2016-05-22 - JEEConf\u200a- Kyiv, 2016\u200a- Report 2016-05-14 - The state of Groovy and other JVM Languages","title":"2016"},{"location":"blog/#2015","text":"2015-11-08 - Java Day - Kiev, 2015 - Report 2015-10-20 - How to run Netflix Eureka via Webapp Runner? 2015-09-25 - Distribute application as Native Single binary 2015-09-20 - JDay - Lviv, 2015 - Report 2015-07-20 - Grails 2.x best practices collection 2015-06-29 - DevoxxPL - Krakow, 2015 - Report 2015-05-25 - JEEConf - Kyiv, 2015 - Report 2015-05-19 - Grails 2.5.0 debug in IntelliJ IDEA 2015-05-18 - Go presentation tool 2015-04-06 - Java full stack web framework 2015-04-04 - Rails Architecture and Scalability 2015-03-17 - How to download jars from Maven Central 2015-02-17 - How to Install Octopress on Windows? 2015-02-13 - Maven Flow for Simple App Creation 2015-02-12 - Do We Need Java for Everything? 2015-02-05 - How to Generate PermGen leak? 2015-02-02 - Scripting in Scala 2015-01-22 - How to Use Embedded H2 with web Console?","title":"2015"},{"location":"blog/#2014","text":"2014-11-16 - How to Fix Textmate OSX Yosemite ruby 1.8 issues? 2014-10-20 - Switching to Textmate 2 2014-10-09 - How to use block comments in Bash Script 2014-09-07 - Migration to Octopress 2014-08-13 - Groovy Notes: Pretty print JSON from the command line 2014-08-12 - How to disable Tomcat session serialization 2014-07-23 - Review: Programming Groovy 2: Dynamic Productivity for the Java Developer 2014-05-25 - JEEConf - Kyiv, 2014 - Report 2014-04-19 - Thor notes 2014-03-17 - Review: Making Java Groovy 2014-01-26 - About Learning New Programming Languages","title":"2014"},{"location":"blog/#2013","text":"2013-12-03 - List of Real Spring-Based Projects 2013-10-21 - REST with JAX-RS: Part 3 - Embedded Jetty 2013-10-20 - REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement 2013-10-19 - REST with JAX-RS: Part 1 - Spring Java Config 2013-10-03 - Java Object to Object Mapper 2013-08-27 - How to remove .svn folders recursively? 2013-08-17 - Git, Jenkins, Gerrit, Code Review and pre-tested commits 2013-07-02 - Concurrency vs. Parallelism Definitions 2013-07-01 - JAI and Image Processing in Java 2013-06-14 - Java Barcode Generation and Scanning Library 2013-05-27 - JEEConf - Kyiv, 2013 - Report 2013-05-23 - Graphics Unit Conversion 2013-05-20 - Equals, HashCode and toString in Java 2013-05-13 - iText Useful Resources 2013-04-27 - The long way to Evernote 2013-04-23 - Java PDF Libraries 2013-02-09 - i18n vs l10n 2013-01-26 - Jenkins hierarchical jobs and jobs status aggregation 2013-01-21 - Auto install required Ruby gems via script","title":"2013"},{"location":"blog/#2012","text":"2012-12-31 - Jenkins enhancements without plugins 2012-12-12 - Groovy or JRuby for Java developer 2012-11-02 - How to Configure Git Diff and Merge Tools? 2012-10-27 - Mac OS X terminal supports colored output 2012-10-20 - Git command extension 2012-10-01 - RubyShift 2012 Conference Report 2012-09-10 - Ruby Style Guides 2012-09-04 - How to prepare to pass Oracle Web Component Developer Certified Expert Exam 2012-06-27 - Maven Build Number Plugin - Sample Usage 2012-06-12 - How to improve cmd.exe prompt 2012-06-11 - Maven Resource Filtering 2012-05-20 - JEEConf - Kyiv, 2012 - Report 2012-03-27 - Why you should join a user group? 2012-02-26 - State of numerical computation languages 2012-02-13 - UML Sketching Tools 2012-01-21 - Quick way to join array of String in Java without third party libraries","title":"2012"},{"location":"blog/#2011","text":"2011-12-25 - How to decide which technology hype is worth personal investments? 2011-11-03 - How to run ANT script from .BAT/.CMD? 2011-10-21 - Java Reflection: Invoke Constructor Issue 2011-10-10 - Overview: Optimistic vs. Pessimistic Locking 2011-08-31 - Java Code Quality Tools - Overview 2011-08-15 - My reflection on \u201cProgramming Achievements: How to Level Up as a Developer\u201d 2011-07-20 - How to disable System.out? 2011-06-28 - How to Add Jars at Runtime? 2011-06-20 - @Override Java Annotation Issue 2011-05-24 - JEEConf - Kyiv, 2011 - Report 2011-02-15 - Lisp Balkanization? 2011-02-11 - How to choose the next programming language to learn? 2011-01-26 - Review: Language Grubbing 2011-01-25 - Review: Beating the Averages 2011-01-22 - Lisp, Ruby, Acceptable and not Acceptable 2011-01-14 - Review: You Should Write Blogs? 2011-01-12 - Should I Learn Lisp? 2011-01-10 - Review: How To Become A Hacker?","title":"2011"},{"location":"blog/#2010","text":"2010-12-15 - Java Build Tools and Future 2010-10-31 - Why Should I Attend Conferences? 2010-08-12 - (J)Ruby or Groovy for scripting in Java environment 2010-04-22 - How to setup Ruby/Rails development environment, Part 2 - E-TextEditor 2010-04-16 - How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM","title":"2010"},{"location":"blog/#2009","text":"2009-12-27 - Why I\u2019ve chosen Ruby as main scripting language for my toolbox 2009-11-18 - *nix-like environments for Windows 2009-11-08 - GNUstep Getting Started","title":"2009"},{"location":"blog/2009/2009-11-08-gnustep-getting-started/","text":"GNUstep Getting Started | Objective-C | Objective-C popularity aggressively increased based on TIOBE Index (for October 2009) The reason is simple - iPhone and all related stuff. We should be ready to develop Objective-C based application in future. The worst thing I don\u2019t have a Mac, so I don\u2019t have development environment. I need to get basic Objective-C knowledge, and here several solutions: buy Mac install Hackintosh on PC try GNU compiler and play with Objective-C The better choice is the last one (for me). As I\u2019m a Windows XP user and I don\u2019t have a time to set up Linux, I\u2019m going to use some Windows GNU GCC port: Cygwin or MinGW. There are two cross-platform projects which implements Objective-C Cocoa/OpenStep APIs: The Cocotron - this project uses Mac machine for build (I didn\u2019t dig into this), but built application can be run on Windows. GNUstep - this project supports many platforms (Windows included). My choice is GNUstep . Here is the useful links for quick start: www.gnustep.org - official site GNUstep programming mini tutorials - the second place you should start with. www.gnustep.it - This site is dedicated to GNUstep . There are a lot of useful info. GNUstep Application Project - The purpose of this project is to implement a set of administrative applications and user level applications using GNUstep. Another aim of this project is to port as many applications from OPENSTEP/Cocoa to GNUstep as possible. Great place to look into real application. Objective-C: Links,Resources, Stuff - dig deeper in Objective-C culture GNUstep Library - additional info: Build Guides, User Documentation, Developer Documentation GNUstep forum - it covers the next categories: General, Help, Dev, Webmasters, Bugs, Announce, Apps GNUstep HelpCenter - links to various tutorials and articles on GNUstep. GNUstepWiki - just wiki How to build your first GNUstep application in Windows? In general it\u2019s simple, but if you have some troubles with it here is the links: Installing and using GNUstep and Objective-C on Windows Writing GNUstep Makefiles (I highly recommend it) Compile Objective-C Programs Using gcc","title":"GNUstep Getting Started"},{"location":"blog/2009/2009-11-08-gnustep-getting-started/#gnustep-getting-started","text":"| Objective-C | Objective-C popularity aggressively increased based on TIOBE Index (for October 2009) The reason is simple - iPhone and all related stuff. We should be ready to develop Objective-C based application in future. The worst thing I don\u2019t have a Mac, so I don\u2019t have development environment. I need to get basic Objective-C knowledge, and here several solutions: buy Mac install Hackintosh on PC try GNU compiler and play with Objective-C The better choice is the last one (for me). As I\u2019m a Windows XP user and I don\u2019t have a time to set up Linux, I\u2019m going to use some Windows GNU GCC port: Cygwin or MinGW. There are two cross-platform projects which implements Objective-C Cocoa/OpenStep APIs: The Cocotron - this project uses Mac machine for build (I didn\u2019t dig into this), but built application can be run on Windows. GNUstep - this project supports many platforms (Windows included). My choice is GNUstep . Here is the useful links for quick start: www.gnustep.org - official site GNUstep programming mini tutorials - the second place you should start with. www.gnustep.it - This site is dedicated to GNUstep . There are a lot of useful info. GNUstep Application Project - The purpose of this project is to implement a set of administrative applications and user level applications using GNUstep. Another aim of this project is to port as many applications from OPENSTEP/Cocoa to GNUstep as possible. Great place to look into real application. Objective-C: Links,Resources, Stuff - dig deeper in Objective-C culture GNUstep Library - additional info: Build Guides, User Documentation, Developer Documentation GNUstep forum - it covers the next categories: General, Help, Dev, Webmasters, Bugs, Announce, Apps GNUstep HelpCenter - links to various tutorials and articles on GNUstep. GNUstepWiki - just wiki","title":"GNUstep Getting Started"},{"location":"blog/2009/2009-11-08-gnustep-getting-started/#how-to-build-your-first-gnustep-application-in-windows","text":"In general it\u2019s simple, but if you have some troubles with it here is the links: Installing and using GNUstep and Objective-C on Windows Writing GNUstep Makefiles (I highly recommend it) Compile Objective-C Programs Using gcc","title":"How to build your first GNUstep application in Windows?"},{"location":"blog/2009/2009-11-18-nix-like-environments-for-windows/","text":"*nix-like environments for Windows | cygwin | linux | MinGW | *nix like environment is good for developer and sysadmins, and really useful for end-user. That\u2019s why we\u2019ve got KDE, Gnome and similar. But, I like it a lot even if I\u2019m Windows user ;-). There are several cases to set up *nix environment on Windows: setup Virtual Machine with some Linux distributive and you\u2019ve got fully functional Linux. You can use VMware or VirtualBox . or you can setup Linux-like environment in Windows (i.e. bash, gcc,make, grep, find, sed, etc.). Here is \u201cmy\u201d list of choice for such environments: MinGW - Minimalist GNU for Windows. My top choice if you need GNU development programming tool set. Additional, if you need bash and similar tools install MSYS - general purpose command line environment. Cygwin - is a Linux-like environment for Windows. It\u2019s very powerful if you need to develop OS-portable application on windows (it\u2019s provide substantial Linux API functionality). GnuWin32 - provides ports of tools with a GNU or similar open source licenses. Check package list on their home page. UWIN - it\u2019s the similar to MinGW and GnuWin32, but less popular. I prefer to use MinGW/MSYS and Cygwin because they have great community support.","title":"*nix-like environments for Windows"},{"location":"blog/2009/2009-11-18-nix-like-environments-for-windows/#nix-like-environments-for-windows","text":"| cygwin | linux | MinGW | *nix like environment is good for developer and sysadmins, and really useful for end-user. That\u2019s why we\u2019ve got KDE, Gnome and similar. But, I like it a lot even if I\u2019m Windows user ;-). There are several cases to set up *nix environment on Windows: setup Virtual Machine with some Linux distributive and you\u2019ve got fully functional Linux. You can use VMware or VirtualBox . or you can setup Linux-like environment in Windows (i.e. bash, gcc,make, grep, find, sed, etc.). Here is \u201cmy\u201d list of choice for such environments: MinGW - Minimalist GNU for Windows. My top choice if you need GNU development programming tool set. Additional, if you need bash and similar tools install MSYS - general purpose command line environment. Cygwin - is a Linux-like environment for Windows. It\u2019s very powerful if you need to develop OS-portable application on windows (it\u2019s provide substantial Linux API functionality). GnuWin32 - provides ports of tools with a GNU or similar open source licenses. Check package list on their home page. UWIN - it\u2019s the similar to MinGW and GnuWin32, but less popular. I prefer to use MinGW/MSYS and Cygwin because they have great community support.","title":"*nix-like environments for Windows"},{"location":"blog/2009/2009-12-27-why-i-chosen-ruby-as-main-scripting/","text":"Why I\u2019ve chosen Ruby as main scripting language for my toolbox | ruby | There are a lot of scripting languages: Perl, Python, Lua, Tcl, Ruby, JavaScript, Scala, Groovy, Erlang, Lisp, Scheme and Bash/Awk(as shell scripting). There are criteria I\u2019ve tried to match for my scripting language of choice: Easy to learn Active and big community Amount of books and tutorials which are available How many screencasts, conference videos are on-line? Can replace shell scripting? Number of text editors which support selected language Code for fun? Is it suitable for selected language Amount of useful frameworks and libraries Let\u2019s discuss each of them. JavaScript. I like this language, but it doesn\u2019t have standard serve-side API. There are a lot of implementation, but community have to work a lot to get valuable result. Check CommonJS to get more info Perl . I\u2019ve never tried to dig deeply into this and code style doesn\u2019t suitable for me. I can\u2019t code for fun. Number of tutorials/books are huge. Community is big. But, it\u2019s not my language of choice. Lua . There are no killer features, as for me. In general language are cool and fast. Easy to learn. Tcl . I just don\u2019t like Tcl language. It\u2019s main stopper for me. Community not so big in comparison with other languages. Amount the books is limited. Lisp/Scheme . Great languages, but not for shell oriented scripting (It will be awkward to write shell scripts) Erlang . Interesting language, but it\u2019s not general purpose. Good for concurrency domain. I have to skip it. Scala/Groovy . Yet another scripting languages. I can see hype near these languages, especially Scala in Java community. I can predict, that the next year will have got another hype language(s). Bash/Awk . I\u2019d like to learn these two, but I\u2019m windows user and I don\u2019t have a possibility to use these during my work. I can use Cygwin/MSYS, but it will be strange, awkward. It will be unnatural. I\u2019m sure I need to get additional experience in Bash scripting, but not now. Time is my enemy. Python vs Ruby. These two are very similar. Both have big and active community. Both are general purpose languages. Both are great. But I falling in love with Ruby blocks. I love http://railscasts.com . I\u2019m not web-developer, but Rails concept is super-productive. I just love Ruby community. But, there is one drawback. There is a ton of libraries and frameworks which are doing the same thing. Community super productive and it\u2019s in developing. There is no consistency. So, I have to be aware of any big changes in my favorite libraries/frameworks. I know it sounds strange but it\u2019s IMHO. Shell scripting and task automation is one of the main direction to be productive. From time to time I have to work on different OS\u2019s (Windows, Linux, OS X) and environment. But my primary work station is Windows based. I\u2019d like to have consistent scripting and automation tools for all these OS/environments. We can automate everything with Bash, etc. But what about Windows? So, choosing scripting language was good decision to create multi-platform toolbox. So, I can use my knowledge on any machine with minimal rework (if required). Any developer should have some scripting language in his arsenal. The right tool for the job . Keep follow this idea and you will be productive.","title":"Why I've chosen Ruby as main scripting language for my toolbox"},{"location":"blog/2009/2009-12-27-why-i-chosen-ruby-as-main-scripting/#why-ive-chosen-ruby-as-main-scripting-language-for-my-toolbox","text":"| ruby | There are a lot of scripting languages: Perl, Python, Lua, Tcl, Ruby, JavaScript, Scala, Groovy, Erlang, Lisp, Scheme and Bash/Awk(as shell scripting). There are criteria I\u2019ve tried to match for my scripting language of choice: Easy to learn Active and big community Amount of books and tutorials which are available How many screencasts, conference videos are on-line? Can replace shell scripting? Number of text editors which support selected language Code for fun? Is it suitable for selected language Amount of useful frameworks and libraries Let\u2019s discuss each of them. JavaScript. I like this language, but it doesn\u2019t have standard serve-side API. There are a lot of implementation, but community have to work a lot to get valuable result. Check CommonJS to get more info Perl . I\u2019ve never tried to dig deeply into this and code style doesn\u2019t suitable for me. I can\u2019t code for fun. Number of tutorials/books are huge. Community is big. But, it\u2019s not my language of choice. Lua . There are no killer features, as for me. In general language are cool and fast. Easy to learn. Tcl . I just don\u2019t like Tcl language. It\u2019s main stopper for me. Community not so big in comparison with other languages. Amount the books is limited. Lisp/Scheme . Great languages, but not for shell oriented scripting (It will be awkward to write shell scripts) Erlang . Interesting language, but it\u2019s not general purpose. Good for concurrency domain. I have to skip it. Scala/Groovy . Yet another scripting languages. I can see hype near these languages, especially Scala in Java community. I can predict, that the next year will have got another hype language(s). Bash/Awk . I\u2019d like to learn these two, but I\u2019m windows user and I don\u2019t have a possibility to use these during my work. I can use Cygwin/MSYS, but it will be strange, awkward. It will be unnatural. I\u2019m sure I need to get additional experience in Bash scripting, but not now. Time is my enemy. Python vs Ruby. These two are very similar. Both have big and active community. Both are general purpose languages. Both are great. But I falling in love with Ruby blocks. I love http://railscasts.com . I\u2019m not web-developer, but Rails concept is super-productive. I just love Ruby community. But, there is one drawback. There is a ton of libraries and frameworks which are doing the same thing. Community super productive and it\u2019s in developing. There is no consistency. So, I have to be aware of any big changes in my favorite libraries/frameworks. I know it sounds strange but it\u2019s IMHO. Shell scripting and task automation is one of the main direction to be productive. From time to time I have to work on different OS\u2019s (Windows, Linux, OS X) and environment. But my primary work station is Windows based. I\u2019d like to have consistent scripting and automation tools for all these OS/environments. We can automate everything with Bash, etc. But what about Windows? So, choosing scripting language was good decision to create multi-platform toolbox. So, I can use my knowledge on any machine with minimal rework (if required). Any developer should have some scripting language in his arsenal. The right tool for the job . Keep follow this idea and you will be productive.","title":"Why I've chosen Ruby as main scripting language for my toolbox"},{"location":"blog/2010/2010-04-16-how-to-setup-rubyrails-development/","text":"How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM | ruby | rails | linux | The most popular Ruby/Rails development platform isn\u2019t Windows. There are a lot of plug-ins, tutorials and blogs about Ruby/Rails on *nix like system. But, I\u2019m Windows user (yes I know, Linux - rules!), so how can I use all community knowledge and easily apply it? I\u2019ve decided setup VMWare VM with Ubuntu Server v.9.10 . And perform all Ruby/Rails development there via Putty (SSH). I assume that You have installed Ubuntu VM. This post is base on the next articles: Install Ruby on Rails on Ubuntu Karmic Koala 9.10 Installing Ruby on Rails on Debian/Ubuntu Ubuntu Community documentation - RubyOnRails Rails Development On Ubuntu How Do I Enable Remote Access To MySQL Database Server? Step 1: Install Ubuntu VM - done Step 2: Install Putty on Windows Step 3 : Configure Putty - Ubuntu VM connection Check Ubuntu VM IP: ifconfig . Apply this VM IP in Putty setting. All next steps will be performed via Putty console Step 4: Update Ubuntu installation sudo apt-get update sudo apt-get dist-upgrade Step 5 : Install all necessary libs sudo apt-get install build-essential sudo apt-get install ruby ri rdoc mysql-server libmysql-ruby ruby1.8-dev irb1.8 libdbd-mysql-perl libdbi-perl libmysql-ruby1.8 libmysqlclient15off libnet-daemon-perl libplrpc-perl libreadline-ruby1.8 libruby1.8 mysql-client-5.1 mysql-common mysql-server-5.1 rdoc1.8 ri1.8 ruby1.8 irb libopenssl-ruby libopenssl-ruby1.8 libhtml-template-perl mysql-server-core-5.1 libmysqlclient16 libreadline5 psmisc Step 6: During installation MySQL will ask to setup credentials: user = \"root\" password = \"root\" Check Ruby version $ ruby -v ruby 1 .8.7 ( 2009 -06-12 patchlevel 174 ) [ i486-linux ] Step 7 : Install RubyGems wget http://production.cf.rubygems.org/rubygems/rubygems-1.3.6.tgz tar xvzf rubygems-1.3.6.tgz cd rubygems-1.3.6 sudo ruby setup.rb sudo ln -s /usr/bin/gem1.8 /usr/bin/gem Step 8 : Install Rails sudo gem install rails Step 9 : Install SQLlite sudo apt-get install sqlite3 libsqlite3-dev sudo gem install sqlite3-ruby Step 10 : Install MySQL client sudo apt-get install libmysqlclient-dev sudo gem install mysql Step 11 : Test your Rails instalation $ rails myrailsapp","title":"How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM"},{"location":"blog/2010/2010-04-16-how-to-setup-rubyrails-development/#how-to-setup-rubyrails-development-environment-part-1-ubuntu-vm","text":"| ruby | rails | linux | The most popular Ruby/Rails development platform isn\u2019t Windows. There are a lot of plug-ins, tutorials and blogs about Ruby/Rails on *nix like system. But, I\u2019m Windows user (yes I know, Linux - rules!), so how can I use all community knowledge and easily apply it? I\u2019ve decided setup VMWare VM with Ubuntu Server v.9.10 . And perform all Ruby/Rails development there via Putty (SSH). I assume that You have installed Ubuntu VM. This post is base on the next articles: Install Ruby on Rails on Ubuntu Karmic Koala 9.10 Installing Ruby on Rails on Debian/Ubuntu Ubuntu Community documentation - RubyOnRails Rails Development On Ubuntu How Do I Enable Remote Access To MySQL Database Server? Step 1: Install Ubuntu VM - done Step 2: Install Putty on Windows Step 3 : Configure Putty - Ubuntu VM connection Check Ubuntu VM IP: ifconfig . Apply this VM IP in Putty setting. All next steps will be performed via Putty console Step 4: Update Ubuntu installation sudo apt-get update sudo apt-get dist-upgrade Step 5 : Install all necessary libs sudo apt-get install build-essential sudo apt-get install ruby ri rdoc mysql-server libmysql-ruby ruby1.8-dev irb1.8 libdbd-mysql-perl libdbi-perl libmysql-ruby1.8 libmysqlclient15off libnet-daemon-perl libplrpc-perl libreadline-ruby1.8 libruby1.8 mysql-client-5.1 mysql-common mysql-server-5.1 rdoc1.8 ri1.8 ruby1.8 irb libopenssl-ruby libopenssl-ruby1.8 libhtml-template-perl mysql-server-core-5.1 libmysqlclient16 libreadline5 psmisc Step 6: During installation MySQL will ask to setup credentials: user = \"root\" password = \"root\" Check Ruby version $ ruby -v ruby 1 .8.7 ( 2009 -06-12 patchlevel 174 ) [ i486-linux ] Step 7 : Install RubyGems wget http://production.cf.rubygems.org/rubygems/rubygems-1.3.6.tgz tar xvzf rubygems-1.3.6.tgz cd rubygems-1.3.6 sudo ruby setup.rb sudo ln -s /usr/bin/gem1.8 /usr/bin/gem Step 8 : Install Rails sudo gem install rails Step 9 : Install SQLlite sudo apt-get install sqlite3 libsqlite3-dev sudo gem install sqlite3-ruby Step 10 : Install MySQL client sudo apt-get install libmysqlclient-dev sudo gem install mysql Step 11 : Test your Rails instalation $ rails myrailsapp","title":"How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM"},{"location":"blog/2010/2010-04-22-how-to-setup-rubyrails-development/","text":"How to setup Ruby/Rails development environment, Part 2 - E-TextEditor | ruby | rails | linux | There are tons of text editors which are good enough for Ruby/Rails/web development. And it\u2019s not so easier to choose the \u201cbest\u201d editor. I\u2019d like to talk about my top three editors which like the most: Notepad++ It\u2019s the base text editor on my workstation. It has active community, plug-in repository developing fast enough. But, this editor doesn\u2019t have Rails syntax highlight, here I mean ERB files. So, for Rails editing I have to skip it (for now) Vim Cross - platform text editor. It has BIG, super active community with tons of plugins. E-TextEditor It\u2019s Textmate clone for Windows. There are two choices for using these text editors: Use Notepad++/E-TextEditor (or other editors) on host machine and connect to Ubuntu VM via tool such as ExpanDrive . Use Vim via SSH (Putty) terminal. You\u2019ll have got plain linux terminal with all restrictions, but in this case you shouldn\u2019t install such tool as ExpanDrive which cost some money. So, I will describe first solutions in this post and second - in the next post. E-TextEditor and ExpanDrive I assume that you install both e-texteditor and ExpanDrive. Now, we can create some Rails project: $ rails bar And check IP address our Ubuntu VM: $ ifconfig eth0 Link encap:Ethernet HWaddr 00 :0c:29:2b:58:78 inet addr:192.168.72.132 Bcast:192.168.72.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:fe2b:5878/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:185 errors:0 dropped:0 overruns:0 frame:0 TX packets:191 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:20339 ( 20 .3 KB ) TX bytes:33193 ( 33 .1 KB ) Interrupt:18 Base address:0x2000 Now open ExpanDrive and setup connection to VM: As you can see my Ubuntu VM disk is mapped to host machine and I can use it for my Rails development. Now, we can use any Windows based text editor and made modification directly on Ubuntu VM disk: For Rails scaffolding we use SSH/Putty terminal. References: How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM","title":"How to setup Ruby/Rails development environment, Part 2 - E-TextEditor"},{"location":"blog/2010/2010-04-22-how-to-setup-rubyrails-development/#how-to-setup-rubyrails-development-environment-part-2-e-texteditor","text":"| ruby | rails | linux | There are tons of text editors which are good enough for Ruby/Rails/web development. And it\u2019s not so easier to choose the \u201cbest\u201d editor. I\u2019d like to talk about my top three editors which like the most: Notepad++ It\u2019s the base text editor on my workstation. It has active community, plug-in repository developing fast enough. But, this editor doesn\u2019t have Rails syntax highlight, here I mean ERB files. So, for Rails editing I have to skip it (for now) Vim Cross - platform text editor. It has BIG, super active community with tons of plugins. E-TextEditor It\u2019s Textmate clone for Windows. There are two choices for using these text editors: Use Notepad++/E-TextEditor (or other editors) on host machine and connect to Ubuntu VM via tool such as ExpanDrive . Use Vim via SSH (Putty) terminal. You\u2019ll have got plain linux terminal with all restrictions, but in this case you shouldn\u2019t install such tool as ExpanDrive which cost some money. So, I will describe first solutions in this post and second - in the next post. E-TextEditor and ExpanDrive I assume that you install both e-texteditor and ExpanDrive. Now, we can create some Rails project: $ rails bar And check IP address our Ubuntu VM: $ ifconfig eth0 Link encap:Ethernet HWaddr 00 :0c:29:2b:58:78 inet addr:192.168.72.132 Bcast:192.168.72.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:fe2b:5878/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:185 errors:0 dropped:0 overruns:0 frame:0 TX packets:191 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:20339 ( 20 .3 KB ) TX bytes:33193 ( 33 .1 KB ) Interrupt:18 Base address:0x2000 Now open ExpanDrive and setup connection to VM: As you can see my Ubuntu VM disk is mapped to host machine and I can use it for my Rails development. Now, we can use any Windows based text editor and made modification directly on Ubuntu VM disk: For Rails scaffolding we use SSH/Putty terminal. References: How to setup Ruby/Rails development environment, Part 1 - Ubuntu VM","title":"How to setup Ruby/Rails development environment, Part 2 - E-TextEditor"},{"location":"blog/2010/2010-08-12-jruby-or-groovy-for-scripting-in-java/","text":"(J)Ruby or Groovy for scripting in Java environment | ruby | groovy | jruby | It\u2019s my dilemma. And I come to the conclusion that (J)Ruby is a better choice: Groovy Groovy provides easily integration with existence Java code-base. Groovy is easy to learn for Java developers Groovy has the similar \u201cpower\u201d as (J)Ruby Grails has \u201csupport\u201d from SpringSource Groovy/Grails has competitor inside SpringSource - Spring Roo. Groovy has evolving community. Ruby JRuby can be integrated in existence Java code-base but no so good as Groovy Ruby has amazing community (tutorial, screencasts, books, etc.) Ruby language is \u201csuper sexy\u201d, but I think it\u2019s because of hype in community ;-) Engine Yard is big player in Ruby community. It supports JRuby and Rubinius projects Ruby can be run not only on JVM! So, I can reuse my Ruby-knowledge in different environments Ruby is faster then Groovy. Ruby has good support on *nix environments, but there are some issues with popular gems on Windows. I know that all these ideas are subjective and you can select own pros/cons. The another main item against Groovy is that there are so many JVM languages (Groovy, Jruby, Scala, Jyton, Clojure) and they are change each other in popularity from year to year. Groovy, Scala, Clojure are JVM based mainly (Clojure has CLR implementation). It\u2019s hard to get some expensive time to dive deeper in each of them. Conclusion is pretty simple - use the right tool for the job.","title":"(J)Ruby or Groovy for scripting in Java environment"},{"location":"blog/2010/2010-08-12-jruby-or-groovy-for-scripting-in-java/#jruby-or-groovy-for-scripting-in-java-environment","text":"| ruby | groovy | jruby | It\u2019s my dilemma. And I come to the conclusion that (J)Ruby is a better choice: Groovy Groovy provides easily integration with existence Java code-base. Groovy is easy to learn for Java developers Groovy has the similar \u201cpower\u201d as (J)Ruby Grails has \u201csupport\u201d from SpringSource Groovy/Grails has competitor inside SpringSource - Spring Roo. Groovy has evolving community. Ruby JRuby can be integrated in existence Java code-base but no so good as Groovy Ruby has amazing community (tutorial, screencasts, books, etc.) Ruby language is \u201csuper sexy\u201d, but I think it\u2019s because of hype in community ;-) Engine Yard is big player in Ruby community. It supports JRuby and Rubinius projects Ruby can be run not only on JVM! So, I can reuse my Ruby-knowledge in different environments Ruby is faster then Groovy. Ruby has good support on *nix environments, but there are some issues with popular gems on Windows. I know that all these ideas are subjective and you can select own pros/cons. The another main item against Groovy is that there are so many JVM languages (Groovy, Jruby, Scala, Jyton, Clojure) and they are change each other in popularity from year to year. Groovy, Scala, Clojure are JVM based mainly (Clojure has CLR implementation). It\u2019s hard to get some expensive time to dive deeper in each of them. Conclusion is pretty simple - use the right tool for the job.","title":"(J)Ruby or Groovy for scripting in Java environment"},{"location":"blog/2010/2010-10-31-why-should-i-attend-conferences/","text":"Why Should I Attend Conferences? | conference | I\u2019m mainly a Java developer. But, I always do some \u201cdiving\u201d around new technologies, trends and just around other interesting stuff (read blogs, watch screencasts, etc.). And it\u2019s not enough for me. So, I\u2019ve decided to attend some conferences. Here is the chronological list of conferences I\u2019ve attended: Ruby Bar Camp (September 26, 2009) Ruby Shift (May 21, 2010) Agile Base Camp (January 23, 2010) Agile Base Camp (May 29, 2010) PyCon Ukraine (October 23-24, 2010) All these conference related to non-Java technologies. And what? The main benefit I\u2019ve got is the real face-to-face communication with technology addicted people. I\u2019ve seen great, good and ugly presentations. This experience has opened my mind. Why? Every conference which I\u2019ve attended gave me the additional energy for the next attempts to learn something new, something great and interesting. Even if it\u2019s unpopular in my company and inside my local developer\u2019s community. These conferences showed me the real people which stand behind the blog posts, forum posts, frameworks and libraries. I\u2019m a 100% sure that every developer must attend a conference just to feel the spirit of community.","title":"Why Should I Attend Conferences?"},{"location":"blog/2010/2010-10-31-why-should-i-attend-conferences/#why-should-i-attend-conferences","text":"| conference | I\u2019m mainly a Java developer. But, I always do some \u201cdiving\u201d around new technologies, trends and just around other interesting stuff (read blogs, watch screencasts, etc.). And it\u2019s not enough for me. So, I\u2019ve decided to attend some conferences. Here is the chronological list of conferences I\u2019ve attended: Ruby Bar Camp (September 26, 2009) Ruby Shift (May 21, 2010) Agile Base Camp (January 23, 2010) Agile Base Camp (May 29, 2010) PyCon Ukraine (October 23-24, 2010) All these conference related to non-Java technologies. And what? The main benefit I\u2019ve got is the real face-to-face communication with technology addicted people. I\u2019ve seen great, good and ugly presentations. This experience has opened my mind. Why? Every conference which I\u2019ve attended gave me the additional energy for the next attempts to learn something new, something great and interesting. Even if it\u2019s unpopular in my company and inside my local developer\u2019s community. These conferences showed me the real people which stand behind the blog posts, forum posts, frameworks and libraries. I\u2019m a 100% sure that every developer must attend a conference just to feel the spirit of community.","title":"Why Should I Attend Conferences?"},{"location":"blog/2010/2010-12-15-java-build-tools-and-future/","text":"Java Build Tools and Future | java | ant | maven | gradle | It\u2019s always interesting to read comparison of Java build tools. There are two major player so far: Ant and Maven. But, I\u2019d like to know more about other tools. Here are some interesting links: www.hjug.org/present/Java_Build_Tool_Comparison.ppt - short comparison matrix, it\u2019s really useful for overview The future of Java build tools - conceptual review, worth reading, especially comments http://java.dzone.com/news/maven-or-ant - pros and cons for both Maven and Ant http://www.webforefront.com/archives/2009/09/java_build_tool.html - small Maven criticism http://kent.spillner.org/blog/work/2009/11/14/java-build-tools.html - \u201cJava Build Tools: Ant vs. Maven\u201d, I think it\u2019s really famous article in the Internet. Just read arguments of Maven hater. http://community.jboss.org/wiki/Gradlewhy - Hibernate moved from Maven2 to Gradle! Top 3 Java build tools: Ant + Ivy ( http://ant.apache.org/ ) Maven ( http://maven.apache.org ) Gradle ( http://gradle.org/ ) I don\u2019t want to mention the other tools. The list isn\u2019t small. I\u2019m not sure if it worth spending time for learning/investigating new build tools. We should follow the trends. Ant and Maven are good enough for any projects. But Gradle evolves really quickly. So, we can get additional \u201cbig\u201d player on Java build tools field.","title":"Java Build Tools and Future"},{"location":"blog/2010/2010-12-15-java-build-tools-and-future/#java-build-tools-and-future","text":"| java | ant | maven | gradle | It\u2019s always interesting to read comparison of Java build tools. There are two major player so far: Ant and Maven. But, I\u2019d like to know more about other tools. Here are some interesting links: www.hjug.org/present/Java_Build_Tool_Comparison.ppt - short comparison matrix, it\u2019s really useful for overview The future of Java build tools - conceptual review, worth reading, especially comments http://java.dzone.com/news/maven-or-ant - pros and cons for both Maven and Ant http://www.webforefront.com/archives/2009/09/java_build_tool.html - small Maven criticism http://kent.spillner.org/blog/work/2009/11/14/java-build-tools.html - \u201cJava Build Tools: Ant vs. Maven\u201d, I think it\u2019s really famous article in the Internet. Just read arguments of Maven hater. http://community.jboss.org/wiki/Gradlewhy - Hibernate moved from Maven2 to Gradle! Top 3 Java build tools: Ant + Ivy ( http://ant.apache.org/ ) Maven ( http://maven.apache.org ) Gradle ( http://gradle.org/ ) I don\u2019t want to mention the other tools. The list isn\u2019t small. I\u2019m not sure if it worth spending time for learning/investigating new build tools. We should follow the trends. Ant and Maven are good enough for any projects. But Gradle evolves really quickly. So, we can get additional \u201cbig\u201d player on Java build tools field.","title":"Java Build Tools and Future"},{"location":"blog/2011/2011-01-10-review-how-to-become-hacker/","text":"Review: How To Become A Hacker? | review | Recently I\u2019ve read these philosophical essays: How To Become A Hacker, by Eric Steven Raymond and Teach Yourself Programming in Ten Years, by Peter Norvig. It\u2019s worth reading. I think that it\u2019s like hacker \u201cmantra\u201d ;-) I don\u2019t want to retell all that stuff. Just want to sum up. 1. Programming language learning. We should learn different programming languages from paradigm point of view: \u201cclassical\u201d OOP languages (C++, C#, Java), procedural languages (C), functional languages (Lisp family languages: Common Lisp, Scheme, Clojure), dynamic and scripting languages (Perl, Python, Ruby) and web-related (JavaScript). \u201cBesides being the most important \u2026 languages, they represent very different approaches to programming, and each will educate you in valuable ways.\u201d It means that you should learn languages from different paradigms to get some conceptual knowledge. E.g. You shouldn\u2019t learn Java and C#, or Python and Ruby. I think it\u2019s just waste of your time. \u201cTo be a real hacker, you need to get to the point where you can learn a new language in days by relating what\u2019s in the manual to what you already know.This means you should learn several very different languages.\u201d 2. Learn Unix/Linux. I think the best way to learn is to start playing with Ubuntu. 3. Learn English and native language. You should be able the speak and write fluently in both. 4. Persistent learning. It\u2019s the key point to success in any profession. Summary \u201cTo follow the path: look to the master, follow the master, walk with the master, see through the master, become the master.\u201d","title":"Review: How To Become A Hacker?"},{"location":"blog/2011/2011-01-10-review-how-to-become-hacker/#review-how-to-become-a-hacker","text":"| review | Recently I\u2019ve read these philosophical essays: How To Become A Hacker, by Eric Steven Raymond and Teach Yourself Programming in Ten Years, by Peter Norvig. It\u2019s worth reading. I think that it\u2019s like hacker \u201cmantra\u201d ;-) I don\u2019t want to retell all that stuff. Just want to sum up. 1. Programming language learning. We should learn different programming languages from paradigm point of view: \u201cclassical\u201d OOP languages (C++, C#, Java), procedural languages (C), functional languages (Lisp family languages: Common Lisp, Scheme, Clojure), dynamic and scripting languages (Perl, Python, Ruby) and web-related (JavaScript). \u201cBesides being the most important \u2026 languages, they represent very different approaches to programming, and each will educate you in valuable ways.\u201d It means that you should learn languages from different paradigms to get some conceptual knowledge. E.g. You shouldn\u2019t learn Java and C#, or Python and Ruby. I think it\u2019s just waste of your time. \u201cTo be a real hacker, you need to get to the point where you can learn a new language in days by relating what\u2019s in the manual to what you already know.This means you should learn several very different languages.\u201d 2. Learn Unix/Linux. I think the best way to learn is to start playing with Ubuntu. 3. Learn English and native language. You should be able the speak and write fluently in both. 4. Persistent learning. It\u2019s the key point to success in any profession.","title":"Review: How To Become A Hacker?"},{"location":"blog/2011/2011-01-10-review-how-to-become-hacker/#summary","text":"\u201cTo follow the path: look to the master, follow the master, walk with the master, see through the master, become the master.\u201d","title":"Summary"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/","text":"Should I Learn Lisp? | lisp | I had been asking this question myself every time I had found something (blog post, article, book title, etc.) interesting related to Lisp. But those \u201cugly\u201d brackets put me away again and again :-). So, what was happen and why I changed my vision? I think I\u2019ve got three triggers to change my mind: a) friends of mine works with Gensym/G2 platform and they are really inspired by Lisp power; b) I saw several Rich Hickey\u2019s talks about Clojure and the last one c) Paul Graham essays . Then, I started googling to find other opinions about Lisp (when I say \u201cLisp\u201d I mean Common Lisp, Scheme, Clojure and other Lisp dialects). Then, I started googling to find other opinions about Lisp (when I say \u201cLisp\u201d I mean Common Lisp, Scheme, Clojure and other Lisp dialects). Lisp Quotes Bill Clementson wrote about this: \u201cUsually, rather than trying to convince people \u2026 I feel it is better to just spread the \u201cseeds\u201d and let people convince themselves. This is often better done with quotes and/or stories because these often highlight some salient feature that resonates better with people than arguments do.\u201d Also, check Paul Graham Quotes List . I like this one: \u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d (Eric Raymond, \u201cHow to Become a Hacker\u201d)\u201d Lisp Dialects Here is the lisp of the major Lisp dialect, as for me: Common Lisp (CLOS) Scheme Clojure Dylan Arc newLisp Emacs Lisp I\u2019m sure this lisp uncompleted, but from my point of view other stuff is too specific. Additionally you should check this page to get some syntax overview: Lisp: A side-by-side reference sheet I think there are two major player, IMHO: Common Lisp and Clojure. Common Lisp is just golden standard for all Lisps. Plus, all major Lisp related books were written for Common Lisp. I would choose Clojure for practical reason. It just has JVM background and can use Java ecosystem. And it\u2019s the major features. The other good point is that Clojure is much simpler than Common Lisp. Beginner Lisp Books \u201cCommon Lisp: Practical Common Lisp\u201d, by Peter Seibel, 2005. \u201cClojure: Programming Clojure\u201d, by Stuart Halloway, 2009. \u201cScheme: Structure and Interpretation of Computer Programs\u201d, by Harold Abelson, Gerald Jay Sussman, Julie Sussman. People suggest to choose one \u201clisp\u201d for start. I think Common Lisp must be in your learning roadmap, but it shouldn\u2019t be a start point. Development Environment I\u2019ve analyzed a lot of opinions and made an obvious (and expected) conclusion. Whatever Lisp you want to use Emacs is the only one true way for the real Lisp development. Emacs is very powerful and very complicated text editor. I have to invest a huge amount of your time to be really productive with it. But real lisper can\u2019t suggest your other editors. Even for Clojure people suggest to use Emacs. Don\u2019t forget that you\u2019ll get additional Lisp on your shelf with Emacs - Emacs Lisp (elisp). It uses for Emacs scripting and you must know it to tune Emacs properly. Summary I like Lisp after this small overview. This language has huge power and conceptual background which is different from what I\u2019ve see so far. It\u2019s mean that Lisp can extent my conceptual horizon. I should chose the only one Lisp for start. It\u2019s no simple task. I think that Clojure is better choice for me as for Java developer. But, Common Lisp has big legacy (books, community and history) which is very interested for me. In any case List is just for fun. I can\u2019t use it on my work :-( I should invest noticeable amount of time for Emacs learning. And I don\u2019t like this. Unfortunately, I can\u2019t learn Lisp this year. Because it will be fragmented learning process. And I have such approach. I like to dive into the subject and live with it. I have to set List as a goal for 2012 year.","title":"Should I Learn Lisp?"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#should-i-learn-lisp","text":"| lisp | I had been asking this question myself every time I had found something (blog post, article, book title, etc.) interesting related to Lisp. But those \u201cugly\u201d brackets put me away again and again :-). So, what was happen and why I changed my vision? I think I\u2019ve got three triggers to change my mind: a) friends of mine works with Gensym/G2 platform and they are really inspired by Lisp power; b) I saw several Rich Hickey\u2019s talks about Clojure and the last one c) Paul Graham essays . Then, I started googling to find other opinions about Lisp (when I say \u201cLisp\u201d I mean Common Lisp, Scheme, Clojure and other Lisp dialects). Then, I started googling to find other opinions about Lisp (when I say \u201cLisp\u201d I mean Common Lisp, Scheme, Clojure and other Lisp dialects).","title":"Should I Learn Lisp?"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#lisp-quotes","text":"Bill Clementson wrote about this: \u201cUsually, rather than trying to convince people \u2026 I feel it is better to just spread the \u201cseeds\u201d and let people convince themselves. This is often better done with quotes and/or stories because these often highlight some salient feature that resonates better with people than arguments do.\u201d Also, check Paul Graham Quotes List . I like this one: \u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d (Eric Raymond, \u201cHow to Become a Hacker\u201d)\u201d","title":"Lisp Quotes"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#lisp-dialects","text":"Here is the lisp of the major Lisp dialect, as for me: Common Lisp (CLOS) Scheme Clojure Dylan Arc newLisp Emacs Lisp I\u2019m sure this lisp uncompleted, but from my point of view other stuff is too specific. Additionally you should check this page to get some syntax overview: Lisp: A side-by-side reference sheet I think there are two major player, IMHO: Common Lisp and Clojure. Common Lisp is just golden standard for all Lisps. Plus, all major Lisp related books were written for Common Lisp. I would choose Clojure for practical reason. It just has JVM background and can use Java ecosystem. And it\u2019s the major features. The other good point is that Clojure is much simpler than Common Lisp.","title":"Lisp Dialects"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#beginner-lisp-books","text":"\u201cCommon Lisp: Practical Common Lisp\u201d, by Peter Seibel, 2005. \u201cClojure: Programming Clojure\u201d, by Stuart Halloway, 2009. \u201cScheme: Structure and Interpretation of Computer Programs\u201d, by Harold Abelson, Gerald Jay Sussman, Julie Sussman. People suggest to choose one \u201clisp\u201d for start. I think Common Lisp must be in your learning roadmap, but it shouldn\u2019t be a start point.","title":"Beginner Lisp Books"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#development-environment","text":"I\u2019ve analyzed a lot of opinions and made an obvious (and expected) conclusion. Whatever Lisp you want to use Emacs is the only one true way for the real Lisp development. Emacs is very powerful and very complicated text editor. I have to invest a huge amount of your time to be really productive with it. But real lisper can\u2019t suggest your other editors. Even for Clojure people suggest to use Emacs. Don\u2019t forget that you\u2019ll get additional Lisp on your shelf with Emacs - Emacs Lisp (elisp). It uses for Emacs scripting and you must know it to tune Emacs properly.","title":"Development Environment"},{"location":"blog/2011/2011-01-12-should-i-learn-lisp/#summary","text":"I like Lisp after this small overview. This language has huge power and conceptual background which is different from what I\u2019ve see so far. It\u2019s mean that Lisp can extent my conceptual horizon. I should chose the only one Lisp for start. It\u2019s no simple task. I think that Clojure is better choice for me as for Java developer. But, Common Lisp has big legacy (books, community and history) which is very interested for me. In any case List is just for fun. I can\u2019t use it on my work :-( I should invest noticeable amount of time for Emacs learning. And I don\u2019t like this. Unfortunately, I can\u2019t learn Lisp this year. Because it will be fragmented learning process. And I have such approach. I like to dive into the subject and live with it. I have to set List as a goal for 2012 year.","title":"Summary"},{"location":"blog/2011/2011-01-14-review-you-should-write-blogs/","text":"Review: You Should Write Blogs? | review | I\u2019ve just finished reading the Steve Yegge\u2019s post \u201cYou Should Write Blogs\u201d . As for me it\u2019s very impressive and honest writing about blogging I\u2019ve ever read. I like this style of writing. The general idea is to explain why You should write blogs. So don\u2019t worry about whether people will read it. Just write it! No matter where you are in your education, some people will be interested in hearing your struggles. This is an important thing to keep in mind when you\u2019re blogging. Each person in your audience is on a different clock, and all of them are ahead of you in some ways and behind you in others. The point of blogging is that we all agree to share where we\u2019re at, and not poke fun at people who seem to be behind us, because they may know other things that we won\u2019t truly understand for years, if ever. He described some reasons why people don\u2019t like to write blogs and commented it: I\u2019m too busy. I\u2019m afraid to put my true thoughts on public record. Nobody will read my blog. Blogging is narcissistic. I must say that Steve inspired me to write more. Just for fun.","title":"Review: You Should Write Blogs?"},{"location":"blog/2011/2011-01-14-review-you-should-write-blogs/#review-you-should-write-blogs","text":"| review | I\u2019ve just finished reading the Steve Yegge\u2019s post \u201cYou Should Write Blogs\u201d . As for me it\u2019s very impressive and honest writing about blogging I\u2019ve ever read. I like this style of writing. The general idea is to explain why You should write blogs. So don\u2019t worry about whether people will read it. Just write it! No matter where you are in your education, some people will be interested in hearing your struggles. This is an important thing to keep in mind when you\u2019re blogging. Each person in your audience is on a different clock, and all of them are ahead of you in some ways and behind you in others. The point of blogging is that we all agree to share where we\u2019re at, and not poke fun at people who seem to be behind us, because they may know other things that we won\u2019t truly understand for years, if ever. He described some reasons why people don\u2019t like to write blogs and commented it: I\u2019m too busy. I\u2019m afraid to put my true thoughts on public record. Nobody will read my blog. Blogging is narcissistic. I must say that Steve inspired me to write more. Just for fun.","title":"Review: You Should Write Blogs?"},{"location":"blog/2011/2011-01-22-lisp-ruby-acceptable-and-not-acceptable/","text":"Lisp, Ruby, Acceptable and not Acceptable | review | lisp | ruby | There is one really (in)famous essay Why Ruby is an acceptable LISP by Eric Kidd. The most interesting of all this stuff are comments and other responsive blog posts (e.g. Lisp is Not an Acceptable Lisp by Steve Yegge ) I can say this is something like \u201cvs\u201d essay which is very popular nowadays. Here is the list of some quotes and key ideas: Lisp macros are far more powerful than the trivial use cases you\u2019ve listed. I could give a lot of examples here, but just ask yourself: why is most of the programming community so fond with \u201cDesign Patterns\u201d, while the Lisp community generally isn\u2019t? Well, that\u2019s because patterns are nothing but high-level specifications for code being rewritten again and again and again. The Lisp approach is to create some macros and auxiliary functions that actually implement the pattern, thus extending the language capabilities and avoiding continuous reinvention of the wheel. This article sounds like it was written for folks who really want to use Lisp, but have chosen Ruby because all the cool kids are using it and want to reasonably justify an emotional decision. If you want to learn a language that can change with the times and incorporate whatever latest fad the programming cool kids have to offer, Lisp is the choice. Lisp is the red pill. A final example: look at the 2 open source Computer Algebra Systems written in Common Lisp available as Open Source: 1) Axiom \u2013 originally from IBM Thomas Watson Research Center; 2) Maxima \u2013 originally Department of Energy (US). This is software written in the 70s. You can\u2019t write software that lasts so long with a language that is a moving target. This is the kind of survival and complex domain which shows the power of Lisp. The real reason that brought me to Lisp (and never will get me away from it) is simply this: You can build it out of 7 (s-e-v-e-n) primitive operators! And, as a consequence, no other language can be expressed in itself as short as Lisp. (As you probably know, quite any language can be expressed in itself.) So let me repeat: really no other language can be expressed in itself that short, and (as a natural consequence) can be built out of less primitive operators. Ruby has a syntax, and Ruby needs a full parser to get from that syntax to an AST. Because Lisp code is naturally an AST, things are very different And small summary of the Steve\u2019s blog post Lisp is Not an Acceptable Lisp : There is no acceptable Lisp. This is a problem. It\u2019s not a little teeny one, either. The Lisp communities (yeah, there are a bunch) are going to have to realize that if Lisp is ever going to be massively successful, it needs an overhaul. Or maybe a revolution. Contrary to what some might tell you, it doesn\u2019t need a committee, and it doesn\u2019t need a bunch of money. Linux proved exactly the opposite. Lisp needs a benevolent dictator. Lisp needs to ditch the name \u201cLisp\u201d, since it scares people. And Lisp needs to learn from the lessons of the 45 years of languages that have followed it. Based on this comments and I\u2019m attaching this funny picture:","title":"Lisp, Ruby, Acceptable and not Acceptable"},{"location":"blog/2011/2011-01-22-lisp-ruby-acceptable-and-not-acceptable/#lisp-ruby-acceptable-and-not-acceptable","text":"| review | lisp | ruby | There is one really (in)famous essay Why Ruby is an acceptable LISP by Eric Kidd. The most interesting of all this stuff are comments and other responsive blog posts (e.g. Lisp is Not an Acceptable Lisp by Steve Yegge ) I can say this is something like \u201cvs\u201d essay which is very popular nowadays. Here is the list of some quotes and key ideas: Lisp macros are far more powerful than the trivial use cases you\u2019ve listed. I could give a lot of examples here, but just ask yourself: why is most of the programming community so fond with \u201cDesign Patterns\u201d, while the Lisp community generally isn\u2019t? Well, that\u2019s because patterns are nothing but high-level specifications for code being rewritten again and again and again. The Lisp approach is to create some macros and auxiliary functions that actually implement the pattern, thus extending the language capabilities and avoiding continuous reinvention of the wheel. This article sounds like it was written for folks who really want to use Lisp, but have chosen Ruby because all the cool kids are using it and want to reasonably justify an emotional decision. If you want to learn a language that can change with the times and incorporate whatever latest fad the programming cool kids have to offer, Lisp is the choice. Lisp is the red pill. A final example: look at the 2 open source Computer Algebra Systems written in Common Lisp available as Open Source: 1) Axiom \u2013 originally from IBM Thomas Watson Research Center; 2) Maxima \u2013 originally Department of Energy (US). This is software written in the 70s. You can\u2019t write software that lasts so long with a language that is a moving target. This is the kind of survival and complex domain which shows the power of Lisp. The real reason that brought me to Lisp (and never will get me away from it) is simply this: You can build it out of 7 (s-e-v-e-n) primitive operators! And, as a consequence, no other language can be expressed in itself as short as Lisp. (As you probably know, quite any language can be expressed in itself.) So let me repeat: really no other language can be expressed in itself that short, and (as a natural consequence) can be built out of less primitive operators. Ruby has a syntax, and Ruby needs a full parser to get from that syntax to an AST. Because Lisp code is naturally an AST, things are very different And small summary of the Steve\u2019s blog post Lisp is Not an Acceptable Lisp : There is no acceptable Lisp. This is a problem. It\u2019s not a little teeny one, either. The Lisp communities (yeah, there are a bunch) are going to have to realize that if Lisp is ever going to be massively successful, it needs an overhaul. Or maybe a revolution. Contrary to what some might tell you, it doesn\u2019t need a committee, and it doesn\u2019t need a bunch of money. Linux proved exactly the opposite. Lisp needs a benevolent dictator. Lisp needs to ditch the name \u201cLisp\u201d, since it scares people. And Lisp needs to learn from the lessons of the 45 years of languages that have followed it. Based on this comments and I\u2019m attaching this funny picture:","title":"Lisp, Ruby, Acceptable and not Acceptable"},{"location":"blog/2011/2011-01-25-review-beating-averages/","text":"Review: Beating the Averages | review | This Paul\u2019s Graham essay ( Beating the Averages ) is very popular among Lisp community. Someone told that it was the new Lisp push, the new Lisp wave. I read this essay and companion technical article \u201c Lisp in Web-Based Applications \u201d in one short. It\u2019s really inspired reading. Paul Graham described the \u201chidden\u201d power of Lisp. Unfortunately, the Common Lisp community is fragmented so much. Too many different implementations. It hurts Lisp as a sub-culture. I hope this situation will be resolved by Clojure vibrant community Definitely, if you want to open your Lisp mind you should read this essay. Nothing special from technical point of view, but really cool as Lisp catalyst. Read it, feel the power, feel the spirit. The general idea (IMHO): startup is the right place to try something new and revolutionary to \u201ckill\u201d your competitors.","title":"Review: Beating the Averages"},{"location":"blog/2011/2011-01-25-review-beating-averages/#review-beating-the-averages","text":"| review | This Paul\u2019s Graham essay ( Beating the Averages ) is very popular among Lisp community. Someone told that it was the new Lisp push, the new Lisp wave. I read this essay and companion technical article \u201c Lisp in Web-Based Applications \u201d in one short. It\u2019s really inspired reading. Paul Graham described the \u201chidden\u201d power of Lisp. Unfortunately, the Common Lisp community is fragmented so much. Too many different implementations. It hurts Lisp as a sub-culture. I hope this situation will be resolved by Clojure vibrant community Definitely, if you want to open your Lisp mind you should read this essay. Nothing special from technical point of view, but really cool as Lisp catalyst. Read it, feel the power, feel the spirit. The general idea (IMHO): startup is the right place to try something new and revolutionary to \u201ckill\u201d your competitors.","title":"Review: Beating the Averages"},{"location":"blog/2011/2011-01-26-review-language-grubbing/","text":"Review: Language Grubbing | review | Yet another interesting reading from Steve Yegge: Language Grubbing . He reviewed several programming languages (C, C++, Java, Perl, Python, Ruby, Smalltalk, Lisp family, ML family, Haskell, Erlang). He mentioned pros and cons for each of them, criticized some of them (Perl, Common Lisp). Also told that Lua, Tcl, Prolog, Pascal wouldn\u2019t be in his learning \u201cbacklog\u201d. I looked at a lot of other languages: JavaScript, Lua, Tcl, Prolog, Eiffel, Pascal, and a bunch of others. None of them really stood out as being \u201cspecial\u201d like the others I\u2019ve talked about. For instance, you can do Prolog-like logic/constraint programming in Lisp or OCaml pretty easily, and they\u2019re both broader/better languages than Prolog. Pascal gives you nothing that C doesn\u2019t already do better. \u2026 Lua is a cleaned-up Tcl, but neither one of them is as interesting (to me, anyway) as Python for doing embedded languages, unless you really need to strip it down to practically nothing, in which case Lua is useful. IMHO, reasonable comments. He mentioned about language groups: Java, C# and C++ ( I would add Objective-C and Smalltalk ) Haskell, SML, OCaml ( I would add F#, Scala ) Common Lisp, Emacs Lisp, Scheme ( I would add Clojure ) Perl, Python, Ruby (I would add PHP) Erlang ( I would add Prolog, Oz ) Lua, Tcl, JavaScript ( I would add Io, Ioke, R, REBOL ) C, Pascal I wrote about this but I\u2019ll repeat again. I time wasting if you learn several languages from the same group. E.g. Python and Ruby, or Java and C#. So, just a pick the \u201cmajor\u201d language from each group and learn it. E.g.: Java, Haskell, Clojure, Ruby, JavaScript and C. C language is like Latin for the plain developer. JavaScript is must be know by anyone involved in web-related development. For myself I formed the next language priority list: Java JavaScript Ruby or Python (I haven\u2019t decided yet) Clojure, Scheme or Common Lisp (I haven\u2019t decided yet) C","title":"Review: Language Grubbing"},{"location":"blog/2011/2011-01-26-review-language-grubbing/#review-language-grubbing","text":"| review | Yet another interesting reading from Steve Yegge: Language Grubbing . He reviewed several programming languages (C, C++, Java, Perl, Python, Ruby, Smalltalk, Lisp family, ML family, Haskell, Erlang). He mentioned pros and cons for each of them, criticized some of them (Perl, Common Lisp). Also told that Lua, Tcl, Prolog, Pascal wouldn\u2019t be in his learning \u201cbacklog\u201d. I looked at a lot of other languages: JavaScript, Lua, Tcl, Prolog, Eiffel, Pascal, and a bunch of others. None of them really stood out as being \u201cspecial\u201d like the others I\u2019ve talked about. For instance, you can do Prolog-like logic/constraint programming in Lisp or OCaml pretty easily, and they\u2019re both broader/better languages than Prolog. Pascal gives you nothing that C doesn\u2019t already do better. \u2026 Lua is a cleaned-up Tcl, but neither one of them is as interesting (to me, anyway) as Python for doing embedded languages, unless you really need to strip it down to practically nothing, in which case Lua is useful. IMHO, reasonable comments. He mentioned about language groups: Java, C# and C++ ( I would add Objective-C and Smalltalk ) Haskell, SML, OCaml ( I would add F#, Scala ) Common Lisp, Emacs Lisp, Scheme ( I would add Clojure ) Perl, Python, Ruby (I would add PHP) Erlang ( I would add Prolog, Oz ) Lua, Tcl, JavaScript ( I would add Io, Ioke, R, REBOL ) C, Pascal I wrote about this but I\u2019ll repeat again. I time wasting if you learn several languages from the same group. E.g. Python and Ruby, or Java and C#. So, just a pick the \u201cmajor\u201d language from each group and learn it. E.g.: Java, Haskell, Clojure, Ruby, JavaScript and C. C language is like Latin for the plain developer. JavaScript is must be know by anyone involved in web-related development. For myself I formed the next language priority list: Java JavaScript Ruby or Python (I haven\u2019t decided yet) Clojure, Scheme or Common Lisp (I haven\u2019t decided yet) C","title":"Review: Language Grubbing"},{"location":"blog/2011/2011-02-11-how-to-choose-next-programming-language/","text":"How to choose the next programming language to learn? | thoughts | I believe that this question has been appearing in the brains very often. Note : I\u2019m writing from Java developer point of view. How to solve this dilemma? I said \u201cdilemma\u201d because it\u2019s investment in the new knowledge. And every new knowledge should bring some benefits. The wrong investment is equal to waste of your time. As a Java developer I think I should invest outside the JVM. It\u2019s even more important in nowadays. Oracle is more aggressive then Sun was. So, investment in non-JVM \u201cplatform\u201d/language can protect the own future. I don\u2019t want to write about some definite language. It\u2019s not important right now. The most important thing is to learn something new which is totally separated from JVM. Someone can say: \u201cTry Groovy, Scala or Clojure\u201d. Good point. But, it\u2019s JVM (even if they are \u201cbeautiful\u201d and interesting choices). One exception: you can have a possibility to use these languages on the job project. In that case it\u2019s ok. Just pick the right one and start the party. In other case avoid them. There is NO right answer. Just define your own philosophy (language to learn) and keep it alive.","title":"How to choose the next programming language to learn?"},{"location":"blog/2011/2011-02-11-how-to-choose-next-programming-language/#how-to-choose-the-next-programming-language-to-learn","text":"| thoughts | I believe that this question has been appearing in the brains very often. Note : I\u2019m writing from Java developer point of view. How to solve this dilemma? I said \u201cdilemma\u201d because it\u2019s investment in the new knowledge. And every new knowledge should bring some benefits. The wrong investment is equal to waste of your time. As a Java developer I think I should invest outside the JVM. It\u2019s even more important in nowadays. Oracle is more aggressive then Sun was. So, investment in non-JVM \u201cplatform\u201d/language can protect the own future. I don\u2019t want to write about some definite language. It\u2019s not important right now. The most important thing is to learn something new which is totally separated from JVM. Someone can say: \u201cTry Groovy, Scala or Clojure\u201d. Good point. But, it\u2019s JVM (even if they are \u201cbeautiful\u201d and interesting choices). One exception: you can have a possibility to use these languages on the job project. In that case it\u2019s ok. Just pick the right one and start the party. In other case avoid them. There is NO right answer. Just define your own philosophy (language to learn) and keep it alive.","title":"How to choose the next programming language to learn?"},{"location":"blog/2011/2011-02-15-lisp-balkanization/","text":"Lisp Balkanization? | review | lisp | I\u2019ve heard this words\u2019 pair too often and I never knew what does it mean? Until I read these two posts: Ultra-Balkanization Makes Lisp Autistic and Reddit and Lisp psychosis . In general every Lisp developer tends to write \u201cnew\u201d super-puper Lisp, invent the wheel, write own \u201ccool\u201d emacs extension and tell to the world that he is a HACKER. I love this. Nowadays, Clojure is the real answer for Lisp guys. It can consolidate the Lisp language flexibility and JVM power. I think it\u2019s a good choice. Update 2019-03-29: I have added original posts because it\u2019s more convenient to have them inline. All references have been preserved. [WebArchive Copy] Giles Bowkett: Ultra-Balkanization Makes Lisp Autistic Source An interesting perspective . It\u2019s too long, so I extracted key sentences expressing the idea I find interesting: Lisp\u2019s hyper-specific DSL features make Lisp programs autistic. A language is an interface between programmers and hardware, so it has social/psychological/pedagogical features which are just as important as its formal properties. Many Lisp zealots dismiss the language\u2019s failures as \u201cmerely social\u201d, but that\u2019s missing the purpose of a language entirely. Normal syntax gives you a feeling of what\u2019s idiomatic vs. what\u2019s weird. With sexps, it\u2019s much harder to create, maintain and convey such opinions in the code\u2019s appearance. Without this consensus you\u2019ll have a hard time building a functional social group. Since with Lisp you essentially design your own single-use language for your application, you\u2019re the only one in the world using that language variant. [Copy] Finding Lisp: Reddit and Lisp psychosis Source I went away on a family vacation at the first part of this week and just got back last night. During that time, I completely missed the whole Reddit scandal . It seems like the guys at Reddit ended up choosing to rewrite Reddit in Python because Lisp just wasn\u2019t working for them. To some, this seems to be a slap in the face of Lisp. However, if you look at spez\u2019s blog entry , you can see that the rationale for choosing Python was pretty sane. In particular, this paragraph was interesting (also quoted by John at Lemonodor ): Emacs and SLIME are a killer combination, but I develop on a Mac, and reddit.com is a FreeBSD box. On my Mac, my choices of threaded Lisp implementations was limited to OpenMCL, and in FreeBSD it\u2019s CMUCL. Because of the low-level socket and threading code we had to write, reddit would not run on my Mac, and I was always tethered to our FreeBSD development server. Not being able to program offline is a pain. In a comment on Lemonodor , Steve Huffman said: The biggest trouble that plagued us was that we could never quite get Lisp reddit stable enough to sleep at night. There were weird threading issues that would bring the site to its knees a couple times a day and required constant monitoring. Now, here\u2019s where the Lisp psychosis comes in. Rather than suggesting that the guys at Reddit were dopes, or that they didn\u2019t try hard enough, or that they should have done such and such a workaround, blah, blah, I wish Lispers would step up and internalize that the Reddit experience was a great case study and that the community should work to solve the issues it raised. These guys did not have a bad Lisp experience. In fact, they are quite complimentary of Lisp. For example : Lisp is an amazing language. After spending the entire summer working entirely in Lisp, it\u2019s nearly impossible to work in another language and not say to myself, \u201cIf only this were Lisp\u2026\u201d Lisp has many goodies that make programming in it a joy: the REPL, macros and the lack of syntax are some. I won\u2019t go into the details, but rest assured, it\u2019s cool. People become Lisp zealots for a reason. So here\u2019s what I took away from the Reddit feedback: Lisp is a great language. Keep this point in mind. The Reddit developers gave Lisp compliments; they didn\u2019t \u2018diss it. Lisp has a balkanized feature set. Some (necessary!) things to build modern applications are not cross-platform. When you have to work on multiple machines and environments, which is more and more the norm these days, there are no open source implementations of Lisp that run across the dominant environments without differences. (CLISP comes the closest, but you may or may not be able to tolerate its GPL license terms.) Because these features are not standardized, you\u2019re left writing compatibility layers if you want things to work across platforms. In particular, networking and threading are problem areas. Lisp libraries are scant. This is a well known problem in the Lisp community. The standard, basically valid, response is \u201cJump in and help us write some more libraries.\u201d (Kudos to Kenny Tilton for driving this line hard. He\u2019s right, but there\u2019s also a bit more to it than that.) The library problems are compounded by the balkanization of feature set. In some cases you can find something that sort of works, but it may work on another implementation, not yours. If it has any dependencies on the problem areas of threads and networking, you\u2019ve got a long road of tweaking ahead to get it to work. This time is better spent getting on with your real task. Edi Weitz (yet again) wins the Lisp Superhero award for creating the best libraries out there, bar none. Seriously, if anybody aspires to create libraries that are well-used, go take some cues from Edi. His code is always high quality, his APIs and implementations are always complete, he\u2019s absolutely responsive to problem reports, he provides great documentation, and he often tests his code across multiple implementations, trying to make them as cross-platform as possible. In short, you couldn\u2019t expect better service and support from a commercial vendor, and Edi releases his code as open source. Okay, all that said, what\u2019s the constructive response here? My suggestions are: First, stop grumbling and suggesting workarounds to the Reddit folks. They did the Lisp community a great service by documenting their experiences. Rather than harrassing them, sit down and talk with them to get more info. Next, focus on the foundational balkanization problems. In my opinion, the biggest issues with Lisp are the lack of standard (defacto or otherwise) networking and threading APIs. If those were in place, it would be a lot easier to get libraries that worked all over the place. Would this solve everything? No, but it would go a long way and would enable lots of other innovation on top of that foundation instead of having everybody spending time creating compatibility libraries and generally re-inventing the wheel. Work on getting a good cross-platform, open source Lisp implementation with a liberal license. Like I said previously, I really like CLISP , and I use it for developing on Windows, but the license is not suitable for all code since it all-but-forces your code to be released as GPL. I\u2019d really love to see SBCL or CMUCL ported to Windows, with the full set of functionality. I\u2019d also love to see SBCL\u2019s baseline functionality present on all platforms (currently threading only works on Linux, for instance, not BSD). By the way, this is no knock on any other Lisp implementation. I just happen to use SBCL on Linux and think it rocks. If OpenMCL can make the jump off of Mac onto other platforms, that would be great. Or maybe GCL can do the job. I don\u2019t know the exact route, but the fact is the lack of a baseline functionality across all platforms is hurting us. Can I do all the above? Nope. I\u2019ve tried grokking the internals of SBCL and I\u2019m only qualified to kibitz around the margins. I stand in awe of guys like William, Christophe, Dan, Nikodemus, Gabor, Juho, Alexey, and many others (Update: I added to this list twice already because I felt so bad for leaving out somebody\u2019s name\u2013sorry William and Nikodemus. If you\u2019re a significant SBCL contributor\u2013or even and insignificant one\u2013believe me when I say I stand in awe of you too ;-). I do try to help out SBCL by reducing the friction for newbies to get started with Lisp, compiling the RPM binaries that are available on SourceForge and maintaining the FedoraLisp.org Yum repository. That said, I\u2019m going to start working on the networking API issues. You\u2019ll see a document from me posted over the next couple of weeks. It\u2019s been in process for a few months, but I finally got a hankering to finish it with this Reddit bru-ha-ha. If you\u2019re interested in networking APIs and have a desire to help in such an endeavor, please drop me a line (dave at findinglisp). I\u2019d love to spread the work around. If somebody else wants to grab the threading stuff by the throat that would be great. Above all, stay productive. Use the Reddit feedback to motivate you to make Lisp better. Whatever you do, stop suggesting workarounds to the Reddit guys or making them feel bad for the choices they made. They seem like smart guys, so let\u2019s assume that they did what they did knowing all the options (they do have Paul Graham on the board, so I\u2019m guessing that they talked about this before they did the rewrite). They have moved on and our job is to make any such workaround unnecessary for the next crew that tries to use Lisp. And before anybody says it, yes I know that the commercial Lisp vendors have solved some of these problems. I have discussed before some of my thoughts about the various license terms the vendors use . It isn\u2019t that those terms are bad in the abstract, they just don\u2019t allow those implementations to solve the problem I\u2019m interested in. In short, I think it would help drive Lisp adoption if a common, cross-platform, free, open source version existed, in the same way that GCC has helped democratize programming in C. The next-best alternative would be a $99 \u201cTurbo Lisp\u201d environment ala Borland\u2019s language products in the 1980s/1990s. Perhaps the Lispworks guys will offer such a thing (hint, hint ;-).","title":"Lisp Balkanization?"},{"location":"blog/2011/2011-02-15-lisp-balkanization/#lisp-balkanization","text":"| review | lisp | I\u2019ve heard this words\u2019 pair too often and I never knew what does it mean? Until I read these two posts: Ultra-Balkanization Makes Lisp Autistic and Reddit and Lisp psychosis . In general every Lisp developer tends to write \u201cnew\u201d super-puper Lisp, invent the wheel, write own \u201ccool\u201d emacs extension and tell to the world that he is a HACKER. I love this. Nowadays, Clojure is the real answer for Lisp guys. It can consolidate the Lisp language flexibility and JVM power. I think it\u2019s a good choice. Update 2019-03-29: I have added original posts because it\u2019s more convenient to have them inline. All references have been preserved.","title":"Lisp Balkanization?"},{"location":"blog/2011/2011-02-15-lisp-balkanization/#webarchive-copy-giles-bowkett-ultra-balkanization-makes-lisp-autistic","text":"Source An interesting perspective . It\u2019s too long, so I extracted key sentences expressing the idea I find interesting: Lisp\u2019s hyper-specific DSL features make Lisp programs autistic. A language is an interface between programmers and hardware, so it has social/psychological/pedagogical features which are just as important as its formal properties. Many Lisp zealots dismiss the language\u2019s failures as \u201cmerely social\u201d, but that\u2019s missing the purpose of a language entirely. Normal syntax gives you a feeling of what\u2019s idiomatic vs. what\u2019s weird. With sexps, it\u2019s much harder to create, maintain and convey such opinions in the code\u2019s appearance. Without this consensus you\u2019ll have a hard time building a functional social group. Since with Lisp you essentially design your own single-use language for your application, you\u2019re the only one in the world using that language variant.","title":"[WebArchive Copy] Giles Bowkett: Ultra-Balkanization Makes Lisp Autistic"},{"location":"blog/2011/2011-02-15-lisp-balkanization/#copy-finding-lisp-reddit-and-lisp-psychosis","text":"Source I went away on a family vacation at the first part of this week and just got back last night. During that time, I completely missed the whole Reddit scandal . It seems like the guys at Reddit ended up choosing to rewrite Reddit in Python because Lisp just wasn\u2019t working for them. To some, this seems to be a slap in the face of Lisp. However, if you look at spez\u2019s blog entry , you can see that the rationale for choosing Python was pretty sane. In particular, this paragraph was interesting (also quoted by John at Lemonodor ): Emacs and SLIME are a killer combination, but I develop on a Mac, and reddit.com is a FreeBSD box. On my Mac, my choices of threaded Lisp implementations was limited to OpenMCL, and in FreeBSD it\u2019s CMUCL. Because of the low-level socket and threading code we had to write, reddit would not run on my Mac, and I was always tethered to our FreeBSD development server. Not being able to program offline is a pain. In a comment on Lemonodor , Steve Huffman said: The biggest trouble that plagued us was that we could never quite get Lisp reddit stable enough to sleep at night. There were weird threading issues that would bring the site to its knees a couple times a day and required constant monitoring. Now, here\u2019s where the Lisp psychosis comes in. Rather than suggesting that the guys at Reddit were dopes, or that they didn\u2019t try hard enough, or that they should have done such and such a workaround, blah, blah, I wish Lispers would step up and internalize that the Reddit experience was a great case study and that the community should work to solve the issues it raised. These guys did not have a bad Lisp experience. In fact, they are quite complimentary of Lisp. For example : Lisp is an amazing language. After spending the entire summer working entirely in Lisp, it\u2019s nearly impossible to work in another language and not say to myself, \u201cIf only this were Lisp\u2026\u201d Lisp has many goodies that make programming in it a joy: the REPL, macros and the lack of syntax are some. I won\u2019t go into the details, but rest assured, it\u2019s cool. People become Lisp zealots for a reason. So here\u2019s what I took away from the Reddit feedback: Lisp is a great language. Keep this point in mind. The Reddit developers gave Lisp compliments; they didn\u2019t \u2018diss it. Lisp has a balkanized feature set. Some (necessary!) things to build modern applications are not cross-platform. When you have to work on multiple machines and environments, which is more and more the norm these days, there are no open source implementations of Lisp that run across the dominant environments without differences. (CLISP comes the closest, but you may or may not be able to tolerate its GPL license terms.) Because these features are not standardized, you\u2019re left writing compatibility layers if you want things to work across platforms. In particular, networking and threading are problem areas. Lisp libraries are scant. This is a well known problem in the Lisp community. The standard, basically valid, response is \u201cJump in and help us write some more libraries.\u201d (Kudos to Kenny Tilton for driving this line hard. He\u2019s right, but there\u2019s also a bit more to it than that.) The library problems are compounded by the balkanization of feature set. In some cases you can find something that sort of works, but it may work on another implementation, not yours. If it has any dependencies on the problem areas of threads and networking, you\u2019ve got a long road of tweaking ahead to get it to work. This time is better spent getting on with your real task. Edi Weitz (yet again) wins the Lisp Superhero award for creating the best libraries out there, bar none. Seriously, if anybody aspires to create libraries that are well-used, go take some cues from Edi. His code is always high quality, his APIs and implementations are always complete, he\u2019s absolutely responsive to problem reports, he provides great documentation, and he often tests his code across multiple implementations, trying to make them as cross-platform as possible. In short, you couldn\u2019t expect better service and support from a commercial vendor, and Edi releases his code as open source. Okay, all that said, what\u2019s the constructive response here? My suggestions are: First, stop grumbling and suggesting workarounds to the Reddit folks. They did the Lisp community a great service by documenting their experiences. Rather than harrassing them, sit down and talk with them to get more info. Next, focus on the foundational balkanization problems. In my opinion, the biggest issues with Lisp are the lack of standard (defacto or otherwise) networking and threading APIs. If those were in place, it would be a lot easier to get libraries that worked all over the place. Would this solve everything? No, but it would go a long way and would enable lots of other innovation on top of that foundation instead of having everybody spending time creating compatibility libraries and generally re-inventing the wheel. Work on getting a good cross-platform, open source Lisp implementation with a liberal license. Like I said previously, I really like CLISP , and I use it for developing on Windows, but the license is not suitable for all code since it all-but-forces your code to be released as GPL. I\u2019d really love to see SBCL or CMUCL ported to Windows, with the full set of functionality. I\u2019d also love to see SBCL\u2019s baseline functionality present on all platforms (currently threading only works on Linux, for instance, not BSD). By the way, this is no knock on any other Lisp implementation. I just happen to use SBCL on Linux and think it rocks. If OpenMCL can make the jump off of Mac onto other platforms, that would be great. Or maybe GCL can do the job. I don\u2019t know the exact route, but the fact is the lack of a baseline functionality across all platforms is hurting us. Can I do all the above? Nope. I\u2019ve tried grokking the internals of SBCL and I\u2019m only qualified to kibitz around the margins. I stand in awe of guys like William, Christophe, Dan, Nikodemus, Gabor, Juho, Alexey, and many others (Update: I added to this list twice already because I felt so bad for leaving out somebody\u2019s name\u2013sorry William and Nikodemus. If you\u2019re a significant SBCL contributor\u2013or even and insignificant one\u2013believe me when I say I stand in awe of you too ;-). I do try to help out SBCL by reducing the friction for newbies to get started with Lisp, compiling the RPM binaries that are available on SourceForge and maintaining the FedoraLisp.org Yum repository. That said, I\u2019m going to start working on the networking API issues. You\u2019ll see a document from me posted over the next couple of weeks. It\u2019s been in process for a few months, but I finally got a hankering to finish it with this Reddit bru-ha-ha. If you\u2019re interested in networking APIs and have a desire to help in such an endeavor, please drop me a line (dave at findinglisp). I\u2019d love to spread the work around. If somebody else wants to grab the threading stuff by the throat that would be great. Above all, stay productive. Use the Reddit feedback to motivate you to make Lisp better. Whatever you do, stop suggesting workarounds to the Reddit guys or making them feel bad for the choices they made. They seem like smart guys, so let\u2019s assume that they did what they did knowing all the options (they do have Paul Graham on the board, so I\u2019m guessing that they talked about this before they did the rewrite). They have moved on and our job is to make any such workaround unnecessary for the next crew that tries to use Lisp. And before anybody says it, yes I know that the commercial Lisp vendors have solved some of these problems. I have discussed before some of my thoughts about the various license terms the vendors use . It isn\u2019t that those terms are bad in the abstract, they just don\u2019t allow those implementations to solve the problem I\u2019m interested in. In short, I think it would help drive Lisp adoption if a common, cross-platform, free, open source version existed, in the same way that GCC has helped democratize programming in C. The next-best alternative would be a $99 \u201cTurbo Lisp\u201d environment ala Borland\u2019s language products in the 1980s/1990s. Perhaps the Lispworks guys will offer such a thing (hint, hint ;-).","title":"[Copy] Finding Lisp: Reddit and Lisp psychosis"},{"location":"blog/2011/2011-05-24-jeeconf-kiev/","text":"JEEConf - Kyiv, 2011 - Report | conference | java | I had a chance to attend the first and totally dedicated to Java conference in Kyiv (May 21, 2011). It was a great. The atmosphere was amazing. The organization was good, really good. The most noticeable thing was that almost every presentation was based on real problem, no metaphysical stuff :-) There were three stages, that\u2019s why I couldn\u2019t attend every talk and that\u2019s a pity. Here is a short overview of all attended talks: 1. \u201cWhat Riding the Camel can do to make integration easier for you\u201d by Claus Ibsen. I had an idea what the Camel is, but this presentation gave me the \u201cbig picture\u201d. Actually, the speaker has been well prepared and known the presentation technique very well. He showed all major aspects of Camel framework and explain its purpose. He\u2019s shown the several Camel\u2019s DSLs: XML-based, Java and Scala. That short code snippets were really cool and clean. So, I\u2019ve added into my todo list \u201cthe Camel DSL digging\u201d ;-) 2. \u201cThe Scala and GridGain usage for the distributed systems with high efficiency\u201d by Renat Ahmerov. This talk and master-class inspired me to start Scala learning. I\u2019ve never seen the cloud computing in action. But during that master-class was created real application for distributed computing. And the code base was so tiny and clean, so my heart falling in love to this language. The last time I had had the similar feeling when I\u2019ve seen the Rails in action. 3. The problem diagnosing and GC tuning in HotSpot Java VM by Vladimir Ivanov. This talk was like a JVM magic :-). The speaker discovered the darkest GC places I\u2019ve never known about. He\u2019s opened my eyes. I even couldn\u2019t expect that GC tuning is so interesting. 4. To be in ten times faster kudos Groovy by Evgeny Kompaniec This guy has shown the real case study: - Why he choose the Groovy as Java substitution. - Java code snippets vs Groovy (functionally equal) code snippets. IMHO, the most interesting and inspiration part of talk. - Groovy knowledge sharing via pros & cons. 5. Unitils for Java testing by Mikalai Alimenkou To be honest I\u2019ve never heard about this tools. This presentation was full of practical samples and advices like a cookbook. Great talk, the presenter had a good mood and used the right jokes in the right places, he was very impressive. I wish every speaker had such good presentation technique. 6. How Graph Databases can make you a super star by Andr\u00e9s Taylor This talk was dedicated to the \u201cbeauty\u201d of Neo4j graph DB. It was just a start point for this DB. 7. Vaadin , Rich Web Apps in Server-Side Java without Plug-ins or JavaScript by Joonas Lehtinen I\u2019ve been following this framework about a year. And I must admit that it was really impressed to see CEO of company behind Vaadin. The talk was short and pragmatic. The major areas of Vaadin were highlighted. Then, the presenter has shown the Vaadin in action and it was cool. The community and the whole framework evolved in one year. As for me it was great to see the real person who developed so interesting stuff. It was my 6th IT conference. I must admit it was the best, no doubts. I hope to attend the Java conference next year again.","title":"JEEConf - Kyiv, 2011 - Report"},{"location":"blog/2011/2011-05-24-jeeconf-kiev/#jeeconf-kyiv-2011-report","text":"| conference | java | I had a chance to attend the first and totally dedicated to Java conference in Kyiv (May 21, 2011). It was a great. The atmosphere was amazing. The organization was good, really good. The most noticeable thing was that almost every presentation was based on real problem, no metaphysical stuff :-) There were three stages, that\u2019s why I couldn\u2019t attend every talk and that\u2019s a pity. Here is a short overview of all attended talks: 1. \u201cWhat Riding the Camel can do to make integration easier for you\u201d by Claus Ibsen. I had an idea what the Camel is, but this presentation gave me the \u201cbig picture\u201d. Actually, the speaker has been well prepared and known the presentation technique very well. He showed all major aspects of Camel framework and explain its purpose. He\u2019s shown the several Camel\u2019s DSLs: XML-based, Java and Scala. That short code snippets were really cool and clean. So, I\u2019ve added into my todo list \u201cthe Camel DSL digging\u201d ;-) 2. \u201cThe Scala and GridGain usage for the distributed systems with high efficiency\u201d by Renat Ahmerov. This talk and master-class inspired me to start Scala learning. I\u2019ve never seen the cloud computing in action. But during that master-class was created real application for distributed computing. And the code base was so tiny and clean, so my heart falling in love to this language. The last time I had had the similar feeling when I\u2019ve seen the Rails in action. 3. The problem diagnosing and GC tuning in HotSpot Java VM by Vladimir Ivanov. This talk was like a JVM magic :-). The speaker discovered the darkest GC places I\u2019ve never known about. He\u2019s opened my eyes. I even couldn\u2019t expect that GC tuning is so interesting. 4. To be in ten times faster kudos Groovy by Evgeny Kompaniec This guy has shown the real case study: - Why he choose the Groovy as Java substitution. - Java code snippets vs Groovy (functionally equal) code snippets. IMHO, the most interesting and inspiration part of talk. - Groovy knowledge sharing via pros & cons. 5. Unitils for Java testing by Mikalai Alimenkou To be honest I\u2019ve never heard about this tools. This presentation was full of practical samples and advices like a cookbook. Great talk, the presenter had a good mood and used the right jokes in the right places, he was very impressive. I wish every speaker had such good presentation technique. 6. How Graph Databases can make you a super star by Andr\u00e9s Taylor This talk was dedicated to the \u201cbeauty\u201d of Neo4j graph DB. It was just a start point for this DB. 7. Vaadin , Rich Web Apps in Server-Side Java without Plug-ins or JavaScript by Joonas Lehtinen I\u2019ve been following this framework about a year. And I must admit that it was really impressed to see CEO of company behind Vaadin. The talk was short and pragmatic. The major areas of Vaadin were highlighted. Then, the presenter has shown the Vaadin in action and it was cool. The community and the whole framework evolved in one year. As for me it was great to see the real person who developed so interesting stuff. It was my 6th IT conference. I must admit it was the best, no doubts. I hope to attend the Java conference next year again.","title":"JEEConf - Kyiv, 2011 - Report"},{"location":"blog/2011/2011-06-20-override-java-annotation-issue/","text":"@Override Java Annotation Issue | java | Let\u2019s create one simple interface and class which implements this interface: public interface IOverride { void doSomething (); } public class Overridden implements IOverride { @Override public void doSomething () { } } And compile this stuff on JDK v.1.5: # javac -d classes src\\*.java src \\O verridden.java:2: method does not override a method from its superclass @Override ^ 1 error Let\u2019s try to do the same on JDK v.1.6 - And, You\u2019ve got no compilation error. Between Java 5 and Java 6 changes to the specification of @Override have been made. In Java 6 it is possible to add the @Override annotation to methods that implement methods of an interface which is not allowed in Java 5. ( http://dertompson.com/2008/01/25/override-specification-changes-in-java-6/ ) Also, I\u2019ve found very interesting discussion on StackOverflow: http://stackoverflow.com/questions/94361/when-do-you-use-javas-override-annotation-and-why : Q: What are the best practices for using Java\u2019s @Override annotation and why? It seems like it would be overkill to mark every single overridden method with the @Override annotation. Are there certain programming situations that call for using the @Override and others that should never use the @Override? A: Use it every time you override a method for two benefits. Do it so that you can take advantage of the compiler checking to make sure you actually are overriding a method when you think you are. This way, if you make a common mistake of misspelling a method name or not correctly matching the parameters, you will be warned that you method does not actually override as you think it does. Secondly, it makes your code easier to understand because it is more obvious when methods are overwritten. Additionally, in Java 1.6 you can use it to mark when a method implements an interface for the same benefits. I think it would be better to have a separate annotation (like @Implements), but it\u2019s better than nothing.","title":"`@Override` Java Annotation Issue"},{"location":"blog/2011/2011-06-20-override-java-annotation-issue/#override-java-annotation-issue","text":"| java | Let\u2019s create one simple interface and class which implements this interface: public interface IOverride { void doSomething (); } public class Overridden implements IOverride { @Override public void doSomething () { } } And compile this stuff on JDK v.1.5: # javac -d classes src\\*.java src \\O verridden.java:2: method does not override a method from its superclass @Override ^ 1 error Let\u2019s try to do the same on JDK v.1.6 - And, You\u2019ve got no compilation error. Between Java 5 and Java 6 changes to the specification of @Override have been made. In Java 6 it is possible to add the @Override annotation to methods that implement methods of an interface which is not allowed in Java 5. ( http://dertompson.com/2008/01/25/override-specification-changes-in-java-6/ ) Also, I\u2019ve found very interesting discussion on StackOverflow: http://stackoverflow.com/questions/94361/when-do-you-use-javas-override-annotation-and-why : Q: What are the best practices for using Java\u2019s @Override annotation and why? It seems like it would be overkill to mark every single overridden method with the @Override annotation. Are there certain programming situations that call for using the @Override and others that should never use the @Override? A: Use it every time you override a method for two benefits. Do it so that you can take advantage of the compiler checking to make sure you actually are overriding a method when you think you are. This way, if you make a common mistake of misspelling a method name or not correctly matching the parameters, you will be warned that you method does not actually override as you think it does. Secondly, it makes your code easier to understand because it is more obvious when methods are overwritten. Additionally, in Java 1.6 you can use it to mark when a method implements an interface for the same benefits. I think it would be better to have a separate annotation (like @Implements), but it\u2019s better than nothing.","title":"@Override Java Annotation Issue"},{"location":"blog/2011/2011-06-28-how-to-add-jars-at-runtime/","text":"How to Add Jars at Runtime? | java | Suppose you have the next project structure: Here is the source code: package org.halyph.one ; import java.io.File ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; import java.net.MalformedURLException ; import java.net.URL ; import java.net.URLClassLoader ; import java.security.CodeSource ; import org.halyph.three.MyClassThree ; import org.halyph.two.MyClassTwo ; public class DynamicClassLoader { public static void main ( String [] args ) throws Exception { System . out . println ( \"DynamicClassLoader.main()\" ); MyClassTwo myClassTwo = new MyClassTwo (); MyClassThree myClassThree = new MyClassThree (); myClassTwo . printMessage (); myClassThree . printMessage (); } } package org.halyph.two ; public class MyClassTwo { public void printMessage () { System . out . println ( \"MyClassTwo.printMessage()\" ); } } package org.halyph.three ; public class MyClassThree { public void printMessage () { System . out . println ( \"MyClassThree.printMessage()\" ); } } And each of these classes are packed in separate jar: org.halyph.one.DynamicClassLoader - dynone.jar org.halyph.two.MyClassTwo - dyntwo.jar org.halyph.three.MyClassThree - dynthree.jar To run this application you should put all these jars on classpath, E.g. the application output # java -cp dynone.jar;dyntwo.jar;dynthree.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () MyClassTwo.printMessage () MyClassThree.printMessage () But there are some cases when dyntwo.jar and dynthree.jar jars location can be known during runtime only. And we have to run our application in the next way: # java -cp dynone.jar org.halyph.one.DynamicClassLoader Of cause, you\u2019ll get the next (or similar) error: # java -cp dynone.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () Exception in thread \"main\" java.lang.NoClassDefFoundError: org/halyph/two/MyClassTwo at org.halyph.one.DynamicClassLoader.main ( DynamicClassLoader.java:28 ) Caused by: java.lang.ClassNotFoundException: org.halyph.two.MyClassTwo at java.net.URLClassLoader $1 .run ( Unknown Source ) at java.security.AccessController.doPrivileged ( Native Method ) at java.net.URLClassLoader.findClass ( Unknown Source ) at java.lang.ClassLoader.loadClass ( Unknown Source ) at sun.misc.Launcher $AppClassLoader .loadClass ( Unknown Source ) at java.lang.ClassLoader.loadClass ( Unknown Source ) ... 1 more So, how can we solve this problem? Here is the patched org.halyph.one.DynamicClassLoader : package org.halyph.one ; import java.io.File ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; import java.net.MalformedURLException ; import java.net.URL ; import java.net.URLClassLoader ; import java.security.CodeSource ; import org.halyph.three.MyClassThree ; import org.halyph.two.MyClassTwo ; public class DynamicClassLoader { public static void main ( String [] args ) throws Exception { System . out . println ( \"DynamicClassLoader.main()\" ); String [] jars = new String [] { \"dyntwo.jar\" , \"dynthree.jar\" }; addJarsToClasspath ( getRootFolder (), jars ); MyClassTwo myClassTwo = new MyClassTwo (); MyClassThree myClassThree = new MyClassThree (); myClassTwo . printMessage (); myClassThree . printMessage (); } public static void addJarsToClasspath ( String rootFolder , String [] jarNames ) throws SecurityException , NoSuchMethodException , MalformedURLException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { Method addURL = URLClassLoader . class . getDeclaredMethod ( \"addURL\" , new Class [] { URL . class }); addURL . setAccessible ( true ); // you're telling the JVM to override the // default visibility File [] files = new File [ jarNames . length ] ; int i = 0 ; for ( String jarName : jarNames ) { files [ i ++] = new File ( rootFolder + jarName ); } // returning the jars to add ClassLoader cl = ClassLoader . getSystemClassLoader (); for ( i = 0 ; i < files . length ; i ++ ) { URL url = files [ i ] . toURL (); addURL . invoke ( cl , new Object [] { url }); } } public static String getRootFolder () { String result = null ; try { String qualifiedClassName = DynamicClassLoader . class . getName (); Class qc = Class . forName ( qualifiedClassName ); CodeSource source = qc . getProtectionDomain (). getCodeSource (); if ( source != null ) { URL location = source . getLocation (); File file = new File ( location . toURI ()); result = file . getParent () + \"/\" ; } else { System . out . println ( qualifiedClassName + \" : \" + \"unknown source\" ); } } catch ( Exception e ) { System . err . println ( \"Unable to locate class on command line.\" ); e . printStackTrace (); } return result ; } } Here is the output of patched application: # java -cp dynone.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () MyClassTwo.printMessage () MyClassThree.printMessage () So, two additional methods were added to support this \u201cmagic\u201d: public static String getRootFolder() - this method simply identifies the folder where dynone.jar (on behalf of org.halyph.one.DynamicClassLoader class) is located. Because for this demo we put all application-related jars in one folder public static void addJarsToClasspath(String rootFolder, String[] jarNames) - and here the \u201cmagic\u201d happen. Based on this post on www.velocityreviews.com forums : There is a well-known hack for dynamically extending the class path. It generally works, and we use it in production releases of our software. It uses reflection, plus the knowledge that the default ClassLoader is a URLClassLoader. \u2026 As I said, this is a hack, undocumented, and subject to change at any time. Indeed, there\u2019s no guarantee that extant JREs use a URLClassLoader as a default class loader. Moreover, it only works if your program doesn\u2019t have a security manager (it probably doesn\u2019t), or your code is trusted. \u2026 We\u2019ve never seen problems with it, although our software is used on a plethora of different boxes and OSs. It works for me and I hope it will be useful for you as well. Happy hacking!","title":"How to Add Jars at Runtime?"},{"location":"blog/2011/2011-06-28-how-to-add-jars-at-runtime/#how-to-add-jars-at-runtime","text":"| java | Suppose you have the next project structure: Here is the source code: package org.halyph.one ; import java.io.File ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; import java.net.MalformedURLException ; import java.net.URL ; import java.net.URLClassLoader ; import java.security.CodeSource ; import org.halyph.three.MyClassThree ; import org.halyph.two.MyClassTwo ; public class DynamicClassLoader { public static void main ( String [] args ) throws Exception { System . out . println ( \"DynamicClassLoader.main()\" ); MyClassTwo myClassTwo = new MyClassTwo (); MyClassThree myClassThree = new MyClassThree (); myClassTwo . printMessage (); myClassThree . printMessage (); } } package org.halyph.two ; public class MyClassTwo { public void printMessage () { System . out . println ( \"MyClassTwo.printMessage()\" ); } } package org.halyph.three ; public class MyClassThree { public void printMessage () { System . out . println ( \"MyClassThree.printMessage()\" ); } } And each of these classes are packed in separate jar: org.halyph.one.DynamicClassLoader - dynone.jar org.halyph.two.MyClassTwo - dyntwo.jar org.halyph.three.MyClassThree - dynthree.jar To run this application you should put all these jars on classpath, E.g. the application output # java -cp dynone.jar;dyntwo.jar;dynthree.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () MyClassTwo.printMessage () MyClassThree.printMessage () But there are some cases when dyntwo.jar and dynthree.jar jars location can be known during runtime only. And we have to run our application in the next way: # java -cp dynone.jar org.halyph.one.DynamicClassLoader Of cause, you\u2019ll get the next (or similar) error: # java -cp dynone.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () Exception in thread \"main\" java.lang.NoClassDefFoundError: org/halyph/two/MyClassTwo at org.halyph.one.DynamicClassLoader.main ( DynamicClassLoader.java:28 ) Caused by: java.lang.ClassNotFoundException: org.halyph.two.MyClassTwo at java.net.URLClassLoader $1 .run ( Unknown Source ) at java.security.AccessController.doPrivileged ( Native Method ) at java.net.URLClassLoader.findClass ( Unknown Source ) at java.lang.ClassLoader.loadClass ( Unknown Source ) at sun.misc.Launcher $AppClassLoader .loadClass ( Unknown Source ) at java.lang.ClassLoader.loadClass ( Unknown Source ) ... 1 more So, how can we solve this problem? Here is the patched org.halyph.one.DynamicClassLoader : package org.halyph.one ; import java.io.File ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; import java.net.MalformedURLException ; import java.net.URL ; import java.net.URLClassLoader ; import java.security.CodeSource ; import org.halyph.three.MyClassThree ; import org.halyph.two.MyClassTwo ; public class DynamicClassLoader { public static void main ( String [] args ) throws Exception { System . out . println ( \"DynamicClassLoader.main()\" ); String [] jars = new String [] { \"dyntwo.jar\" , \"dynthree.jar\" }; addJarsToClasspath ( getRootFolder (), jars ); MyClassTwo myClassTwo = new MyClassTwo (); MyClassThree myClassThree = new MyClassThree (); myClassTwo . printMessage (); myClassThree . printMessage (); } public static void addJarsToClasspath ( String rootFolder , String [] jarNames ) throws SecurityException , NoSuchMethodException , MalformedURLException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { Method addURL = URLClassLoader . class . getDeclaredMethod ( \"addURL\" , new Class [] { URL . class }); addURL . setAccessible ( true ); // you're telling the JVM to override the // default visibility File [] files = new File [ jarNames . length ] ; int i = 0 ; for ( String jarName : jarNames ) { files [ i ++] = new File ( rootFolder + jarName ); } // returning the jars to add ClassLoader cl = ClassLoader . getSystemClassLoader (); for ( i = 0 ; i < files . length ; i ++ ) { URL url = files [ i ] . toURL (); addURL . invoke ( cl , new Object [] { url }); } } public static String getRootFolder () { String result = null ; try { String qualifiedClassName = DynamicClassLoader . class . getName (); Class qc = Class . forName ( qualifiedClassName ); CodeSource source = qc . getProtectionDomain (). getCodeSource (); if ( source != null ) { URL location = source . getLocation (); File file = new File ( location . toURI ()); result = file . getParent () + \"/\" ; } else { System . out . println ( qualifiedClassName + \" : \" + \"unknown source\" ); } } catch ( Exception e ) { System . err . println ( \"Unable to locate class on command line.\" ); e . printStackTrace (); } return result ; } } Here is the output of patched application: # java -cp dynone.jar org.halyph.one.DynamicClassLoader DynamicClassLoader.main () MyClassTwo.printMessage () MyClassThree.printMessage () So, two additional methods were added to support this \u201cmagic\u201d: public static String getRootFolder() - this method simply identifies the folder where dynone.jar (on behalf of org.halyph.one.DynamicClassLoader class) is located. Because for this demo we put all application-related jars in one folder public static void addJarsToClasspath(String rootFolder, String[] jarNames) - and here the \u201cmagic\u201d happen. Based on this post on www.velocityreviews.com forums : There is a well-known hack for dynamically extending the class path. It generally works, and we use it in production releases of our software. It uses reflection, plus the knowledge that the default ClassLoader is a URLClassLoader. \u2026 As I said, this is a hack, undocumented, and subject to change at any time. Indeed, there\u2019s no guarantee that extant JREs use a URLClassLoader as a default class loader. Moreover, it only works if your program doesn\u2019t have a security manager (it probably doesn\u2019t), or your code is trusted. \u2026 We\u2019ve never seen problems with it, although our software is used on a plethora of different boxes and OSs. It works for me and I hope it will be useful for you as well. Happy hacking!","title":"How to Add Jars at Runtime?"},{"location":"blog/2011/2011-07-20-how-to-disable-systemout/","text":"How to disable System.out? | java | I have a legacy code base with tons of System.out.println() . Actually, I don\u2019t need this in production, but during development it\u2019s cool enough to have. So, I\u2019ve decided to disable System.out : package org.halyph ; import java.io.OutputStream ; import java.io.PrintStream ; public class DisableMain { public static void main ( String \\ [ \\ ] args ) { PrintStream printStreamOriginal = System . out ; boolean DEBUG = true ; if ( ! DEBUG ) { System . setOut ( new PrintStream ( new OutputStream () { public void close () {} public void flush () {} public void write ( byte [] b ) {} public void write ( byte [] b , int off , int len ) {} public void write ( int b ) { } })); } long a = System . currentTimeMillis (); for ( int i = 0 ; i < 1000000 ; i ++ ) { System . out . println ( \"Hello\" ); } long b = System . currentTimeMillis () - a ; System . setOut ( printStreamOriginal ); System . out . println ( b ); } } So, plain looped println required ~10 seconds on my laptop, and only ~1 second with null output stream.","title":"How to disable System.out?"},{"location":"blog/2011/2011-07-20-how-to-disable-systemout/#how-to-disable-systemout","text":"| java | I have a legacy code base with tons of System.out.println() . Actually, I don\u2019t need this in production, but during development it\u2019s cool enough to have. So, I\u2019ve decided to disable System.out : package org.halyph ; import java.io.OutputStream ; import java.io.PrintStream ; public class DisableMain { public static void main ( String \\ [ \\ ] args ) { PrintStream printStreamOriginal = System . out ; boolean DEBUG = true ; if ( ! DEBUG ) { System . setOut ( new PrintStream ( new OutputStream () { public void close () {} public void flush () {} public void write ( byte [] b ) {} public void write ( byte [] b , int off , int len ) {} public void write ( int b ) { } })); } long a = System . currentTimeMillis (); for ( int i = 0 ; i < 1000000 ; i ++ ) { System . out . println ( \"Hello\" ); } long b = System . currentTimeMillis () - a ; System . setOut ( printStreamOriginal ); System . out . println ( b ); } } So, plain looped println required ~10 seconds on my laptop, and only ~1 second with null output stream.","title":"How to disable System.out?"},{"location":"blog/2011/2011-08-15-recently-ive-read-amazing-blog-post/","text":"My reflection on \u201cProgramming Achievements: How to Level Up as a Developer\u201d | learning | language | Recently, I\u2019ve read an amazing blog post \u201cProgramming Achievements: How to Level Up as a Developer\u201d . Also, it worth to read comments to this post, they are really interesting, subjective and personal. But, in any case you\u2019ll get something to think about. How to measure your own professional achievements, different ways for improvements and some start point for planning all these stuff. The author suggests to use GitHub Gist as a natural way of improvements to keep them tracking. So, I\u2019ve just forked his gist and performed several initial changes (see https://gist.github.com/1141765 ):","title":"My reflection on \"Programming Achievements: How to Level Up as a Developer\""},{"location":"blog/2011/2011-08-15-recently-ive-read-amazing-blog-post/#my-reflection-on-programming-achievements-how-to-level-up-as-a-developer","text":"| learning | language | Recently, I\u2019ve read an amazing blog post \u201cProgramming Achievements: How to Level Up as a Developer\u201d . Also, it worth to read comments to this post, they are really interesting, subjective and personal. But, in any case you\u2019ll get something to think about. How to measure your own professional achievements, different ways for improvements and some start point for planning all these stuff. The author suggests to use GitHub Gist as a natural way of improvements to keep them tracking. So, I\u2019ve just forked his gist and performed several initial changes (see https://gist.github.com/1141765 ):","title":"My reflection on \"Programming Achievements: How to Level Up as a Developer\""},{"location":"blog/2011/2011-08-31-java-code-quality-tools-overview/","text":"Java Code Quality Tools - Overview | java | Recently, I had a chance to present the subject at the local IT community meetup. Here is the basic presentation: Java Code Quality Tools and more meaningful mind map: But, I think I need to cover this subject more deeply. This blog post should be something like start point for further investigation in this direction. CodePro Analytix It\u2019s a great tool (Eclipse plugin) for improving software quality. It has the next key features: Code Analysis, JUnit Test Generation, JUnit Test Editor, Similar Code Analysis, Metrics, Code Coverage and Dependency Analysis. PMD It scans Java source code and looks for potential problems: Possible bugs, Dead code, Suboptimal code, Overcomplicated expressions and Duplicate code. FindBugs It looks for bugs in Java programs. It can detect a variety of common coding mistakes, including thread synchronization problems, misuse of API methods, etc. Cobertura It\u2019s a free Java tool that calculates the percentage of code accessed by tests. It can be used to identify which parts of your Java program are lacking test coverage. It is based on jcoverage. Emma It is a fast Java code coverage tool based on bytecode instrumentation. It differs from the existing tools by enabling coverage profiling on large scale enterprise software projects with simultaneous emphasis on fast individual development. Checkstyle It is a development tool to help programmers write Java code that adheres to a coding standard. JBoss Tattletale JBoss Tattletale is a tool that can help you get an overview of the project you are working on or a product that you depend on. The tool will recursive scan a directory for JAR files and generate linked and formatted HTML reports. UCDetector UCDetector (Unecessary Code Detector) is a Open Source eclipse PlugIn Tool to find unecessary (dead) java code. It also tries to make code final, protected or private. UCDetector also finds cyclic dependencies between classes. Sonar Sonar is a continuous quality control tool for Java applications. Its basic purpose in life is to join your existing continuous integration tools to place all your development projects under quality control. XRadar The XRadar is an open extensible code report tool that produces HTML/SVG reports of the systems current state and the development over time. Uses DependencyFinder, JDepend, PMD, PMD-CPD, JavaNCSS, Cobertura, Checkstyle, XSource, JUnit, Java2HTML, ant and maven. QALab QALab consolidates data from Checkstyle, PMD, FindBugs and Simian and displays it in one consolidated view. QALab keeps a track of the changes over time, thereby allowing you to see trends over time. You can tell weather the number of violations has increased or decreased - on a per file basis, or for the entire project. It also plots charts of this data. QALab plugs in to maven or ant. Clirr Clirr is a tool that checks Java libraries for binary and source compatibility with older releases. Basically you give it two sets of jar files and Clirr dumps out a list of changes in the public api. The Clirr Ant task can be configured to break the build if it detects incompatible api changes. In a continuous integration process Clirr can automatically prevent accidental introduction of binary or source compatibility problems. JDiff JDiff is a Javadoc doclet which generates an HTML report of all the packages, classes, constructors, methods, and fields which have been removed, added or changed in any way, including their documentation, when two APIs are compared. This is very useful for describing exactly what has changed between two releases of a product. Only the API (Application Programming Interface) of each version is compared. It does not compare what the source code does when executed. JLint It checks your Java code and find bugs, inconsistencies and synchronization problems by doing data flow analysis and building the lock graph. JDepend JDepend traverses Java class file directories and generates design quality metrics for each Java package. JDepend allows you to automatically measure the quality of a design in terms of its extensibility, reusability, and maintainability to effectively manage and control package dependencies. cloc cloc counts blank lines, comment lines, and physical lines of source code in many programming languages. Dependometer Dependometer performs a static analysis of physical dependencies within a software system. Dependometer validates dependencies against the logical architecture structuring the system into classes, packages, subsystems, vertical slices and layers and detects cycles between these structural elements. Furthermore, it calculates a number of quality metrics on the different abstraction layers and reports any violations against the configured thresholds. Hammurapi Hammurapi is an open source code inspection tool. Its release comes with more than 100 inspectors which inspect different aspects of code: Compliance with EJB specification, threading issues, coding standards, and much more. JavaNCSS JavaNCSS is a simple command line utility which measures two standard source code metrics for the Java programming language. The metrics are collected globally, for each class and/or for each function. DCD DCD finds dead code in your Java applications. Classycle Classycle\u2019s Analyser analyses the static class and package dependencies in Java applications or libraries. It is especially helpful for finding cyclic dependencies between classes or packages. Classycle is similar to JDepend which does also a dependency analysis but only on the package level. ckjm The program ckjm calculates Chidamber and Kemerer object-oriented metrics by processing the bytecode of compiled Java files. The program calculates for each class the following six metrics proposed by Chidamber and Kemerer. Jameleon Jameleon is an automated testing framework that can be easily used by technical and non-technical users alike. One of the main concepts behind Jameleon is to create a group of keywords or tags that represent different screens of an application. All of the logic required to automate each particular screen can be defined in Java and mapped to these keywords. The keywords can then be organized with different data sets to form test scripts without requiring an in-depth knowledge of how the application works. The test scripts are then used to automate testing and to generate manual test case documentation. DoctorJ DoctorJ analyzes Java code, in the following functional areas: documentation verification, statistics generation and syntax analysis. Macker Macker is a build-time architectural rule checking utility for Java developers. It\u2019s meant to model the architectural ideals programmers always dream up for their projects, and then break \u2013 it helps keep code clean and consistent. You can tailor a rules file to suit a specific project\u2019s structure, or write some general \u201cgood practice\u201d rules for your code. Macker doesn\u2019t try to shove anybody else\u2019s rules down your throat; it\u2019s flexible, and writing a rules file is part of the development process for each unique project. Squale Squale is a qualimetry platform that allows to analyze multi-language software applications in order to give a sharp and comprehensive picture of their quality: High level factors for top-managers and Practical indicators for development teams. SourceMonitor The freeware program SourceMonitor lets you see inside your software source code to find out how much code you have and to identify the relative complexity of your modules. For example, you can use SourceMonitor to identify the code that is most likely to contain defects and thus warrants formal review. Panopticon The Panopticode project provides a set of open source tools for gathering, correlating, and displaying code metrics. Eclipse Metrics plugin Provide metrics calculation and dependency analyzer plugin for the Eclipse platform. Measure various metrics with average and standard deviation and detect cycles in package and type dependencies and graph them. 1. QJ-Pro QJ-Pro is a comprehensive software inspection tool targeted towards the software developer. Developers can automatically inspect their Java source code and improve their Java programming skills as they write their programs. QJ-Pro provides descriptive Java patterns explaining error prone code constructs and providing solutions for it. 1. Byecycle Byecycle is an auto-arranging dependency analysis plugin for Eclipse. Its goal is to make you feel sick when you see bad code and to make you feel happy when you see good code. 1. Coqua Coqua measures 5 distinct Java code quality metrics, providing an overview and history for the management, and down-to-the-code, detailed views for the developer. Metrics can be defined per team. Ideal for mid- to large-sized and/or offshore projects. 1. Dependency Finder Extracts dependencies and OO metrics from Java class files produced by most Java compilers. 1. Jalopy Jalopy is an easily configurable source code formatter that can detect, and fix, a number of code convention flaws that might appear in Java code. Jalopy is more of a code fixer than a code checker. Jalopy plug-ins are present for most IDEs and, in most cases, they gel quite seamlessly with the IDE. 1. JarAnalyzer JarAnalyzer is a dependency management tool for .jar files. JarAnalyzer will analyze all .jar in a given directory and identify the dependencies between each. Output formats include xml, with a stylesheet included to transform it to html, and GraphViz DOT, allowing you to produce a visual component diagram showing the relationships between .jar files. The xml output includes important design metrics such as Afferent and Efferent coupling, Abstractness, Instability, and Distance. There is also an Ant task available that allows you to include JarAnalyzer as part of your build script. 1. Condenser Condenser is a tool for finding and removing duplicated Java code. Unlike tools that only locate duplicated code, the aim of Condenser is to also automatically remove duplicated code where it is safe to do so. 1. Relief Relief provides a new look on Java projects. Relying on our ability to deal with real objects by examining their shape, size or relative place in space it gives a \u201cphysical\u201d view on java packages, types and fields and their relationships, making them easier to handle. Lets discuss quickly how we interprete physical properties and how it can help us to grasp project characteristics. 1. JCSC JCSC is a powerful tool to check source code against a highly definable coding standard and potential bad code. The standard covers naming conventions for class, interfaces, fields, parameter, \u2026 . Also the structural layout of the type (class/interface) can be defined. Like where to place fields, either before or after the methods and in which order. The order can be defined through the visibility or by type (instance, class, constant). The same is applicable for methods. Each of those rules is highly customizable. Readability is enhanced by defining where to put white spaces in the code and when to use braces. The existence of correct JavaDoc can be enforced and various levels. Apart from that, it finds weaknesses in the the code \u2013 potential bugs \u2013 like empty catch/finally block, switch without default, throwing of type \u2018Exception\u2019, slow code. 1. Spoon Spoon is a Java program processor that fully supports Java 5. It provides a complete and fine-grained Java metamodel where any program element (classes, methods, fields, statements, expressions\u2026) can be accessed both for reading and modification. Spoon can be used on validation purpose, to ensure that your programs respect some programming conventions or guidelines, or for program transformation, by using a pure-Java template engine. 1. Lint4j Lint4j (\u201cLint for Java\u201d) is a static Java source and byte code analyzer that detects locking and threading issues, performance and scalability problems, and checks complex contracts such as Java serialization by performing type, data flow, and lock graph analysis. 1. Crap4j Crap4j is a Java implementation of the CRAP (Change Risk Analysis and Predictions) software metric \u2013 a mildly offensive metric name to help protect you from truly offensive code. 1. PathFinder Java PathFinder (JPF) is a system to verify executable Java bytecode programs. In its basic form, it is a Java Virtual Machine (JVM) that is used as an explicit state software model checker, systematically exploring all potential execution paths of a program to find violations of properties like deadlocks or unhandled exceptions. Unlike traditional debuggers, JPF reports the entire execution path that leads to a defect. JPF is especially well-suited to finding hard-to-test concurrency defects in multithreaded program 1. Soot Soot can be used as a stand alone tool to optimize or inspect class files, as well as a framework to develop optimizations or transformations on Java bytecode. 1. ESC/Java2 The Extended Static Checker for Java version 2 (ESC/Java2) is a programming tool that attempts to find common run-time errors in JML-annotated Java programs by static analysis of the program code and its formal annotations. Users can control the amount and kinds of checking that ESC/Java2 performs by annotating their programs with specially formatted comments called pragmas. 1. CODERU CODERU is a java code quality tool to enforce good design in respect to package dependencies. The CODERU-rules rely on reserved package names and the allowed dependency rules between them expressed in a general way. * * * This list includes open sourced and free tools. I intentionally have excluded commercial tools. I\u2019m sure there are much more tools. In case your know some of them which isn\u2019t listed here please add comment to this post.","title":"Java Code Quality Tools - Overview"},{"location":"blog/2011/2011-08-31-java-code-quality-tools-overview/#java-code-quality-tools-overview","text":"| java | Recently, I had a chance to present the subject at the local IT community meetup. Here is the basic presentation: Java Code Quality Tools and more meaningful mind map: But, I think I need to cover this subject more deeply. This blog post should be something like start point for further investigation in this direction. CodePro Analytix It\u2019s a great tool (Eclipse plugin) for improving software quality. It has the next key features: Code Analysis, JUnit Test Generation, JUnit Test Editor, Similar Code Analysis, Metrics, Code Coverage and Dependency Analysis. PMD It scans Java source code and looks for potential problems: Possible bugs, Dead code, Suboptimal code, Overcomplicated expressions and Duplicate code. FindBugs It looks for bugs in Java programs. It can detect a variety of common coding mistakes, including thread synchronization problems, misuse of API methods, etc. Cobertura It\u2019s a free Java tool that calculates the percentage of code accessed by tests. It can be used to identify which parts of your Java program are lacking test coverage. It is based on jcoverage. Emma It is a fast Java code coverage tool based on bytecode instrumentation. It differs from the existing tools by enabling coverage profiling on large scale enterprise software projects with simultaneous emphasis on fast individual development. Checkstyle It is a development tool to help programmers write Java code that adheres to a coding standard. JBoss Tattletale JBoss Tattletale is a tool that can help you get an overview of the project you are working on or a product that you depend on. The tool will recursive scan a directory for JAR files and generate linked and formatted HTML reports. UCDetector UCDetector (Unecessary Code Detector) is a Open Source eclipse PlugIn Tool to find unecessary (dead) java code. It also tries to make code final, protected or private. UCDetector also finds cyclic dependencies between classes. Sonar Sonar is a continuous quality control tool for Java applications. Its basic purpose in life is to join your existing continuous integration tools to place all your development projects under quality control. XRadar The XRadar is an open extensible code report tool that produces HTML/SVG reports of the systems current state and the development over time. Uses DependencyFinder, JDepend, PMD, PMD-CPD, JavaNCSS, Cobertura, Checkstyle, XSource, JUnit, Java2HTML, ant and maven. QALab QALab consolidates data from Checkstyle, PMD, FindBugs and Simian and displays it in one consolidated view. QALab keeps a track of the changes over time, thereby allowing you to see trends over time. You can tell weather the number of violations has increased or decreased - on a per file basis, or for the entire project. It also plots charts of this data. QALab plugs in to maven or ant. Clirr Clirr is a tool that checks Java libraries for binary and source compatibility with older releases. Basically you give it two sets of jar files and Clirr dumps out a list of changes in the public api. The Clirr Ant task can be configured to break the build if it detects incompatible api changes. In a continuous integration process Clirr can automatically prevent accidental introduction of binary or source compatibility problems. JDiff JDiff is a Javadoc doclet which generates an HTML report of all the packages, classes, constructors, methods, and fields which have been removed, added or changed in any way, including their documentation, when two APIs are compared. This is very useful for describing exactly what has changed between two releases of a product. Only the API (Application Programming Interface) of each version is compared. It does not compare what the source code does when executed. JLint It checks your Java code and find bugs, inconsistencies and synchronization problems by doing data flow analysis and building the lock graph. JDepend JDepend traverses Java class file directories and generates design quality metrics for each Java package. JDepend allows you to automatically measure the quality of a design in terms of its extensibility, reusability, and maintainability to effectively manage and control package dependencies. cloc cloc counts blank lines, comment lines, and physical lines of source code in many programming languages. Dependometer Dependometer performs a static analysis of physical dependencies within a software system. Dependometer validates dependencies against the logical architecture structuring the system into classes, packages, subsystems, vertical slices and layers and detects cycles between these structural elements. Furthermore, it calculates a number of quality metrics on the different abstraction layers and reports any violations against the configured thresholds. Hammurapi Hammurapi is an open source code inspection tool. Its release comes with more than 100 inspectors which inspect different aspects of code: Compliance with EJB specification, threading issues, coding standards, and much more. JavaNCSS JavaNCSS is a simple command line utility which measures two standard source code metrics for the Java programming language. The metrics are collected globally, for each class and/or for each function. DCD DCD finds dead code in your Java applications. Classycle Classycle\u2019s Analyser analyses the static class and package dependencies in Java applications or libraries. It is especially helpful for finding cyclic dependencies between classes or packages. Classycle is similar to JDepend which does also a dependency analysis but only on the package level. ckjm The program ckjm calculates Chidamber and Kemerer object-oriented metrics by processing the bytecode of compiled Java files. The program calculates for each class the following six metrics proposed by Chidamber and Kemerer. Jameleon Jameleon is an automated testing framework that can be easily used by technical and non-technical users alike. One of the main concepts behind Jameleon is to create a group of keywords or tags that represent different screens of an application. All of the logic required to automate each particular screen can be defined in Java and mapped to these keywords. The keywords can then be organized with different data sets to form test scripts without requiring an in-depth knowledge of how the application works. The test scripts are then used to automate testing and to generate manual test case documentation. DoctorJ DoctorJ analyzes Java code, in the following functional areas: documentation verification, statistics generation and syntax analysis. Macker Macker is a build-time architectural rule checking utility for Java developers. It\u2019s meant to model the architectural ideals programmers always dream up for their projects, and then break \u2013 it helps keep code clean and consistent. You can tailor a rules file to suit a specific project\u2019s structure, or write some general \u201cgood practice\u201d rules for your code. Macker doesn\u2019t try to shove anybody else\u2019s rules down your throat; it\u2019s flexible, and writing a rules file is part of the development process for each unique project. Squale Squale is a qualimetry platform that allows to analyze multi-language software applications in order to give a sharp and comprehensive picture of their quality: High level factors for top-managers and Practical indicators for development teams. SourceMonitor The freeware program SourceMonitor lets you see inside your software source code to find out how much code you have and to identify the relative complexity of your modules. For example, you can use SourceMonitor to identify the code that is most likely to contain defects and thus warrants formal review. Panopticon The Panopticode project provides a set of open source tools for gathering, correlating, and displaying code metrics. Eclipse Metrics plugin Provide metrics calculation and dependency analyzer plugin for the Eclipse platform. Measure various metrics with average and standard deviation and detect cycles in package and type dependencies and graph them. 1. QJ-Pro QJ-Pro is a comprehensive software inspection tool targeted towards the software developer. Developers can automatically inspect their Java source code and improve their Java programming skills as they write their programs. QJ-Pro provides descriptive Java patterns explaining error prone code constructs and providing solutions for it. 1. Byecycle Byecycle is an auto-arranging dependency analysis plugin for Eclipse. Its goal is to make you feel sick when you see bad code and to make you feel happy when you see good code. 1. Coqua Coqua measures 5 distinct Java code quality metrics, providing an overview and history for the management, and down-to-the-code, detailed views for the developer. Metrics can be defined per team. Ideal for mid- to large-sized and/or offshore projects. 1. Dependency Finder Extracts dependencies and OO metrics from Java class files produced by most Java compilers. 1. Jalopy Jalopy is an easily configurable source code formatter that can detect, and fix, a number of code convention flaws that might appear in Java code. Jalopy is more of a code fixer than a code checker. Jalopy plug-ins are present for most IDEs and, in most cases, they gel quite seamlessly with the IDE. 1. JarAnalyzer JarAnalyzer is a dependency management tool for .jar files. JarAnalyzer will analyze all .jar in a given directory and identify the dependencies between each. Output formats include xml, with a stylesheet included to transform it to html, and GraphViz DOT, allowing you to produce a visual component diagram showing the relationships between .jar files. The xml output includes important design metrics such as Afferent and Efferent coupling, Abstractness, Instability, and Distance. There is also an Ant task available that allows you to include JarAnalyzer as part of your build script. 1. Condenser Condenser is a tool for finding and removing duplicated Java code. Unlike tools that only locate duplicated code, the aim of Condenser is to also automatically remove duplicated code where it is safe to do so. 1. Relief Relief provides a new look on Java projects. Relying on our ability to deal with real objects by examining their shape, size or relative place in space it gives a \u201cphysical\u201d view on java packages, types and fields and their relationships, making them easier to handle. Lets discuss quickly how we interprete physical properties and how it can help us to grasp project characteristics. 1. JCSC JCSC is a powerful tool to check source code against a highly definable coding standard and potential bad code. The standard covers naming conventions for class, interfaces, fields, parameter, \u2026 . Also the structural layout of the type (class/interface) can be defined. Like where to place fields, either before or after the methods and in which order. The order can be defined through the visibility or by type (instance, class, constant). The same is applicable for methods. Each of those rules is highly customizable. Readability is enhanced by defining where to put white spaces in the code and when to use braces. The existence of correct JavaDoc can be enforced and various levels. Apart from that, it finds weaknesses in the the code \u2013 potential bugs \u2013 like empty catch/finally block, switch without default, throwing of type \u2018Exception\u2019, slow code. 1. Spoon Spoon is a Java program processor that fully supports Java 5. It provides a complete and fine-grained Java metamodel where any program element (classes, methods, fields, statements, expressions\u2026) can be accessed both for reading and modification. Spoon can be used on validation purpose, to ensure that your programs respect some programming conventions or guidelines, or for program transformation, by using a pure-Java template engine. 1. Lint4j Lint4j (\u201cLint for Java\u201d) is a static Java source and byte code analyzer that detects locking and threading issues, performance and scalability problems, and checks complex contracts such as Java serialization by performing type, data flow, and lock graph analysis. 1. Crap4j Crap4j is a Java implementation of the CRAP (Change Risk Analysis and Predictions) software metric \u2013 a mildly offensive metric name to help protect you from truly offensive code. 1. PathFinder Java PathFinder (JPF) is a system to verify executable Java bytecode programs. In its basic form, it is a Java Virtual Machine (JVM) that is used as an explicit state software model checker, systematically exploring all potential execution paths of a program to find violations of properties like deadlocks or unhandled exceptions. Unlike traditional debuggers, JPF reports the entire execution path that leads to a defect. JPF is especially well-suited to finding hard-to-test concurrency defects in multithreaded program 1. Soot Soot can be used as a stand alone tool to optimize or inspect class files, as well as a framework to develop optimizations or transformations on Java bytecode. 1. ESC/Java2 The Extended Static Checker for Java version 2 (ESC/Java2) is a programming tool that attempts to find common run-time errors in JML-annotated Java programs by static analysis of the program code and its formal annotations. Users can control the amount and kinds of checking that ESC/Java2 performs by annotating their programs with specially formatted comments called pragmas. 1. CODERU CODERU is a java code quality tool to enforce good design in respect to package dependencies. The CODERU-rules rely on reserved package names and the allowed dependency rules between them expressed in a general way. * * * This list includes open sourced and free tools. I intentionally have excluded commercial tools. I\u2019m sure there are much more tools. In case your know some of them which isn\u2019t listed here please add comment to this post.","title":"Java Code Quality Tools - Overview"},{"location":"blog/2011/2011-10-10-overview-optimistic-vs-pessimistic/","text":"Overview: Optimistic vs. Pessimistic Locking | general | Data Concurrency is a real problem in multi-user environment. How can we manage the data consistence when several users try to modify the same record(s) at the same time? This is a very interesting subject. Mostly, it\u2019s compromise. We can\u2019t easily pick one approach and forget about another. This subject was quite nice discussed in Martin\u2019s Fowler book: \u201cPatterns of Enterprise Application Architecture\u201d And, you can find here the short Martin\u2019s overview: Pessimistic Offline Lock and Optimistic Offline Lock . JBoss community documentation has nice quotes about the subject: The disadvantage of pessimistic locking is that a resource is locked from the time it is first accessed in a transaction until the transaction is finished, making it inaccessible to other transactions during that time. If most transactions simply look at the resource and never change it, an exclusive lock may be overkill as it may cause lock contention, and optimistic locking may be a better approach. With pessimistic locking, locks are applied in a fail-safe way. In the banking application example, an account is locked as soon as it is accessed in a transaction. Attempts to use the account in other transactions while it is locked will either result in the other process being delayed until the account lock is released, or that the process transaction will be rolled back. The lock exists until the transaction has either been committed or rolled back. With optimistic locking , a resource is not actually locked when it is first is accessed by a transaction. Instead, the state of the resource at the time when it would have been locked with the pessimistic locking approach is saved. Other transactions are able to concurrently access to the resource and the possibility of conflicting changes is possible. At commit time, when the resource is about to be updated in persistent storage, the state of the resource is read from storage again and compared to the state that was saved when the resource was first accessed in the transaction. If the two states differ, a conflicting update was made, and the transaction will be rolled back. The most popular example of optimistic locking is SVN commit operation.","title":"Overview: Optimistic vs. Pessimistic Locking"},{"location":"blog/2011/2011-10-10-overview-optimistic-vs-pessimistic/#overview-optimistic-vs-pessimistic-locking","text":"| general | Data Concurrency is a real problem in multi-user environment. How can we manage the data consistence when several users try to modify the same record(s) at the same time? This is a very interesting subject. Mostly, it\u2019s compromise. We can\u2019t easily pick one approach and forget about another. This subject was quite nice discussed in Martin\u2019s Fowler book: \u201cPatterns of Enterprise Application Architecture\u201d And, you can find here the short Martin\u2019s overview: Pessimistic Offline Lock and Optimistic Offline Lock . JBoss community documentation has nice quotes about the subject: The disadvantage of pessimistic locking is that a resource is locked from the time it is first accessed in a transaction until the transaction is finished, making it inaccessible to other transactions during that time. If most transactions simply look at the resource and never change it, an exclusive lock may be overkill as it may cause lock contention, and optimistic locking may be a better approach. With pessimistic locking, locks are applied in a fail-safe way. In the banking application example, an account is locked as soon as it is accessed in a transaction. Attempts to use the account in other transactions while it is locked will either result in the other process being delayed until the account lock is released, or that the process transaction will be rolled back. The lock exists until the transaction has either been committed or rolled back. With optimistic locking , a resource is not actually locked when it is first is accessed by a transaction. Instead, the state of the resource at the time when it would have been locked with the pessimistic locking approach is saved. Other transactions are able to concurrently access to the resource and the possibility of conflicting changes is possible. At commit time, when the resource is about to be updated in persistent storage, the state of the resource is read from storage again and compared to the state that was saved when the resource was first accessed in the transaction. If the two states differ, a conflicting update was made, and the transaction will be rolled back. The most popular example of optimistic locking is SVN commit operation.","title":"Overview: Optimistic vs. Pessimistic Locking"},{"location":"blog/2011/2011-10-21-java-reflection-invoke-constructor/","text":"Java Reflection: Invoke Constructor Issue | java | Let\u2019s imagine we have the next classes: package test.clazz ; public class First { private FirstArg arg ; public FirstArg getArg () { return arg ; } public First ( FirstArg arg ) { this . arg = arg ; System . out . println ( \"First() - constructor\" ); } } public class FirstArg { public FirstArg () { System . out . println ( \"FirstArg.FirstArg()\" ); } } public class SecondArg extends FirstArg { public SecondArg () { System . out . println ( \"SecondArg.SecondArg()\" ); } } And we can easily instantiate First class with FirstArg or SecondArg : First f1Old = new First(new FirstArg()); First f2Old = new First(new SecondArg()); System.out.println(f1Old.getArg().getClass()); System.out.println(f2Old.getArg().getClass()); We\u2019ll get the next output: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() First() - constructor class test.clazz.FirstArg class test.clazz.SecondArg Now, we have to instantiate First class with FirstArg or SecondArg , but via Java reflection: public final class ConstructionUtil { public static Object instantiateClassOld ( String className , Object iView ) { try { Class iViewClass = iView . getClass (); Class clazz = Class . forName ( className ); Constructor ctor = clazz . getDeclaredConstructor ( iViewClass ); ctor . setAccessible ( true ); return ctor . newInstance ( iView ); } catch ( Exception e ) { e . printStackTrace (); return null ; } } } Check reflection based class instantiation: Object cls = instantiateClassOld ( \"test.clazz.First\" , new FirstArg ()); First f1 = ( First ) cls ; Object cls2 = instantiateClassOld ( \"test.clazz.First\" , new SecondArg ()); First f2 = ( First ) cls2 ; System . out . println ( f1 . getArg (). getClass ()); System . out . println ( f2 . getArg (). getClass ()); And we\u2019ll get Exception: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() java.lang.NoSuchMethodException: test.clazz.First.(test.clazz.SecondArg) at java.lang.Class.getConstructor0(Unknown Source) at java.lang.Class.getDeclaredConstructor(Unknown Source) at test.ConstructionUtil.instantiateClassOld(ConstructionUtil.java:63) at test.ConstructionUtil.main(ConstructionUtil.java:22) ``` Reflection mechanism can't find `First(SecondArg arg)` constructor. We have to patch `instantiateClassOld` method like this: ```java public final class ConstructionUtil { public static Object instantiateClassNew(String className, Object iView) { try { Class iViewClass = iView.getClass(); Class clazz = Class.forName(className); try { Constructor ctor = clazz.getDeclaredConstructor(iViewClass); ctor.setAccessible(true); return ctor.newInstance(iView); } catch (NoSuchMethodException e) { Constructor[] constructors = clazz.getDeclaredConstructors(); for (Constructor c : constructors) { if (c.getParameterTypes().length > 1) continue; Class type = c.getParameterTypes()[0]; if (type.isAssignableFrom(iView.getClass())) { return c.newInstance(type.cast(iView)); } } } return null; } catch (Exception e) { e.printStackTrace(); return null; } } } And run it again: Object cls = instantiateClassNew ( \"test.clazz.First\" , new FirstArg ()); First f1 = ( First ) cls ; Object cls2 = instantiateClassNew ( \"test.clazz.First\" , new SecondArg ()); First f2 = ( First ) cls2 ; System . out . println ( f1 . getArg (). getClass ()); System . out . println ( f2 . getArg (). getClass ()); Output: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() First() - constructor class test.clazz.FirstArg class test.clazz.SecondArg We should be careful when invoke methods via reflection with polymorphic arguments.","title":"Java Reflection: Invoke Constructor Issue"},{"location":"blog/2011/2011-10-21-java-reflection-invoke-constructor/#java-reflection-invoke-constructor-issue","text":"| java | Let\u2019s imagine we have the next classes: package test.clazz ; public class First { private FirstArg arg ; public FirstArg getArg () { return arg ; } public First ( FirstArg arg ) { this . arg = arg ; System . out . println ( \"First() - constructor\" ); } } public class FirstArg { public FirstArg () { System . out . println ( \"FirstArg.FirstArg()\" ); } } public class SecondArg extends FirstArg { public SecondArg () { System . out . println ( \"SecondArg.SecondArg()\" ); } } And we can easily instantiate First class with FirstArg or SecondArg : First f1Old = new First(new FirstArg()); First f2Old = new First(new SecondArg()); System.out.println(f1Old.getArg().getClass()); System.out.println(f2Old.getArg().getClass()); We\u2019ll get the next output: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() First() - constructor class test.clazz.FirstArg class test.clazz.SecondArg Now, we have to instantiate First class with FirstArg or SecondArg , but via Java reflection: public final class ConstructionUtil { public static Object instantiateClassOld ( String className , Object iView ) { try { Class iViewClass = iView . getClass (); Class clazz = Class . forName ( className ); Constructor ctor = clazz . getDeclaredConstructor ( iViewClass ); ctor . setAccessible ( true ); return ctor . newInstance ( iView ); } catch ( Exception e ) { e . printStackTrace (); return null ; } } } Check reflection based class instantiation: Object cls = instantiateClassOld ( \"test.clazz.First\" , new FirstArg ()); First f1 = ( First ) cls ; Object cls2 = instantiateClassOld ( \"test.clazz.First\" , new SecondArg ()); First f2 = ( First ) cls2 ; System . out . println ( f1 . getArg (). getClass ()); System . out . println ( f2 . getArg (). getClass ()); And we\u2019ll get Exception: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() java.lang.NoSuchMethodException: test.clazz.First.(test.clazz.SecondArg) at java.lang.Class.getConstructor0(Unknown Source) at java.lang.Class.getDeclaredConstructor(Unknown Source) at test.ConstructionUtil.instantiateClassOld(ConstructionUtil.java:63) at test.ConstructionUtil.main(ConstructionUtil.java:22) ``` Reflection mechanism can't find `First(SecondArg arg)` constructor. We have to patch `instantiateClassOld` method like this: ```java public final class ConstructionUtil { public static Object instantiateClassNew(String className, Object iView) { try { Class iViewClass = iView.getClass(); Class clazz = Class.forName(className); try { Constructor ctor = clazz.getDeclaredConstructor(iViewClass); ctor.setAccessible(true); return ctor.newInstance(iView); } catch (NoSuchMethodException e) { Constructor[] constructors = clazz.getDeclaredConstructors(); for (Constructor c : constructors) { if (c.getParameterTypes().length > 1) continue; Class type = c.getParameterTypes()[0]; if (type.isAssignableFrom(iView.getClass())) { return c.newInstance(type.cast(iView)); } } } return null; } catch (Exception e) { e.printStackTrace(); return null; } } } And run it again: Object cls = instantiateClassNew ( \"test.clazz.First\" , new FirstArg ()); First f1 = ( First ) cls ; Object cls2 = instantiateClassNew ( \"test.clazz.First\" , new SecondArg ()); First f2 = ( First ) cls2 ; System . out . println ( f1 . getArg (). getClass ()); System . out . println ( f2 . getArg (). getClass ()); Output: FirstArg.FirstArg() First() - constructor FirstArg.FirstArg() SecondArg.SecondArg() First() - constructor class test.clazz.FirstArg class test.clazz.SecondArg We should be careful when invoke methods via reflection with polymorphic arguments.","title":"Java Reflection: Invoke Constructor Issue"},{"location":"blog/2011/2011-11-03-how-to-run-ant-script-from-batcmd/","text":"How to run ANT script from .BAT/.CMD? | tool | java | Imagine you need to call ANT script from BAT/CMD file. Ant script: <project default= \"bat-test\" name= \"Blog\" > <target description= \"check ant run\" name= \"bat-test\" > <echo message= \"Message from ANT\" > </echo> </target> </project> And here is BAT file: @echo off echo BAT - Before Ant run ant -f build.xml echo BAT - After Ant run Unfortunately, when you run this BAT you get the next output: BAT - Before Ant run Buildfile: D:\\\\Projects\\\\blog\\\\build.xml bat-test: [echo] Message from ANT BUILD SUCCESSFUL Total time: 0 seconds So, where is the \"BAT - After Ant run\" echo message? The problem is that Ant on Windows executed via ant.bat file and based on this we\u2019re calling one BAT file from another. We have to use CALL command to solve this issues, here is official note from CALL help: Calls one batch program from another. CALL [drive:][path]filename [batch-parameters] batch-parameters Specifies any command-line information required by the batch program. And, here is the update BAT file: @echo off echo BAT - Before Ant run call ant -f build.xml echo BAT - After Ant run","title":"How to run ANT script from .BAT/.CMD?"},{"location":"blog/2011/2011-11-03-how-to-run-ant-script-from-batcmd/#how-to-run-ant-script-from-batcmd","text":"| tool | java | Imagine you need to call ANT script from BAT/CMD file. Ant script: <project default= \"bat-test\" name= \"Blog\" > <target description= \"check ant run\" name= \"bat-test\" > <echo message= \"Message from ANT\" > </echo> </target> </project> And here is BAT file: @echo off echo BAT - Before Ant run ant -f build.xml echo BAT - After Ant run Unfortunately, when you run this BAT you get the next output: BAT - Before Ant run Buildfile: D:\\\\Projects\\\\blog\\\\build.xml bat-test: [echo] Message from ANT BUILD SUCCESSFUL Total time: 0 seconds So, where is the \"BAT - After Ant run\" echo message? The problem is that Ant on Windows executed via ant.bat file and based on this we\u2019re calling one BAT file from another. We have to use CALL command to solve this issues, here is official note from CALL help: Calls one batch program from another. CALL [drive:][path]filename [batch-parameters] batch-parameters Specifies any command-line information required by the batch program. And, here is the update BAT file: @echo off echo BAT - Before Ant run call ant -f build.xml echo BAT - After Ant run","title":"How to run ANT script from .BAT/.CMD?"},{"location":"blog/2011/2011-12-25-how-to-decide-which-technology-hype-is/","text":"How to decide which technology hype is worth personal investments? | thoughts | I think it\u2019s very important question. Because studding some new technology requires some time (and maybe money). So, I\u2019ve created for myself brief checklist which helps me to make this non-easy decision. How long it will take for me to master the major approaches of selected technology? Can I reuse the gained knowledge during my daily development work? How long it will take to train/coach my team mates to use this technology? How big is the market for the selected technology? How big is the local community for the selected technology? How easily can we hire new developers with appropriate knowledge in selected technology? Will it be profitable to have the knowledge in that technology? I know that some items are very boring and mercantile, but it\u2019s life, real life. And we should align our priorities appropriately.","title":"How to decide which technology hype is worth personal investments?"},{"location":"blog/2011/2011-12-25-how-to-decide-which-technology-hype-is/#how-to-decide-which-technology-hype-is-worth-personal-investments","text":"| thoughts | I think it\u2019s very important question. Because studding some new technology requires some time (and maybe money). So, I\u2019ve created for myself brief checklist which helps me to make this non-easy decision. How long it will take for me to master the major approaches of selected technology? Can I reuse the gained knowledge during my daily development work? How long it will take to train/coach my team mates to use this technology? How big is the market for the selected technology? How big is the local community for the selected technology? How easily can we hire new developers with appropriate knowledge in selected technology? Will it be profitable to have the knowledge in that technology? I know that some items are very boring and mercantile, but it\u2019s life, real life. And we should align our priorities appropriately.","title":"How to decide which technology hype is worth personal investments?"},{"location":"blog/2012/2012-01-21-quick-way-to-join-array-of-string/","text":"Quick way to join array of String in Java without third party libraries | java | As you probably know Java SE doesn\u2019t include such useful method as String join. Even old good JavaScript has this nice method: JavaScript join() Method Definition and Usage The join() method joins all elements of an array into a string, and returns the string. The elements will be separated by a specified separator. The default separator is comma (,). How to implement the similar stuff in Java SE? The easiest what came to my head is: /** * Join String arguments into one String separated by comma (\",\") * @param args input Strings * @return joined String */ public static String join ( String ... args ) { if ( args . length < 1 ) throw new IllegalArgumentException (); String joined = Arrays . toString ( args ); String result = joined . substring ( 1 , joined . length () - 1 ); return result ; } Usage is pretty trivial: import static com.blogspot.HalypHUtils.join ; ... String joinedString = join ( \"Banana\" , \"Orange\" , \"Apple\" , \"Mango\" );","title":"Quick way to join array of String in Java without third party libraries"},{"location":"blog/2012/2012-01-21-quick-way-to-join-array-of-string/#quick-way-to-join-array-of-string-in-java-without-third-party-libraries","text":"| java | As you probably know Java SE doesn\u2019t include such useful method as String join. Even old good JavaScript has this nice method: JavaScript join() Method Definition and Usage The join() method joins all elements of an array into a string, and returns the string. The elements will be separated by a specified separator. The default separator is comma (,). How to implement the similar stuff in Java SE? The easiest what came to my head is: /** * Join String arguments into one String separated by comma (\",\") * @param args input Strings * @return joined String */ public static String join ( String ... args ) { if ( args . length < 1 ) throw new IllegalArgumentException (); String joined = Arrays . toString ( args ); String result = joined . substring ( 1 , joined . length () - 1 ); return result ; } Usage is pretty trivial: import static com.blogspot.HalypHUtils.join ; ... String joinedString = join ( \"Banana\" , \"Orange\" , \"Apple\" , \"Mango\" );","title":"Quick way to join array of String in Java without third party libraries"},{"location":"blog/2012/2012-02-13-uml-sketching-tools/","text":"UML Sketching Tools | uml | tool | diagram | UML drawing is painful in case your model should evolve very fast and you have to adjust it on the way. Such tool as Visio (and similar) is doing their job well till you don\u2019t need \u201caggressive\u201d redrawing ;-) Have you ever tried to draw \u201chuge\u201d sequence, activity diagrams in Visio? I\u2019ve \u201cstruggled\u201d with grouping, layouting, styling, etc. So, I have decided to concentrate more on modelling and switched to \u201ceasy-going\u201d UML tools also knowing as \u201cTextual UML tools\u201d. Here is the list of my favorite: PlantUML - very powerful tool. It supports very intuitive diagram language. Seven diagram types, nice styling. And very good documentation. UMLet - It\u2019s true sketching tool. Very very simple. And you shouldn\u2019t expect sexy UI ;-) BUT! It\u2019s so \u201cright tool for the job\u201d. You just have to try it. UMLGraph - It can be used to generate UML class and sequence diagrams. It has nice integration with javadocs tool. I think that this Allen Holub\u2019s UML Quick Reference (example based and very pragmatic) might be helpful.","title":"UML Sketching Tools"},{"location":"blog/2012/2012-02-13-uml-sketching-tools/#uml-sketching-tools","text":"| uml | tool | diagram | UML drawing is painful in case your model should evolve very fast and you have to adjust it on the way. Such tool as Visio (and similar) is doing their job well till you don\u2019t need \u201caggressive\u201d redrawing ;-) Have you ever tried to draw \u201chuge\u201d sequence, activity diagrams in Visio? I\u2019ve \u201cstruggled\u201d with grouping, layouting, styling, etc. So, I have decided to concentrate more on modelling and switched to \u201ceasy-going\u201d UML tools also knowing as \u201cTextual UML tools\u201d. Here is the list of my favorite: PlantUML - very powerful tool. It supports very intuitive diagram language. Seven diagram types, nice styling. And very good documentation. UMLet - It\u2019s true sketching tool. Very very simple. And you shouldn\u2019t expect sexy UI ;-) BUT! It\u2019s so \u201cright tool for the job\u201d. You just have to try it. UMLGraph - It can be used to generate UML class and sequence diagrams. It has nice integration with javadocs tool. I think that this Allen Holub\u2019s UML Quick Reference (example based and very pragmatic) might be helpful.","title":"UML Sketching Tools"},{"location":"blog/2012/2012-02-26-state-of-numerical-computation/","text":"State of numerical computation languages | computation | When I was a student I spent a huge amount of time doing difference numerical computation with MATLAB and Maple. I must say I was falling in love with MATLAB. This environment, language and visualization possibilities were amazing and very powerful. I simply couldn\u2019t choose another stuff. It gave me a chance fully concentrate on engineering problems I had been trying to solve. But now I must admit that MATLAB is very expensive software. And we should look around for other open-source mathematical computation environments. Today I\u2019m biased because I prefer to invest time in general purpose language then in specialized computation languages (like MATLAB, R). I\u2019ve found very interested comparison: Mathesaurus . Also, check these slides Math synonyms . Also, Hyperpolyglot provides nice comparison \u201cNumerical Analysis Software: Fortran, MATLAB, R, NumPy\u201d . Based on these two comparisons I\u2019ve selected several factors for choosing the \u201cright\u201d numerical environments: Commercial or open-source Visualization possibilities Language itself (MATLAB, Maple, R, etc.): computational specific or general purpose (Python, Clojure/ Incanter , etc. ) Integration with Fortran/C/C++ etc. GUI features","title":"State of numerical computation languages"},{"location":"blog/2012/2012-02-26-state-of-numerical-computation/#state-of-numerical-computation-languages","text":"| computation | When I was a student I spent a huge amount of time doing difference numerical computation with MATLAB and Maple. I must say I was falling in love with MATLAB. This environment, language and visualization possibilities were amazing and very powerful. I simply couldn\u2019t choose another stuff. It gave me a chance fully concentrate on engineering problems I had been trying to solve. But now I must admit that MATLAB is very expensive software. And we should look around for other open-source mathematical computation environments. Today I\u2019m biased because I prefer to invest time in general purpose language then in specialized computation languages (like MATLAB, R). I\u2019ve found very interested comparison: Mathesaurus . Also, check these slides Math synonyms . Also, Hyperpolyglot provides nice comparison \u201cNumerical Analysis Software: Fortran, MATLAB, R, NumPy\u201d . Based on these two comparisons I\u2019ve selected several factors for choosing the \u201cright\u201d numerical environments: Commercial or open-source Visualization possibilities Language itself (MATLAB, Maple, R, etc.): computational specific or general purpose (Python, Clojure/ Incanter , etc. ) Integration with Fortran/C/C++ etc. GUI features","title":"State of numerical computation languages"},{"location":"blog/2012/2012-03-27-why-you-should-join-user-group/","text":"Why you should join a user group? | general | Here I\u2019d like to highlight the most important benefits for me: Networking - ability to make social connections with developers from other companies Learning - it\u2019s the right place to learn something for free and improve you skills. Knowledge sharing - you shouldn\u2019t always take also you can give something to others. In our case it\u2019s your knowledge. Most people are very kind and really like to share own experience. Public Visibility - here you can promote yourself as passionate and well skilled developer Job Opportunities - you can find new contact which suggest a new job Find Expert - it\u2019s the right place to find the right people which might help you to solve some technical problems Become an Expert - it can happen Meet Nice People - just fact :) If you have other nice benefits please add in comments.","title":"Why you should join a user group?"},{"location":"blog/2012/2012-03-27-why-you-should-join-user-group/#why-you-should-join-a-user-group","text":"| general | Here I\u2019d like to highlight the most important benefits for me: Networking - ability to make social connections with developers from other companies Learning - it\u2019s the right place to learn something for free and improve you skills. Knowledge sharing - you shouldn\u2019t always take also you can give something to others. In our case it\u2019s your knowledge. Most people are very kind and really like to share own experience. Public Visibility - here you can promote yourself as passionate and well skilled developer Job Opportunities - you can find new contact which suggest a new job Find Expert - it\u2019s the right place to find the right people which might help you to solve some technical problems Become an Expert - it can happen Meet Nice People - just fact :) If you have other nice benefits please add in comments.","title":"Why you should join a user group?"},{"location":"blog/2012/2012-05-20-jeeconf-kiev/","text":"JEEConf - Kyiv, 2012 - Report | java | conference | This year we had the second JEEConf . The amount of stages was increased from three to four stages. I was really impressed about conference program \u201cnotebooks\u201d :-) it was well done. The amount of people was really huge more then 600. I think it\u2019s impressive number for the second conference. As usual I\u2019ve selected the most interest topics to watch/visit to: 1. Play with Play! by Anton Naumov The presenter briefly has shown the Play Framework v.1.2.x features and discussed the pros&cons. The most notably was that he stated the \u201cfails\u201d caused by this framework and how we can avoid similar stuff. The most loud message was \u201cuse Spring/MVC, Hibernate and Maven\u201d if you are experienced with them :-). And try to use Play for prototype projects. 2. Hibernate performance tuning by Sander Mak It\u2019s very interesting and pragmatic topic. Even more I can say this presentation was a bunch of receipts for Hibernate performance improvement. There were depicted very interesting nuances which will be definitely valuable in real life codding.I\u2019m looking forward for slides. 3. Methodology of performance optimization by Alexey Shipilyov and Sergey Kuksenko It was the most low-level topic on this conference. Guys shown the different ways to perform the subject. They review and in pair-speech way very complicated issues in performance optimization from conceptual point of view. I can\u2019t say that I will be able to reuse everything from this speech, but it\u2019s great start point for me. They are very proficient presenters. 4. Becoming a Professional Java Developer by Yakov Fain I must say \u201cThank you\u201d for this speech. It was cool. Yakov has highlighted the non-technical aspect of Professional (Java) Developer. Of course his advices and observation are based on own experience and might be biased for somebody. But it\u2019s honest and reasonable speech might open \u201csome\u201d boring minds. Also, Yakov recommended to read his free e-book \u201cEnterprise Software without the BS\u201d. I\u2019ve already downloaded it and I\u2019m planning to read it in nearest weeks. 5. Inject Injection by Yuriy Litvinenko It was like a case study report about involving DI Framework (in this case Google Guice) in legacy project. It was very interesting, because I believe it\u2019s challenging task. The presenter has highlighted the issues which his team faced with. I can say this experience might be valuable when somebody needs to decide the benefits and evaluate the risks of involving DI Framework in something \u201creally old\u201d. Well done. 6. Cloud Java platforms: what\u2019s inside and what\u2019s the difference by Ruslan Synytskyy It was a pleasure to see ukrainian who is one of the founders of Jelastic . Ruslan has reviewed different types of \u201c* as a Service\u201d: SaaS, PaaS and IaaS. The comparison criteria of PaaS\u2019s are very useful for further evaluation. 7. Why do I hate the Hibernate? by Mikalai Alimenkou It was pragmatic, based on real experience presentation with tons of Hibernate issues. It\u2019s very useful for anyone who\u2019s developing application with Hibernate. We must know the weaknesses of our tools. Mikalai has used very interesting approach to blame something/someone: \u201cnasty granny\u201d. You should review the slides to this presentation to understand what does it mean. I\u2019d like to say \u201cThank you\u201d JEEConf organizers team. You are doing very important work for Ukrainian Java Community.","title":"JEEConf - Kyiv, 2012 - Report"},{"location":"blog/2012/2012-05-20-jeeconf-kiev/#jeeconf-kyiv-2012-report","text":"| java | conference | This year we had the second JEEConf . The amount of stages was increased from three to four stages. I was really impressed about conference program \u201cnotebooks\u201d :-) it was well done. The amount of people was really huge more then 600. I think it\u2019s impressive number for the second conference. As usual I\u2019ve selected the most interest topics to watch/visit to: 1. Play with Play! by Anton Naumov The presenter briefly has shown the Play Framework v.1.2.x features and discussed the pros&cons. The most notably was that he stated the \u201cfails\u201d caused by this framework and how we can avoid similar stuff. The most loud message was \u201cuse Spring/MVC, Hibernate and Maven\u201d if you are experienced with them :-). And try to use Play for prototype projects. 2. Hibernate performance tuning by Sander Mak It\u2019s very interesting and pragmatic topic. Even more I can say this presentation was a bunch of receipts for Hibernate performance improvement. There were depicted very interesting nuances which will be definitely valuable in real life codding.I\u2019m looking forward for slides. 3. Methodology of performance optimization by Alexey Shipilyov and Sergey Kuksenko It was the most low-level topic on this conference. Guys shown the different ways to perform the subject. They review and in pair-speech way very complicated issues in performance optimization from conceptual point of view. I can\u2019t say that I will be able to reuse everything from this speech, but it\u2019s great start point for me. They are very proficient presenters. 4. Becoming a Professional Java Developer by Yakov Fain I must say \u201cThank you\u201d for this speech. It was cool. Yakov has highlighted the non-technical aspect of Professional (Java) Developer. Of course his advices and observation are based on own experience and might be biased for somebody. But it\u2019s honest and reasonable speech might open \u201csome\u201d boring minds. Also, Yakov recommended to read his free e-book \u201cEnterprise Software without the BS\u201d. I\u2019ve already downloaded it and I\u2019m planning to read it in nearest weeks. 5. Inject Injection by Yuriy Litvinenko It was like a case study report about involving DI Framework (in this case Google Guice) in legacy project. It was very interesting, because I believe it\u2019s challenging task. The presenter has highlighted the issues which his team faced with. I can say this experience might be valuable when somebody needs to decide the benefits and evaluate the risks of involving DI Framework in something \u201creally old\u201d. Well done. 6. Cloud Java platforms: what\u2019s inside and what\u2019s the difference by Ruslan Synytskyy It was a pleasure to see ukrainian who is one of the founders of Jelastic . Ruslan has reviewed different types of \u201c* as a Service\u201d: SaaS, PaaS and IaaS. The comparison criteria of PaaS\u2019s are very useful for further evaluation. 7. Why do I hate the Hibernate? by Mikalai Alimenkou It was pragmatic, based on real experience presentation with tons of Hibernate issues. It\u2019s very useful for anyone who\u2019s developing application with Hibernate. We must know the weaknesses of our tools. Mikalai has used very interesting approach to blame something/someone: \u201cnasty granny\u201d. You should review the slides to this presentation to understand what does it mean. I\u2019d like to say \u201cThank you\u201d JEEConf organizers team. You are doing very important work for Ukrainian Java Community.","title":"JEEConf - Kyiv, 2012 - Report"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/","text":"Maven Resource Filtering | maven | Using Maven profiles and resource filtering How do I add resources to my JAR? I assume that reader has a basic understanding of Maven resources. Simple resource filtering Let\u2019s generate the project: $ mvn archetype:generate -DgroupId = org.halyph -DartifactId = proptest -DarchetypeArtifactId = maven-archetype-quickstart -DinteractiveMode = false <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> </project> Now, we have an application property file with bunch of properties which must be filtered \\proptest\\src\\main\\resources\\application.properties : application.username=${jdbc.username} application.password=${jdbc.password} application.databaseName=${jdbc.databaseName} We have to add build/resources and properties section into pom.xml: <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <properties> <jdbc.username =\"\" > default_username </jdbc> <jdbc.password =\"\" > default_password </jdbc> <jdbc.databasename =\"\" > default_databaseName </jdbc> </properties> </project> Lets run maven resource filtering and check the resulted \\proptest\\target/classes/application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = default_username application.password = default_password application.databaseName = default_databaseName As you can see property values were successfully substituted. Resource filtering with external properties file We can extract Maven properties in external property file \\proptest_extfile\\src\\main\\filters\\mysql_filters.properties : jdbc.username=mysql_username jdbc.password=mysql_password jdbc.databaseName=mysql_databaseName also, we have to adjust pom.xml to work properly with external filters (added build/filters and removed properties): <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> </project> Let\u2019s check the resulted \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = mysql_username application.password = mysql_password application.databaseName = mysql_databaseName Mixed resource filtering with external/internal properties What happen if we have overlapped properties in pom.xml with external property file. Modified pom.xml: <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <properties> <jdbc.databasename =\"\" > default_databaseName </jdbc> </properties> </project> Now, check the resulted \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = mysql_username application.password = mysql_password application.databaseName = default_databaseName In this case Maven uses application.databaseName property from pom.xml Managing properties with properties-maven-plugin Please check the plugin home page for more details http://mojo.codehaus.org/properties-maven-plugin This plugin read external property and they behave like were declared in pom.xml . Modified pom.xml : <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupid> org.codehaus.mojo </groupid> <artifactid> properties-maven-plugin </artifactid> <version> 1.0-alpha-2 </version> <executions> <execution> <phase> initialize </phase> <goals> <goal> read-project-properties </goal> </goals> <configuration> <files> <file> src/main/filters/cust_mysql_filters.properties </file> </files> </configuration> </execution> </executions> </plugin> </plugins> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> </project> Also, we have to add new external property file just to verify the property overlapping issue: \\proptest_extfile\\src\\main\\filters\\cust_mysql_filters.properties : jdbc.username=cust_mysql_username jdbc.password=cust_mysql_password jdbc.databaseName=cust_mysql_databaseName Now, it\u2019s time to check the resulted file \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username=cust_mysql_username application.password=cust_mysql_password application.databaseName=cust_mysql_databaseName Have you noticed that we\u2019ve got properties values from cust_mysql_filters.properties a nd Maven hasn\u2019t applied properties from mysql_filters.properties file? So, as you can see we have several ways for managing/filtering properties with Maven. And, it\u2019s very convenient.","title":"Maven Resource Filtering"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/#maven-resource-filtering","text":"| maven | Using Maven profiles and resource filtering How do I add resources to my JAR? I assume that reader has a basic understanding of Maven resources.","title":"Maven Resource Filtering"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/#simple-resource-filtering","text":"Let\u2019s generate the project: $ mvn archetype:generate -DgroupId = org.halyph -DartifactId = proptest -DarchetypeArtifactId = maven-archetype-quickstart -DinteractiveMode = false <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> </project> Now, we have an application property file with bunch of properties which must be filtered \\proptest\\src\\main\\resources\\application.properties : application.username=${jdbc.username} application.password=${jdbc.password} application.databaseName=${jdbc.databaseName} We have to add build/resources and properties section into pom.xml: <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <properties> <jdbc.username =\"\" > default_username </jdbc> <jdbc.password =\"\" > default_password </jdbc> <jdbc.databasename =\"\" > default_databaseName </jdbc> </properties> </project> Lets run maven resource filtering and check the resulted \\proptest\\target/classes/application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = default_username application.password = default_password application.databaseName = default_databaseName As you can see property values were successfully substituted.","title":"Simple resource filtering"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/#resource-filtering-with-external-properties-file","text":"We can extract Maven properties in external property file \\proptest_extfile\\src\\main\\filters\\mysql_filters.properties : jdbc.username=mysql_username jdbc.password=mysql_password jdbc.databaseName=mysql_databaseName also, we have to adjust pom.xml to work properly with external filters (added build/filters and removed properties): <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> </project> Let\u2019s check the resulted \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = mysql_username application.password = mysql_password application.databaseName = mysql_databaseName","title":"Resource filtering with external properties file"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/#mixed-resource-filtering-with-externalinternal-properties","text":"What happen if we have overlapped properties in pom.xml with external property file. Modified pom.xml: <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> <properties> <jdbc.databasename =\"\" > default_databaseName </jdbc> </properties> </project> Now, check the resulted \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username = mysql_username application.password = mysql_password application.databaseName = default_databaseName In this case Maven uses application.databaseName property from pom.xml","title":"Mixed resource filtering with external/internal properties"},{"location":"blog/2012/2012-06-11-maven-resource-filtering/#managing-properties-with-properties-maven-plugin","text":"Please check the plugin home page for more details http://mojo.codehaus.org/properties-maven-plugin This plugin read external property and they behave like were declared in pom.xml . Modified pom.xml : <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> proptest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> proptest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <build> <plugins> <plugin> <groupid> org.codehaus.mojo </groupid> <artifactid> properties-maven-plugin </artifactid> <version> 1.0-alpha-2 </version> <executions> <execution> <phase> initialize </phase> <goals> <goal> read-project-properties </goal> </goals> <configuration> <files> <file> src/main/filters/cust_mysql_filters.properties </file> </files> </configuration> </execution> </executions> </plugin> </plugins> <filters> <filter> src/main/filters/mysql_filters.properties </filter> </filters> <resources> <resource> <directory> src/main/resources </directory> <filtering> true </filtering> </resource> </resources> </build> </project> Also, we have to add new external property file just to verify the property overlapping issue: \\proptest_extfile\\src\\main\\filters\\cust_mysql_filters.properties : jdbc.username=cust_mysql_username jdbc.password=cust_mysql_password jdbc.databaseName=cust_mysql_databaseName Now, it\u2019s time to check the resulted file \\proptest\\target\\classes\\application.properties file: $ mvn process-resources $ cat target/classes/application.properties application.username=cust_mysql_username application.password=cust_mysql_password application.databaseName=cust_mysql_databaseName Have you noticed that we\u2019ve got properties values from cust_mysql_filters.properties a nd Maven hasn\u2019t applied properties from mysql_filters.properties file? So, as you can see we have several ways for managing/filtering properties with Maven. And, it\u2019s very convenient.","title":"Managing properties with properties-maven-plugin"},{"location":"blog/2012/2012-06-12-how-to-improve-cmdexe-prompt/","text":"How to improve cmd.exe prompt | tool | terminal | I\u2019m sure that you have some trouble with \u201ctoo long command prompt in windows cmd.exe\u201d and it is annoying: Fortunately, it can be easily fixed with PROMPT command (see official help): \\> prompt /? PROMPT \\[text\\] text Specifies a new command prompt. Prompt can be made up of normal characters and the following special codes: $A & (Ampersand) $B | (pipe) $C ( (Left parenthesis) $D Current date $E Escape code (ASCII code 27) $F ) (Right parenthesis) $G > (greater-than sign) $H Backspace (erases previous character) $L < (less-than sign) $N Current drive $P Current drive and path $Q = (equal sign) $S (space) $T Current time $V Windows version number $\\_ Carriage return and linefeed $$ $ (dollar sign) I\u2019ve configured PROMPT User variable to apply my custom PROMPT setting: [$P]$_$$$S Now the previous console screen looks like this: As you can see the full current path is shown one line before the input line. Now, we have a plenty of place for typing what ever we need ;-)","title":"How to improve cmd.exe prompt"},{"location":"blog/2012/2012-06-12-how-to-improve-cmdexe-prompt/#how-to-improve-cmdexe-prompt","text":"| tool | terminal | I\u2019m sure that you have some trouble with \u201ctoo long command prompt in windows cmd.exe\u201d and it is annoying: Fortunately, it can be easily fixed with PROMPT command (see official help): \\> prompt /? PROMPT \\[text\\] text Specifies a new command prompt. Prompt can be made up of normal characters and the following special codes: $A & (Ampersand) $B | (pipe) $C ( (Left parenthesis) $D Current date $E Escape code (ASCII code 27) $F ) (Right parenthesis) $G > (greater-than sign) $H Backspace (erases previous character) $L < (less-than sign) $N Current drive $P Current drive and path $Q = (equal sign) $S (space) $T Current time $V Windows version number $\\_ Carriage return and linefeed $$ $ (dollar sign) I\u2019ve configured PROMPT User variable to apply my custom PROMPT setting: [$P]$_$$$S Now the previous console screen looks like this: As you can see the full current path is shown one line before the input line. Now, we have a plenty of place for typing what ever we need ;-)","title":"How to improve cmd.exe prompt"},{"location":"blog/2012/2012-06-27-maven-build-number-plugin-sample-usage/","text":"Maven Build Number Plugin - Sample Usage | maven | buildnumber-maven-plugin . This post is based on: http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html http://www.site.lalitbhatt.com/maven-build-number-plugin http://blog.peterlynch.ca/2009/11/buildnumber-maven-plugin-helpful.html http://apollo.ucalgary.ca/tlcprojectswiki/index.php/Public/Project_Versioning_-_Best_Practices#Build_Versioning We have some project and need to include into jar manifest file sequential build number which isn\u2019t based on VCS (SVN, Git, Mercurial, etc.) revision number. Let\u2019s create appropriate pom.xml file and implement small demo to verify the result. Generate maven project $ mvn archetype:generate -DgroupId = org.halyph -DartifactId = buildNoTest \\ -DarchetypeArtifactId = maven-archetype-quickstart \\ -DinteractiveMode = false Create the pom.xml <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> buildNoTest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> buildNoTest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <properties> <project .build.sourceencoding= \"\" > UTF-8 </project> </properties> <!-- If you have access to scm then you can place actual url's. Otherwise with <revisionOnScmFailure /> you can give some fake URLs as follows. --> <scm> <connection> scm:svn:http://none </connection> <developerconnection> scm:svn:https://none </developerconnection> <url> scm:svn:https://none </url> </scm> <build> <resources> <resource> <directory> src/main/resources </directory> </resource> <resource> <directory> src/main/filtered-resources </directory> <filtering> true </filtering> </resource> </resources> <plugins> <plugin> <groupid> org.codehaus.mojo </groupid> <artifactid> buildnumber-maven-plugin </artifactid> <version> 1.1 </version> <executions> <execution> <phase> generate-resources </phase> <goals> <goal> create </goal> </goals> </execution> </executions> <configuration> <!-- doCheck and doUpdate actually talk to repository if it's true, Check would check that there are no local changes. Update would update it --> <docheck> false </docheck> <doupdate> false </doupdate> <!-- This ensures that even if we are not connected to scm than also take the version from local .svn file --> <revisiononscmfailure> <!-- Generate sequence build number based on: build number and timestamp --> <format> Build: #{0} ({1,date}) </format> <items> <item> buildNumber\\d* </item> <item> timestamp </item> </items> </revisiononscmfailure></configuration> </plugin> <plugin> <groupid> org.apache.maven.plugins </groupid> <artifactid> maven-jar-plugin </artifactid> <version> 2.1 </version> <configuration> <archive> <!-- will put the entries into META-INF/MANIFEST.MF file --> <manifestentries> <implementation-version> ${project.version} </implementation-version> <implementation-build> ${buildNumber} </implementation-build> </manifestentries> </archive> </configuration> </plugin> </plugins> </build> </project> Create demo application to verify the results package org.halyph ; import java.io.IOException ; import java.util.ResourceBundle ; import java.util.jar.Attributes ; import java.util.jar.Manifest ; public class App { public static void main ( String [] args ) throws IOException { System . out . println ( \"Verify Resource bundle\" ); // Check filtered resources based on generated build number ResourceBundle bundle = ResourceBundle . getBundle ( \"build\" ); String msg = bundle . getString ( \"build.message\" ); System . out . println ( msg ); System . out . println ( \"\\nVerify Generated MANIFEST.MF Properties\" ); // Check Manifest file based on generated build number Manifest mf = new Manifest (); mf . read ( Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( \"META-INF/MANIFEST.MF\" )); Attributes atts = mf . getMainAttributes (); System . out . println ( \"Implementation-Versio: \" + atts . getValue ( \"Implementation-Version\" )); System . out . println ( \"Implementation-Build: \" + atts . getValue ( \"Implementation-Build\" )); } } Build application several time and Run $ mvn install $ mvn install $ mvn install $ java -cp target \\b uildNoTest-1.0-SNAPSHOT.jar org.halyph.App Verify Resource bundle Build: #3 (Jun 27, 2012) Verify Generated MANIFEST.MF Properties Implementation-Versio: 1 .0-SNAPSHOT Implementation-Build: Build: #3 (Jun 27, 2012) Summary We should inform buildnumber-maven-plugin that we won\u2019t use version control revision as build number via adding fake <scm> section into pom.xml and <revisionOnScmFailure /> into buildnumber-maven-plugin <configuration> Implemented custom build number format, see buildnumber-maven-plugin <configuration>/<format> and <configuration>/<items> . Added build number into jar manifest, see maven-jar-plugin pom.xml section Tested if generated build number can be properly added in filtered resources 1. created src\\main\\filtered-resources\\build.properties file build.message=${buildNumber} 2. added resource filtering, see section <resource> flag <filtering>true</filtering> Demo application verifying the filtered resources and build number in jar manifest file You can git clone this project github","title":"Maven Build Number Plugin - Sample Usage"},{"location":"blog/2012/2012-06-27-maven-build-number-plugin-sample-usage/#maven-build-number-plugin-sample-usage","text":"| maven | buildnumber-maven-plugin . This post is based on: http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html http://www.site.lalitbhatt.com/maven-build-number-plugin http://blog.peterlynch.ca/2009/11/buildnumber-maven-plugin-helpful.html http://apollo.ucalgary.ca/tlcprojectswiki/index.php/Public/Project_Versioning_-_Best_Practices#Build_Versioning We have some project and need to include into jar manifest file sequential build number which isn\u2019t based on VCS (SVN, Git, Mercurial, etc.) revision number. Let\u2019s create appropriate pom.xml file and implement small demo to verify the result. Generate maven project $ mvn archetype:generate -DgroupId = org.halyph -DartifactId = buildNoTest \\ -DarchetypeArtifactId = maven-archetype-quickstart \\ -DinteractiveMode = false Create the pom.xml <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> org.halyph </groupid> <artifactid> buildNoTest </artifactid> <packaging> jar </packaging> <version> 1.0-SNAPSHOT </version> <name> buildNoTest </name> <url> http://maven.apache.org </url> <dependencies> <dependency> <groupid> junit </groupid> <artifactid> junit </artifactid> <version> 3.8.1 </version> <scope> test </scope> </dependency> </dependencies> <properties> <project .build.sourceencoding= \"\" > UTF-8 </project> </properties> <!-- If you have access to scm then you can place actual url's. Otherwise with <revisionOnScmFailure /> you can give some fake URLs as follows. --> <scm> <connection> scm:svn:http://none </connection> <developerconnection> scm:svn:https://none </developerconnection> <url> scm:svn:https://none </url> </scm> <build> <resources> <resource> <directory> src/main/resources </directory> </resource> <resource> <directory> src/main/filtered-resources </directory> <filtering> true </filtering> </resource> </resources> <plugins> <plugin> <groupid> org.codehaus.mojo </groupid> <artifactid> buildnumber-maven-plugin </artifactid> <version> 1.1 </version> <executions> <execution> <phase> generate-resources </phase> <goals> <goal> create </goal> </goals> </execution> </executions> <configuration> <!-- doCheck and doUpdate actually talk to repository if it's true, Check would check that there are no local changes. Update would update it --> <docheck> false </docheck> <doupdate> false </doupdate> <!-- This ensures that even if we are not connected to scm than also take the version from local .svn file --> <revisiononscmfailure> <!-- Generate sequence build number based on: build number and timestamp --> <format> Build: #{0} ({1,date}) </format> <items> <item> buildNumber\\d* </item> <item> timestamp </item> </items> </revisiononscmfailure></configuration> </plugin> <plugin> <groupid> org.apache.maven.plugins </groupid> <artifactid> maven-jar-plugin </artifactid> <version> 2.1 </version> <configuration> <archive> <!-- will put the entries into META-INF/MANIFEST.MF file --> <manifestentries> <implementation-version> ${project.version} </implementation-version> <implementation-build> ${buildNumber} </implementation-build> </manifestentries> </archive> </configuration> </plugin> </plugins> </build> </project> Create demo application to verify the results package org.halyph ; import java.io.IOException ; import java.util.ResourceBundle ; import java.util.jar.Attributes ; import java.util.jar.Manifest ; public class App { public static void main ( String [] args ) throws IOException { System . out . println ( \"Verify Resource bundle\" ); // Check filtered resources based on generated build number ResourceBundle bundle = ResourceBundle . getBundle ( \"build\" ); String msg = bundle . getString ( \"build.message\" ); System . out . println ( msg ); System . out . println ( \"\\nVerify Generated MANIFEST.MF Properties\" ); // Check Manifest file based on generated build number Manifest mf = new Manifest (); mf . read ( Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( \"META-INF/MANIFEST.MF\" )); Attributes atts = mf . getMainAttributes (); System . out . println ( \"Implementation-Versio: \" + atts . getValue ( \"Implementation-Version\" )); System . out . println ( \"Implementation-Build: \" + atts . getValue ( \"Implementation-Build\" )); } } Build application several time and Run $ mvn install $ mvn install $ mvn install $ java -cp target \\b uildNoTest-1.0-SNAPSHOT.jar org.halyph.App Verify Resource bundle Build: #3 (Jun 27, 2012) Verify Generated MANIFEST.MF Properties Implementation-Versio: 1 .0-SNAPSHOT Implementation-Build: Build: #3 (Jun 27, 2012)","title":"Maven Build Number Plugin - Sample Usage"},{"location":"blog/2012/2012-06-27-maven-build-number-plugin-sample-usage/#summary","text":"We should inform buildnumber-maven-plugin that we won\u2019t use version control revision as build number via adding fake <scm> section into pom.xml and <revisionOnScmFailure /> into buildnumber-maven-plugin <configuration> Implemented custom build number format, see buildnumber-maven-plugin <configuration>/<format> and <configuration>/<items> . Added build number into jar manifest, see maven-jar-plugin pom.xml section Tested if generated build number can be properly added in filtered resources 1. created src\\main\\filtered-resources\\build.properties file build.message=${buildNumber} 2. added resource filtering, see section <resource> flag <filtering>true</filtering> Demo application verifying the filtered resources and build number in jar manifest file You can git clone this project github","title":"Summary"},{"location":"blog/2012/2012-09-04-how-to-prepare-to-pass-oracle-web/","text":"How to prepare to pass Oracle Web Component Developer Certified Expert Exam | java | I\u2019ve already posted the Certification Result report on coderanch . Here are the main resources for preparation for this exam: Book: \u201c Head First Servlets and JSP\u201d, 2nd Edition, By Bryan Basham, Kathy Sierra, Bert Bates Enthuware mock exams , very nice software with tons of questions. I definitely recommend it if you\u2019d like to pass this exam Nikos Free SCWCD Mock exams were very helpful during the reading the HFSJ book Piotr Nowicki\u2019s Java EE 6 SCWCD Mock Exam Servlets 3.0 Final Release specification","title":"How to prepare to pass Oracle Web Component Developer Certified Expert Exam"},{"location":"blog/2012/2012-09-04-how-to-prepare-to-pass-oracle-web/#how-to-prepare-to-pass-oracle-web-component-developer-certified-expert-exam","text":"| java | I\u2019ve already posted the Certification Result report on coderanch . Here are the main resources for preparation for this exam: Book: \u201c Head First Servlets and JSP\u201d, 2nd Edition, By Bryan Basham, Kathy Sierra, Bert Bates Enthuware mock exams , very nice software with tons of questions. I definitely recommend it if you\u2019d like to pass this exam Nikos Free SCWCD Mock exams were very helpful during the reading the HFSJ book Piotr Nowicki\u2019s Java EE 6 SCWCD Mock Exam Servlets 3.0 Final Release specification","title":"How to prepare to pass Oracle Web Component Developer Certified Expert Exam"},{"location":"blog/2012/2012-09-10-ruby-style-guides/","text":"Ruby Style Guides | ruby | Ruby language doesn\u2019t have an official Style Guide . That\u2019s why I\u2019ve decided to collect most interesting style guides in one place. My Favorites: davetron5000\u2019s Ruby Style Guide Ruby Packaging Standard The Ruby Style Guide, by Bozhidar Batsov ( GitHub Ruby Styleguide is based on this) openSUSE Ruby coding conventions Others: Ruby Style Guidelines by Ian Macdonald Ruby / Coding conventions Ruby Coding Convention by Libin Pan Noel\u2019s Rappin Elements of ruby style and Ruby Stylista Ruby Idioms by Arnau Sanchez","title":"Ruby Style Guides"},{"location":"blog/2012/2012-09-10-ruby-style-guides/#ruby-style-guides","text":"| ruby | Ruby language doesn\u2019t have an official Style Guide . That\u2019s why I\u2019ve decided to collect most interesting style guides in one place.","title":"Ruby Style Guides"},{"location":"blog/2012/2012-09-10-ruby-style-guides/#my-favorites","text":"davetron5000\u2019s Ruby Style Guide Ruby Packaging Standard The Ruby Style Guide, by Bozhidar Batsov ( GitHub Ruby Styleguide is based on this) openSUSE Ruby coding conventions Others: Ruby Style Guidelines by Ian Macdonald Ruby / Coding conventions Ruby Coding Convention by Libin Pan Noel\u2019s Rappin Elements of ruby style and Ruby Stylista Ruby Idioms by Arnau Sanchez","title":"My Favorites:"},{"location":"blog/2012/2012-10-01-rubyshift-2012-conference-report/","text":"RubyShift 2012 Conference Report | ruby | conference | Recently, a day ago :-) I visited RubyShift 2012 conference (September 29\u201430, 2012, Kiev, Ukraine). It\u2019s primary a Ruby conference with additional mixing from related technologies. I\u2019m a seasonal Ruby developer and Java is my primary programming language. So, what do I find so interesting in Ruby conference? Well, it\u2019s totally a different community with own culture, tools, frameworks and issues. It\u2019s better to break the borders and look out of the box. We might find there something interesting and amazing there. Here is a list of speeches which are favored by me: DataMapper 2 \u2014 an object mapping toolkit , by Piotr Solnica Data Mapper is well-known pattern in Java community. It was breakthrough for me that Ruby/Rails community is not satisfied with ActiveRecord :-) Nice movement in \u201cbetter\u201d OO design direction. RVM 2: what we have learnt and where are we going , by Micha\u0142 Papis I was really happy to see the guy behind this tool. The author is going to do a very important work to get rid off shell scripting and re-write RVM 2 in Ruby. I can predict that RVM 2 will be available on Windows as well. RabbitMQ Hands On , by Alvaro Videla Simple introduction in RabbitMQ. Nothing special (because it\u2019s quite popular in Java), but based on this talk it isn\u2019t popular in Ruby community (additional findings for myself). ascii.io: No nonsense asciicasting for serious hackers , by Marcin Kulik ASCII.IO is the simplest way to record your terminal and share the recordings with your fellow geeks. Very nice tool, well done and pragmatic. The presenter shared with the audience the ideas behind, technical issues and implementation details. It was really interesting. PostgreSQL in Highload Projects , by Alexey Vasiliev Alexey presented us \u201cmagical\u201d sides of PostgreSQL. I haven\u2019t known about all those powerful extension and techniques which can be used with PostgreSQL. Well done :-)","title":"RubyShift 2012 Conference Report"},{"location":"blog/2012/2012-10-01-rubyshift-2012-conference-report/#rubyshift-2012-conference-report","text":"| ruby | conference | Recently, a day ago :-) I visited RubyShift 2012 conference (September 29\u201430, 2012, Kiev, Ukraine). It\u2019s primary a Ruby conference with additional mixing from related technologies. I\u2019m a seasonal Ruby developer and Java is my primary programming language. So, what do I find so interesting in Ruby conference? Well, it\u2019s totally a different community with own culture, tools, frameworks and issues. It\u2019s better to break the borders and look out of the box. We might find there something interesting and amazing there. Here is a list of speeches which are favored by me: DataMapper 2 \u2014 an object mapping toolkit , by Piotr Solnica Data Mapper is well-known pattern in Java community. It was breakthrough for me that Ruby/Rails community is not satisfied with ActiveRecord :-) Nice movement in \u201cbetter\u201d OO design direction. RVM 2: what we have learnt and where are we going , by Micha\u0142 Papis I was really happy to see the guy behind this tool. The author is going to do a very important work to get rid off shell scripting and re-write RVM 2 in Ruby. I can predict that RVM 2 will be available on Windows as well. RabbitMQ Hands On , by Alvaro Videla Simple introduction in RabbitMQ. Nothing special (because it\u2019s quite popular in Java), but based on this talk it isn\u2019t popular in Ruby community (additional findings for myself). ascii.io: No nonsense asciicasting for serious hackers , by Marcin Kulik ASCII.IO is the simplest way to record your terminal and share the recordings with your fellow geeks. Very nice tool, well done and pragmatic. The presenter shared with the audience the ideas behind, technical issues and implementation details. It was really interesting. PostgreSQL in Highload Projects , by Alexey Vasiliev Alexey presented us \u201cmagical\u201d sides of PostgreSQL. I haven\u2019t known about all those powerful extension and techniques which can be used with PostgreSQL. Well done :-)","title":"RubyShift 2012 Conference Report"},{"location":"blog/2012/2012-10-20-git-command-extention/","text":"Git command extension | git | You probably know about \u201cgit config alias.*\u201d command. See quote from documentation: alias. * \u2026 If the alias expansion is prefixed with an exclamation point, it will be treated as a shell command. For example, defining alias.new = !gitk --all --not ORIG_HEAD , the invocation git new is equivalent to running the shell command gitk --all --not ORIG_HEAD . Note that shell commands will be executed from the top-level directory of a repository, which may not necessarily be the current directory. Base on this we can define some \u201cnew\u201d command via aliases. But, there is another way for extending git. Let\u2019s have a quick view into git.c source : int main ( int argc , const char ** argv ) { const char * cmd ; startup_info = & git_startup_info ; cmd = git_extract_argv0_path ( argv [ 0 ]); if ( ! cmd ) cmd = \"git-help\" ; git_setup_gettext (); /* * \"git-xxxx\" is the same as \"git xxxx\", but we obviously: * * - cannot take flags in between the \"git\" and the \"xxxx\". * - cannot execute it externally (since it would just do * the same thing over again) * * So we just directly call the internal command handler, and * die if that one cannot handle it. */ if ( ! prefixcmp ( cmd , \"git-\" )) { cmd += 4 ; argv [ 0 ] = cmd ; handle_internal_command ( argc , argv ); die ( \"cannot handle %s internally\" , cmd ); } It means we can define some executable peace of code (shell script, ruby script, etc.) which has prefix git- . Put this script on system path (add to $PATH variable) and it will be treated as git command. Let\u2019s clarify all this via sample code: $ cd ~ $ mkdir bin $ #create git-foobar file $ cat > git-foobar #!/bin/sh echo \"[foobar] commad\" ^D $ chmod +x git-foobar $ git-foobar [ foobar ] commad $ cd ~ $ #check if ~./bin folder is in $PATH variable $ cat .bash_profile export PATH = \" $HOME /bin: $PATH \" $ #now check git $ git foobar [ foobar ] commad","title":"Git command extension"},{"location":"blog/2012/2012-10-20-git-command-extention/#git-command-extension","text":"| git | You probably know about \u201cgit config alias.*\u201d command. See quote from documentation: alias. * \u2026 If the alias expansion is prefixed with an exclamation point, it will be treated as a shell command. For example, defining alias.new = !gitk --all --not ORIG_HEAD , the invocation git new is equivalent to running the shell command gitk --all --not ORIG_HEAD . Note that shell commands will be executed from the top-level directory of a repository, which may not necessarily be the current directory. Base on this we can define some \u201cnew\u201d command via aliases. But, there is another way for extending git. Let\u2019s have a quick view into git.c source : int main ( int argc , const char ** argv ) { const char * cmd ; startup_info = & git_startup_info ; cmd = git_extract_argv0_path ( argv [ 0 ]); if ( ! cmd ) cmd = \"git-help\" ; git_setup_gettext (); /* * \"git-xxxx\" is the same as \"git xxxx\", but we obviously: * * - cannot take flags in between the \"git\" and the \"xxxx\". * - cannot execute it externally (since it would just do * the same thing over again) * * So we just directly call the internal command handler, and * die if that one cannot handle it. */ if ( ! prefixcmp ( cmd , \"git-\" )) { cmd += 4 ; argv [ 0 ] = cmd ; handle_internal_command ( argc , argv ); die ( \"cannot handle %s internally\" , cmd ); } It means we can define some executable peace of code (shell script, ruby script, etc.) which has prefix git- . Put this script on system path (add to $PATH variable) and it will be treated as git command. Let\u2019s clarify all this via sample code: $ cd ~ $ mkdir bin $ #create git-foobar file $ cat > git-foobar #!/bin/sh echo \"[foobar] commad\" ^D $ chmod +x git-foobar $ git-foobar [ foobar ] commad $ cd ~ $ #check if ~./bin folder is in $PATH variable $ cat .bash_profile export PATH = \" $HOME /bin: $PATH \" $ #now check git $ git foobar [ foobar ] commad","title":"Git command extension"},{"location":"blog/2012/2012-10-27-mac-os-x-terminal-supports-colored/","text":"Mac OS X terminal supports colored output | terminal | MacOS | Mac OS X Mountain Lion Terminal hasn\u2019t been configured to support coloured output. You can check it via simple command run \u201cls -la\u201d: Let\u2019s fix this. 1. Add the next string to .bash_profile export CLICOLOR = 1 2. Create color.sh script: $ cat ./color.sh #!/bin/bash echo -e \"\\\\033\\[0mCOLOR\\_NC (No color)\" echo -e \"\\\\033\\[1;37mCOLOR\\_WHITE\\\\t\\\\033\\[0;30mCOLOR\\_BLACK\" echo -e \"\\\\033\\[0;34mCOLOR\\_BLUE\\\\t\\\\033\\[1;34mCOLOR\\_LIGHT\\_BLUE\" echo -e \"\\\\033\\[0;32mCOLOR\\_GREEN\\\\t\\\\033\\[1;32mCOLOR\\_LIGHT\\_GREEN\" echo -e \"\\\\033\\[0;36mCOLOR\\_CYAN\\\\t\\\\033\\[1;36mCOLOR\\_LIGHT\\_CYAN\" echo -e \"\\\\033\\[0;31mCOLOR\\_RED\\\\t\\\\033\\[1;31mCOLOR\\_LIGHT\\_RED\" echo -e \"\\\\033\\[0;35mCOLOR\\_PURPLE\\\\t\\\\033\\[1;35mCOLOR\\_LIGHT\\_PURPLE\" echo -e \"\\\\033\\[0;33mCOLOR\\_YELLOW\\\\t\\\\033\\[1;33mCOLOR\\_LIGHT\\_YELLOW\" echo -e \"\\\\033\\[1;30mCOLOR\\_GRAY\\\\t\\\\033\\[0;37mCOLOR\\_LIGHT\\_GRAY\" $ chmod +x color.sh 3. Run ./color.sh , you should get something like this: Also, command ls -la should produce colored output. References A black OS X Leopard Terminal theme that is actually readable Add Color to the Terminal in Mac OS X Tip: Prompt magic 8 Useful and Interesting Bash Prompts","title":"Mac OS X terminal supports colored output"},{"location":"blog/2012/2012-10-27-mac-os-x-terminal-supports-colored/#mac-os-x-terminal-supports-colored-output","text":"| terminal | MacOS | Mac OS X Mountain Lion Terminal hasn\u2019t been configured to support coloured output. You can check it via simple command run \u201cls -la\u201d: Let\u2019s fix this. 1. Add the next string to .bash_profile export CLICOLOR = 1 2. Create color.sh script: $ cat ./color.sh #!/bin/bash echo -e \"\\\\033\\[0mCOLOR\\_NC (No color)\" echo -e \"\\\\033\\[1;37mCOLOR\\_WHITE\\\\t\\\\033\\[0;30mCOLOR\\_BLACK\" echo -e \"\\\\033\\[0;34mCOLOR\\_BLUE\\\\t\\\\033\\[1;34mCOLOR\\_LIGHT\\_BLUE\" echo -e \"\\\\033\\[0;32mCOLOR\\_GREEN\\\\t\\\\033\\[1;32mCOLOR\\_LIGHT\\_GREEN\" echo -e \"\\\\033\\[0;36mCOLOR\\_CYAN\\\\t\\\\033\\[1;36mCOLOR\\_LIGHT\\_CYAN\" echo -e \"\\\\033\\[0;31mCOLOR\\_RED\\\\t\\\\033\\[1;31mCOLOR\\_LIGHT\\_RED\" echo -e \"\\\\033\\[0;35mCOLOR\\_PURPLE\\\\t\\\\033\\[1;35mCOLOR\\_LIGHT\\_PURPLE\" echo -e \"\\\\033\\[0;33mCOLOR\\_YELLOW\\\\t\\\\033\\[1;33mCOLOR\\_LIGHT\\_YELLOW\" echo -e \"\\\\033\\[1;30mCOLOR\\_GRAY\\\\t\\\\033\\[0;37mCOLOR\\_LIGHT\\_GRAY\" $ chmod +x color.sh 3. Run ./color.sh , you should get something like this: Also, command ls -la should produce colored output.","title":"Mac OS X terminal supports colored output"},{"location":"blog/2012/2012-10-27-mac-os-x-terminal-supports-colored/#references","text":"A black OS X Leopard Terminal theme that is actually readable Add Color to the Terminal in Mac OS X Tip: Prompt magic 8 Useful and Interesting Bash Prompts","title":"References"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/","text":"How to Configure Git Diff and Merge Tools? | tool | git | Git can use external tools to perform merge and diff: Use default tool git difftool git mergetool Use custom tool git difftool -t tool\\_name git mergetool -t tool\\_name There are tons on diff/merge tools, I\u2019d like highlight git configuration for three of them: DiffMerge Kdiff3 opendiff Sample ~/.gitconfig (Windows) [difftool \"kdiff3\"] path = D:/Tools/KDiff3/kdiff3.exe keepBackup = false trustExitCode = false [mergetool \"kdiff3\"] path = D:/Tools/KDiff3/kdiff3.exe keepBackup = false trustExitCode = false [difftool \"diffmerge\"] cmd = \\\"C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" [mergetool \"diffmerge\"] cmd = \\\"D:/Tools/Git/cmd/git-diffmerge-merge.sh\\\" \\\"$BASE\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$MERGED\\\" trustExitCode = false [diff] tool = kdiff3 [merge] tool = kdiff3 Content of git-diffmerge-merge.sh $cat D:/Tools/Git/cmd/git-diffmerge-merge.sh #!/bin/sh localPath=\"$2\" basePath=\"$1\" remotePath=\"$3\" resultPath=\"$4\" if [ ! -f $basePath ] then basePath=\"~/diffmerge-empty\" fi \"C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe\" --merge --result=\"$resultPath\" \"$localPath\" \"$basePath\" \"$remotePath\" --title1=\"Mine\" --title2=\"Merged: $4\" --title3=\"Theirs\" Sample ~/.gitconfig (OS X) [diff] tool = opendiff [merge] tool = opendiff opendiff is bundled with Xcode Tools. Sample usage: $ git difftool -t diffmerge HEAD..HEAD~1 References How to setup KDiff as the diff tool for GIT how to configure your git diff or merge tool How to setup Git to use Diffmerge","title":"How to Configure Git Diff and Merge Tools?"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#how-to-configure-git-diff-and-merge-tools","text":"| tool | git | Git can use external tools to perform merge and diff:","title":"How to Configure Git Diff and Merge Tools?"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#use-default-tool","text":"git difftool git mergetool","title":"Use default tool"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#use-custom-tool","text":"git difftool -t tool\\_name git mergetool -t tool\\_name There are tons on diff/merge tools, I\u2019d like highlight git configuration for three of them: DiffMerge Kdiff3 opendiff","title":"Use custom tool"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#sample-gitconfig-windows","text":"[difftool \"kdiff3\"] path = D:/Tools/KDiff3/kdiff3.exe keepBackup = false trustExitCode = false [mergetool \"kdiff3\"] path = D:/Tools/KDiff3/kdiff3.exe keepBackup = false trustExitCode = false [difftool \"diffmerge\"] cmd = \\\"C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" [mergetool \"diffmerge\"] cmd = \\\"D:/Tools/Git/cmd/git-diffmerge-merge.sh\\\" \\\"$BASE\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$MERGED\\\" trustExitCode = false [diff] tool = kdiff3 [merge] tool = kdiff3","title":"Sample ~/.gitconfig (Windows)"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#content-of-git-diffmerge-mergesh","text":"$cat D:/Tools/Git/cmd/git-diffmerge-merge.sh #!/bin/sh localPath=\"$2\" basePath=\"$1\" remotePath=\"$3\" resultPath=\"$4\" if [ ! -f $basePath ] then basePath=\"~/diffmerge-empty\" fi \"C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe\" --merge --result=\"$resultPath\" \"$localPath\" \"$basePath\" \"$remotePath\" --title1=\"Mine\" --title2=\"Merged: $4\" --title3=\"Theirs\"","title":"Content of\u00a0git-diffmerge-merge.sh"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#sample-gitconfig-os-x","text":"[diff] tool = opendiff [merge] tool = opendiff opendiff is bundled with Xcode Tools. Sample usage: $ git difftool -t diffmerge HEAD..HEAD~1","title":"Sample ~/.gitconfig (OS X)"},{"location":"blog/2012/2012-11-02-how-to-configure-git-diff-and-merge/#references","text":"How to setup KDiff as the diff tool for GIT how to configure your git diff or merge tool How to setup Git to use Diffmerge","title":"References"},{"location":"blog/2012/2012-12-12-groovy-or-jruby-for-java-developer/","text":"Groovy or JRuby for Java developer | groovy | jruby | vs | comparison | java | Today I\u2019ve decided to share my own perception about the subject \u201cGroovy vs JRuby\u201d for Java developers. When we are talking about any dynamic/scripting language like Ruby, Python, Groovy, etc. we are talking about quick development feedback (e.g. run - fix - run) no compilation, no packaging. I must admit that mentioned above languages cover the same tasks\u2019 domain with own pros&cons. Now, we should differentiate pragmatic and ecstatic sides for each of them. When we are talking about programming language we should clearly understand the difference between: language (as syntax and semantic soup) - ecstatic side language\u2019s ecosystem (community, tools, libraries, etc.) - pragmatic side Let\u2019s discuss item (1). I think that learning a new programming language expand developer\u2019s mind. If we know many programming languages it helps us pick up any new language very quickly. I.e. to be pragmatic programmers we should learn many languages, dead simple. In my opinion Ruby has much \u201cnicer\u201d syntax and language features in comparison to Groovy. Ruby meta model is very flexible that\u2019s why it has so many beatify frameworks and libraries (Rails, Cucumber, Rspec, etc.). But \u2026 But Ruby ecosystem is totally different from Java/Groovy world. And it\u2019s really noticeable when we are trying to mix Ruby and Java in the same project. Mixing JRuby and Java isn\u2019t a difficult task. But using Java API in Ruby code doesn\u2019t looks natural. And developing in mixed Java/Ruby environment isn\u2019t very comfortable: we have two package types: JARs and gems library versioning and dependency management is different Ruby/JRuby still has some cross-plafrom issues, especially on Windows (i.e. many Ruby gems do not support Windows and they must be fixed to support it, very annoying) it might be difficult to convince teammates to use Ruby on Java project I thought that Groovy isn\u2019t a (J)Ruby competitor until I\u2019ve tried to automate some simple tasks in Groovy. I\u2019ve got seamless integration with Java. It\u2019s really transparent and comfortable coding tool for Java developer. I have no mess with gems (Groovy uses JARs). And the Java ecosystem stays the same. Groovy has the similar dynamic power as Ruby. Yes, in some cases this \u201csugar\u201d isn\u2019t so sweet as in Ruby. But, Groovy is really pragmatic choice for Java developer. Conclusion : Ruby language is beautiful and sexy language, no doubts. But, we need a time to master Ruby ecosystem, deployment issues and tools philosophy. Also, JRuby/Java integration doesn\u2019t looks to me so pragmatic as Groovy/Java. It means investment in Ruby might be expensive. I will recommend to learn Ruby just to open another community for yourself (if you are Java developer), it should be as self-education task, no more. Links: Transforming to Groovy Miro shared his thoughts about similar issue","title":"Groovy or JRuby for Java developer"},{"location":"blog/2012/2012-12-12-groovy-or-jruby-for-java-developer/#groovy-or-jruby-for-java-developer","text":"| groovy | jruby | vs | comparison | java | Today I\u2019ve decided to share my own perception about the subject \u201cGroovy vs JRuby\u201d for Java developers. When we are talking about any dynamic/scripting language like Ruby, Python, Groovy, etc. we are talking about quick development feedback (e.g. run - fix - run) no compilation, no packaging. I must admit that mentioned above languages cover the same tasks\u2019 domain with own pros&cons. Now, we should differentiate pragmatic and ecstatic sides for each of them. When we are talking about programming language we should clearly understand the difference between: language (as syntax and semantic soup) - ecstatic side language\u2019s ecosystem (community, tools, libraries, etc.) - pragmatic side Let\u2019s discuss item (1). I think that learning a new programming language expand developer\u2019s mind. If we know many programming languages it helps us pick up any new language very quickly. I.e. to be pragmatic programmers we should learn many languages, dead simple. In my opinion Ruby has much \u201cnicer\u201d syntax and language features in comparison to Groovy. Ruby meta model is very flexible that\u2019s why it has so many beatify frameworks and libraries (Rails, Cucumber, Rspec, etc.). But \u2026 But Ruby ecosystem is totally different from Java/Groovy world. And it\u2019s really noticeable when we are trying to mix Ruby and Java in the same project. Mixing JRuby and Java isn\u2019t a difficult task. But using Java API in Ruby code doesn\u2019t looks natural. And developing in mixed Java/Ruby environment isn\u2019t very comfortable: we have two package types: JARs and gems library versioning and dependency management is different Ruby/JRuby still has some cross-plafrom issues, especially on Windows (i.e. many Ruby gems do not support Windows and they must be fixed to support it, very annoying) it might be difficult to convince teammates to use Ruby on Java project I thought that Groovy isn\u2019t a (J)Ruby competitor until I\u2019ve tried to automate some simple tasks in Groovy. I\u2019ve got seamless integration with Java. It\u2019s really transparent and comfortable coding tool for Java developer. I have no mess with gems (Groovy uses JARs). And the Java ecosystem stays the same. Groovy has the similar dynamic power as Ruby. Yes, in some cases this \u201csugar\u201d isn\u2019t so sweet as in Ruby. But, Groovy is really pragmatic choice for Java developer. Conclusion : Ruby language is beautiful and sexy language, no doubts. But, we need a time to master Ruby ecosystem, deployment issues and tools philosophy. Also, JRuby/Java integration doesn\u2019t looks to me so pragmatic as Groovy/Java. It means investment in Ruby might be expensive. I will recommend to learn Ruby just to open another community for yourself (if you are Java developer), it should be as self-education task, no more. Links: Transforming to Groovy Miro shared his thoughts about similar issue","title":"Groovy or JRuby for Java developer"},{"location":"blog/2012/2012-12-31-jenkins-enhancements-without-plugins/","text":"Jenkins enhancements without plugins | jenkins | ci | Jenkins is a popular open source continuous integration server. I use it heavily. Jenkins is super extensible CI server with huge plugins repository. But I must admit that there are a lot of cases when all these Jenkins plugin\u2019s \u201czoo\u201d doesn\u2019t help. What does it mean?: we need a tons of plugin to solve some non-trivial problem, too many plugins dependencies which must be properly managed some available plugins partially provide required functionality some plugins provide required functionality but contain bugs or it might be impossible to find necessary plugin, and task have to be done ASAP Based on these cases mentioned above we have at least two solutions: Implement own plugin which will provide all required functionality. It will take some time and slowdown the overall progress for this particular business task Use some Jenkins extra facilities which gives us a chance for Jenkins automation without plugin writing I\u2019m a real fun od 2d solution (at least as a prototyping phase or quick-and-dirty solution right-now-right-away). So, what\u2019s the magic? Jenkins has two nice plugins (of cause there are much more similar plugin, but these two are the best for quick start) which give us a possibility to write Groovy scripts for build and post-build phases: Groovy plugin for Build phase Groovy Postbuild Plugin for Post-build phase Pros : Groovy scripts have access to whole Jenkins infrastructure (Jenkins packages) and can invoke functionality of third-party plugins installed in this Jenkins instance It\u2019s very easy to prototype your ideas and validate automation approaches It gives us very quick business results Groovy scripts can automate really amazing and non-trivial tasks Cons : at the end these Groovy scripts are not easy for automated testing version managements for these scripts involve additional work (implement simple import/export tool for job configuration) these Groovy scripts can have dependency on some third-party plugins and these dependency must me somehow managed as well testing and debugging are really painful activities, because it involve too many interactions with Jenkins UI, etc. (yes, it can be somehow improved via extending both Groovy plugins, but it\u2019s extra work)","title":"Jenkins enhancements without plugins"},{"location":"blog/2012/2012-12-31-jenkins-enhancements-without-plugins/#jenkins-enhancements-without-plugins","text":"| jenkins | ci | Jenkins is a popular open source continuous integration server. I use it heavily. Jenkins is super extensible CI server with huge plugins repository. But I must admit that there are a lot of cases when all these Jenkins plugin\u2019s \u201czoo\u201d doesn\u2019t help. What does it mean?: we need a tons of plugin to solve some non-trivial problem, too many plugins dependencies which must be properly managed some available plugins partially provide required functionality some plugins provide required functionality but contain bugs or it might be impossible to find necessary plugin, and task have to be done ASAP Based on these cases mentioned above we have at least two solutions: Implement own plugin which will provide all required functionality. It will take some time and slowdown the overall progress for this particular business task Use some Jenkins extra facilities which gives us a chance for Jenkins automation without plugin writing I\u2019m a real fun od 2d solution (at least as a prototyping phase or quick-and-dirty solution right-now-right-away). So, what\u2019s the magic? Jenkins has two nice plugins (of cause there are much more similar plugin, but these two are the best for quick start) which give us a possibility to write Groovy scripts for build and post-build phases: Groovy plugin for Build phase Groovy Postbuild Plugin for Post-build phase Pros : Groovy scripts have access to whole Jenkins infrastructure (Jenkins packages) and can invoke functionality of third-party plugins installed in this Jenkins instance It\u2019s very easy to prototype your ideas and validate automation approaches It gives us very quick business results Groovy scripts can automate really amazing and non-trivial tasks Cons : at the end these Groovy scripts are not easy for automated testing version managements for these scripts involve additional work (implement simple import/export tool for job configuration) these Groovy scripts can have dependency on some third-party plugins and these dependency must me somehow managed as well testing and debugging are really painful activities, because it involve too many interactions with Jenkins UI, etc. (yes, it can be somehow improved via extending both Groovy plugins, but it\u2019s extra work)","title":"Jenkins enhancements without plugins"},{"location":"blog/2013/2013-01-21-auto-install-required-ruby-gems-via/","text":"Auto install required Ruby gems via script | ruby | When you are writing Ruby scripts for yourself it\u2019s cool until you need to distribute it. It might happen (as usual it is) that your scripts requires one or more gems. It means that the consumer of your script should additionally setup all required gems. But it looks ugly. There is a nice simple solution which provide simple way for automatic gem install. Let\u2019s imagine that we are using some gem in our script, to be concrete, I\u2019ve picked artii gem as a sample: begin gem \"artii\" rescue LoadError system ( \"gem install artii\" ) Gem . clear_paths end require 'artii' a = Artii :: Base . new puts a . asciify ( 'Blog!' ) Let\u2019s run it: $ jruby text.rb Successfully installed artii-2.0.3 1 gem installed ____ _ _ | _ \\| | | | | | _ ) | | ___ __ _ | | | _ < | | / _ \\ / _ ` | | | | _ ) | | ( _ ) | ( _ | | _ | | ____/ | _ | \\_ __/ \\_ _, ( _ ) __/ | | ___/ $ jruby text.rb ____ _ _ | _ \\| | | | | | _ ) | | ___ __ _ | | | _ < | | / _ \\ / _ ` | | | | _ ) | | ( _ ) | ( _ | | _ | | ____/ | _ | \\_ __/ \\_ _, ( _ ) __/ | | ___/ As you can see, when we run script 1st time it installs artii gem, but when we run this script 2d time it identified that gem has been installed already. Links SO: After installing a gem within a script, how do I load the gem?","title":"Auto install required Ruby gems via script"},{"location":"blog/2013/2013-01-21-auto-install-required-ruby-gems-via/#auto-install-required-ruby-gems-via-script","text":"| ruby | When you are writing Ruby scripts for yourself it\u2019s cool until you need to distribute it. It might happen (as usual it is) that your scripts requires one or more gems. It means that the consumer of your script should additionally setup all required gems. But it looks ugly. There is a nice simple solution which provide simple way for automatic gem install. Let\u2019s imagine that we are using some gem in our script, to be concrete, I\u2019ve picked artii gem as a sample: begin gem \"artii\" rescue LoadError system ( \"gem install artii\" ) Gem . clear_paths end require 'artii' a = Artii :: Base . new puts a . asciify ( 'Blog!' ) Let\u2019s run it: $ jruby text.rb Successfully installed artii-2.0.3 1 gem installed ____ _ _ | _ \\| | | | | | _ ) | | ___ __ _ | | | _ < | | / _ \\ / _ ` | | | | _ ) | | ( _ ) | ( _ | | _ | | ____/ | _ | \\_ __/ \\_ _, ( _ ) __/ | | ___/ $ jruby text.rb ____ _ _ | _ \\| | | | | | _ ) | | ___ __ _ | | | _ < | | / _ \\ / _ ` | | | | _ ) | | ( _ ) | ( _ | | _ | | ____/ | _ | \\_ __/ \\_ _, ( _ ) __/ | | ___/ As you can see, when we run script 1st time it installs artii gem, but when we run this script 2d time it identified that gem has been installed already.","title":"Auto install required Ruby gems via script"},{"location":"blog/2013/2013-01-21-auto-install-required-ruby-gems-via/#links","text":"SO: After installing a gem within a script, how do I load the gem?","title":"Links"},{"location":"blog/2013/2013-01-26-jenkins-hierarchical-jobs-and-jobs/","text":"Jenkins hierarchical jobs and jobs status aggregation | jenkins | ci | As you probably know, Jenkins is highly configurable CI server. We can setup different custom build process. And I\u2019m going to share some approach I\u2019ve been using to setup the hierarchy of Jenkins\u2019 jobs. Here is use case. We have one main entry job which is invoked to start the whole build process. This job can have from one to many child jobs. (Level 2) Each child job can have from one to many child jobs, aslo. (Level 3) The main idea is to collect/aggregate all children jobs\u2019 status into main entry job. See sample screenshot below which visualize the general idea. Here: Main_Job is single entry job, which must contain all sibling jobs statuses Job_Set_1 and Job_Set_2 are two child jobs Build_[1-4] are child jobs of Job_Set_1 Tests_[1-3] are child jobs of Job_Set_2 Now, we should use some Jenkins plugin to build such hierarchy. I\u2019ve been using Multijob Plugin . See below screenshots of configuration for: Main_Job/configure Job_Set_1/configure Job_Set_2/configure But, it\u2019s not enough. We have to aggregate statuses into Main_Job from all sibling jobs. I\u2019ve been using patched Groovy Postbuild Plugin . Modified plugin is located here https://github.com/halyph/groovy-postbuild-plugin Groovy Postbuild Plugin allows us to write groovy scripts for job\u2019s Post-build Actions. This script has access to whole Jenkins environment and can consume functionality of all installed Jenkins plugin: Here is the source of this script: import hudson.model.* import com.tikal.jenkins.plugins.multijob.* ; void log ( msg ) { manager . listener . logger . println ( msg ) } threshold = Result . SUCCESS void aggregate_results () { failed = false mainJob = manager . build . getProject (). getName () job = hudson . model . Hudson . instance . getItem ( mainJob ) log \"---------------------------------------------------------------------------------------------------------------\" log \"Aggregated status report\" log \"---------------------------------------------------------------------------------------------------------------\" log ( \"${mainJob} #${manager.build.getNumber()} - ${manager.build.getResult()}\" ) job . getLastBuild (). getSubBuilds (). each { subBuild -> subJob = subBuild . getJobName () subJobNumber = subBuild . getBuildNumber () job = hudson . model . Hudson . instance . getItem ( subBuild . getJobName ()) log \"${subJob} #${subJobNumber} - ${job.getLastCompletedBuild().getResult()}\" log job . getLastCompletedBuild (). getLog () //println subBuild dePhaseJob = hudson . model . Hudson . instance . getItem ( subBuild . getJobName ()) dePhaseJobBuild = dePhaseJob . getBuildByNumber ( subBuild . getBuildNumber ()) dePhaseJobBuild . getSubBuilds (). each { childSubBuild -> try { log \" ${childSubBuild.jobName}\" job = hudson . model . Hudson . instance . getItem ( childSubBuild . getJobName ()) build = job . getBuildByNumber ( childSubBuild . getBuildNumber ()) indent = \" \" log \"${indent} #${build.getNumber()} - ${build.getResult()}\" log build . getLog () if (! failed && build . getResult (). isWorseThan ( threshold ) ) { failed = true } } catch ( Exception e ) { log ( \"ERROR: ${e.getMessage()}\" ) failed = true } } } if ( failed ) { manager . build . setResult ( hudson . model . Result . FAILURE )} } try { aggregate_results () } catch ( Exception e ) { log ( \"ERROR: ${e.message}\" ) log ( \"ERROR: Failed Status report aggregation\" ) manager . build . setResult ( hudson . model . Result . FAILURE ) } You can find it on GitHub Gist also: https://gist.github.com/4610274 . This script is pretty dumb. It simply extracts (prints in Main_Job console) the next info for each child jobs: job name build number build result (status) build log Also, it has ability to set the Main_Job status based on statuses of child jobs. See threshold variable in script. And aggregated report looks like this: Started by user anonymous Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Main_Job\\workspace Starting build job Job_Set_1. Finished Build : #8 of Job : Job_Set_1 with status :SUCCESS Starting build job Job_Set_2. Finished Build : #8 of Job : Job_Set_2 with status :SUCCESS --------------------------------------------------------------------------------------------------------------- Aggregated status report --------------------------------------------------------------------------------------------------------------- Main_Job #8 - SUCCESS Job_Set_1 #8 - SUCCESS Started by upstream project \"Main_Job\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Job_Set_1\\workspace Starting build job Build_1. Starting build job Build_2. Finished Build : #8 of Job : Build_1 with status :FAILURE Finished Build : #8 of Job : Build_2 with status :SUCCESS Starting build job Build_3. Starting build job Build_4. Finished Build : #6 of Job : Build_3 with status :UNSTABLE Finished Build : #6 of Job : Build_4 with status :SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Build_1 #8 - FAILURE Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_1\\workspace Setting result to [Failed] Build step 'Set the build result' changed build result to FAILURE Build step 'Set the build result' marked build as failure Notifying upstream projects of job completion Finished: FAILURE Build_2 #8 - SUCCESS Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_2\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> null Notifying upstream projects of job completion Finished: SUCCESS Build_3 #6 - UNSTABLE Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_3\\workspace Setting result to [Unstable] Build step 'Set the build result' changed build result to UNSTABLE Notifying upstream projects of job completion Finished: UNSTABLE Build_4 #6 - SUCCESS Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_4\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Job_Set_2 #8 - SUCCESS Started by upstream project \"Main_Job\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Job_Set_2\\workspace Starting build job Test_1. Finished Build : #8 of Job : Test_1 with status :SUCCESS Starting build job Test_2. Finished Build : #8 of Job : Test_2 with status :UNSTABLE Starting build job Test_3. Finished Build : #8 of Job : Test_3 with status :SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Test_1 #8 - SUCCESS Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_1\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Test_2 #8 - UNSTABLE Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_2\\workspace Setting result to [Unstable] Build step 'Set the build result' changed build result to UNSTABLE Notifying upstream projects of job completion Finished: UNSTABLE Test_3 #8 - SUCCESS Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_3\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Build step 'Groovy Postbuild' changed build result to FAILURE Build step 'Groovy Postbuild' marked build as failure Notifying upstream projects of job completion Finished: FAILURE So, what are the benefits of such jobs status aggregation and Groovy post-processing: we have jobs status in one place e-mail notification sent from Main_Job contains this status ability to implement any custom post-processing logic ability to re-use the other plugins features via groovy scrip","title":"Jenkins hierarchical jobs and jobs status aggregation"},{"location":"blog/2013/2013-01-26-jenkins-hierarchical-jobs-and-jobs/#jenkins-hierarchical-jobs-and-jobs-status-aggregation","text":"| jenkins | ci | As you probably know, Jenkins is highly configurable CI server. We can setup different custom build process. And I\u2019m going to share some approach I\u2019ve been using to setup the hierarchy of Jenkins\u2019 jobs. Here is use case. We have one main entry job which is invoked to start the whole build process. This job can have from one to many child jobs. (Level 2) Each child job can have from one to many child jobs, aslo. (Level 3) The main idea is to collect/aggregate all children jobs\u2019 status into main entry job. See sample screenshot below which visualize the general idea. Here: Main_Job is single entry job, which must contain all sibling jobs statuses Job_Set_1 and Job_Set_2 are two child jobs Build_[1-4] are child jobs of Job_Set_1 Tests_[1-3] are child jobs of Job_Set_2 Now, we should use some Jenkins plugin to build such hierarchy. I\u2019ve been using Multijob Plugin . See below screenshots of configuration for: Main_Job/configure Job_Set_1/configure Job_Set_2/configure But, it\u2019s not enough. We have to aggregate statuses into Main_Job from all sibling jobs. I\u2019ve been using patched Groovy Postbuild Plugin . Modified plugin is located here https://github.com/halyph/groovy-postbuild-plugin Groovy Postbuild Plugin allows us to write groovy scripts for job\u2019s Post-build Actions. This script has access to whole Jenkins environment and can consume functionality of all installed Jenkins plugin: Here is the source of this script: import hudson.model.* import com.tikal.jenkins.plugins.multijob.* ; void log ( msg ) { manager . listener . logger . println ( msg ) } threshold = Result . SUCCESS void aggregate_results () { failed = false mainJob = manager . build . getProject (). getName () job = hudson . model . Hudson . instance . getItem ( mainJob ) log \"---------------------------------------------------------------------------------------------------------------\" log \"Aggregated status report\" log \"---------------------------------------------------------------------------------------------------------------\" log ( \"${mainJob} #${manager.build.getNumber()} - ${manager.build.getResult()}\" ) job . getLastBuild (). getSubBuilds (). each { subBuild -> subJob = subBuild . getJobName () subJobNumber = subBuild . getBuildNumber () job = hudson . model . Hudson . instance . getItem ( subBuild . getJobName ()) log \"${subJob} #${subJobNumber} - ${job.getLastCompletedBuild().getResult()}\" log job . getLastCompletedBuild (). getLog () //println subBuild dePhaseJob = hudson . model . Hudson . instance . getItem ( subBuild . getJobName ()) dePhaseJobBuild = dePhaseJob . getBuildByNumber ( subBuild . getBuildNumber ()) dePhaseJobBuild . getSubBuilds (). each { childSubBuild -> try { log \" ${childSubBuild.jobName}\" job = hudson . model . Hudson . instance . getItem ( childSubBuild . getJobName ()) build = job . getBuildByNumber ( childSubBuild . getBuildNumber ()) indent = \" \" log \"${indent} #${build.getNumber()} - ${build.getResult()}\" log build . getLog () if (! failed && build . getResult (). isWorseThan ( threshold ) ) { failed = true } } catch ( Exception e ) { log ( \"ERROR: ${e.getMessage()}\" ) failed = true } } } if ( failed ) { manager . build . setResult ( hudson . model . Result . FAILURE )} } try { aggregate_results () } catch ( Exception e ) { log ( \"ERROR: ${e.message}\" ) log ( \"ERROR: Failed Status report aggregation\" ) manager . build . setResult ( hudson . model . Result . FAILURE ) } You can find it on GitHub Gist also: https://gist.github.com/4610274 . This script is pretty dumb. It simply extracts (prints in Main_Job console) the next info for each child jobs: job name build number build result (status) build log Also, it has ability to set the Main_Job status based on statuses of child jobs. See threshold variable in script. And aggregated report looks like this: Started by user anonymous Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Main_Job\\workspace Starting build job Job_Set_1. Finished Build : #8 of Job : Job_Set_1 with status :SUCCESS Starting build job Job_Set_2. Finished Build : #8 of Job : Job_Set_2 with status :SUCCESS --------------------------------------------------------------------------------------------------------------- Aggregated status report --------------------------------------------------------------------------------------------------------------- Main_Job #8 - SUCCESS Job_Set_1 #8 - SUCCESS Started by upstream project \"Main_Job\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Job_Set_1\\workspace Starting build job Build_1. Starting build job Build_2. Finished Build : #8 of Job : Build_1 with status :FAILURE Finished Build : #8 of Job : Build_2 with status :SUCCESS Starting build job Build_3. Starting build job Build_4. Finished Build : #6 of Job : Build_3 with status :UNSTABLE Finished Build : #6 of Job : Build_4 with status :SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Build_1 #8 - FAILURE Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_1\\workspace Setting result to [Failed] Build step 'Set the build result' changed build result to FAILURE Build step 'Set the build result' marked build as failure Notifying upstream projects of job completion Finished: FAILURE Build_2 #8 - SUCCESS Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_2\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> null Notifying upstream projects of job completion Finished: SUCCESS Build_3 #6 - UNSTABLE Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_3\\workspace Setting result to [Unstable] Build step 'Set the build result' changed build result to UNSTABLE Notifying upstream projects of job completion Finished: UNSTABLE Build_4 #6 - SUCCESS Started by upstream project \"Job_Set_1\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Build_4\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Job_Set_2 #8 - SUCCESS Started by upstream project \"Main_Job\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Job_Set_2\\workspace Starting build job Test_1. Finished Build : #8 of Job : Test_1 with status :SUCCESS Starting build job Test_2. Finished Build : #8 of Job : Test_2 with status :UNSTABLE Starting build job Test_3. Finished Build : #8 of Job : Test_3 with status :SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Test_1 #8 - SUCCESS Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_1\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Test_2 #8 - UNSTABLE Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_2\\workspace Setting result to [Unstable] Build step 'Set the build result' changed build result to UNSTABLE Notifying upstream projects of job completion Finished: UNSTABLE Test_3 #8 - SUCCESS Started by upstream project \"Job_Set_2\" build number 8 Building in workspace C:\\Users\\oivasiv\\.jenkins\\jobs\\Test_3\\workspace Setting result to [Success] Build step 'Set the build result' changed build result to SUCCESS Notifying upstream projects of job completion Finished: SUCCESS Build step 'Groovy Postbuild' changed build result to FAILURE Build step 'Groovy Postbuild' marked build as failure Notifying upstream projects of job completion Finished: FAILURE So, what are the benefits of such jobs status aggregation and Groovy post-processing: we have jobs status in one place e-mail notification sent from Main_Job contains this status ability to implement any custom post-processing logic ability to re-use the other plugins features via groovy scrip","title":"Jenkins hierarchical jobs and jobs status aggregation"},{"location":"blog/2013/2013-02-09-i18n-vs-l10n/","text":"i18n vs l10n | general | I always had a trouble how to explain this subject to other people. That\u2019s why I\u2019ve decided to collect the main definitions (and explanations) of internationalization and localization in one place. W3C explain this concept pretty well: Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Localization refers to the adaptation of a product, application or document content to meet the language, cultural and other requirements of a specific target market (a locale). Let\u2019s paraphrase these definitions based on Apple guides : Internationalization (i18n) is the process of designing and building an application to facilitate localization. The main concern is that application can be adapted to various languages and regions without engineering changes. Localization (l10n) is the cultural and linguistic adaptation of an internationalized application to two or more culturally-distinct markets The primary task of localization is translating the user interface elements and documentation. Localization involves not only changing the language interaction, but also other relevant changes such as display of numbers, dates, currency, and so on. Other types of data, such as sounds and images, may require localization if they are culturally sensitive. The better internationalized an application is, the easier it is to localize it for a particular language and character encoding scheme. ( http://docs.oracle.com/javase/tutorial/i18n/intro/index.html ) Definitions from Mozilla Internationalization & Localization Guidelines : Internationalization (a.k.a. Globalization, a.k.a. Enabling) Designing and developing a software product to function in multiple locales. This process involves identifying the locales that must be supported, designing features which support those locales, and writing code that functions equally well in any of the supported locales. Localization Modifying or adapting a software product to fit the requirements of a particular locale. This process includes (but may not be limited to) translating the user interface, documentation and packaging, changing dialog box geometries, customizing features (if necessary), and testing the translated product to ensure that it still works (at least as well as the original). Localizability The degree to which a software product can be localized. Localizable products separate data from code, correctly display the target language and function properly after being localized. i18n Acronym for \u201cinternationalization\u201d (\u201ci\u201d + 18 letters + \u201cn\u201d; lower case i is used to distinguish it from the numeral 1 (one)). L10n Acronym for \u201clocalization\u201d (\u201cL\u201d + 10 letters + \u201cn\u201d; upper case L is used to distinguish it from the numeral 1 (one)). L12y Acronym for \u201clocalizability\u201d (\u201cL\u201d + 12 letters + \u201cy\u201d; upper case L is used to distinguish it from the numeral 1 (one)). Locale A set of conventions affected or determined by human language and customs, as defined within a particular geo-political region. These conventions include (but are not necessarily limited to) the written language, formats for dates, numbers and currency, sorting orders, etc. Resource 1. Any part of a program which can appear to the user or be changed or configured by the user. 2. Any piece of the program\u2019s data, as opposed to its code. Core product The language independent portion of a software product (as distinct from any particular localized version of that product - including the English language version). Sometimes, however, this term is used to refer to the English product as opposed to other localizations. References Localization vs. Internationalization Mozilla Internationalization & Localization Guidelines Mac Developer Library: Internationalization and Localization http://docs.oracle.com/javase/tutorial/i18n/intro/index.html","title":"i18n vs l10n"},{"location":"blog/2013/2013-02-09-i18n-vs-l10n/#i18n-vs-l10n","text":"| general | I always had a trouble how to explain this subject to other people. That\u2019s why I\u2019ve decided to collect the main definitions (and explanations) of internationalization and localization in one place. W3C explain this concept pretty well: Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Localization refers to the adaptation of a product, application or document content to meet the language, cultural and other requirements of a specific target market (a locale). Let\u2019s paraphrase these definitions based on Apple guides : Internationalization (i18n) is the process of designing and building an application to facilitate localization. The main concern is that application can be adapted to various languages and regions without engineering changes. Localization (l10n) is the cultural and linguistic adaptation of an internationalized application to two or more culturally-distinct markets The primary task of localization is translating the user interface elements and documentation. Localization involves not only changing the language interaction, but also other relevant changes such as display of numbers, dates, currency, and so on. Other types of data, such as sounds and images, may require localization if they are culturally sensitive. The better internationalized an application is, the easier it is to localize it for a particular language and character encoding scheme. ( http://docs.oracle.com/javase/tutorial/i18n/intro/index.html ) Definitions from Mozilla Internationalization & Localization Guidelines : Internationalization (a.k.a. Globalization, a.k.a. Enabling) Designing and developing a software product to function in multiple locales. This process involves identifying the locales that must be supported, designing features which support those locales, and writing code that functions equally well in any of the supported locales. Localization Modifying or adapting a software product to fit the requirements of a particular locale. This process includes (but may not be limited to) translating the user interface, documentation and packaging, changing dialog box geometries, customizing features (if necessary), and testing the translated product to ensure that it still works (at least as well as the original). Localizability The degree to which a software product can be localized. Localizable products separate data from code, correctly display the target language and function properly after being localized. i18n Acronym for \u201cinternationalization\u201d (\u201ci\u201d + 18 letters + \u201cn\u201d; lower case i is used to distinguish it from the numeral 1 (one)). L10n Acronym for \u201clocalization\u201d (\u201cL\u201d + 10 letters + \u201cn\u201d; upper case L is used to distinguish it from the numeral 1 (one)). L12y Acronym for \u201clocalizability\u201d (\u201cL\u201d + 12 letters + \u201cy\u201d; upper case L is used to distinguish it from the numeral 1 (one)). Locale A set of conventions affected or determined by human language and customs, as defined within a particular geo-political region. These conventions include (but are not necessarily limited to) the written language, formats for dates, numbers and currency, sorting orders, etc. Resource 1. Any part of a program which can appear to the user or be changed or configured by the user. 2. Any piece of the program\u2019s data, as opposed to its code. Core product The language independent portion of a software product (as distinct from any particular localized version of that product - including the English language version). Sometimes, however, this term is used to refer to the English product as opposed to other localizations.","title":"i18n vs l10n"},{"location":"blog/2013/2013-02-09-i18n-vs-l10n/#references","text":"Localization vs. Internationalization Mozilla Internationalization & Localization Guidelines Mac Developer Library: Internationalization and Localization http://docs.oracle.com/javase/tutorial/i18n/intro/index.html","title":"References"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/","text":"Java PDF Libraries | java | Recently I had a task to select some Java PDF libraries for PDF generation. But it wasn\u2019t a simple task. The first thing which came into my mind was iText. It\u2019s well know Java library with good reputation. But\u2026 there is some stopper. iText version 5+ is released under the AGPL license. I.e. we have to pay money if we want to use iText in commercial product. I\u2019ve created the next small checklist which covers project needs: liberal license support maximum amount of project features (e.g. absolute element positioning) good documentation huge amount of samples possibility to render HTML to PDF I\u2019ve reviewed the next libraries: iText 5.0+ AGPL license iText 4.2 MPL/LGPL licenses PDF Box Apache License, Version 2.0 JPedal JPedal has a LGPL release to pride a full java PDF viewer under a LGPL license FOP Apache License, Version 2.0 gnujpdf LGPL License PJX GPLv2 License PDFjet Strange Open Source license model jPod BSD License PDF Renderer Maintaining is not active iText review iText 2.1.7: the latest official release under the MPL & LGPL license; iText 4.2.0: the latest unofficial release under the MPL & LGPL license; iText 5.0.0 and higher: released under the AGPL license. Notes about iText 5.0+ vs iText 4.2 Beginning with iText version 5.0 the developers have moved to the AGPL to improve their ability to sell commercial licenses. .. To assist those desiring to stick with the old license was made the final MPL/LGPL version more easily available and forked on github. Apache\u2122 FOP Apache\u2122 FOP (Formatting Objects Processor) is a print formatter driven by XSL formatting objects (XSL-FO) and an output independent formatter. It is a Java application that reads a formatting object (FO) tree and renders the resulting pages to a specified output. This lib doesn\u2019t have enough flexibility for absolute page element positioning. But, it might be really valuable as content convertor. Apache PDFBox Very interesting project. It has very impressive amount of features. And most important it\u2019s in active development. Summary I\u2019ve selected iText v.4.2 which has acceptable license and huge community. But the most important feature it\u2019s a very good documentation (actually it\u2019s a book iText in Action \u2014 2nd Edition ), tons of samples. Almost all samples for iText v.5 can be easily applied to iText v.4.2. Other libraries have not so much samples/demos. And for quick start it\u2019s very important. Here is maven dependency info: <dependency> <groupid> com.lowagie </groupid> <artifactid> itext </artifactid> <version> 4.2.0 </version> </dependency> PDFBox is selected as backup library. I.e. I will use it when iText has some limitations. References http://stackoverflow.com/questions/14213195/itext-latest-maven-dependency http://java-source.net/open-source/pdf-libraries http://javatoolbox.com/categories/pdf","title":"Java PDF Libraries"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#java-pdf-libraries","text":"| java | Recently I had a task to select some Java PDF libraries for PDF generation. But it wasn\u2019t a simple task. The first thing which came into my mind was iText. It\u2019s well know Java library with good reputation. But\u2026 there is some stopper. iText version 5+ is released under the AGPL license. I.e. we have to pay money if we want to use iText in commercial product. I\u2019ve created the next small checklist which covers project needs: liberal license support maximum amount of project features (e.g. absolute element positioning) good documentation huge amount of samples possibility to render HTML to PDF I\u2019ve reviewed the next libraries: iText 5.0+ AGPL license iText 4.2 MPL/LGPL licenses PDF Box Apache License, Version 2.0 JPedal JPedal has a LGPL release to pride a full java PDF viewer under a LGPL license FOP Apache License, Version 2.0 gnujpdf LGPL License PJX GPLv2 License PDFjet Strange Open Source license model jPod BSD License PDF Renderer Maintaining is not active","title":"Java PDF Libraries"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#itext-review","text":"iText 2.1.7: the latest official release under the MPL & LGPL license; iText 4.2.0: the latest unofficial release under the MPL & LGPL license; iText 5.0.0 and higher: released under the AGPL license. Notes about iText 5.0+ vs iText 4.2 Beginning with iText version 5.0 the developers have moved to the AGPL to improve their ability to sell commercial licenses. .. To assist those desiring to stick with the old license was made the final MPL/LGPL version more easily available and forked on github.","title":"iText review"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#apachetm-fop","text":"Apache\u2122 FOP (Formatting Objects Processor) is a print formatter driven by XSL formatting objects (XSL-FO) and an output independent formatter. It is a Java application that reads a formatting object (FO) tree and renders the resulting pages to a specified output. This lib doesn\u2019t have enough flexibility for absolute page element positioning. But, it might be really valuable as content convertor.","title":"Apache\u2122 FOP"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#apache-pdfbox","text":"Very interesting project. It has very impressive amount of features. And most important it\u2019s in active development.","title":"Apache PDFBox"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#summary","text":"I\u2019ve selected iText v.4.2 which has acceptable license and huge community. But the most important feature it\u2019s a very good documentation (actually it\u2019s a book iText in Action \u2014 2nd Edition ), tons of samples. Almost all samples for iText v.5 can be easily applied to iText v.4.2. Other libraries have not so much samples/demos. And for quick start it\u2019s very important. Here is maven dependency info: <dependency> <groupid> com.lowagie </groupid> <artifactid> itext </artifactid> <version> 4.2.0 </version> </dependency> PDFBox is selected as backup library. I.e. I will use it when iText has some limitations.","title":"Summary"},{"location":"blog/2013/2013-04-23-java-pdf-libraries/#references","text":"http://stackoverflow.com/questions/14213195/itext-latest-maven-dependency http://java-source.net/open-source/pdf-libraries http://javatoolbox.com/categories/pdf","title":"References"},{"location":"blog/2013/2013-04-27-the-long-way-to-evernote/","text":"The long way to Evernote | general | Have you ever think about the application (and/or service) which can satisfy all your \u201cproductivity\u201d needs? The term \u201cproductivity\u201d in this context is very simple - it\u2019s something (tools or methods) which helps you work with higher productivity, spent less time resolving boring tasks and concentrate on your business needs. Here I describe the areas which helps me be more productive and tools related with them. Personal Knowledge Base (KB) System. It\u2019s might be wiki, some notes taking application. I\u2019d been using MS OneNote . It\u2019s very powerful application with tons of nice features. Except it\u2019s supported on Microsoft OS\u2019s only. Also, I love using tons of tags for everything, but OneNote doesn\u2019t work well with tags. Task Management System. I\u2019ve been practicing the Pomodoro Technique . And it\u2019s very hard to manage tons of tasks without some application. If you google a little you will find huge amount of applications and services which might be used for Pomodoro. I\u2019ve configured TodoList application to use it properly in scope of Pomodoro. It\u2019s was fun. But there was one drawback - I had one application for knowledge base and another for tasks management. It was a pain to link some tasks with article from my KB system. Bookmarking . I don\u2019t like to have super huge bookmark list inside my browser. I prefer to store the next thing in browser bookmarks: a) resources which I\u2019ve been visiting on daily/weekly basis and b) temporary links. All the bookmarks were stored on social bookmarking platform delicious . And again I had 3d tool which hard to integrate with others. OneNote and TodoList is Windows based application. But, I\u2019ve switched to Mac and Android as my target home devices. My work machine is Windows based. So, I\u2019ve started research of analogues for KB and todo list applications which works quite well on Windows, Mac OS X and Android. As you probably guess it\u2019s Evernote . Here I highlight features which I love: almost cross-platform (Windows, Mac OS X, iOS and Android), Linux isn\u2019t supported officially. But there is a work for Linux as well NixNote (old name NeverNote). Evernote is a service . I.e. all my notes are synchronized between all my devices. Even more, Evernote has Web analogue of native note taking application. So, I can have access to my notes from anywhere. Evernote has very power tag support. I can apply multiple tags my notes. It improves notes search and classification. Knowledge Base, Pomodoro System and Bookmarks are all integrated into Evernote. I have single application for managing all these stuff. And it\u2019s real benefit, because my user experience is shared between all my devices and productivity concepts (KB, Pomodoro/Todo and Bookmarks). Evernote has public Cloud API and Local API. I.e. we can automate Evernote experince. There is very nice browser plugin Evernote Web Clipper which store web pages (link, selected part of page or full page) into the notes. Very cool feature for bookmarking and KB. Evernote is very flexible application and a service. It was required some time for me to completely switch to Evernote from other application and services. But now I\u2019m more productive. If you have any question about my Evernote experience ask me. I will be glad to share it.","title":"The long way to Evernote"},{"location":"blog/2013/2013-04-27-the-long-way-to-evernote/#the-long-way-to-evernote","text":"| general | Have you ever think about the application (and/or service) which can satisfy all your \u201cproductivity\u201d needs? The term \u201cproductivity\u201d in this context is very simple - it\u2019s something (tools or methods) which helps you work with higher productivity, spent less time resolving boring tasks and concentrate on your business needs. Here I describe the areas which helps me be more productive and tools related with them. Personal Knowledge Base (KB) System. It\u2019s might be wiki, some notes taking application. I\u2019d been using MS OneNote . It\u2019s very powerful application with tons of nice features. Except it\u2019s supported on Microsoft OS\u2019s only. Also, I love using tons of tags for everything, but OneNote doesn\u2019t work well with tags. Task Management System. I\u2019ve been practicing the Pomodoro Technique . And it\u2019s very hard to manage tons of tasks without some application. If you google a little you will find huge amount of applications and services which might be used for Pomodoro. I\u2019ve configured TodoList application to use it properly in scope of Pomodoro. It\u2019s was fun. But there was one drawback - I had one application for knowledge base and another for tasks management. It was a pain to link some tasks with article from my KB system. Bookmarking . I don\u2019t like to have super huge bookmark list inside my browser. I prefer to store the next thing in browser bookmarks: a) resources which I\u2019ve been visiting on daily/weekly basis and b) temporary links. All the bookmarks were stored on social bookmarking platform delicious . And again I had 3d tool which hard to integrate with others. OneNote and TodoList is Windows based application. But, I\u2019ve switched to Mac and Android as my target home devices. My work machine is Windows based. So, I\u2019ve started research of analogues for KB and todo list applications which works quite well on Windows, Mac OS X and Android. As you probably guess it\u2019s Evernote . Here I highlight features which I love: almost cross-platform (Windows, Mac OS X, iOS and Android), Linux isn\u2019t supported officially. But there is a work for Linux as well NixNote (old name NeverNote). Evernote is a service . I.e. all my notes are synchronized between all my devices. Even more, Evernote has Web analogue of native note taking application. So, I can have access to my notes from anywhere. Evernote has very power tag support. I can apply multiple tags my notes. It improves notes search and classification. Knowledge Base, Pomodoro System and Bookmarks are all integrated into Evernote. I have single application for managing all these stuff. And it\u2019s real benefit, because my user experience is shared between all my devices and productivity concepts (KB, Pomodoro/Todo and Bookmarks). Evernote has public Cloud API and Local API. I.e. we can automate Evernote experince. There is very nice browser plugin Evernote Web Clipper which store web pages (link, selected part of page or full page) into the notes. Very cool feature for bookmarking and KB. Evernote is very flexible application and a service. It was required some time for me to completely switch to Evernote from other application and services. But now I\u2019m more productive. If you have any question about my Evernote experience ask me. I will be glad to share it.","title":"The long way to Evernote"},{"location":"blog/2013/2013-05-13-itext-useful-resources/","text":"iText Useful Resources | java | Recently I\u2019ve begun using iText PDF generation library due to my work needs. I must admit that this library is quite powerful, but for really quick start I needed several resources with nice working samples. Here is the list: iText in Action, Second Edition, by Bruno Lowagie book is a must have if you really need to dive into library details. Also, it\u2019s very important to work in parallel with book samples https://itext.svn.sourceforge.net/svnroot/itext/book . I\u2019ve reviewed the 1st edition of this book and must admit that the 2d is much better. I.e. don\u2019t waste your time and stick to 2d edition only. iText and iTextSharp are very similar libraries. I.e. you can use iTextSharp code snippets as samples for iText. For this purpose I\u2019ve selected the next two blogs: kuujinbo.info - Code snippets and articles. Mikesdotnetting - Code snippets and articles. RoseIndia iText Examples - nice and basic iText samples. And the last item is iText forum In general item 1 can solve almost all your needs.","title":"iText Useful Resources"},{"location":"blog/2013/2013-05-13-itext-useful-resources/#itext-useful-resources","text":"| java | Recently I\u2019ve begun using iText PDF generation library due to my work needs. I must admit that this library is quite powerful, but for really quick start I needed several resources with nice working samples. Here is the list: iText in Action, Second Edition, by Bruno Lowagie book is a must have if you really need to dive into library details. Also, it\u2019s very important to work in parallel with book samples https://itext.svn.sourceforge.net/svnroot/itext/book . I\u2019ve reviewed the 1st edition of this book and must admit that the 2d is much better. I.e. don\u2019t waste your time and stick to 2d edition only. iText and iTextSharp are very similar libraries. I.e. you can use iTextSharp code snippets as samples for iText. For this purpose I\u2019ve selected the next two blogs: kuujinbo.info - Code snippets and articles. Mikesdotnetting - Code snippets and articles. RoseIndia iText Examples - nice and basic iText samples. And the last item is iText forum In general item 1 can solve almost all your needs.","title":"iText Useful Resources"},{"location":"blog/2013/2013-05-20-equals-hashcode-and-tostring-in-java/","text":"Equals, HashCode and toString in Java | java | You probably know that equals , hashCode and toString methods are very important in Java. And they must be carefully implemented. Joshua Bloch has written about this in his famous book \u201c Effective Java (2nd Edition)\u201d , items 8 and 9. Let\u2019s create simple bean object and implement the mentioned above methods: package org.halyph ; import java.util.List ; public class StandardBean { private String name ; private int id ; private List < StandardBean > references ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public List < StandardBean > getReferences () { return references ; } public void setReferences ( List < StandardBean > references ) { this . references = references ; } @Override public String toString () { return \"StandardBean{\" + \"name='\" + name + '\\'' + \", id=\" + id + \", references=\" + references + \"} \" + super . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; StandardBean that = ( StandardBean ) o ; if ( id != that . id ) return false ; if ( name != null ? ! name . equals ( that . name ) : that . name != null ) return false ; if ( references != null ? ! references . equals ( that . references ) : that . references != null ) return false ; return true ; } @Override public int hashCode () { int result = name != null ? name . hashCode () : 0 ; result = 31 * result + id ; result = 31 * result + ( references != null ? references . hashCode () : 0 ); return result ; } } These three methods ( equals , hashCode and toString ) were generated by IDE. But, we have one drawback - their maintenance, i.e. we should carefully regenerate/update them. Also, readability is not very good. There are several alternative ways to solve this issue. 1. Apache Commons Lang import org.apache.commons.lang3.builder.EqualsBuilder ; import org.apache.commons.lang3.builder.HashCodeBuilder ; import org.apache.commons.lang3.builder.ToStringBuilder ; public class ApacheCommonsBean { ... @Override public String toString () { return new ToStringBuilder ( this ) . append ( \"name\" , name ) . append ( \"id\" , id ) . append ( \"references\" , references ) . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; ApacheCommonsBean that = ( ApacheCommonsBean ) o ; return new EqualsBuilder () . appendSuper ( super . equals ( o )) . append ( name , that . name ) . append ( id , that . id ) . append ( references , that . references ) . isEquals (); } @Override public int hashCode () { return new HashCodeBuilder ( 31 , 17 ) . appendSuper ( super . hashCode ()) . append ( name ) . append ( id ) . append ( references ) . toHashCode (); } } 2. Google Guava import com.google.common.base.Objects ; public class GuavaBean { ... @Override public String toString () { return Objects . toStringHelper ( this ) . add ( \"name\" , name ) . add ( \"id\" , id ) . add ( \"references\" , references ) . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null ) return false ; if ( o instanceof GuavaBean ) { final GuavaBean other = ( GuavaBean ) o ; return Objects . equal ( name , other . name ) && Objects . equal ( id , other . id ) && Objects . equal ( references , other . references ); } return false ; } @Override public int hashCode () { return Objects . hashCode ( name , id , references ); } } 3. Java 7 Utils import java.util.Objects ; public class JavaSevenBean { ... @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; JavaSevenBean that = ( JavaSevenBean ) o ; return Objects . equals ( name , that . name ) && Objects . equals ( id , that . id ) && Objects . equals ( references , that . references ); } @Override public int hashCode () { return Objects . hash ( name , id , references ); } } Summary Both Apache Commons Lang and Google Guava are additional jars in you project. So, when should we use these libraries: I prefer to avoid using additional libraries if I need only small amount of library functionality. I.e. don\u2019t add Apache Commons/Guava into your project if you need equals , hashCode and toString only. Use full power of existent projects libraries. Don\u2019t reinvent the wheel. Almost all mid-size project has Apache Commons or Guava (or both). Use modern Java 7 feature if it\u2019s possible in your current environment. I can\u2019t make preference between Guava and Apache Commons. Just stick to the current project state and select library which will be more useful. Don\u2019t be dogmatic . IDE generated equals , hashCode and toString methods are not readable. And in general cases they are boilerplate and hard to maintain. It\u2019s very easy to forget re-generate/update them. References Apache Commons Lang JavaDoc Apache Commons Lang ToStringBuilder Style Apache Commons Lang Hashcode and Equals Apache Commons Lang Equalsbuilder Guava Object common methods Guava Objects JavaDoc Java 7 Objects Util equals hash GitHub repo https://github.com/halyph/equalsHashString","title":"Equals, HashCode and toString in Java"},{"location":"blog/2013/2013-05-20-equals-hashcode-and-tostring-in-java/#equals-hashcode-and-tostring-in-java","text":"| java | You probably know that equals , hashCode and toString methods are very important in Java. And they must be carefully implemented. Joshua Bloch has written about this in his famous book \u201c Effective Java (2nd Edition)\u201d , items 8 and 9. Let\u2019s create simple bean object and implement the mentioned above methods: package org.halyph ; import java.util.List ; public class StandardBean { private String name ; private int id ; private List < StandardBean > references ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public List < StandardBean > getReferences () { return references ; } public void setReferences ( List < StandardBean > references ) { this . references = references ; } @Override public String toString () { return \"StandardBean{\" + \"name='\" + name + '\\'' + \", id=\" + id + \", references=\" + references + \"} \" + super . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; StandardBean that = ( StandardBean ) o ; if ( id != that . id ) return false ; if ( name != null ? ! name . equals ( that . name ) : that . name != null ) return false ; if ( references != null ? ! references . equals ( that . references ) : that . references != null ) return false ; return true ; } @Override public int hashCode () { int result = name != null ? name . hashCode () : 0 ; result = 31 * result + id ; result = 31 * result + ( references != null ? references . hashCode () : 0 ); return result ; } } These three methods ( equals , hashCode and toString ) were generated by IDE. But, we have one drawback - their maintenance, i.e. we should carefully regenerate/update them. Also, readability is not very good. There are several alternative ways to solve this issue. 1. Apache Commons Lang import org.apache.commons.lang3.builder.EqualsBuilder ; import org.apache.commons.lang3.builder.HashCodeBuilder ; import org.apache.commons.lang3.builder.ToStringBuilder ; public class ApacheCommonsBean { ... @Override public String toString () { return new ToStringBuilder ( this ) . append ( \"name\" , name ) . append ( \"id\" , id ) . append ( \"references\" , references ) . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; ApacheCommonsBean that = ( ApacheCommonsBean ) o ; return new EqualsBuilder () . appendSuper ( super . equals ( o )) . append ( name , that . name ) . append ( id , that . id ) . append ( references , that . references ) . isEquals (); } @Override public int hashCode () { return new HashCodeBuilder ( 31 , 17 ) . appendSuper ( super . hashCode ()) . append ( name ) . append ( id ) . append ( references ) . toHashCode (); } } 2. Google Guava import com.google.common.base.Objects ; public class GuavaBean { ... @Override public String toString () { return Objects . toStringHelper ( this ) . add ( \"name\" , name ) . add ( \"id\" , id ) . add ( \"references\" , references ) . toString (); } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null ) return false ; if ( o instanceof GuavaBean ) { final GuavaBean other = ( GuavaBean ) o ; return Objects . equal ( name , other . name ) && Objects . equal ( id , other . id ) && Objects . equal ( references , other . references ); } return false ; } @Override public int hashCode () { return Objects . hashCode ( name , id , references ); } } 3. Java 7 Utils import java.util.Objects ; public class JavaSevenBean { ... @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass () != o . getClass ()) return false ; JavaSevenBean that = ( JavaSevenBean ) o ; return Objects . equals ( name , that . name ) && Objects . equals ( id , that . id ) && Objects . equals ( references , that . references ); } @Override public int hashCode () { return Objects . hash ( name , id , references ); } }","title":"Equals, HashCode and toString in Java"},{"location":"blog/2013/2013-05-20-equals-hashcode-and-tostring-in-java/#summary","text":"Both Apache Commons Lang and Google Guava are additional jars in you project. So, when should we use these libraries: I prefer to avoid using additional libraries if I need only small amount of library functionality. I.e. don\u2019t add Apache Commons/Guava into your project if you need equals , hashCode and toString only. Use full power of existent projects libraries. Don\u2019t reinvent the wheel. Almost all mid-size project has Apache Commons or Guava (or both). Use modern Java 7 feature if it\u2019s possible in your current environment. I can\u2019t make preference between Guava and Apache Commons. Just stick to the current project state and select library which will be more useful. Don\u2019t be dogmatic . IDE generated equals , hashCode and toString methods are not readable. And in general cases they are boilerplate and hard to maintain. It\u2019s very easy to forget re-generate/update them.","title":"Summary"},{"location":"blog/2013/2013-05-20-equals-hashcode-and-tostring-in-java/#references","text":"Apache Commons Lang JavaDoc Apache Commons Lang ToStringBuilder Style Apache Commons Lang Hashcode and Equals Apache Commons Lang Equalsbuilder Guava Object common methods Guava Objects JavaDoc Java 7 Objects Util equals hash GitHub repo https://github.com/halyph/equalsHashString","title":"References"},{"location":"blog/2013/2013-05-23-graphics-unit-conversion/","text":"Graphics Unit Conversion | java | Working with PDF files and with scanned images it always required to convert from point to millimeter, or from millimeter to pixel, and so on. There is very interesting quote from iText in Action book: What is the measurement unit in PDF documents? Most of the measurements in PDFs are expressed in user space units. ISO-32000-1 (section 8.3.2.3) tells us \u201cthe default for the size of the unit in default user space (1/72 inch) is approximately the same as a point (pt), a unit widely used in the printing industry. It is not exactly the same; there is no universal definition of a point.\u201d In short, 1 in. = 25.4 mm = 72 user units (which roughly corresponds to 72 pt). Of course, you can easily write these utilities by yourself. But, sometimes it makes sense to look around in your project, maybe you\u2019ve already had all required utils. So, here are code snippets from several libraries 1. Barcode4j package org.krysalis.barcode4j.tools ; /** * Utility class for unit conversions. * * @author Jeremias Maerki * @version $Id: UnitConv.java,v 1.2 2004/09/04 20:25:56 jmaerki Exp $ */ public class UnitConv { /** * Utility class: Constructor prevents instantiating when subclassed. */ protected UnitConv () { throw new UnsupportedOperationException (); } /** * Converts millimeters (mm) to points (pt) * @param mm the value in mm * @return the value in pt */ public static double mm2pt ( double mm ) { return mm * 2.835 ; } /** * Converts points (pt) to millimeters (mm) * @param pt the value in pt * @return the value in mm */ public static double pt2mm ( double pt ) { return pt / 2.835 ; } /** * Converts millimeters (mm) to inches (in) * @param mm the value in mm * @return the value in inches */ public static double mm2in ( double mm ) { return mm / 25.4 ; } /** * Converts inches (in) to millimeters (mm) * @param in the value in inches * @return the value in mm */ public static double in2mm ( double in ) { return in * 25.4 ; } /** * Converts millimeters (mm) to pixels (px) * @param mm the value in mm * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels */ public static int mm2px ( double mm , int resolution ) { return ( int ) Math . round ( mm2in ( mm ) * resolution ); } } 2. iText v.4.2 package com.lowagie.text ; /** * A collection of convenience methods that were present in many different iText * classes. */ public class Utilities { ... /** * Measurement conversion from millimeters to points. * @param value a value in millimeters * @return a value in points * @since 2.1.2 */ public static final float millimetersToPoints ( float value ) { return inchesToPoints ( millimetersToInches ( value )); } /** * Measurement conversion from millimeters to inches. * @param value a value in millimeters * @return a value in inches * @since 2.1.2 */ public static final float millimetersToInches ( float value ) { return value / 25.4f ; } /** * Measurement conversion from points to millimeters. * @param value a value in points * @return a value in millimeters * @since 2.1.2 */ public static final float pointsToMillimeters ( float value ) { return inchesToMillimeters ( pointsToInches ( value )); } /** * Measurement conversion from points to inches. * @param value a value in points * @return a value in inches * @since 2.1.2 */ public static final float pointsToInches ( float value ) { return value / 72 f ; } /** * Measurement conversion from inches to millimeters. * @param value a value in inches * @return a value in millimeters * @since 2.1.2 */ public static final float inchesToMillimeters ( float value ) { return value * 25.4f ; } /** * Measurement conversion from inches to points. * @param value a value in inches * @return a value in points * @since 2.1.2 */ public static final float inchesToPoints ( float value ) { return value * 72 f ; } ... } 3. FOP package org.apache.fop.util ; import java.awt.geom.AffineTransform ; /** * Utility class for unit conversions. * @deprecated use org.apache.xmlgraphics.util.UnitConv instead. */ public final class UnitConv { /** * conversion factory from millimeters to inches. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2MM instead. */ public static final float IN2MM = org . apache . xmlgraphics . util . UnitConv . IN2MM ; /** * conversion factory from centimeters to inches. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2CM instead. */ public static final float IN2CM = org . apache . xmlgraphics . util . UnitConv . IN2CM ; /** * conversion factory from inches to points. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2PT instead. */ public static final int IN2PT = org . apache . xmlgraphics . util . UnitConv . IN2PT ; /** * Converts millimeters (mm) to points (pt) * @param mm the value in mm * @return the value in pt * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2pt(mm) instead. */ public static double mm2pt ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2pt ( mm ); } /** * Converts millimeters (mm) to millipoints (mpt) * @param mm the value in mm * @return the value in mpt * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2mpt(mm) instead. */ public static double mm2mpt ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2mpt ( mm ); } /** * Converts points (pt) to millimeters (mm) * @param pt the value in pt * @return the value in mm * @deprecated use org.apache.xmlgraphics.util.UnitConv.pt2mm(pt) instead. */ public static double pt2mm ( double pt ) { return org . apache . xmlgraphics . util . UnitConv . pt2mm ( pt ); } /** * Converts millimeters (mm) to inches (in) * @param mm the value in mm * @return the value in inches * @deprecated use org.apache.xmlgraphics.util.UnitConv.pt2mm(pt) instead. */ public static double mm2in ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2in ( mm ); } /** * Converts inches (in) to millimeters (mm) * @param in the value in inches * @return the value in mm * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2mm(in) instead. */ public static double in2mm ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2mm ( in ); } /** * Converts inches (in) to millipoints (mpt) * @param in the value in inches * @return the value in mpt * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2mpt(in) instead. */ public static double in2mpt ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2mpt ( in ); } /** * Converts inches (in) to points (pt) * @param in the value in inches * @return the value in pt * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2pt(in) instead. */ public static double in2pt ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2pt ( in ); } /** * Converts millipoints (mpt) to inches (in) * @param mpt the value in mpt * @return the value in inches * @deprecated use org.apache.xmlgraphics.util.UnitConv.mpt2in(mpt) instead. */ public static double mpt2in ( double mpt ) { return org . apache . xmlgraphics . util . UnitConv . mpt2in ( mpt ); } /** * Converts millimeters (mm) to pixels (px) * @param mm the value in mm * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2px(mm, resolution) instead. */ public static double mm2px ( double mm , int resolution ) { return org . apache . xmlgraphics . util . UnitConv . mm2px ( mm , resolution ); } /** * Converts millipoints (mpt) to pixels (px) * @param mpt the value in mpt * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels * @deprecated use org.apache.xmlgraphics.util.UnitConv.mpt2px(mpt, resolution) instead. */ public static double mpt2px ( double mpt , int resolution ) { return org . apache . xmlgraphics . util . UnitConv . mpt2px ( mpt , resolution ); } /** * Converts a millipoint-based transformation matrix to points. * @param at a millipoint-based transformation matrix * @return a point-based transformation matrix * @deprecated use org.apache.xmlgraphics.util.UnitConv.mptToPt(at) instead. */ public static AffineTransform mptToPt ( AffineTransform at ) { return org . apache . xmlgraphics . util . UnitConv . mptToPt ( at ); } /** * Converts a point-based transformation matrix to millipoints. * @param at a point-based transformation matrix * @return a millipoint-based transformation matrix * @deprecated use org.apache.xmlgraphics.util.UnitConv.ptToMpt(at) instead. */ public static AffineTransform ptToMpt ( AffineTransform at ) { return org . apache . xmlgraphics . util . UnitConv . ptToMpt ( at ); } }","title":"Graphics Unit Conversion"},{"location":"blog/2013/2013-05-23-graphics-unit-conversion/#graphics-unit-conversion","text":"| java | Working with PDF files and with scanned images it always required to convert from point to millimeter, or from millimeter to pixel, and so on. There is very interesting quote from iText in Action book: What is the measurement unit in PDF documents? Most of the measurements in PDFs are expressed in user space units. ISO-32000-1 (section 8.3.2.3) tells us \u201cthe default for the size of the unit in default user space (1/72 inch) is approximately the same as a point (pt), a unit widely used in the printing industry. It is not exactly the same; there is no universal definition of a point.\u201d In short, 1 in. = 25.4 mm = 72 user units (which roughly corresponds to 72 pt). Of course, you can easily write these utilities by yourself. But, sometimes it makes sense to look around in your project, maybe you\u2019ve already had all required utils. So, here are code snippets from several libraries 1. Barcode4j package org.krysalis.barcode4j.tools ; /** * Utility class for unit conversions. * * @author Jeremias Maerki * @version $Id: UnitConv.java,v 1.2 2004/09/04 20:25:56 jmaerki Exp $ */ public class UnitConv { /** * Utility class: Constructor prevents instantiating when subclassed. */ protected UnitConv () { throw new UnsupportedOperationException (); } /** * Converts millimeters (mm) to points (pt) * @param mm the value in mm * @return the value in pt */ public static double mm2pt ( double mm ) { return mm * 2.835 ; } /** * Converts points (pt) to millimeters (mm) * @param pt the value in pt * @return the value in mm */ public static double pt2mm ( double pt ) { return pt / 2.835 ; } /** * Converts millimeters (mm) to inches (in) * @param mm the value in mm * @return the value in inches */ public static double mm2in ( double mm ) { return mm / 25.4 ; } /** * Converts inches (in) to millimeters (mm) * @param in the value in inches * @return the value in mm */ public static double in2mm ( double in ) { return in * 25.4 ; } /** * Converts millimeters (mm) to pixels (px) * @param mm the value in mm * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels */ public static int mm2px ( double mm , int resolution ) { return ( int ) Math . round ( mm2in ( mm ) * resolution ); } } 2. iText v.4.2 package com.lowagie.text ; /** * A collection of convenience methods that were present in many different iText * classes. */ public class Utilities { ... /** * Measurement conversion from millimeters to points. * @param value a value in millimeters * @return a value in points * @since 2.1.2 */ public static final float millimetersToPoints ( float value ) { return inchesToPoints ( millimetersToInches ( value )); } /** * Measurement conversion from millimeters to inches. * @param value a value in millimeters * @return a value in inches * @since 2.1.2 */ public static final float millimetersToInches ( float value ) { return value / 25.4f ; } /** * Measurement conversion from points to millimeters. * @param value a value in points * @return a value in millimeters * @since 2.1.2 */ public static final float pointsToMillimeters ( float value ) { return inchesToMillimeters ( pointsToInches ( value )); } /** * Measurement conversion from points to inches. * @param value a value in points * @return a value in inches * @since 2.1.2 */ public static final float pointsToInches ( float value ) { return value / 72 f ; } /** * Measurement conversion from inches to millimeters. * @param value a value in inches * @return a value in millimeters * @since 2.1.2 */ public static final float inchesToMillimeters ( float value ) { return value * 25.4f ; } /** * Measurement conversion from inches to points. * @param value a value in inches * @return a value in points * @since 2.1.2 */ public static final float inchesToPoints ( float value ) { return value * 72 f ; } ... } 3. FOP package org.apache.fop.util ; import java.awt.geom.AffineTransform ; /** * Utility class for unit conversions. * @deprecated use org.apache.xmlgraphics.util.UnitConv instead. */ public final class UnitConv { /** * conversion factory from millimeters to inches. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2MM instead. */ public static final float IN2MM = org . apache . xmlgraphics . util . UnitConv . IN2MM ; /** * conversion factory from centimeters to inches. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2CM instead. */ public static final float IN2CM = org . apache . xmlgraphics . util . UnitConv . IN2CM ; /** * conversion factory from inches to points. * @deprecated use org.apache.xmlgraphics.util.UnitConv.IN2PT instead. */ public static final int IN2PT = org . apache . xmlgraphics . util . UnitConv . IN2PT ; /** * Converts millimeters (mm) to points (pt) * @param mm the value in mm * @return the value in pt * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2pt(mm) instead. */ public static double mm2pt ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2pt ( mm ); } /** * Converts millimeters (mm) to millipoints (mpt) * @param mm the value in mm * @return the value in mpt * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2mpt(mm) instead. */ public static double mm2mpt ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2mpt ( mm ); } /** * Converts points (pt) to millimeters (mm) * @param pt the value in pt * @return the value in mm * @deprecated use org.apache.xmlgraphics.util.UnitConv.pt2mm(pt) instead. */ public static double pt2mm ( double pt ) { return org . apache . xmlgraphics . util . UnitConv . pt2mm ( pt ); } /** * Converts millimeters (mm) to inches (in) * @param mm the value in mm * @return the value in inches * @deprecated use org.apache.xmlgraphics.util.UnitConv.pt2mm(pt) instead. */ public static double mm2in ( double mm ) { return org . apache . xmlgraphics . util . UnitConv . mm2in ( mm ); } /** * Converts inches (in) to millimeters (mm) * @param in the value in inches * @return the value in mm * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2mm(in) instead. */ public static double in2mm ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2mm ( in ); } /** * Converts inches (in) to millipoints (mpt) * @param in the value in inches * @return the value in mpt * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2mpt(in) instead. */ public static double in2mpt ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2mpt ( in ); } /** * Converts inches (in) to points (pt) * @param in the value in inches * @return the value in pt * @deprecated use org.apache.xmlgraphics.util.UnitConv.in2pt(in) instead. */ public static double in2pt ( double in ) { return org . apache . xmlgraphics . util . UnitConv . in2pt ( in ); } /** * Converts millipoints (mpt) to inches (in) * @param mpt the value in mpt * @return the value in inches * @deprecated use org.apache.xmlgraphics.util.UnitConv.mpt2in(mpt) instead. */ public static double mpt2in ( double mpt ) { return org . apache . xmlgraphics . util . UnitConv . mpt2in ( mpt ); } /** * Converts millimeters (mm) to pixels (px) * @param mm the value in mm * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels * @deprecated use org.apache.xmlgraphics.util.UnitConv.mm2px(mm, resolution) instead. */ public static double mm2px ( double mm , int resolution ) { return org . apache . xmlgraphics . util . UnitConv . mm2px ( mm , resolution ); } /** * Converts millipoints (mpt) to pixels (px) * @param mpt the value in mpt * @param resolution the resolution in dpi (dots per inch) * @return the value in pixels * @deprecated use org.apache.xmlgraphics.util.UnitConv.mpt2px(mpt, resolution) instead. */ public static double mpt2px ( double mpt , int resolution ) { return org . apache . xmlgraphics . util . UnitConv . mpt2px ( mpt , resolution ); } /** * Converts a millipoint-based transformation matrix to points. * @param at a millipoint-based transformation matrix * @return a point-based transformation matrix * @deprecated use org.apache.xmlgraphics.util.UnitConv.mptToPt(at) instead. */ public static AffineTransform mptToPt ( AffineTransform at ) { return org . apache . xmlgraphics . util . UnitConv . mptToPt ( at ); } /** * Converts a point-based transformation matrix to millipoints. * @param at a point-based transformation matrix * @return a millipoint-based transformation matrix * @deprecated use org.apache.xmlgraphics.util.UnitConv.ptToMpt(at) instead. */ public static AffineTransform ptToMpt ( AffineTransform at ) { return org . apache . xmlgraphics . util . UnitConv . ptToMpt ( at ); } }","title":"Graphics Unit Conversion"},{"location":"blog/2013/2013-05-27-jeeconf-kiev/","text":"JEEConf - Kyiv, 2013 - Report | conference | java | The third JEEConf was superb. It was well organized, with friendly atmosphere and high-quality speakers. And I had a dilemma what topics/speaker I should visit. :-) So, I\u2019ve selected the next speakers: Oleg \u0160elajev , \u201cTaming Java Agents\u201d It was really nice intro into Java Agents. Now I have a clue how and when to use them. Yakov Fain : \u201cSpeed up your Web applications with HTML5 WebSockets\u201d Yakov explained what is Pooling, Long Pooling and WebSockets. He has shown clear and simple demos which highlighted pros&cons of each approaches. \u201cSurviving as a professional software developer\u201d It was philosophical talk. Everybody has taken something and applied on your current job. Jacek Laskowski : \u201c Introduction to functional programming in Scala \u201d (see speaker blog post Introduction to functional programming in Scala at JEEConf in Kiev, Ukraine ) Jakek nicely introduced FP. Very easy to understand and without Scala magic. Very good job. \u201c Introduction to web application development in Clojure \u201d (see Introduction to Web Application Development in Clojure at JEEConf in Kiev, Ukraine ) Clojure is very simple language. How can we write Web app without bloated framework? All this was shown in this talk. Also, Jacek highlighted the major Clojure ecosystem tools, approaches and practices. Nice intro for further dive in Clojure Web development. Dr. Venkat Subramaniam: : \u201cProgramming with Actors \u201d Venkat has shown the benefits of using Actors in Java. \u201c Picking a JVM Language, which one is right for you? \u201d The main idea is NOT to be language agnostic. Use the right tool for the job. \u201c The Art of Simplicity \u201d These talk was very inspiring. The word \u201csimplicity\u201d was nicely explained from different angles. \u0421\u0435\u0440\u0433\u0435\u0439 \u041a\u0443\u043a\u0441\u0435\u043d\u043a\u043e , \u201c JDK8: \u041c\u043e\u043b\u043e\u0442 \u043b\u044f\u043c\u0431\u0434 \u201d In this talk the speaker has shown changes in Java 8 related with lambda. And shown how to use new API based on lambda. It was very inspiring to learn more about lambda. Unfortunately, there were other topics which went in parallel. Now, I\u2019m waiting on video from organizer. On the photo from left to right: 3) Venkat Subramaniam, 4) Mohamed Taman 5) me, 6) Jacek Laskowsk, 7) Reza Rahma and 8)Anton Keks.","title":"JEEConf - Kyiv, 2013 - Report"},{"location":"blog/2013/2013-05-27-jeeconf-kiev/#jeeconf-kyiv-2013-report","text":"| conference | java | The third JEEConf was superb. It was well organized, with friendly atmosphere and high-quality speakers. And I had a dilemma what topics/speaker I should visit. :-) So, I\u2019ve selected the next speakers: Oleg \u0160elajev , \u201cTaming Java Agents\u201d It was really nice intro into Java Agents. Now I have a clue how and when to use them. Yakov Fain : \u201cSpeed up your Web applications with HTML5 WebSockets\u201d Yakov explained what is Pooling, Long Pooling and WebSockets. He has shown clear and simple demos which highlighted pros&cons of each approaches. \u201cSurviving as a professional software developer\u201d It was philosophical talk. Everybody has taken something and applied on your current job. Jacek Laskowski : \u201c Introduction to functional programming in Scala \u201d (see speaker blog post Introduction to functional programming in Scala at JEEConf in Kiev, Ukraine ) Jakek nicely introduced FP. Very easy to understand and without Scala magic. Very good job. \u201c Introduction to web application development in Clojure \u201d (see Introduction to Web Application Development in Clojure at JEEConf in Kiev, Ukraine ) Clojure is very simple language. How can we write Web app without bloated framework? All this was shown in this talk. Also, Jacek highlighted the major Clojure ecosystem tools, approaches and practices. Nice intro for further dive in Clojure Web development. Dr. Venkat Subramaniam: : \u201cProgramming with Actors \u201d Venkat has shown the benefits of using Actors in Java. \u201c Picking a JVM Language, which one is right for you? \u201d The main idea is NOT to be language agnostic. Use the right tool for the job. \u201c The Art of Simplicity \u201d These talk was very inspiring. The word \u201csimplicity\u201d was nicely explained from different angles. \u0421\u0435\u0440\u0433\u0435\u0439 \u041a\u0443\u043a\u0441\u0435\u043d\u043a\u043e , \u201c JDK8: \u041c\u043e\u043b\u043e\u0442 \u043b\u044f\u043c\u0431\u0434 \u201d In this talk the speaker has shown changes in Java 8 related with lambda. And shown how to use new API based on lambda. It was very inspiring to learn more about lambda. Unfortunately, there were other topics which went in parallel. Now, I\u2019m waiting on video from organizer. On the photo from left to right: 3) Venkat Subramaniam, 4) Mohamed Taman 5) me, 6) Jacek Laskowsk, 7) Reza Rahma and 8)Anton Keks.","title":"JEEConf - Kyiv, 2013 - Report"},{"location":"blog/2013/2013-06-14-java-barcode-generation-and-scanning/","text":"Java Barcode Generation and Scanning Library | java | Recently I had to pick library which can generate and scan different 2D barcodes. Actually I was interested in QR Code and Data Matrix . There is only ONE open source Java library which generates and scans barcode, it\u2019s Zxing . You might say there are others, but they cost money. I\u2019ve been following Zxing some time and must admit that this library has very vibrant community, code base is clean, plenty of unit tests. Also, API is very clean. Here is a simple code snippet for scanning Data Matrix barcode: String filename = \"file.png\" ; Map < DecodeHintType , Object > hints = new EnumMap < DecodeHintType , Object > ( DecodeHintType . class ); hints . put ( DecodeHintType . POSSIBLE \\ _FORMATS , Arrays . asList ( BarcodeFormat . DATA_MATRIX )); hints . put ( DecodeHintType . TRY_HARDER , Boolean . TRUE ); BinaryBitmap binaryBitmap = new BinaryBitmap ( new HybridBinarizer ( new BufferedImageLuminanceSource ( ImageIO . read ( new FileInputStream ( filename ))))); Result result = new MultiFormatReader (). decode ( binaryBitmap , hints ); System . out . println ( result . getText ()); I\u2019ve tested Zxing v.2.2 QR Code/Data Matrix scanning. And Zxing implementation for QR Code scanning is more robust and well implemented in comparison to Data Matrix. I.e. if you have freedom and can choose any of these two barcodes, than select QR Code. Note, there are several open source barcode generation libraries and only a few barcode scanners (actually one Zxing for Java)","title":"Java Barcode Generation and Scanning Library"},{"location":"blog/2013/2013-06-14-java-barcode-generation-and-scanning/#java-barcode-generation-and-scanning-library","text":"| java | Recently I had to pick library which can generate and scan different 2D barcodes. Actually I was interested in QR Code and Data Matrix . There is only ONE open source Java library which generates and scans barcode, it\u2019s Zxing . You might say there are others, but they cost money. I\u2019ve been following Zxing some time and must admit that this library has very vibrant community, code base is clean, plenty of unit tests. Also, API is very clean. Here is a simple code snippet for scanning Data Matrix barcode: String filename = \"file.png\" ; Map < DecodeHintType , Object > hints = new EnumMap < DecodeHintType , Object > ( DecodeHintType . class ); hints . put ( DecodeHintType . POSSIBLE \\ _FORMATS , Arrays . asList ( BarcodeFormat . DATA_MATRIX )); hints . put ( DecodeHintType . TRY_HARDER , Boolean . TRUE ); BinaryBitmap binaryBitmap = new BinaryBitmap ( new HybridBinarizer ( new BufferedImageLuminanceSource ( ImageIO . read ( new FileInputStream ( filename ))))); Result result = new MultiFormatReader (). decode ( binaryBitmap , hints ); System . out . println ( result . getText ()); I\u2019ve tested Zxing v.2.2 QR Code/Data Matrix scanning. And Zxing implementation for QR Code scanning is more robust and well implemented in comparison to Data Matrix. I.e. if you have freedom and can choose any of these two barcodes, than select QR Code. Note, there are several open source barcode generation libraries and only a few barcode scanners (actually one Zxing for Java)","title":"Java Barcode Generation and Scanning Library"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/","text":"JAI and Image Processing in Java | java | I have minimal experience with Image Processing and when I\u2019m talking about it I mean: read/write different image formats (jpg, png, tiff, ice, etc.) flip, rotate image crop and clip image by defined path convert image\u2019s color (e.g. RGB to gray scale) reduce image size find edges image histograms and color counting different operations (e.g. AND, OR and XOR) read image meta info Of course, I don\u2019t want to waist time implementing all these by myself, because it\u2019s basic operation in Image Processing (IP) domain. And I believe that all these tasks are pretty much trivial for any engineer who\u2019s working in Image Processing. As usual I have strict restriction regarding the licence of selected library (which can be used in any commercial product). So, I\u2019ve started googling. Here is the initial (and filtered) results: Java Advanced Imaging (JAI) - Sun Binary Code License ImageJ - Open Source, Public Domain Apache Commons Imaging - Apache License 2.0 JAITools - Simplified BSD License Marvin - LGPL License JAI This library was developed by SUN. Unfortunately, it\u2019s not supported anymore. But, it\u2019s very powerful and has nice facilities. JAI is available for Windows, Linux, Mac OS X, and Solaris, and takes advantage of native acceleration when available. However, you can use the JAI libraries on any platform if you add the following JAR files to your classpath: jai_core.jar and jai_codec.jar ( http://download.java.net/media/jai/builds/release/1_1_3/ ) jai_imageio.jar ( http://download.java.net/media/jai-imageio/builds/release/1.1/ ) JAI Tutorials, Guides, Sources Java Advanced Imaging API FAQ Java Image Processing Cookbook, by Rafael Santos it\u2019s very cool book with tons of samples Programming in Java\u2122 Advanced Imaging book. Just \u201cgoogle\u201d it. Also, you should check the JAI sources. Here is the master JAI project on java.net with several sub-projects: Jai-core Jai-demos Jai-webstart Jaistuff JAI Licenses. It\u2019s very tricky question. Here is the quote from java.net : As far as I know, the libraries from JAI and JAI Image I/O Tools can be bundled with a commercial product or can be downloaded on the fly using the Java Web Start technology. You might like to take a look at how people have been using JAI and JAI Image I/O Tools: http://java.sun.com/products/java-media/jai/success/ As for commercial license, you might like to read the LICENSE and README files for the binaries: http://download.java.net/media/jai/builds/release/1_1_3/LICENSE-jai.txt http://download.java.net/media/jai/builds/release/1_1_3/DISTRIBUTIONREAD\u2026 http://download.java.net/media/jai-imageio/builds/release/1.1/LICENSE-ja\u2026 http://download.java.net/media/jai-imageio/builds/release/1.1/DISTRIBUTI\u2026 and the licenses for the source code (if you make your own build of JAI): _ https://jai.dev.java.net/#Licenses https://jai-imageio.dev.java.net/index.html#Licenses I\u2019m not sure whether you can include this library into your commercial project. You should answer on this question by yourself. ImageJ It\u2019s a very popular application/library in Java community. I\u2019ve considered it also. This library has very big community. Also, it has many plugins. Documentation (User Guide, tutorials, wiki, FAQ, etc) are located in one place, easy to find. But, I wouldn\u2019t use ImageJ in case of simple image processing operations. Other Libraries I\u2019ve reviewed the mentioned above other libraries and I must say they have nice features also. But they are too heavy (as well as ImageJ) for the tasks I\u2019ve been trying to accomplish. Summary JAI isn\u2019t maintained by Oracle. You should be careful when including it in commercial product ImageJ , Commons Imaging , JAITools , and Marvin are providing huge set of IP facilities, but it might be redundant in your case. Plain Java core image library can solve almost all your needs, except TIFF/PDF file processing. TIFF/PDF file processing should be done by 3d-party libraries (e.g. iText, JAI). References open source image processing lib in java Java Advanced Imaging (JAI) Library for Enhanced Image Support https://java.net/projects/jai Where to find an up-to-date tutorial of JAI programming Commercial licence of JAI and Image IO libraries Where can I download Jai and Jai-imageio? Is JAI still being maintained? JAI Status","title":"JAI and Image Processing in Java"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#jai-and-image-processing-in-java","text":"| java | I have minimal experience with Image Processing and when I\u2019m talking about it I mean: read/write different image formats (jpg, png, tiff, ice, etc.) flip, rotate image crop and clip image by defined path convert image\u2019s color (e.g. RGB to gray scale) reduce image size find edges image histograms and color counting different operations (e.g. AND, OR and XOR) read image meta info Of course, I don\u2019t want to waist time implementing all these by myself, because it\u2019s basic operation in Image Processing (IP) domain. And I believe that all these tasks are pretty much trivial for any engineer who\u2019s working in Image Processing. As usual I have strict restriction regarding the licence of selected library (which can be used in any commercial product). So, I\u2019ve started googling. Here is the initial (and filtered) results: Java Advanced Imaging (JAI) - Sun Binary Code License ImageJ - Open Source, Public Domain Apache Commons Imaging - Apache License 2.0 JAITools - Simplified BSD License Marvin - LGPL License","title":"JAI and Image Processing in Java"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#jai","text":"This library was developed by SUN. Unfortunately, it\u2019s not supported anymore. But, it\u2019s very powerful and has nice facilities. JAI is available for Windows, Linux, Mac OS X, and Solaris, and takes advantage of native acceleration when available. However, you can use the JAI libraries on any platform if you add the following JAR files to your classpath: jai_core.jar and jai_codec.jar ( http://download.java.net/media/jai/builds/release/1_1_3/ ) jai_imageio.jar ( http://download.java.net/media/jai-imageio/builds/release/1.1/ )","title":"JAI"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#jai-tutorials-guides-sources","text":"Java Advanced Imaging API FAQ Java Image Processing Cookbook, by Rafael Santos it\u2019s very cool book with tons of samples Programming in Java\u2122 Advanced Imaging book. Just \u201cgoogle\u201d it. Also, you should check the JAI sources. Here is the master JAI project on java.net with several sub-projects: Jai-core Jai-demos Jai-webstart Jaistuff JAI Licenses. It\u2019s very tricky question. Here is the quote from java.net : As far as I know, the libraries from JAI and JAI Image I/O Tools can be bundled with a commercial product or can be downloaded on the fly using the Java Web Start technology. You might like to take a look at how people have been using JAI and JAI Image I/O Tools: http://java.sun.com/products/java-media/jai/success/ As for commercial license, you might like to read the LICENSE and README files for the binaries: http://download.java.net/media/jai/builds/release/1_1_3/LICENSE-jai.txt http://download.java.net/media/jai/builds/release/1_1_3/DISTRIBUTIONREAD\u2026 http://download.java.net/media/jai-imageio/builds/release/1.1/LICENSE-ja\u2026 http://download.java.net/media/jai-imageio/builds/release/1.1/DISTRIBUTI\u2026 and the licenses for the source code (if you make your own build of JAI): _ https://jai.dev.java.net/#Licenses https://jai-imageio.dev.java.net/index.html#Licenses I\u2019m not sure whether you can include this library into your commercial project. You should answer on this question by yourself.","title":"JAI Tutorials, Guides, Sources"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#imagej","text":"It\u2019s a very popular application/library in Java community. I\u2019ve considered it also. This library has very big community. Also, it has many plugins. Documentation (User Guide, tutorials, wiki, FAQ, etc) are located in one place, easy to find. But, I wouldn\u2019t use ImageJ in case of simple image processing operations.","title":"ImageJ"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#other-libraries","text":"I\u2019ve reviewed the mentioned above other libraries and I must say they have nice features also. But they are too heavy (as well as ImageJ) for the tasks I\u2019ve been trying to accomplish.","title":"Other Libraries"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#summary","text":"JAI isn\u2019t maintained by Oracle. You should be careful when including it in commercial product ImageJ , Commons Imaging , JAITools , and Marvin are providing huge set of IP facilities, but it might be redundant in your case. Plain Java core image library can solve almost all your needs, except TIFF/PDF file processing. TIFF/PDF file processing should be done by 3d-party libraries (e.g. iText, JAI).","title":"Summary"},{"location":"blog/2013/2013-07-01-jai-and-image-processing-in-java/#references","text":"open source image processing lib in java Java Advanced Imaging (JAI) Library for Enhanced Image Support https://java.net/projects/jai Where to find an up-to-date tutorial of JAI programming Commercial licence of JAI and Image IO libraries Where can I download Jai and Jai-imageio? Is JAI still being maintained? JAI Status","title":"References"},{"location":"blog/2013/2013-07-02-concurrency-vs-parallelism-definitions/","text":"Concurrency vs. Parallelism Definitions | general | Recently I had long discussion in scope of \u201cconcurrency\u201d and \u201cparallelism\u201d definitions. That\u2019s why I\u2019ve decided to pick the most trusted sources for these definitions in one place: From Akka documentation: Concurrency and parallelism are related concepts, but there are small differences. Concurrency means that two or more tasks are making progress even though they might not be executing simultaneously. This can for example be realized with time slicing where parts of tasks are executed sequentially and mixed with parts of other tasks. Parallelism on the other hand arise when the execution can be truly simultaneous. From Oracle \u201cMultithreaded Programming Guide\u201d: Parallelism - A condition that arises when at least two threads are executing simultaneously. Concurrency - A condition that exists when at least two threads are making progress. A more generalized form of parallelism that can include time-slicing as a form of virtual parallelism.","title":"Concurrency vs. Parallelism Definitions"},{"location":"blog/2013/2013-07-02-concurrency-vs-parallelism-definitions/#concurrency-vs-parallelism-definitions","text":"| general | Recently I had long discussion in scope of \u201cconcurrency\u201d and \u201cparallelism\u201d definitions. That\u2019s why I\u2019ve decided to pick the most trusted sources for these definitions in one place: From Akka documentation: Concurrency and parallelism are related concepts, but there are small differences. Concurrency means that two or more tasks are making progress even though they might not be executing simultaneously. This can for example be realized with time slicing where parts of tasks are executed sequentially and mixed with parts of other tasks. Parallelism on the other hand arise when the execution can be truly simultaneous. From Oracle \u201cMultithreaded Programming Guide\u201d: Parallelism - A condition that arises when at least two threads are executing simultaneously. Concurrency - A condition that exists when at least two threads are making progress. A more generalized form of parallelism that can include time-slicing as a form of virtual parallelism.","title":"Concurrency vs. Parallelism Definitions"},{"location":"blog/2013/2013-08-17-git-jenkins-gerrit-code-review-and-pre/","text":"Git, Jenkins, Gerrit, Code Review and pre-tested commits | git | tool | jenkins | This post is a note to myself. There are bunch of tools on the market which can be successfully used in yours development process. But, I\u2019m interested in git , Jenkins only. Also, git/jenkins supports tons on different workflows, but here I\u2019d like to talk about pre-tested commits. So, what does it mean \u201cpre-tested commit\u201d ? Initially this type of commits was introduced in TeamCity CI Server: Typically, your team submits code to Version Control BEFORE verifying that it works, and risks breaking the build every single time \u2014 causing more problems than necessary. [2] But, it\u2019s TeamCity and we need similar functionality in Jenkins. There are several ways to get it: Implement Jenkins plugin which can work with integration branches and simulate pre-tested workflow Reuse existing tool like Gerrit . But you say Gerrit is a code review tool. And you are right. Fortunately, Gerrit support pre-tested commit in his code review workflows (see source [3] ): Gerrit Code Review represents a step-forward in the way the team work on the code and share idea and the ownership of the design and coding decisions. (see [4] ) Tools required to support this workflow: git Jenkins Jenkins Gerrit Trigger To see all these in action I\u2019ve added two videos which demonstrate this concept: Youtube: Pre-Tested Commits with Jenkins Youtube: Gerrit, jenkins and sonar - video tutorial Also, it worth to review this slides . Here is nicely demonstrated why Gerrit is cool and why un-tested commit is bad. Gerrit Code Review from Luca Milanesio References: Pretested commits \u2013 why does it matter to us? Pre-Tested Commit: No broken code in your version control. Ever. TeamForge Git /Gerrit Integration with Jenkins CI Jenkins CI and Gerrit Code Review dance together Jeknins - Designing pre-tested commit Open Stack - Gerrit Workflow Open Stack - Gerrit Jenkins Github","title":"Git, Jenkins, Gerrit, Code Review and pre-tested commits"},{"location":"blog/2013/2013-08-17-git-jenkins-gerrit-code-review-and-pre/#git-jenkins-gerrit-code-review-and-pre-tested-commits","text":"| git | tool | jenkins | This post is a note to myself. There are bunch of tools on the market which can be successfully used in yours development process. But, I\u2019m interested in git , Jenkins only. Also, git/jenkins supports tons on different workflows, but here I\u2019d like to talk about pre-tested commits. So, what does it mean \u201cpre-tested commit\u201d ? Initially this type of commits was introduced in TeamCity CI Server: Typically, your team submits code to Version Control BEFORE verifying that it works, and risks breaking the build every single time \u2014 causing more problems than necessary. [2] But, it\u2019s TeamCity and we need similar functionality in Jenkins. There are several ways to get it: Implement Jenkins plugin which can work with integration branches and simulate pre-tested workflow Reuse existing tool like Gerrit . But you say Gerrit is a code review tool. And you are right. Fortunately, Gerrit support pre-tested commit in his code review workflows (see source [3] ): Gerrit Code Review represents a step-forward in the way the team work on the code and share idea and the ownership of the design and coding decisions. (see [4] ) Tools required to support this workflow: git Jenkins Jenkins Gerrit Trigger To see all these in action I\u2019ve added two videos which demonstrate this concept: Youtube: Pre-Tested Commits with Jenkins Youtube: Gerrit, jenkins and sonar - video tutorial Also, it worth to review this slides . Here is nicely demonstrated why Gerrit is cool and why un-tested commit is bad. Gerrit Code Review from Luca Milanesio References: Pretested commits \u2013 why does it matter to us? Pre-Tested Commit: No broken code in your version control. Ever. TeamForge Git /Gerrit Integration with Jenkins CI Jenkins CI and Gerrit Code Review dance together Jeknins - Designing pre-tested commit Open Stack - Gerrit Workflow Open Stack - Gerrit Jenkins Github","title":"Git, Jenkins, Gerrit, Code Review and pre-tested commits"},{"location":"blog/2013/2013-08-27-how-to-remove-svn-folders-recursively/","text":"How to remove .svn folders recursively? | bash | Validate the list of folders which will be removed: $ find . -name .svn -exec ls {} \\; Run recursive remove: $ find . -name .svn -exec rm -rf {} \\; This script is run from the current folder. Be sure you\u2019ve specified find -name properly. References How to remove all .svn directories from my application directories","title":"How to remove .svn folders recursively?"},{"location":"blog/2013/2013-08-27-how-to-remove-svn-folders-recursively/#how-to-remove-svn-folders-recursively","text":"| bash | Validate the list of folders which will be removed: $ find . -name .svn -exec ls {} \\; Run recursive remove: $ find . -name .svn -exec rm -rf {} \\; This script is run from the current folder. Be sure you\u2019ve specified find -name properly.","title":"How to remove .svn folders recursively?"},{"location":"blog/2013/2013-08-27-how-to-remove-svn-folders-recursively/#references","text":"How to remove all .svn directories from my application directories","title":"References"},{"location":"blog/2013/2013-10-03-java-object-to-object-mapper/","text":"Java Object to Object Mapper | java | I\u2019ve been using Dozer some time on the project. But, recently I have got very interesting error which motivates me to look around and try to use other Object to Object mapper. Here is the list of tools I\u2019ve found: Dozer: Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another. Typically, these Java Beans will be of different complex types. Orika: Orika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another. It can be very useful when developing multi-layered applications. Transmorph : Transmorph is a free java library used to convert a Java object of one type into an object of another type (with another signature, possibly parameterized). EZMorph : EZMorph is simple java library for transforming an Object to another Object. It supports transformations for primitives and Objects, for multidimensional arrays and transformations with DynaBeans Commons-BeanUtils : ConvertUtils -> Utility methods for converting String scalar values to objects of the specified Class, String arrays to arrays of the specified Class. Commons-Lang : ArrayUtils -> Operations on arrays, primitive arrays (like int[]) and primitive wrapper arrays (like Integer[]). Commons-Convert : Commons-Convert aims to provide a single library dedicated to the task of converting an object of one type to another. The first stage will focus on Object to String and String to Object conversions. Morph : Morph is a Java framework that eases the internal interoperability of an application. As information flows through an application, it undergoes multiple transformations. Morph provides a standard way to implement these transformations. Lorentz : Lorentz is a generic object-to-object conversion framework. It provides a simple API to convert a Java objects of one type into an object of another type. (seems dead) Spring framework : Spring has an excellent support for PropertyEditors, that can also be used to transform Objects to/from Strings. ModelMapper : ModelMapper is an intelligent object mapping framework that automatically maps objects to each other. It uses a convention based approach to map objects while providing a simple refactoring safe API for handling specific use cases. OTOM : With OTOM, you can copy any data from any object to any other object. The possibilities are endless. Welcome to \u201cAutumn\u201d. Smooks : The Smooks JavaBean Cartridge allows you to create and populate Java objects from your message data (i.e. bind data to). Nomin : Nomin is a mapping engine for the Java platform transforming object trees according to declarative mapping rules. This Java mapping framework aims to reduce efforts when it\u2019s needed to map different structures to each other. Modelbridge : Modelbridge is an Eclipse plugin that lets you copy data between Java objects. omapper : This project aims at providing a simple library to ease the process of mapping objects or beans from one design layer to another design layer, using annotations. One can specify mappings both in source class (Sink Annotation) and target class(Source Annotation). Supports mapping composed user class objects and array fields. Moo : Moo maps an object or graph of objects to another object or set of objects while trying to stay as unintrusive as possible and easy-to-use. Moo makes it possible to create quick copies and data transfer objects. OpenL Tablets : treats tables in Excel and Word files as a source of application logic. This approach may be unusual, but it has it\u2019s own unique advantages, in particular it allows to close the gap between business world and IT world. JMapper : JMapper Framework is a java bean to java bean mapper, allows you to perform the passage of data dynamically with annotations and / or XML. References Dozer vs Orika vs Manual any tool for java object to object mapping?","title":"Java Object to Object Mapper"},{"location":"blog/2013/2013-10-03-java-object-to-object-mapper/#java-object-to-object-mapper","text":"| java | I\u2019ve been using Dozer some time on the project. But, recently I have got very interesting error which motivates me to look around and try to use other Object to Object mapper. Here is the list of tools I\u2019ve found: Dozer: Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another. Typically, these Java Beans will be of different complex types. Orika: Orika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another. It can be very useful when developing multi-layered applications. Transmorph : Transmorph is a free java library used to convert a Java object of one type into an object of another type (with another signature, possibly parameterized). EZMorph : EZMorph is simple java library for transforming an Object to another Object. It supports transformations for primitives and Objects, for multidimensional arrays and transformations with DynaBeans Commons-BeanUtils : ConvertUtils -> Utility methods for converting String scalar values to objects of the specified Class, String arrays to arrays of the specified Class. Commons-Lang : ArrayUtils -> Operations on arrays, primitive arrays (like int[]) and primitive wrapper arrays (like Integer[]). Commons-Convert : Commons-Convert aims to provide a single library dedicated to the task of converting an object of one type to another. The first stage will focus on Object to String and String to Object conversions. Morph : Morph is a Java framework that eases the internal interoperability of an application. As information flows through an application, it undergoes multiple transformations. Morph provides a standard way to implement these transformations. Lorentz : Lorentz is a generic object-to-object conversion framework. It provides a simple API to convert a Java objects of one type into an object of another type. (seems dead) Spring framework : Spring has an excellent support for PropertyEditors, that can also be used to transform Objects to/from Strings. ModelMapper : ModelMapper is an intelligent object mapping framework that automatically maps objects to each other. It uses a convention based approach to map objects while providing a simple refactoring safe API for handling specific use cases. OTOM : With OTOM, you can copy any data from any object to any other object. The possibilities are endless. Welcome to \u201cAutumn\u201d. Smooks : The Smooks JavaBean Cartridge allows you to create and populate Java objects from your message data (i.e. bind data to). Nomin : Nomin is a mapping engine for the Java platform transforming object trees according to declarative mapping rules. This Java mapping framework aims to reduce efforts when it\u2019s needed to map different structures to each other. Modelbridge : Modelbridge is an Eclipse plugin that lets you copy data between Java objects. omapper : This project aims at providing a simple library to ease the process of mapping objects or beans from one design layer to another design layer, using annotations. One can specify mappings both in source class (Sink Annotation) and target class(Source Annotation). Supports mapping composed user class objects and array fields. Moo : Moo maps an object or graph of objects to another object or set of objects while trying to stay as unintrusive as possible and easy-to-use. Moo makes it possible to create quick copies and data transfer objects. OpenL Tablets : treats tables in Excel and Word files as a source of application logic. This approach may be unusual, but it has it\u2019s own unique advantages, in particular it allows to close the gap between business world and IT world. JMapper : JMapper Framework is a java bean to java bean mapper, allows you to perform the passage of data dynamically with annotations and / or XML.","title":"Java Object to Object Mapper"},{"location":"blog/2013/2013-10-03-java-object-to-object-mapper/#references","text":"Dozer vs Orika vs Manual any tool for java object to object mapping?","title":"References"},{"location":"blog/2013/2013-10-19-rest-with-jax-rs-part-1-spring-java/","text":"REST with JAX-RS: Part 1 - Spring Java Config | java | rest | spring | jax-rs | There are many Java REST frameworks. We can devide these frameworks on three groups: Spring MVC. It can be used to implement RESTful services. This framework has been widely used, mature, etc. But, Spring, in general, does not support JAX-RS standard. JAX-RS implementation. I know at least four frameworks: Apache CXF Jersey , the reference implementation from Oracle RESTeasy , JBoss \u2018s implementation Restlet Non-Standard. I.e. frameworks which do not support JAX-RS, or addition many other features. Please note, it assume that Spring MVC can be called \u201cstandard\u201d ;-) Dropwizard very cool frameworks. It supports not only JAX-RS. RESTX , lightweight framework. It\u2019s logically to ask yourself why don\u2019t use Spring MVC for REST services development. There is a very good article on InfoQ: A Comparison of Spring MVC and JAX-RS . I consider to use JAX-RS frameworks for REST API and Spring MVC for everything else . The most popular are Apache CXF and Jersey . Also, Apache CXF has SOAP services support. Actually, you can easily switch between JAX-RS frameworks till you use standard approaches. Let\u2019s create simple Spring JAX-RS application with Spring Java Configs (see sample application based on Spring context xml [3]) Create pom.xml file <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4\\_0\\_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> jaxrs-tutorials </groupid> <artifactid> jaxrs-tutorials </artifactid> <packaging> war </packaging> <version> 1.0-SNAPSHOT </version> <name> jaxrs-tutorials Maven Webapp </name> <url> http://maven.apache.org </url> <properties> <project .build.sourceencoding= \"\" > UTF-8 </project> <java-version> 1.7 </java-version> <cxf .version= \"\" > 2.7.6 </cxf> <org .springframework-version= \"\" > 3.2.3.RELEASE </org> <org .slf4j-version= \"\" > 1.7.5 </org> <ch .qos.logback-version= \"\" > 1.0.13 </ch> <servlet-version> 3.0.1 </servlet-version> <jackson-version> 2.0.2 </jackson-version> <maven-compiler-plugin-version> 3.0 </maven-compiler-plugin-version> <tomcat7-maven-plugin-version> 2.0 </tomcat7-maven-plugin-version> <maven-war-plugin-version> 2.2 </maven-war-plugin-version> <maven-resources-plugin-version> 2.6 </maven-resources-plugin-version> </properties> <dependencies> <dependency> <groupid> org.apache.cxf </groupid> <artifactid> cxf-rt-frontend-jaxrs </artifactid> <version> ${cxf.version} </version> </dependency> <!-- Spring --> <dependency> <groupid> org.springframework </groupid> <artifactid> spring-context </artifactid> <version> ${org.springframework-version} </version> <exclusions> <!-- Exclude Commons Logging in favor of SLF4j --> <exclusion> <groupid> commons-logging </groupid> <artifactid> commons-logging </artifactid> </exclusion> </exclusions> </dependency> <dependency> <groupid> org.springframework </groupid> <artifactid> spring-webmvc </artifactid> <version> ${org.springframework-version} </version> </dependency> <!-- Logging --> <dependency> <groupid> org.slf4j </groupid> <artifactid> slf4j-api </artifactid> <version> ${org.slf4j-version} </version> </dependency> <dependency> <groupid> org.slf4j </groupid> <artifactid> jcl-over-slf4j </artifactid> <version> ${org.slf4j-version} </version> <scope> runtime </scope> </dependency> <dependency> <groupid> ch.qos.logback </groupid> <artifactid> logback-classic </artifactid> <version> ${ch.qos.logback-version} </version> </dependency> <!-- Servlet --> <dependency> <groupid> javax.servlet </groupid> <artifactid> javax.servlet-api </artifactid> <version> ${servlet-version} </version> <scope> provided </scope> </dependency> <!-- JSON Provider --> <dependency> <groupid> com.fasterxml.jackson.jaxrs </groupid> <artifactid> jackson-jaxrs-json-provider </artifactid> <version> ${jackson-version} </version> </dependency> </dependencies> <build> <finalname> jaxrs-tutorials </finalname> <plugins> <plugin> <groupid> org.apache.tomcat.maven </groupid> <artifactid> tomcat7-maven-plugin </artifactid> <version> 2.0 </version> <configuration> <path> / </path> <port> 8080 </port> </configuration> </plugin> <plugin> <groupid> org.apache.maven.plugins </groupid> <artifactid> maven-compiler-plugin </artifactid> <version> ${maven-compiler-plugin-version} </version> <configuration> <source> ${java-version} <target> ${java-version} </target> </configuration> </plugin> </plugins> </build> </project> Create some sample entity package com.halyph.entity ; public class User { private Integer id ; private String name ; public User () { } public User ( Integer id , String name ) { this . id = id ; this . name = name ; } public Integer getId () { return id ; } public void setId ( Integer id ) { this . id = id ; } public void setName ( String name ) { this . name = name ; } public String getName () { return name ; } @Override public String toString () { return String . format ( \"{id=%s,name=%s}\" , id , name ); } } We should implement Service(s) which manages this entity: package com.halyph.service ; import com.halyph.entity.User ; import javax.ws.rs.core.Response ; import java.util.Collection ; public interface UserService { Collection < User > getUsers (); User getUser ( Integer id ); Response add ( User user ); } package com.halyph.service ; import com.halyph.entity.User ; import org.springframework.stereotype.Service ; import javax.ws.rs.core.Response ; import java.util.Collection ; import java.util.HashMap ; import java.util.Map ; @Service ( \"userService\" ) public class UserServiceImpl implements UserService { private static Map < Integer , User > users = new HashMap < Integer , User > (); static { users . put ( 1 , new User ( 1 , \"foo\" )); users . put ( 2 , new User ( 2 , \"bar\" )); users . put ( 3 , new User ( 3 , \"baz\" )); } public UserServiceImpl () { } @Override public Collection < User > getUsers () { return users . values (); } @Override public User getUser ( Integer id ) { return users . get ( id ); } @Override public Response add ( User user ) { user . setId ( users . size () + 1 ); users . put ( user . getId (), user ); //do more stuff to add user to the system.. return Response . status ( Response . Status . OK ). build (); } } It\u2019s time to introduce REST services. with the next endpoints /api/users and /api/exception . So, we have bunch of REST URIs: GET /api/users - get all users GET /api/users/{id} - get user with id POST /api/users - accept \u201cuser\u201d json and create the specified user on back-end GET /api/exception - throw exception package com.halyph.rest ; import com.halyph.entity.User ; import com.halyph.service.UserService ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.factory.annotation.Autowired ; import javax.ws.rs.Consumes ; import javax.ws.rs.GET ; import javax.ws.rs.POST ; import javax.ws.rs.Path ; import javax.ws.rs.PathParam ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import java.util.Collection ; @Path ( \"/users\" ) @Produces ({ MediaType . APPLICATION \\ _JSON }) @Consumes ({ MediaType . APPLICATION \\ _JSON }) public class UserResource { private static Logger log = LoggerFactory . getLogger ( UserResource . class ); @Autowired UserService service ; public UserResource () { } @GET public Collection < User > getUsers () { return service . getUsers (); } @GET @Path ( \"/{id}\" ) public User getUser ( @PathParam ( \"id\" ) Integer id ) { return service . getUser ( id ); } @POST public Response add ( User user ) { log . info ( \"Adding user {}\" , user . getName ()); service . add ( user ); return Response . status ( Response . Status . OK ). build (); } } Also we added /api/exception REST url to demonstrate how CXF deals with exceptions: package com.halyph.rest ; import javax.ws.rs.GET ; import javax.ws.rs.Path ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; @Path ( \"/exception\" ) public class ExceptionResource { public ExceptionResource () { } @GET @Produces ( MediaType . TEXT \\ _PLAIN ) public String generateException () throws Exception { throw new Exception ( \"generateException from ExceptionResource\" ); } } So, what\u2019s left? In general we are creating some web.xml where we configure Apache CXF, etc. But, we will use Spring feature and implement all our configuration in Spring Java Configs. Our web.xml will be empty, some App Servers still require it: Next, we should create some class which does the same work which had been done by web.xml : package com.halyph.config ; import org.apache.cxf.transport.servlet.CXFServlet ; import org.springframework.web.WebApplicationInitializer ; import org.springframework.web.context.ContextLoaderListener ; import org.springframework.web.context.WebApplicationContext ; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext ; import javax.servlet.ServletContext ; import javax.servlet.ServletException ; import javax.servlet.ServletRegistration ; import java.util.Set ; public class WebAppInitializer implements WebApplicationInitializer { @Override public void onStartup ( ServletContext servletContext ) throws ServletException { servletContext . addListener ( new ContextLoaderListener ( createWebAppContext ())); addApacheCxfServlet ( servletContext ); } private void addApacheCxfServlet ( ServletContext servletContext ) { CXFServlet cxfServlet = new CXFServlet (); ServletRegistration . Dynamic appServlet = servletContext . addServlet ( \"CXFServlet\" , cxfServlet ); appServlet . setLoadOnStartup ( 1 ); Set < String > mappingConflicts = appServlet . addMapping ( \"/api/\\*\" ); } private WebApplicationContext createWebAppContext () { AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext (); appContext . register ( AppConfig . class ); return appContext ; } } So, web.xml is configured, now we should configure Spring context: package com.halyph.config ; import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider ; import com.halyph.rest.UserResource ; import org.apache.cxf.bus.spring.SpringBus ; import org.apache.cxf.endpoint.Server ; import org.apache.cxf.jaxrs.JAXRSServerFactoryBean ; import com.halyph.rest.ExceptionResource ; import com.halyph.service.UserService ; import com.halyph.service.UserServiceImpl ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.DependsOn ; import javax.ws.rs.ApplicationPath ; import javax.ws.rs.core.Application ; import javax.ws.rs.ext.RuntimeDelegate ; import java.util.Arrays ; @Configuration public class AppConfig { @ApplicationPath ( \"/\" ) public class JaxRsApiApplication extends Application { } @Bean ( destroyMethod = \"shutdown\" ) public SpringBus cxf () { return new SpringBus (); } @Bean @DependsOn ( \"cxf\" ) public Server jaxRsServer ( ApplicationContext appContext ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance (). createEndpoint ( jaxRsApiApplication (), JAXRSServerFactoryBean . class ); factory . setServiceBeans ( Arrays . < Object > asList ( userResource (), exceptionResource ())); factory . setAddress ( \"/\" + factory . getAddress ()); factory . setProvider ( jsonProvider ()); return factory . create (); } @Bean public JaxRsApiApplication jaxRsApiApplication () { return new JaxRsApiApplication (); } @Bean public JacksonJsonProvider jsonProvider () { return new JacksonJsonProvider (); } @Bean public UserService userService () { return new UserServiceImpl (); } @Bean public UserResource userResource () { return new UserResource (); } @Bean public ExceptionResource exceptionResource () { return new ExceptionResource (); } } Please note, how service and rest beans have been registered, also we added jackson provider which serialize bean in JSON format. We almost done, now we should verify out work. Run application: mvn clean tomcat7:run Test REST API: curl http://localhost:8080/api/users curl http://localhost:8080/api/users/1 curl -v http://localhost:8080/api/exception curl http://localhost:8080/api/users -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' curl http://localhost:8080/api/users After the last call you should get four users from back-end. $ curl http://localhost:8080/api/users [{ \"id\" :1, \"name\" : \"foo\" } , { \"id\" :2, \"name\" : \"bar\" } , { \"id\" :3, \"name\" : \"baz\" }] $ curl http://localhost:8080/api/users -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' $ curl http://localhost:8080/api/users [{ \"id\" :1, \"name\" : \"foo\" } , { \"id\" :2, \"name\" : \"bar\" } , { \"id\" :3, \"name\" : \"baz\" } , { \"id\" :4, \"name\" : \"John\" }] You can find sources on GitHub . References InfoQ: A Comparison of Spring MVC and JAX-RS REST client, CXF server : JAX-RS or SPRING-MVC ? REST web services with JAX-RS, Apache CXF and Spring Security Official Apache CXF Doc: Configuring JAX-RS services in container with Spring configuration file . Converting Jersey REST Examples to Apache CXF","title":"REST with JAX-RS: Part 1 - Spring Java Config"},{"location":"blog/2013/2013-10-19-rest-with-jax-rs-part-1-spring-java/#rest-with-jax-rs-part-1-spring-java-config","text":"| java | rest | spring | jax-rs | There are many Java REST frameworks. We can devide these frameworks on three groups: Spring MVC. It can be used to implement RESTful services. This framework has been widely used, mature, etc. But, Spring, in general, does not support JAX-RS standard. JAX-RS implementation. I know at least four frameworks: Apache CXF Jersey , the reference implementation from Oracle RESTeasy , JBoss \u2018s implementation Restlet Non-Standard. I.e. frameworks which do not support JAX-RS, or addition many other features. Please note, it assume that Spring MVC can be called \u201cstandard\u201d ;-) Dropwizard very cool frameworks. It supports not only JAX-RS. RESTX , lightweight framework. It\u2019s logically to ask yourself why don\u2019t use Spring MVC for REST services development. There is a very good article on InfoQ: A Comparison of Spring MVC and JAX-RS . I consider to use JAX-RS frameworks for REST API and Spring MVC for everything else . The most popular are Apache CXF and Jersey . Also, Apache CXF has SOAP services support. Actually, you can easily switch between JAX-RS frameworks till you use standard approaches. Let\u2019s create simple Spring JAX-RS application with Spring Java Configs (see sample application based on Spring context xml [3]) Create pom.xml file <project xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns= \"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4\\_0\\_0.xsd\" > <modelversion> 4.0.0 </modelversion> <groupid> jaxrs-tutorials </groupid> <artifactid> jaxrs-tutorials </artifactid> <packaging> war </packaging> <version> 1.0-SNAPSHOT </version> <name> jaxrs-tutorials Maven Webapp </name> <url> http://maven.apache.org </url> <properties> <project .build.sourceencoding= \"\" > UTF-8 </project> <java-version> 1.7 </java-version> <cxf .version= \"\" > 2.7.6 </cxf> <org .springframework-version= \"\" > 3.2.3.RELEASE </org> <org .slf4j-version= \"\" > 1.7.5 </org> <ch .qos.logback-version= \"\" > 1.0.13 </ch> <servlet-version> 3.0.1 </servlet-version> <jackson-version> 2.0.2 </jackson-version> <maven-compiler-plugin-version> 3.0 </maven-compiler-plugin-version> <tomcat7-maven-plugin-version> 2.0 </tomcat7-maven-plugin-version> <maven-war-plugin-version> 2.2 </maven-war-plugin-version> <maven-resources-plugin-version> 2.6 </maven-resources-plugin-version> </properties> <dependencies> <dependency> <groupid> org.apache.cxf </groupid> <artifactid> cxf-rt-frontend-jaxrs </artifactid> <version> ${cxf.version} </version> </dependency> <!-- Spring --> <dependency> <groupid> org.springframework </groupid> <artifactid> spring-context </artifactid> <version> ${org.springframework-version} </version> <exclusions> <!-- Exclude Commons Logging in favor of SLF4j --> <exclusion> <groupid> commons-logging </groupid> <artifactid> commons-logging </artifactid> </exclusion> </exclusions> </dependency> <dependency> <groupid> org.springframework </groupid> <artifactid> spring-webmvc </artifactid> <version> ${org.springframework-version} </version> </dependency> <!-- Logging --> <dependency> <groupid> org.slf4j </groupid> <artifactid> slf4j-api </artifactid> <version> ${org.slf4j-version} </version> </dependency> <dependency> <groupid> org.slf4j </groupid> <artifactid> jcl-over-slf4j </artifactid> <version> ${org.slf4j-version} </version> <scope> runtime </scope> </dependency> <dependency> <groupid> ch.qos.logback </groupid> <artifactid> logback-classic </artifactid> <version> ${ch.qos.logback-version} </version> </dependency> <!-- Servlet --> <dependency> <groupid> javax.servlet </groupid> <artifactid> javax.servlet-api </artifactid> <version> ${servlet-version} </version> <scope> provided </scope> </dependency> <!-- JSON Provider --> <dependency> <groupid> com.fasterxml.jackson.jaxrs </groupid> <artifactid> jackson-jaxrs-json-provider </artifactid> <version> ${jackson-version} </version> </dependency> </dependencies> <build> <finalname> jaxrs-tutorials </finalname> <plugins> <plugin> <groupid> org.apache.tomcat.maven </groupid> <artifactid> tomcat7-maven-plugin </artifactid> <version> 2.0 </version> <configuration> <path> / </path> <port> 8080 </port> </configuration> </plugin> <plugin> <groupid> org.apache.maven.plugins </groupid> <artifactid> maven-compiler-plugin </artifactid> <version> ${maven-compiler-plugin-version} </version> <configuration> <source> ${java-version} <target> ${java-version} </target> </configuration> </plugin> </plugins> </build> </project> Create some sample entity package com.halyph.entity ; public class User { private Integer id ; private String name ; public User () { } public User ( Integer id , String name ) { this . id = id ; this . name = name ; } public Integer getId () { return id ; } public void setId ( Integer id ) { this . id = id ; } public void setName ( String name ) { this . name = name ; } public String getName () { return name ; } @Override public String toString () { return String . format ( \"{id=%s,name=%s}\" , id , name ); } } We should implement Service(s) which manages this entity: package com.halyph.service ; import com.halyph.entity.User ; import javax.ws.rs.core.Response ; import java.util.Collection ; public interface UserService { Collection < User > getUsers (); User getUser ( Integer id ); Response add ( User user ); } package com.halyph.service ; import com.halyph.entity.User ; import org.springframework.stereotype.Service ; import javax.ws.rs.core.Response ; import java.util.Collection ; import java.util.HashMap ; import java.util.Map ; @Service ( \"userService\" ) public class UserServiceImpl implements UserService { private static Map < Integer , User > users = new HashMap < Integer , User > (); static { users . put ( 1 , new User ( 1 , \"foo\" )); users . put ( 2 , new User ( 2 , \"bar\" )); users . put ( 3 , new User ( 3 , \"baz\" )); } public UserServiceImpl () { } @Override public Collection < User > getUsers () { return users . values (); } @Override public User getUser ( Integer id ) { return users . get ( id ); } @Override public Response add ( User user ) { user . setId ( users . size () + 1 ); users . put ( user . getId (), user ); //do more stuff to add user to the system.. return Response . status ( Response . Status . OK ). build (); } } It\u2019s time to introduce REST services. with the next endpoints /api/users and /api/exception . So, we have bunch of REST URIs: GET /api/users - get all users GET /api/users/{id} - get user with id POST /api/users - accept \u201cuser\u201d json and create the specified user on back-end GET /api/exception - throw exception package com.halyph.rest ; import com.halyph.entity.User ; import com.halyph.service.UserService ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.factory.annotation.Autowired ; import javax.ws.rs.Consumes ; import javax.ws.rs.GET ; import javax.ws.rs.POST ; import javax.ws.rs.Path ; import javax.ws.rs.PathParam ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import java.util.Collection ; @Path ( \"/users\" ) @Produces ({ MediaType . APPLICATION \\ _JSON }) @Consumes ({ MediaType . APPLICATION \\ _JSON }) public class UserResource { private static Logger log = LoggerFactory . getLogger ( UserResource . class ); @Autowired UserService service ; public UserResource () { } @GET public Collection < User > getUsers () { return service . getUsers (); } @GET @Path ( \"/{id}\" ) public User getUser ( @PathParam ( \"id\" ) Integer id ) { return service . getUser ( id ); } @POST public Response add ( User user ) { log . info ( \"Adding user {}\" , user . getName ()); service . add ( user ); return Response . status ( Response . Status . OK ). build (); } } Also we added /api/exception REST url to demonstrate how CXF deals with exceptions: package com.halyph.rest ; import javax.ws.rs.GET ; import javax.ws.rs.Path ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; @Path ( \"/exception\" ) public class ExceptionResource { public ExceptionResource () { } @GET @Produces ( MediaType . TEXT \\ _PLAIN ) public String generateException () throws Exception { throw new Exception ( \"generateException from ExceptionResource\" ); } } So, what\u2019s left? In general we are creating some web.xml where we configure Apache CXF, etc. But, we will use Spring feature and implement all our configuration in Spring Java Configs. Our web.xml will be empty, some App Servers still require it: Next, we should create some class which does the same work which had been done by web.xml : package com.halyph.config ; import org.apache.cxf.transport.servlet.CXFServlet ; import org.springframework.web.WebApplicationInitializer ; import org.springframework.web.context.ContextLoaderListener ; import org.springframework.web.context.WebApplicationContext ; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext ; import javax.servlet.ServletContext ; import javax.servlet.ServletException ; import javax.servlet.ServletRegistration ; import java.util.Set ; public class WebAppInitializer implements WebApplicationInitializer { @Override public void onStartup ( ServletContext servletContext ) throws ServletException { servletContext . addListener ( new ContextLoaderListener ( createWebAppContext ())); addApacheCxfServlet ( servletContext ); } private void addApacheCxfServlet ( ServletContext servletContext ) { CXFServlet cxfServlet = new CXFServlet (); ServletRegistration . Dynamic appServlet = servletContext . addServlet ( \"CXFServlet\" , cxfServlet ); appServlet . setLoadOnStartup ( 1 ); Set < String > mappingConflicts = appServlet . addMapping ( \"/api/\\*\" ); } private WebApplicationContext createWebAppContext () { AnnotationConfigWebApplicationContext appContext = new AnnotationConfigWebApplicationContext (); appContext . register ( AppConfig . class ); return appContext ; } } So, web.xml is configured, now we should configure Spring context: package com.halyph.config ; import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider ; import com.halyph.rest.UserResource ; import org.apache.cxf.bus.spring.SpringBus ; import org.apache.cxf.endpoint.Server ; import org.apache.cxf.jaxrs.JAXRSServerFactoryBean ; import com.halyph.rest.ExceptionResource ; import com.halyph.service.UserService ; import com.halyph.service.UserServiceImpl ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.DependsOn ; import javax.ws.rs.ApplicationPath ; import javax.ws.rs.core.Application ; import javax.ws.rs.ext.RuntimeDelegate ; import java.util.Arrays ; @Configuration public class AppConfig { @ApplicationPath ( \"/\" ) public class JaxRsApiApplication extends Application { } @Bean ( destroyMethod = \"shutdown\" ) public SpringBus cxf () { return new SpringBus (); } @Bean @DependsOn ( \"cxf\" ) public Server jaxRsServer ( ApplicationContext appContext ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance (). createEndpoint ( jaxRsApiApplication (), JAXRSServerFactoryBean . class ); factory . setServiceBeans ( Arrays . < Object > asList ( userResource (), exceptionResource ())); factory . setAddress ( \"/\" + factory . getAddress ()); factory . setProvider ( jsonProvider ()); return factory . create (); } @Bean public JaxRsApiApplication jaxRsApiApplication () { return new JaxRsApiApplication (); } @Bean public JacksonJsonProvider jsonProvider () { return new JacksonJsonProvider (); } @Bean public UserService userService () { return new UserServiceImpl (); } @Bean public UserResource userResource () { return new UserResource (); } @Bean public ExceptionResource exceptionResource () { return new ExceptionResource (); } } Please note, how service and rest beans have been registered, also we added jackson provider which serialize bean in JSON format. We almost done, now we should verify out work. Run application: mvn clean tomcat7:run Test REST API: curl http://localhost:8080/api/users curl http://localhost:8080/api/users/1 curl -v http://localhost:8080/api/exception curl http://localhost:8080/api/users -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' curl http://localhost:8080/api/users After the last call you should get four users from back-end. $ curl http://localhost:8080/api/users [{ \"id\" :1, \"name\" : \"foo\" } , { \"id\" :2, \"name\" : \"bar\" } , { \"id\" :3, \"name\" : \"baz\" }] $ curl http://localhost:8080/api/users -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' $ curl http://localhost:8080/api/users [{ \"id\" :1, \"name\" : \"foo\" } , { \"id\" :2, \"name\" : \"bar\" } , { \"id\" :3, \"name\" : \"baz\" } , { \"id\" :4, \"name\" : \"John\" }] You can find sources on GitHub .","title":"REST with JAX-RS: Part 1 - Spring Java Config"},{"location":"blog/2013/2013-10-19-rest-with-jax-rs-part-1-spring-java/#references","text":"InfoQ: A Comparison of Spring MVC and JAX-RS REST client, CXF server : JAX-RS or SPRING-MVC ? REST web services with JAX-RS, Apache CXF and Spring Security Official Apache CXF Doc: Configuring JAX-RS services in container with Spring configuration file . Converting Jersey REST Examples to Apache CXF","title":"References"},{"location":"blog/2013/2013-10-20-rest-with-jax-rs-part-2-spring-java/","text":"REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement | java | rest | spring | jax-rs | See previous post: REST with JAX-RS: Part 1 - Spring Java Config Sample application from part 1 has several issues: It doesn\u2019t have application wide REST exception handler. This handler should catch and wrap all internal exceptions and present in some \u201cstandard\u201d JSON format There are no autowiring for REST Resources and JAX-RS providers. I.e. we shouldn\u2019t declare REST service beans/providers manually in AppConfig (see part1 ) CXF object mapper (Jackson) should be configured and registered in CXF somehow Let\u2019s try to fix all these issues. JAX-RS has special approach for exception handling - ExceptionMapper . Let\u2019s define two mappers: GeneralExceptionMapper - will catch and handle all Exceptions NotFoundExceptionMapper - will catch and handle only NotFoundException package com.halyph.rest.provider ; import javax.ws.rs.NotFoundException ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import javax.ws.rs.ext.ExceptionMapper ; import javax.ws.rs.ext.Provider ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; @Provider @Produces ( MediaType . APPLICATION \\ _JSON ) public class NotFoundExceptionMapper implements ExceptionMapper < NotFoundException > { /** * Map an exception to a {@link javax.ws.rs.core.Response}. * * @param exception the exception to map to a response. * @return a response mapped from the supplied exception. */ @Override public Response toResponse ( final NotFoundException exception ) { Map < String , Object > info = new HashMap <> (); info . put ( \"msg\" , exception . getMessage ()); info . put ( \"date\" , new Date ()); info . put ( \"details\" , \"The requested resource hasn't been found\" ); return Response . status ( Response . Status . INTERNAL \\ _SERVER \\ _ERROR ) . entity ( info ) . type ( MediaType . APPLICATION \\ _JSON ) . build (); } } package com.halyph.rest.provider ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import javax.ws.rs.ext.ExceptionMapper ; import javax.ws.rs.ext.Provider ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; @Provider @Produces ( MediaType . APPLICATION \\ _JSON ) public class GeneralExceptionMapper implements ExceptionMapper < exception > { /** * Map an exception to a {@link javax.ws.rs.core.Response}. * * @param exception the exception to map to a response. * @return a response mapped from the supplied exception. */ @Override public Response toResponse ( final Exception exception ) { Map < String , Object > info = new HashMap <> (); info . put ( \"msg\" , exception . getMessage ()); info . put ( \"date\" , new Date ()); return Response . status ( Response . Status . INTERNAL \\ _SERVER \\ _ERROR ) . entity ( info ) . type ( MediaType . APPLICATION \\ _JSON ) . build (); } } And, modify UserResource which throws NotFoundException when some user can\u2019t be found by specified id @RestService @Path ( \"/users\" ) @Produces ({ MediaType . APPLICATION \\ _JSON }) @Consumes ({ MediaType . APPLICATION \\ _JSON }) public class UserResource { ... @GET @Path ( \"/{id}\" ) public User getUser ( @PathParam ( \"id\" ) Integer id ) { User user = service . getUser ( id ); if ( user == null ) { throw new NotFoundException (); } else { return user ; } } ... } Now, we have to implement REST resource/provider autowiring. 1st we create custom @RestService annotation. package com.halyph.util.annotation ; import java.lang.annotation.Documented ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ( ElementType . TYPE ) @Documented public @interface RestService { } Now we have to implement Spring bean scanners which scan specified package and register \u201cselected\u201d beans in Spring context. package com.halyph.util ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.ClassPathBeanDefinitionScanner ; import org.springframework.context.support.GenericApplicationContext ; import org.springframework.core.type.filter.AnnotationTypeFilter ; import javax.ws.rs.ext.Provider ; import java.util.ArrayList ; import java.util.List ; public final class RestProviderBeanScanner { private RestProviderBeanScanner () { } public static List < Object > scan ( ApplicationContext applicationContext , String ... basePackages ) { GenericApplicationContext genericAppContext = new GenericApplicationContext (); ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner ( genericAppContext , false ); scanner . addIncludeFilter ( new AnnotationTypeFilter ( Provider . class )); scanner . scan ( basePackages ); genericAppContext . setParent ( applicationContext ); genericAppContext . refresh (); return new ArrayList <> ( genericAppContext . getBeansWithAnnotation ( Provider . class ). values ()); } } package com.halyph.util ; import com.halyph.util.annotation.RestService ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.ClassPathBeanDefinitionScanner ; import org.springframework.context.support.GenericApplicationContext ; import org.springframework.core.type.filter.AnnotationTypeFilter ; import java.util.ArrayList ; import java.util.List ; public final class RestServiceBeanScanner { private RestServiceBeanScanner () { } public static List < Object > scan ( ApplicationContext applicationContext , String ... basePackages ) { GenericApplicationContext genericAppContext = new GenericApplicationContext (); ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner ( genericAppContext , false ); scanner . addIncludeFilter ( new AnnotationTypeFilter ( RestService . class )); scanner . scan ( basePackages ); genericAppContext . setParent ( applicationContext ); genericAppContext . refresh (); List < Object > restResources = new ArrayList <> ( genericAppContext . getBeansWithAnnotation ( RestService . class ). values ()); return restResources ; } } These two classes (scanner) RestServiceBeanScanner and RestProviderBeanScanner are almost identical and should be refactored to support generic scanner type. Let\u2019s left this for home work. There is additional issue with missed Object Mapper configuration: package com.halyph.rest.provider ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import javax.ws.rs.ext.ContextResolver ; import javax.ws.rs.ext.Provider ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.TimeZone ; @Provider public class ObjectMapperProvider implements ContextResolver < Objectmapper > { final ObjectMapper objectMapper ; public ObjectMapperProvider () { this . objectMapper = new ObjectMapper (); this . objectMapper . configure ( SerializationFeature . INDENT \\ _OUTPUT , true ); //set up ISO 8601 date/time stamp format: final DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:sss'Z'\" ); df . setTimeZone ( TimeZone . getTimeZone ( \"UTC\" )); this . objectMapper . setDateFormat ( df ); } @Override public ObjectMapper getContext ( Class type ) { return this . objectMapper ; } } We have to update AppConfig: Add @ComponentScan to register services Call RestProviderBeanScanner to register providers: json provider, ExceptionMapper and ObjectMapperProvider Call RestServiceBeanScanner to register REST services marked with @RestService annotation package com.halyph.config ; import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider ; import com.halyph.util.RestProviderBeanScanner ; import com.halyph.util.RestServiceBeanScanner ; import org.apache.cxf.bus.spring.SpringBus ; import org.apache.cxf.endpoint.Server ; import org.apache.cxf.jaxrs.JAXRSServerFactoryBean ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.ComponentScan ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.DependsOn ; import javax.ws.rs.ApplicationPath ; import javax.ws.rs.core.Application ; import javax.ws.rs.ext.RuntimeDelegate ; import java.util.List ; @Configuration @ComponentScan ( AppConfig . SERVICE \\ _PACKAGE ) public class AppConfig { public static final String BASE \\ _PACKAGE = \"com.halyph\" ; public static final String SERVICE \\ _PACKAGE = BASE \\ _PACKAGE + \".service\" ; private static final String RESOURCES \\ _PACKAGE = BASE \\ _PACKAGE + \".rest\" ; private static final String PROVIDER \\ _PACKAGE = BASE \\ _PACKAGE + \".rest.provider\" ; @ApplicationPath ( \"/\" ) public class JaxRsApiApplication extends Application { } @Bean ( destroyMethod = \"shutdown\" ) public SpringBus cxf () { return new SpringBus (); } @Bean @DependsOn ( \"cxf\" ) public Server jaxRsServer ( ApplicationContext appContext ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance (). createEndpoint ( jaxRsApiApplication (), JAXRSServerFactoryBean . class ); factory . setServiceBeans ( restServiceList ( appContext )); factory . setAddress ( \"/\" + factory . getAddress ()); factory . setProviders ( restProviderList ( appContext , jsonProvider ())); return factory . create (); } @Bean public JaxRsApiApplication jaxRsApiApplication () { return new JaxRsApiApplication (); } @Bean public JacksonJsonProvider jsonProvider () { return new JacksonJsonProvider (); } private List < Object > restServiceList ( ApplicationContext appContext ) { return RestServiceBeanScanner . scan ( appContext , AppConfig . RESOURCES \\ _PACKAGE ); } private List < Object > restProviderList ( final ApplicationContext appContext , final JacksonJsonProvider jsonProvider ) { final List < Object > providers = RestProviderBeanScanner . scan ( appContext , PROVIDER \\ _PACKAGE ); providers . add ( jsonProvider ); return providers ; } } Now, we should test this. 1st run application: mvn clean tomcat7:run Verify REST API calls: # pretty printed JSON, see ObjectMapperProvider $ curl http://localhost:8080/api/users [ { \"id\" : 1 , \"name\" : \"foo\" } , { \"id\" : 2 , \"name\" : \"bar\" } , { \"id\" : 3 , \"name\" : \"baz\" } ] # try to get non-existent user, expected to get NotFoundException JSON $ curl http://localhost:8080/api/users/100 { \"details\" : \"The requested resource hasn't been found\" , \"date\" : \"2013-10-19T13:39:034Z\" , \"msg\" : null } # try to get GeneralException JSON $ curl http://localhost:8080/api/exception { \"date\" : \"2013-10-19T13:40:049Z\" , \"msg\" : \"generateException from ExceptionResource\" } You can find sources on GitHub References Apache CXF exception handler for jaxrs (REST) Official documentation: Apache CXF Exception handling","title":"REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement"},{"location":"blog/2013/2013-10-20-rest-with-jax-rs-part-2-spring-java/#rest-with-jax-rs-part-2-spring-java-config-and-cxf-improvement","text":"| java | rest | spring | jax-rs | See previous post: REST with JAX-RS: Part 1 - Spring Java Config Sample application from part 1 has several issues: It doesn\u2019t have application wide REST exception handler. This handler should catch and wrap all internal exceptions and present in some \u201cstandard\u201d JSON format There are no autowiring for REST Resources and JAX-RS providers. I.e. we shouldn\u2019t declare REST service beans/providers manually in AppConfig (see part1 ) CXF object mapper (Jackson) should be configured and registered in CXF somehow Let\u2019s try to fix all these issues. JAX-RS has special approach for exception handling - ExceptionMapper . Let\u2019s define two mappers: GeneralExceptionMapper - will catch and handle all Exceptions NotFoundExceptionMapper - will catch and handle only NotFoundException package com.halyph.rest.provider ; import javax.ws.rs.NotFoundException ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import javax.ws.rs.ext.ExceptionMapper ; import javax.ws.rs.ext.Provider ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; @Provider @Produces ( MediaType . APPLICATION \\ _JSON ) public class NotFoundExceptionMapper implements ExceptionMapper < NotFoundException > { /** * Map an exception to a {@link javax.ws.rs.core.Response}. * * @param exception the exception to map to a response. * @return a response mapped from the supplied exception. */ @Override public Response toResponse ( final NotFoundException exception ) { Map < String , Object > info = new HashMap <> (); info . put ( \"msg\" , exception . getMessage ()); info . put ( \"date\" , new Date ()); info . put ( \"details\" , \"The requested resource hasn't been found\" ); return Response . status ( Response . Status . INTERNAL \\ _SERVER \\ _ERROR ) . entity ( info ) . type ( MediaType . APPLICATION \\ _JSON ) . build (); } } package com.halyph.rest.provider ; import javax.ws.rs.Produces ; import javax.ws.rs.core.MediaType ; import javax.ws.rs.core.Response ; import javax.ws.rs.ext.ExceptionMapper ; import javax.ws.rs.ext.Provider ; import java.util.Date ; import java.util.HashMap ; import java.util.Map ; @Provider @Produces ( MediaType . APPLICATION \\ _JSON ) public class GeneralExceptionMapper implements ExceptionMapper < exception > { /** * Map an exception to a {@link javax.ws.rs.core.Response}. * * @param exception the exception to map to a response. * @return a response mapped from the supplied exception. */ @Override public Response toResponse ( final Exception exception ) { Map < String , Object > info = new HashMap <> (); info . put ( \"msg\" , exception . getMessage ()); info . put ( \"date\" , new Date ()); return Response . status ( Response . Status . INTERNAL \\ _SERVER \\ _ERROR ) . entity ( info ) . type ( MediaType . APPLICATION \\ _JSON ) . build (); } } And, modify UserResource which throws NotFoundException when some user can\u2019t be found by specified id @RestService @Path ( \"/users\" ) @Produces ({ MediaType . APPLICATION \\ _JSON }) @Consumes ({ MediaType . APPLICATION \\ _JSON }) public class UserResource { ... @GET @Path ( \"/{id}\" ) public User getUser ( @PathParam ( \"id\" ) Integer id ) { User user = service . getUser ( id ); if ( user == null ) { throw new NotFoundException (); } else { return user ; } } ... } Now, we have to implement REST resource/provider autowiring. 1st we create custom @RestService annotation. package com.halyph.util.annotation ; import java.lang.annotation.Documented ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Retention ( RetentionPolicy . RUNTIME ) @Target ( ElementType . TYPE ) @Documented public @interface RestService { } Now we have to implement Spring bean scanners which scan specified package and register \u201cselected\u201d beans in Spring context. package com.halyph.util ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.ClassPathBeanDefinitionScanner ; import org.springframework.context.support.GenericApplicationContext ; import org.springframework.core.type.filter.AnnotationTypeFilter ; import javax.ws.rs.ext.Provider ; import java.util.ArrayList ; import java.util.List ; public final class RestProviderBeanScanner { private RestProviderBeanScanner () { } public static List < Object > scan ( ApplicationContext applicationContext , String ... basePackages ) { GenericApplicationContext genericAppContext = new GenericApplicationContext (); ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner ( genericAppContext , false ); scanner . addIncludeFilter ( new AnnotationTypeFilter ( Provider . class )); scanner . scan ( basePackages ); genericAppContext . setParent ( applicationContext ); genericAppContext . refresh (); return new ArrayList <> ( genericAppContext . getBeansWithAnnotation ( Provider . class ). values ()); } } package com.halyph.util ; import com.halyph.util.annotation.RestService ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.ClassPathBeanDefinitionScanner ; import org.springframework.context.support.GenericApplicationContext ; import org.springframework.core.type.filter.AnnotationTypeFilter ; import java.util.ArrayList ; import java.util.List ; public final class RestServiceBeanScanner { private RestServiceBeanScanner () { } public static List < Object > scan ( ApplicationContext applicationContext , String ... basePackages ) { GenericApplicationContext genericAppContext = new GenericApplicationContext (); ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner ( genericAppContext , false ); scanner . addIncludeFilter ( new AnnotationTypeFilter ( RestService . class )); scanner . scan ( basePackages ); genericAppContext . setParent ( applicationContext ); genericAppContext . refresh (); List < Object > restResources = new ArrayList <> ( genericAppContext . getBeansWithAnnotation ( RestService . class ). values ()); return restResources ; } } These two classes (scanner) RestServiceBeanScanner and RestProviderBeanScanner are almost identical and should be refactored to support generic scanner type. Let\u2019s left this for home work. There is additional issue with missed Object Mapper configuration: package com.halyph.rest.provider ; import com.fasterxml.jackson.databind.ObjectMapper ; import com.fasterxml.jackson.databind.SerializationFeature ; import javax.ws.rs.ext.ContextResolver ; import javax.ws.rs.ext.Provider ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.TimeZone ; @Provider public class ObjectMapperProvider implements ContextResolver < Objectmapper > { final ObjectMapper objectMapper ; public ObjectMapperProvider () { this . objectMapper = new ObjectMapper (); this . objectMapper . configure ( SerializationFeature . INDENT \\ _OUTPUT , true ); //set up ISO 8601 date/time stamp format: final DateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:sss'Z'\" ); df . setTimeZone ( TimeZone . getTimeZone ( \"UTC\" )); this . objectMapper . setDateFormat ( df ); } @Override public ObjectMapper getContext ( Class type ) { return this . objectMapper ; } } We have to update AppConfig: Add @ComponentScan to register services Call RestProviderBeanScanner to register providers: json provider, ExceptionMapper and ObjectMapperProvider Call RestServiceBeanScanner to register REST services marked with @RestService annotation package com.halyph.config ; import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider ; import com.halyph.util.RestProviderBeanScanner ; import com.halyph.util.RestServiceBeanScanner ; import org.apache.cxf.bus.spring.SpringBus ; import org.apache.cxf.endpoint.Server ; import org.apache.cxf.jaxrs.JAXRSServerFactoryBean ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.ComponentScan ; import org.springframework.context.annotation.Configuration ; import org.springframework.context.annotation.DependsOn ; import javax.ws.rs.ApplicationPath ; import javax.ws.rs.core.Application ; import javax.ws.rs.ext.RuntimeDelegate ; import java.util.List ; @Configuration @ComponentScan ( AppConfig . SERVICE \\ _PACKAGE ) public class AppConfig { public static final String BASE \\ _PACKAGE = \"com.halyph\" ; public static final String SERVICE \\ _PACKAGE = BASE \\ _PACKAGE + \".service\" ; private static final String RESOURCES \\ _PACKAGE = BASE \\ _PACKAGE + \".rest\" ; private static final String PROVIDER \\ _PACKAGE = BASE \\ _PACKAGE + \".rest.provider\" ; @ApplicationPath ( \"/\" ) public class JaxRsApiApplication extends Application { } @Bean ( destroyMethod = \"shutdown\" ) public SpringBus cxf () { return new SpringBus (); } @Bean @DependsOn ( \"cxf\" ) public Server jaxRsServer ( ApplicationContext appContext ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance (). createEndpoint ( jaxRsApiApplication (), JAXRSServerFactoryBean . class ); factory . setServiceBeans ( restServiceList ( appContext )); factory . setAddress ( \"/\" + factory . getAddress ()); factory . setProviders ( restProviderList ( appContext , jsonProvider ())); return factory . create (); } @Bean public JaxRsApiApplication jaxRsApiApplication () { return new JaxRsApiApplication (); } @Bean public JacksonJsonProvider jsonProvider () { return new JacksonJsonProvider (); } private List < Object > restServiceList ( ApplicationContext appContext ) { return RestServiceBeanScanner . scan ( appContext , AppConfig . RESOURCES \\ _PACKAGE ); } private List < Object > restProviderList ( final ApplicationContext appContext , final JacksonJsonProvider jsonProvider ) { final List < Object > providers = RestProviderBeanScanner . scan ( appContext , PROVIDER \\ _PACKAGE ); providers . add ( jsonProvider ); return providers ; } } Now, we should test this. 1st run application: mvn clean tomcat7:run Verify REST API calls: # pretty printed JSON, see ObjectMapperProvider $ curl http://localhost:8080/api/users [ { \"id\" : 1 , \"name\" : \"foo\" } , { \"id\" : 2 , \"name\" : \"bar\" } , { \"id\" : 3 , \"name\" : \"baz\" } ] # try to get non-existent user, expected to get NotFoundException JSON $ curl http://localhost:8080/api/users/100 { \"details\" : \"The requested resource hasn't been found\" , \"date\" : \"2013-10-19T13:39:034Z\" , \"msg\" : null } # try to get GeneralException JSON $ curl http://localhost:8080/api/exception { \"date\" : \"2013-10-19T13:40:049Z\" , \"msg\" : \"generateException from ExceptionResource\" } You can find sources on GitHub","title":"REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement"},{"location":"blog/2013/2013-10-20-rest-with-jax-rs-part-2-spring-java/#references","text":"Apache CXF exception handler for jaxrs (REST) Official documentation: Apache CXF Exception handling","title":"References"},{"location":"blog/2013/2013-10-21-rest-with-jax-rs-part-3-embedded-jetty/","text":"REST with JAX-RS: Part 3 - Embedded Jetty | java | rest | spring | jax-rs | See previous posts: REST with JAX-RS: Part 1 - Spring Java Config REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement There is one feature which I\u2019d like to add. It\u2019s embedded Jetty server. I.e. we should be able to run our application from main() method. Update pom.xml , add jetty server as dependency ... <org.eclipse.jetty.version> 9.0.6.v20130930 </org.eclipse.jetty.version> ... <dependency> <groupId> org.eclipse.jetty </groupId> <artifactId> jetty-webapp </artifactId> <version> ${org.eclipse.jetty.version} </version> </dependency> ... Create special Launcher class which runs embedded Jetty Server. Jetty configuration registers port, host, base REST URL ( \u201c/api/*\u201c ) and the most important - proper Spring config. package com.halyph ; import com.halyph.config.AppConfig ; import org.apache.cxf.transport.servlet.CXFServlet ; import org.eclipse.jetty.server.Server ; import org.eclipse.jetty.servlet.ServletContextHandler ; import org.eclipse.jetty.servlet.ServletHolder ; import org.springframework.web.context.ContextLoaderListener ; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext ; public class Launcher { public static final int PORT = 8080 ; public static void main ( final String \\ [ \\ ] args ) throws Exception { Server server = new Server ( PORT ); // Register and map the dispatcher servlet final ServletHolder servletHolder = new ServletHolder ( new CXFServlet ()); final ServletContextHandler context = new ServletContextHandler (); context . setContextPath ( \"/\" ); context . addServlet ( servletHolder , AppConfig . API \\ _BASE ); context . addEventListener ( new ContextLoaderListener ()); context . setInitParameter ( \"contextClass\" , AnnotationConfigWebApplicationContext . class . getName ()); context . setInitParameter ( \"contextConfigLocation\" , AppConfig . class . getName ()); server . setHandler ( context ); server . start (); server . join (); } } You can find sources on GitHub References Going REST: embedding Jetty with Spring and JAX-RS (Apache CXF) Embedding Jetty or Tomcat in your Java Application","title":"REST with JAX-RS: Part 3 - Embedded Jetty"},{"location":"blog/2013/2013-10-21-rest-with-jax-rs-part-3-embedded-jetty/#rest-with-jax-rs-part-3-embedded-jetty","text":"| java | rest | spring | jax-rs | See previous posts: REST with JAX-RS: Part 1 - Spring Java Config REST with JAX-RS: Part 2 - Spring Java Config and CXF Improvement There is one feature which I\u2019d like to add. It\u2019s embedded Jetty server. I.e. we should be able to run our application from main() method. Update pom.xml , add jetty server as dependency ... <org.eclipse.jetty.version> 9.0.6.v20130930 </org.eclipse.jetty.version> ... <dependency> <groupId> org.eclipse.jetty </groupId> <artifactId> jetty-webapp </artifactId> <version> ${org.eclipse.jetty.version} </version> </dependency> ... Create special Launcher class which runs embedded Jetty Server. Jetty configuration registers port, host, base REST URL ( \u201c/api/*\u201c ) and the most important - proper Spring config. package com.halyph ; import com.halyph.config.AppConfig ; import org.apache.cxf.transport.servlet.CXFServlet ; import org.eclipse.jetty.server.Server ; import org.eclipse.jetty.servlet.ServletContextHandler ; import org.eclipse.jetty.servlet.ServletHolder ; import org.springframework.web.context.ContextLoaderListener ; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext ; public class Launcher { public static final int PORT = 8080 ; public static void main ( final String \\ [ \\ ] args ) throws Exception { Server server = new Server ( PORT ); // Register and map the dispatcher servlet final ServletHolder servletHolder = new ServletHolder ( new CXFServlet ()); final ServletContextHandler context = new ServletContextHandler (); context . setContextPath ( \"/\" ); context . addServlet ( servletHolder , AppConfig . API \\ _BASE ); context . addEventListener ( new ContextLoaderListener ()); context . setInitParameter ( \"contextClass\" , AnnotationConfigWebApplicationContext . class . getName ()); context . setInitParameter ( \"contextConfigLocation\" , AppConfig . class . getName ()); server . setHandler ( context ); server . start (); server . join (); } } You can find sources on GitHub","title":"REST with JAX-RS: Part 3 - Embedded Jetty"},{"location":"blog/2013/2013-10-21-rest-with-jax-rs-part-3-embedded-jetty/#references","text":"Going REST: embedding Jetty with Spring and JAX-RS (Apache CXF) Embedding Jetty or Tomcat in your Java Application","title":"References"},{"location":"blog/2013/2013-12-03-list-of-real-spring-based-projects/","text":"List of Real Spring-Based Projects | java | spring | There are tons of Spring pet-projects on GitHub and it\u2019s cool. But, such big and powerful framework as Spring can\u2019t be learned by simple project. It requires big and complex samples which can highlight best practices and common approaches while using this framework. Here is the lift of such open sources projects: Broadleaf Commerce - BroadleafCommerce is an open-source, eCommerce framework written entirely in Java OpenLegacy - is a powerful, lightweight, extensible, and flexible Java-based API framework with tools for building applications and services over existing legacy applications\u2026otherwise known as legacy modernization Hippo CMS - is a Java based, Open Source Web Content Management platform. Hippo is created to help you deliver Personalized Experiences across a wide variety of Channels and Devices, around the globe, to increase conversion and to improve brand loyalty. Weceem CMS is a free, open source content management system. It is built with Grails, a rapid application development framework build on the Java VM using Groovy, Java and Spring. Magnolia CMS (Community Edition) is a free, easy-to-use powerful Enterprise Content Management system. It is available under an Open Source license, the GPL version 3. Magnolia Community Edition includes an AJAX-powered intuitive web-browser interface, a clear Java programming API and a useful custom tag library for easy templating in JSP and Servlets. It can use any JSR-283 compliant content repository. Alfresco - is an open source enterprise content management repository (CMS) built by a team that includes the co-founder of Documentum. Its modular architecture uses the latest open src Java technologies. Includes Document Management, Records Management JTalks.org is an open source project developed by JavaTalks community. The overall idea is to build a network of components like Forums, Articles, Webinars which are interconnected and they share the same database of users. Spring by Example - self-explained Greenhouse - Reference web application for Spring technologies and social destination for Spring developers Zuul - is a free, open source web application which can be used to centralize and manage configuration for your internal applications. It enables your operations team to control changes and your developers a centralized place to organize settings. LightAdmin - Pluggable data administration UI library for Java web applications Sagan - Sagan: the spring.io site and reference application. There are bunch of difference article related, this one combines the most important: SpringOne2GX 2013 Replay: spring.io inside and out . Tudu-Lists It is an online todo lists manager. Currently, Tudu Lists is NOT in active development anymore . But, I think it\u2019s very good sample of Spring-based application. References Stackoverflow - Any open source Spring sample project that\u2019s bigger than PetClinic?","title":"List of Real Spring-Based Projects"},{"location":"blog/2013/2013-12-03-list-of-real-spring-based-projects/#list-of-real-spring-based-projects","text":"| java | spring | There are tons of Spring pet-projects on GitHub and it\u2019s cool. But, such big and powerful framework as Spring can\u2019t be learned by simple project. It requires big and complex samples which can highlight best practices and common approaches while using this framework. Here is the lift of such open sources projects: Broadleaf Commerce - BroadleafCommerce is an open-source, eCommerce framework written entirely in Java OpenLegacy - is a powerful, lightweight, extensible, and flexible Java-based API framework with tools for building applications and services over existing legacy applications\u2026otherwise known as legacy modernization Hippo CMS - is a Java based, Open Source Web Content Management platform. Hippo is created to help you deliver Personalized Experiences across a wide variety of Channels and Devices, around the globe, to increase conversion and to improve brand loyalty. Weceem CMS is a free, open source content management system. It is built with Grails, a rapid application development framework build on the Java VM using Groovy, Java and Spring. Magnolia CMS (Community Edition) is a free, easy-to-use powerful Enterprise Content Management system. It is available under an Open Source license, the GPL version 3. Magnolia Community Edition includes an AJAX-powered intuitive web-browser interface, a clear Java programming API and a useful custom tag library for easy templating in JSP and Servlets. It can use any JSR-283 compliant content repository. Alfresco - is an open source enterprise content management repository (CMS) built by a team that includes the co-founder of Documentum. Its modular architecture uses the latest open src Java technologies. Includes Document Management, Records Management JTalks.org is an open source project developed by JavaTalks community. The overall idea is to build a network of components like Forums, Articles, Webinars which are interconnected and they share the same database of users. Spring by Example - self-explained Greenhouse - Reference web application for Spring technologies and social destination for Spring developers Zuul - is a free, open source web application which can be used to centralize and manage configuration for your internal applications. It enables your operations team to control changes and your developers a centralized place to organize settings. LightAdmin - Pluggable data administration UI library for Java web applications Sagan - Sagan: the spring.io site and reference application. There are bunch of difference article related, this one combines the most important: SpringOne2GX 2013 Replay: spring.io inside and out . Tudu-Lists It is an online todo lists manager. Currently, Tudu Lists is NOT in active development anymore . But, I think it\u2019s very good sample of Spring-based application.","title":"List of Real Spring-Based Projects"},{"location":"blog/2013/2013-12-03-list-of-real-spring-based-projects/#references","text":"Stackoverflow - Any open source Spring sample project that\u2019s bigger than PetClinic?","title":"References"},{"location":"blog/2014/2014-01-26-about-learning-new-programming-languages/","text":"About Learning New Programming Languages | programming language | This post is very subjective and reflect the my current point of view. There are tons of different programming languages. Few of them you are using daily, few of them from time to time. And huge amount are touched \u201caccidentally\u201d (via playing and writing \u201cbig\u201d hello world). Now the question is: Should we spend our time playing with every hipster/hype language? Maybe it\u2019s better to invest own time in something really important. In something which can improve our productivity and range of task which can be solved by our \u201cmajor\u201d language(s). In general to \u201clearn\u201d a new language is not a big deal. But, nowadays we can\u2019t use language itself in isolation. \u201cLearn a new language\u201d means not only language, but also its related areas : ecosystem (libraries, frameworks, IDE, tools) problems which can be solved with this language (some languages are well suited for the particular set of problems: Erlang, Prolog, SQL, etc.) community best practices and idiomatic code etc. Now, if you calculate and recall your experience You will notice that language related areas take huge amount of time to master. Here is some general sample: Imagine that language X is your major tool for making money. Now, you\u2019ve switched, temporary, to language Y, for reasonable amount of time (several months). Then you switched back to language X and stick there for long-long period of time. You will notice how you are loosing those minimal knowledge (required to accomplish the tasks) gained for language Y. You can recollect the syntax, but related areas of language Y have been evolved and updated. Even more, some related areas are obsolete, etc. And now it will be much hard to get the same knowledge in language Y quickly. You must be adequate to understand this. So, what does it mean from me: Select minimal required set of programming languages which makes you as productive as possible. Master these languages It\u2019s a good idea to spend time playing with other languages. But it\u2019s bad idea to switch from one to another language regularly. You are losing focus. Master ecosystem Be active in language community I don\u2019t want to say that learning new languages is a bad idea. No. I don\u2019t think so. But the reality has some influence on us. It might happen that \u201cnew\u201d language and related areas are cool, you are happy using all these stuff working on pet-projects. But you have some objective constrains and can\u2019t use it at your work: e.g. a) there are no projects where you can use this language or b) you can\u2019t change the company because of geographical constrains. Keeping all these in mind you should spend your time effectively and learn really valuable stuff. Try to avoid hipster bandwagon effect .","title":"About Learning New Programming Languages"},{"location":"blog/2014/2014-01-26-about-learning-new-programming-languages/#about-learning-new-programming-languages","text":"| programming language | This post is very subjective and reflect the my current point of view. There are tons of different programming languages. Few of them you are using daily, few of them from time to time. And huge amount are touched \u201caccidentally\u201d (via playing and writing \u201cbig\u201d hello world). Now the question is: Should we spend our time playing with every hipster/hype language? Maybe it\u2019s better to invest own time in something really important. In something which can improve our productivity and range of task which can be solved by our \u201cmajor\u201d language(s). In general to \u201clearn\u201d a new language is not a big deal. But, nowadays we can\u2019t use language itself in isolation. \u201cLearn a new language\u201d means not only language, but also its related areas : ecosystem (libraries, frameworks, IDE, tools) problems which can be solved with this language (some languages are well suited for the particular set of problems: Erlang, Prolog, SQL, etc.) community best practices and idiomatic code etc. Now, if you calculate and recall your experience You will notice that language related areas take huge amount of time to master. Here is some general sample: Imagine that language X is your major tool for making money. Now, you\u2019ve switched, temporary, to language Y, for reasonable amount of time (several months). Then you switched back to language X and stick there for long-long period of time. You will notice how you are loosing those minimal knowledge (required to accomplish the tasks) gained for language Y. You can recollect the syntax, but related areas of language Y have been evolved and updated. Even more, some related areas are obsolete, etc. And now it will be much hard to get the same knowledge in language Y quickly. You must be adequate to understand this. So, what does it mean from me: Select minimal required set of programming languages which makes you as productive as possible. Master these languages It\u2019s a good idea to spend time playing with other languages. But it\u2019s bad idea to switch from one to another language regularly. You are losing focus. Master ecosystem Be active in language community I don\u2019t want to say that learning new languages is a bad idea. No. I don\u2019t think so. But the reality has some influence on us. It might happen that \u201cnew\u201d language and related areas are cool, you are happy using all these stuff working on pet-projects. But you have some objective constrains and can\u2019t use it at your work: e.g. a) there are no projects where you can use this language or b) you can\u2019t change the company because of geographical constrains. Keeping all these in mind you should spend your time effectively and learn really valuable stuff. Try to avoid hipster bandwagon effect .","title":"About Learning New Programming Languages"},{"location":"blog/2014/2014-03-17-review-making-java-groovy/","text":"Review: Making Java Groovy | book | review | groovy | I can say that this book is special. It\u2019s not a Groovy \u201ccookbook\u201d. You won\u2019t find tons of tricky recipes around Groovy. You won\u2019t learn black art of Groovy meta programming. Strange, doesn\u2019t it. :-) Then why you should read it. Or who should read this book? The answer is very simple - Every Java programmer who wants to be productive in daily work must read this book. The author Ken Kousen did really great job showing different aspects of Groovy as a language, tool and ecosystem. The reader will understand that there are tons of different appliances of Groovy: Groovy scripting (@Grab) Gradle, Maven/Ant automation Groovy as prototyping language: REST, DB, etc. Web micro-frameworks Testing: Spock, mocks Java/Groovy integration JSON/XML manipulation The most important thing is to understand that Groovy should NOT be used only with Grails. Java programmers must re-discover Groovy as super pragmatic language. Everything which is written in Java can be written in Groovy. Save your time and automate with Groovy. References Making Java Groovy, by Ken Kousen","title":"Review: Making Java Groovy"},{"location":"blog/2014/2014-03-17-review-making-java-groovy/#review-making-java-groovy","text":"| book | review | groovy | I can say that this book is special. It\u2019s not a Groovy \u201ccookbook\u201d. You won\u2019t find tons of tricky recipes around Groovy. You won\u2019t learn black art of Groovy meta programming. Strange, doesn\u2019t it. :-) Then why you should read it. Or who should read this book? The answer is very simple - Every Java programmer who wants to be productive in daily work must read this book. The author Ken Kousen did really great job showing different aspects of Groovy as a language, tool and ecosystem. The reader will understand that there are tons of different appliances of Groovy: Groovy scripting (@Grab) Gradle, Maven/Ant automation Groovy as prototyping language: REST, DB, etc. Web micro-frameworks Testing: Spock, mocks Java/Groovy integration JSON/XML manipulation The most important thing is to understand that Groovy should NOT be used only with Grails. Java programmers must re-discover Groovy as super pragmatic language. Everything which is written in Java can be written in Groovy. Save your time and automate with Groovy.","title":"Review: Making Java Groovy"},{"location":"blog/2014/2014-03-17-review-making-java-groovy/#references","text":"Making Java Groovy, by Ken Kousen","title":"References"},{"location":"blog/2014/2014-04-19-thor-notes/","text":"Thor notes | ruby | Some time ago I used Thor for one CLI application. I investigated several tools, but picked Thor because of its simplicity and easy to star. In general you would need only the official documentation . But, I used Bundler as real sample of Thor usage also. Here is the list of articles, notes about Thor which might be helpful: Thor Getting Started Building Your Tools With Thor - Thor overview Thor wiki Thor::Group as a sub-command with arguments [Thor::Group generators as args of my_command][] Namespacing Thor commands in a standalone ruby executable Packaging Thor commands in separate classes/modules/files Ruby Thor based executable with namespaces","title":"Thor notes"},{"location":"blog/2014/2014-04-19-thor-notes/#thor-notes","text":"| ruby | Some time ago I used Thor for one CLI application. I investigated several tools, but picked Thor because of its simplicity and easy to star. In general you would need only the official documentation . But, I used Bundler as real sample of Thor usage also. Here is the list of articles, notes about Thor which might be helpful: Thor Getting Started Building Your Tools With Thor - Thor overview Thor wiki Thor::Group as a sub-command with arguments [Thor::Group generators as args of my_command][] Namespacing Thor commands in a standalone ruby executable Packaging Thor commands in separate classes/modules/files Ruby Thor based executable with namespaces","title":"Thor notes"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/","text":"JEEConf - Kyiv, 2014 - Report | conference | java | I attended the forth JEEConf , May 23-24, 2014. The situation in my country (Ukraine) is difficult that\u2019s why I was amazed to see so many foreign speakers. The organizers did really tremendous work. This year I divided topics by the next directions: Spring Spring 4, Java EE 7 or Both? by Ivar Grimstad \u2013 The main idea of the talk was to show similar and different parts of Spring 4 and Java EE 7. And have an ability easily identify when to use one or another. There are trade-offs and we should be aware of them. Spring configuration: how to do it right (experience report), Mikalai Alimenkou \u2013 Mikalai shared his experience related to Spring configs. Nice talk. I\u2019m going to borrow some ideas ;-) Spring the Ripper, by Evgeny Borisov \u2013 It was the most dynamic talk at this conference. The presenter shown Spring life-cycle internals in action. Well done. It should be seen by every Spring dev :-) Frameworks Apache Lucene/Solr Internals, by Anatoliy Sokolenko \u2013 I had no experience with these technologies. And it was really nice intro. Now I have some clue how it works. Streamline your processes with jBPM 6, by Jiri Svitak \u2013 It was an into talk into jBPM 6. I had small experience with competitor framework Activiti . It\u2019s always interesting to see the similar framework\u2019s features. Java/JVM/Compiler Java8: Stream Style, by Sergey Kuksenko \u2013 It was Java 8 Stream introduction. There were shown different stream features and approaches. What Heap Dumps Are Lying To You About, by Aleksey Shipil\u0451v \u2013 It\u2019s a very special talk related to Java \u201cinternals\u201d. Actually, this talk was about Java object size calculation and what happens under the hood. Reflection Madness, by Heinz Kabutz \u2013 The presenter told us about Java reflection magic, when to use it and why it\u2019s dangerous. Miscellaneous Tooling of a Test-Driven Developer, by Pawe\u0142 Lipi\u0144ski \u2013 There were highlighted two very interesting libraries for TDD on top of JUnit: AssertJ and JUnitParams .Very interesting libraries Web Apps in LISP!? EWW!, by Anatoly Polinsky \u2013 Here was shown different aspects of web development in Clojure for beginners. It\u2019s was real intro, but very interesting, especially when you\u2019d like to spread your mind into alternative JVM-related communities. It was very productive conference for me. I\u2019ve got new portion of inspiration, new knowledge and passion to ordinary things. {% img center /images/posts/jeeconf2014.jpg %} References JEEConf - Kiev, 2013 - Report JEEConf - Kiev, 2012 - Report JEEConf - Kiev, 2011 - Report","title":"JEEConf - Kyiv, 2014 - Report"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#jeeconf-kyiv-2014-report","text":"| conference | java | I attended the forth JEEConf , May 23-24, 2014. The situation in my country (Ukraine) is difficult that\u2019s why I was amazed to see so many foreign speakers. The organizers did really tremendous work. This year I divided topics by the next directions:","title":"JEEConf - Kyiv, 2014 - Report"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#spring","text":"Spring 4, Java EE 7 or Both? by Ivar Grimstad \u2013 The main idea of the talk was to show similar and different parts of Spring 4 and Java EE 7. And have an ability easily identify when to use one or another. There are trade-offs and we should be aware of them. Spring configuration: how to do it right (experience report), Mikalai Alimenkou \u2013 Mikalai shared his experience related to Spring configs. Nice talk. I\u2019m going to borrow some ideas ;-) Spring the Ripper, by Evgeny Borisov \u2013 It was the most dynamic talk at this conference. The presenter shown Spring life-cycle internals in action. Well done. It should be seen by every Spring dev :-)","title":"Spring"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#frameworks","text":"Apache Lucene/Solr Internals, by Anatoliy Sokolenko \u2013 I had no experience with these technologies. And it was really nice intro. Now I have some clue how it works. Streamline your processes with jBPM 6, by Jiri Svitak \u2013 It was an into talk into jBPM 6. I had small experience with competitor framework Activiti . It\u2019s always interesting to see the similar framework\u2019s features.","title":"Frameworks"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#javajvmcompiler","text":"Java8: Stream Style, by Sergey Kuksenko \u2013 It was Java 8 Stream introduction. There were shown different stream features and approaches. What Heap Dumps Are Lying To You About, by Aleksey Shipil\u0451v \u2013 It\u2019s a very special talk related to Java \u201cinternals\u201d. Actually, this talk was about Java object size calculation and what happens under the hood. Reflection Madness, by Heinz Kabutz \u2013 The presenter told us about Java reflection magic, when to use it and why it\u2019s dangerous.","title":"Java/JVM/Compiler"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#miscellaneous","text":"Tooling of a Test-Driven Developer, by Pawe\u0142 Lipi\u0144ski \u2013 There were highlighted two very interesting libraries for TDD on top of JUnit: AssertJ and JUnitParams .Very interesting libraries Web Apps in LISP!? EWW!, by Anatoly Polinsky \u2013 Here was shown different aspects of web development in Clojure for beginners. It\u2019s was real intro, but very interesting, especially when you\u2019d like to spread your mind into alternative JVM-related communities. It was very productive conference for me. I\u2019ve got new portion of inspiration, new knowledge and passion to ordinary things. {% img center /images/posts/jeeconf2014.jpg %}","title":"Miscellaneous"},{"location":"blog/2014/2014-05-25-jeeconf-kiev/#references","text":"JEEConf - Kiev, 2013 - Report JEEConf - Kiev, 2012 - Report JEEConf - Kiev, 2011 - Report","title":"References"},{"location":"blog/2014/2014-07-23-review-programming-groovy-2-dynamic/","text":"Review: Programming Groovy 2: Dynamic Productivity for the Java Developer | book | groovy | review | This book is well balanced around Groovy language. I would say there is minimal required knowledge regarding the language. The author (Venkat Subramaniam) fluently covered every important aspect of Groovy. But this book is for experienced developer. The accents were made only in scope of Groovy language and totally avoided any \u201cintro\u201d programming talks, which is actually cool. Here is the book\u2019s structure: Beginning Groovy - this part is dedicated to Groovy language features, especially from Java perspective. Reading this part I was building the parallel to Ruby trying to -pare these languages. The main difference which I found it\u2019s only syntax \u201csugar\u201d. I.e. conceptually these two language are very similar. Using Groovy - this is a pragmatic part where were highlighted the next topics: Groovy GDK, XML Processing, working with DB, working with Java. Dynamic features (MOPing Groovy) - here were highlighted two main metaprogramming approaches: run-time and compile-time metaprogramming. Very interesting part. For -Groovy metaprogramming facilities are much clear comparison to Ruby metaprogramming. Using Metaprogramming - it\u2019s pragmatic part where were highlighted the applications for Groovy metaprogramming features. It\u2019s very important to note that Groovy contains many pre-bundled classes/modules which are really nice samples of metaprogramming Groovy\u2019s features. I highly recommend this book to everybody who is interested in Groovy language. This book highlights Groovy dynamic features. References Programming Groovy 2: Dynamic Productivity for the Java Developer","title":"Review: Programming Groovy 2: Dynamic Productivity for the Java Developer"},{"location":"blog/2014/2014-07-23-review-programming-groovy-2-dynamic/#review-programming-groovy-2-dynamic-productivity-for-the-java-developer","text":"| book | groovy | review | This book is well balanced around Groovy language. I would say there is minimal required knowledge regarding the language. The author (Venkat Subramaniam) fluently covered every important aspect of Groovy. But this book is for experienced developer. The accents were made only in scope of Groovy language and totally avoided any \u201cintro\u201d programming talks, which is actually cool. Here is the book\u2019s structure: Beginning Groovy - this part is dedicated to Groovy language features, especially from Java perspective. Reading this part I was building the parallel to Ruby trying to -pare these languages. The main difference which I found it\u2019s only syntax \u201csugar\u201d. I.e. conceptually these two language are very similar. Using Groovy - this is a pragmatic part where were highlighted the next topics: Groovy GDK, XML Processing, working with DB, working with Java. Dynamic features (MOPing Groovy) - here were highlighted two main metaprogramming approaches: run-time and compile-time metaprogramming. Very interesting part. For -Groovy metaprogramming facilities are much clear comparison to Ruby metaprogramming. Using Metaprogramming - it\u2019s pragmatic part where were highlighted the applications for Groovy metaprogramming features. It\u2019s very important to note that Groovy contains many pre-bundled classes/modules which are really nice samples of metaprogramming Groovy\u2019s features. I highly recommend this book to everybody who is interested in Groovy language. This book highlights Groovy dynamic features.","title":"Review: Programming Groovy 2: Dynamic Productivity for the Java Developer"},{"location":"blog/2014/2014-07-23-review-programming-groovy-2-dynamic/#references","text":"Programming Groovy 2: Dynamic Productivity for the Java Developer","title":"References"},{"location":"blog/2014/2014-08-12-how-to-disable-tomcat-session/","text":"How to disable Tomcat session serialization | java | Suppose you have the next error while restart/stop Tomcat (in my case Tomcat 7.x): WARNING : Cannot serialize session attribute SPRING_SECURITY_CONTEXT for session 54 DBA076EDC9B7A24C1AF76824DFD1EF java . io . NotSerializableException : com . MyClass at java . io . ObjectOutputStream . writeObject0 ( ObjectOutputStream . java : 1180 ) at java . io . ObjectOutputStream . defaultWriteFields ( ObjectOutputStream . java : 1528 ) at java . io . ObjectOutputStream . writeSerialData ( ObjectOutputStream . java : 1493 ) at java . io . ObjectOutputStream . writeOrdinaryObject ( ObjectOutputStream . java : 1416 ) at java . io . ObjectOutputStream . writeObject0 ( ObjectOutputStream . java : 1174 ) at java . io . ObjectOutputStream . writeObject ( ObjectOutputStream . java : 346 ) at java . util . ArrayList . writeObject ( ArrayList . java : 710 ) at sun . reflect . NativeMethodAccessorImpl . invoke0 ( Native Method ) at sun . reflect . NativeMethodAccessorImpl . invoke ( NativeMethodAccessorImpl . java : 57 ) at sun . reflect . DelegatingMethodAccessorImpl . invoke ( DelegatingMethodAccessorImpl . java : 43 ) at java . lang . reflect . Method . invoke ( Method . java : 601 ) at java . io . ObjectStreamClass . invokeWriteObject ( ObjectStreamClass . java : 975 ) ... It means that Tomcat is trying to persist non-serializable objects which were added into the session. Tomcat uses Manager component which is used to create and maintain HTTP sessions for web application. By default manager implementation configured to perform session persistence across restarts and we want to disable this functionality. To disable this persistence feature, create a Context configuration file ( context.xml ) for your web application and add the following element there: <Manager pathname= \"\" /> You can add this context.xml file to: App.war:/META-INF/context.xml TOMCAT_HOME/conf/Catalina/localhost/App.xml file TOMCAT_HOME/cont/context.xml References Disable Session Persistence Clustering/Session Replication HOW-TO","title":"How to disable Tomcat session serialization"},{"location":"blog/2014/2014-08-12-how-to-disable-tomcat-session/#how-to-disable-tomcat-session-serialization","text":"| java | Suppose you have the next error while restart/stop Tomcat (in my case Tomcat 7.x): WARNING : Cannot serialize session attribute SPRING_SECURITY_CONTEXT for session 54 DBA076EDC9B7A24C1AF76824DFD1EF java . io . NotSerializableException : com . MyClass at java . io . ObjectOutputStream . writeObject0 ( ObjectOutputStream . java : 1180 ) at java . io . ObjectOutputStream . defaultWriteFields ( ObjectOutputStream . java : 1528 ) at java . io . ObjectOutputStream . writeSerialData ( ObjectOutputStream . java : 1493 ) at java . io . ObjectOutputStream . writeOrdinaryObject ( ObjectOutputStream . java : 1416 ) at java . io . ObjectOutputStream . writeObject0 ( ObjectOutputStream . java : 1174 ) at java . io . ObjectOutputStream . writeObject ( ObjectOutputStream . java : 346 ) at java . util . ArrayList . writeObject ( ArrayList . java : 710 ) at sun . reflect . NativeMethodAccessorImpl . invoke0 ( Native Method ) at sun . reflect . NativeMethodAccessorImpl . invoke ( NativeMethodAccessorImpl . java : 57 ) at sun . reflect . DelegatingMethodAccessorImpl . invoke ( DelegatingMethodAccessorImpl . java : 43 ) at java . lang . reflect . Method . invoke ( Method . java : 601 ) at java . io . ObjectStreamClass . invokeWriteObject ( ObjectStreamClass . java : 975 ) ... It means that Tomcat is trying to persist non-serializable objects which were added into the session. Tomcat uses Manager component which is used to create and maintain HTTP sessions for web application. By default manager implementation configured to perform session persistence across restarts and we want to disable this functionality. To disable this persistence feature, create a Context configuration file ( context.xml ) for your web application and add the following element there: <Manager pathname= \"\" /> You can add this context.xml file to: App.war:/META-INF/context.xml TOMCAT_HOME/conf/Catalina/localhost/App.xml file TOMCAT_HOME/cont/context.xml","title":"How to disable Tomcat session serialization"},{"location":"blog/2014/2014-08-12-how-to-disable-tomcat-session/#references","text":"Disable Session Persistence Clustering/Session Replication HOW-TO","title":"References"},{"location":"blog/2014/2014-08-13-groovy-notes-pretty-print-json-from/","text":"Groovy Notes: Pretty print JSON from the command line | groovy | JSON pretty print it\u2019s common task while working with JSON from command line. There are many ways of doing this via Python, Ruby, node.js, but here I\u2019d like to concentrate on Groovy one-liner: $ echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | groovy -e 'import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)' { \"foo\" : \"lorem\" , \"bar\" : \"ipsum\" } We can slightly improve this one-liner via adding shell alias: $ alias pp = \"groovy -e 'import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)'\" $ echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | pp Also, we might use Groovy script which might be handy for simple JSON validation also: $ cat prettyJson . groovy import groovy.json.* try { println JsonOutput . prettyPrint ( System . in . text ) } catch ( JsonException e ) { println \"ERROR: Not valid JSON\" System . exit ( 1 ) } $ echo '{\"foo: \"lorem\", ' | groovy prettyJson . groovy ERROR: Not valid JSON","title":"Groovy Notes: Pretty print JSON from the command line"},{"location":"blog/2014/2014-08-13-groovy-notes-pretty-print-json-from/#groovy-notes-pretty-print-json-from-the-command-line","text":"| groovy | JSON pretty print it\u2019s common task while working with JSON from command line. There are many ways of doing this via Python, Ruby, node.js, but here I\u2019d like to concentrate on Groovy one-liner: $ echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | groovy -e 'import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)' { \"foo\" : \"lorem\" , \"bar\" : \"ipsum\" } We can slightly improve this one-liner via adding shell alias: $ alias pp = \"groovy -e 'import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)'\" $ echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | pp Also, we might use Groovy script which might be handy for simple JSON validation also: $ cat prettyJson . groovy import groovy.json.* try { println JsonOutput . prettyPrint ( System . in . text ) } catch ( JsonException e ) { println \"ERROR: Not valid JSON\" System . exit ( 1 ) } $ echo '{\"foo: \"lorem\", ' | groovy prettyJson . groovy ERROR: Not valid JSON","title":"Groovy Notes: Pretty print JSON from the command line"},{"location":"blog/2014/2014-09-07-migration-to-octopress/","text":"Migration to Octopress | blog | Objectives I\u2019ve been blogging for several years (2009-2014) using Google Blogger My old blogspot blog . It was a great experience. But, I always felt some discomfort. I couldn\u2019t simply write without thinking how it will be rendered. I was distracted by blog engine. Moving away Additional inspiration for moving away came from the essay Blogging Like a Hacker . Finally, I made a decision to use GitHub Pages for blogging. There were two choices: Jekyll or Octopress . I picked Octopress because of the pre-bundled minimal required blogging features. I.e. it\u2019s not required the additional configuration to start blogging right away. The official Octopress documentation has step-by-step guide for blog setup. It\u2019s very convenient and transparent. Theme I didn\u2019t want to use the default Octopress theme (it\u2019s boring). Theme customization required some time. All others free themes are too complex, IMHO. At the end I found this theme and applied it to my new blog. Main features Here I selected the main features which I like the most: markdown for blogging simple code snippets insertion full blog customization Ruby at the bottom (I love this language) ability to use your favorite text editor (Textmate in my case) for blogging Minor Issues I\u2019ve tried to migrate posts form my old blog to Octopress, tried different approaches. But, I had no success. Actually, I had ugly results, which should be manually fixed. P.S. There are tons of different Static Site Generators, see the next resources: Top Open-Source Static Site Generators Static Site Generators, The definitive listing of Static Site Generators \u2014 all 298 of them! But, Jekyll and Octopress are at the top.","title":"Migration to Octopress"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#migration-to-octopress","text":"| blog |","title":"Migration to Octopress"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#objectives","text":"I\u2019ve been blogging for several years (2009-2014) using Google Blogger My old blogspot blog . It was a great experience. But, I always felt some discomfort. I couldn\u2019t simply write without thinking how it will be rendered. I was distracted by blog engine.","title":"Objectives"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#moving-away","text":"Additional inspiration for moving away came from the essay Blogging Like a Hacker . Finally, I made a decision to use GitHub Pages for blogging. There were two choices: Jekyll or Octopress . I picked Octopress because of the pre-bundled minimal required blogging features. I.e. it\u2019s not required the additional configuration to start blogging right away. The official Octopress documentation has step-by-step guide for blog setup. It\u2019s very convenient and transparent.","title":"Moving away"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#theme","text":"I didn\u2019t want to use the default Octopress theme (it\u2019s boring). Theme customization required some time. All others free themes are too complex, IMHO. At the end I found this theme and applied it to my new blog.","title":"Theme"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#main-features","text":"Here I selected the main features which I like the most: markdown for blogging simple code snippets insertion full blog customization Ruby at the bottom (I love this language) ability to use your favorite text editor (Textmate in my case) for blogging","title":"Main features"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#minor-issues","text":"I\u2019ve tried to migrate posts form my old blog to Octopress, tried different approaches. But, I had no success. Actually, I had ugly results, which should be manually fixed.","title":"Minor Issues"},{"location":"blog/2014/2014-09-07-migration-to-octopress/#ps","text":"There are tons of different Static Site Generators, see the next resources: Top Open-Source Static Site Generators Static Site Generators, The definitive listing of Static Site Generators \u2014 all 298 of them! But, Jekyll and Octopress are at the top.","title":"P.S."},{"location":"blog/2014/2014-10-09-bash-block-comments/","text":"How to use block comments in Bash Script | bash | What is the simplest way to define block comment in Bash script? I\u2019ve selected two approaches for myself: Use here document #!/usr/bin/env bash echo \"before block comment\" : <<'END' Some long myltiline text END echo \"after block comment\" Use \u201cif\u201d false block #!/usr/bin/env bash echo \"before block comment\" if [ ] ; then Some long myltiline text fi echo \"after block comment\"","title":"How to use block comments in Bash Script"},{"location":"blog/2014/2014-10-09-bash-block-comments/#how-to-use-block-comments-in-bash-script","text":"| bash | What is the simplest way to define block comment in Bash script? I\u2019ve selected two approaches for myself: Use here document #!/usr/bin/env bash echo \"before block comment\" : <<'END' Some long myltiline text END echo \"after block comment\" Use \u201cif\u201d false block #!/usr/bin/env bash echo \"before block comment\" if [ ] ; then Some long myltiline text fi echo \"after block comment\"","title":"How to use block comments in Bash Script"},{"location":"blog/2014/2014-10-20-switching-to-textmate-2/","text":"Switching to Textmate 2 | textmate | Recently I\u2019ve decided to switch from Sublime Text editor to TextMate 2 . At the beginning of Rails \u201cera\u201d it was the sexiest text editor in the world. But, at that time, I was a Windows user ;-) I was inspired by Venkat Subramaniam to make this switch in 2014. Dr. Venkant is using Textmate during his conference live coding for years. Additional argument for switching is the fact that Textmate 2 is open sourced . Here is the list of articles which I highly recommend for Textmate newcomers: TextMate 2 Basics it\u2019s basic tips for using TextMate More TextMate 2 Basics additional usage tips My TextMate 2 Setup shows how to tweak TextMate properties per user or per project Tweaking TextMate Groovy Bundle and Tweaking TextMate Ruby Bundle Run Command it\u2019s famous Dr. Venkat TextMate setting for showing program run results as tooltips (highly recommended settings). Also, you can see how to configure these setting in this screencast Running in TextMate TextMate Manual Don\u2019t forget to share your TextMate links, article, tips, hacks, etc.","title":"Switching to Textmate 2"},{"location":"blog/2014/2014-10-20-switching-to-textmate-2/#switching-to-textmate-2","text":"| textmate | Recently I\u2019ve decided to switch from Sublime Text editor to TextMate 2 . At the beginning of Rails \u201cera\u201d it was the sexiest text editor in the world. But, at that time, I was a Windows user ;-) I was inspired by Venkat Subramaniam to make this switch in 2014. Dr. Venkant is using Textmate during his conference live coding for years. Additional argument for switching is the fact that Textmate 2 is open sourced . Here is the list of articles which I highly recommend for Textmate newcomers: TextMate 2 Basics it\u2019s basic tips for using TextMate More TextMate 2 Basics additional usage tips My TextMate 2 Setup shows how to tweak TextMate properties per user or per project Tweaking TextMate Groovy Bundle and Tweaking TextMate Ruby Bundle Run Command it\u2019s famous Dr. Venkat TextMate setting for showing program run results as tooltips (highly recommended settings). Also, you can see how to configure these setting in this screencast Running in TextMate TextMate Manual Don\u2019t forget to share your TextMate links, article, tips, hacks, etc.","title":"Switching to Textmate 2"},{"location":"blog/2014/2014-11-16-how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues/","text":"How to Fix Textmate OSX Yosemite ruby 1.8 issues? | textmate | Textmate 2.0 is using Ruby 1.8 in own bundles. OSX Yosemite dropped Ruby 1.8 as default Ruby implementation, now it\u2019s Ruby 2.0. Based on this all Textmate ruby-based (legacy) bundles do not work. It can be fixed in several steps: Install Ruby 1.8.x via some Ruby version manager (e.g. rvm) $ rvm install 1 .8 Warning! Requested ruby installation which requires another ruby available - installing ruby-1.8.7-p374 first. Checking requirements for osx. Installing requirements for osx. Updating system........... Installing required custom packages: homebrew/versions homebrew/versions. Installing required packages: libtool, gcc48, libyaml, libksba, openssl098.....-Certificates in '/usr/local/etc/openssl/cert.pem' are already up to date. Requirements installation successful. Installing Ruby from source to: /Users/halyph/.rvm/rubies/ruby-1.8.7-p374, this may take a while depending on your cpu ( s ) ... ruby-1.8.7-p374 - #downloading ruby-1.8.7-p374, this may take a while depending on your connection... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 4150k 100 4150k 0 0 279k 0 0 :00:14 0 :00:14 --:--:-- 326k ruby-1.8.7-p374 - #extracting ruby-1.8.7-p374 to /Users/halyph/.rvm/src/ruby-1.8.7-p374.... ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/GH-488.patch. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch. ruby-1.8.7-p374 - #configuring............................... ruby-1.8.7-p374 - #post-configuration. ruby-1.8.7-p374 - #compiling.................................................... ruby-1.8.7-p374 - #installing. ruby-1.8.7-p374 - #making binaries executable.. ruby-1.8.7-p374 - #downloading rubygems-2.0.14 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 329k 100 329k 0 0 108k 0 0 :00:03 0 :00:03 --:--:-- 108k ruby-1.8.7-p374 - #extracting rubygems-2.0.14.... ruby-1.8.7-p374 - #removing old rubygems......... ruby-1.8.7-p374 - #installing rubygems-2.0.14..................................| ruby-1.8.7-p374 - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374@global ruby-1.8.7-p374 - #importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems.............................................................. ruby-1.8.7-p374 - #generating global wrappers........ ruby-1.8.7-p374 - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374 ruby-1.8.7-p374 - #importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list ruby-1.8.7-p374 - #generating default wrappers........ ruby-1.8.7-p374 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake). Install of ruby-1.8.7-p374 - #complete WARNING: Please be aware that you just installed a ruby that is no longer maintained ( 2014 -02-23 ) , for a list of maintained rubies visit: http://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches. Ruby was built without documentation, to build it run: rvm docs generate-ri Checking requirements for osx. Certificates in '/usr/local/etc/openssl/cert.pem' are already up to date. Requirements installation successful. Installing Ruby from source to: /Users/halyph/.rvm/rubies/ruby-1.8.7-head, this may take a while depending on your cpu ( s ) ... Cloning from git://github.com/ruby/ruby.git, this may take a while depending on your connection. HEAD is now at 2a9ea11 * lib/webrick/server.rb ( initialize ) : Initialize shutdown pipe here Branch ruby_1_8_7 set up to track remote branch ruby_1_8_7 from origin. Switched to a new branch 'ruby_1_8_7' Copying from repo to src path... ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch. ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff. ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch. ruby-1.8.7-head - #autoreconf. ruby-1.8.7-head - #configuring............................... ruby-1.8.7-head - #post-configuration. ruby-1.8.7-head - #compiling...................................................| ruby-1.8.7-head - #installing. ruby-1.8.7-head - #making binaries executable.. ruby-1.8.7-head - #downloading rubygems-2.0.14 ruby-1.8.7-head - #extracting rubygems-2.0.14..... ruby-1.8.7-head - #removing old rubygems......... ruby-1.8.7-head - #installing rubygems-2.0.14..................................| ruby-1.8.7-head - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head@global ruby-1.8.7-head - #importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems.............................................................. ruby-1.8.7-head - #generating global wrappers........ ruby-1.8.7-head - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head ruby-1.8.7-head - #importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list ruby-1.8.7-head - #generating default wrappers........ ruby-1.8.7-head - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake). Install of ruby-1.8.7-head - #complete Please be aware that you just installed a ruby that requires 3 patches just to be compiled on an up to date linux system. This may have known and unaccounted for security vulnerabilities. Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches. Ruby was built without documentation, to build it run: rvm docs generate-ri Update Textmate preferences Verify \u201cupdated\u201d Textmate settings via some ruby-based bundles, e.g. Bundles->Text->Duplicate Line","title":"How to Fix Textmate OSX Yosemite ruby 1.8 issues?"},{"location":"blog/2014/2014-11-16-how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues/#how-to-fix-textmate-osx-yosemite-ruby-18-issues","text":"| textmate | Textmate 2.0 is using Ruby 1.8 in own bundles. OSX Yosemite dropped Ruby 1.8 as default Ruby implementation, now it\u2019s Ruby 2.0. Based on this all Textmate ruby-based (legacy) bundles do not work. It can be fixed in several steps: Install Ruby 1.8.x via some Ruby version manager (e.g. rvm) $ rvm install 1 .8 Warning! Requested ruby installation which requires another ruby available - installing ruby-1.8.7-p374 first. Checking requirements for osx. Installing requirements for osx. Updating system........... Installing required custom packages: homebrew/versions homebrew/versions. Installing required packages: libtool, gcc48, libyaml, libksba, openssl098.....-Certificates in '/usr/local/etc/openssl/cert.pem' are already up to date. Requirements installation successful. Installing Ruby from source to: /Users/halyph/.rvm/rubies/ruby-1.8.7-p374, this may take a while depending on your cpu ( s ) ... ruby-1.8.7-p374 - #downloading ruby-1.8.7-p374, this may take a while depending on your connection... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 4150k 100 4150k 0 0 279k 0 0 :00:14 0 :00:14 --:--:-- 326k ruby-1.8.7-p374 - #extracting ruby-1.8.7-p374 to /Users/halyph/.rvm/src/ruby-1.8.7-p374.... ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/GH-488.patch. ruby-1.8.7-p374 - #applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch. ruby-1.8.7-p374 - #configuring............................... ruby-1.8.7-p374 - #post-configuration. ruby-1.8.7-p374 - #compiling.................................................... ruby-1.8.7-p374 - #installing. ruby-1.8.7-p374 - #making binaries executable.. ruby-1.8.7-p374 - #downloading rubygems-2.0.14 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 329k 100 329k 0 0 108k 0 0 :00:03 0 :00:03 --:--:-- 108k ruby-1.8.7-p374 - #extracting rubygems-2.0.14.... ruby-1.8.7-p374 - #removing old rubygems......... ruby-1.8.7-p374 - #installing rubygems-2.0.14..................................| ruby-1.8.7-p374 - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374@global ruby-1.8.7-p374 - #importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems.............................................................. ruby-1.8.7-p374 - #generating global wrappers........ ruby-1.8.7-p374 - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374 ruby-1.8.7-p374 - #importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list ruby-1.8.7-p374 - #generating default wrappers........ ruby-1.8.7-p374 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake). Install of ruby-1.8.7-p374 - #complete WARNING: Please be aware that you just installed a ruby that is no longer maintained ( 2014 -02-23 ) , for a list of maintained rubies visit: http://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches. Ruby was built without documentation, to build it run: rvm docs generate-ri Checking requirements for osx. Certificates in '/usr/local/etc/openssl/cert.pem' are already up to date. Requirements installation successful. Installing Ruby from source to: /Users/halyph/.rvm/rubies/ruby-1.8.7-head, this may take a while depending on your cpu ( s ) ... Cloning from git://github.com/ruby/ruby.git, this may take a while depending on your connection. HEAD is now at 2a9ea11 * lib/webrick/server.rb ( initialize ) : Initialize shutdown pipe here Branch ruby_1_8_7 set up to track remote branch ruby_1_8_7 from origin. Switched to a new branch 'ruby_1_8_7' Copying from repo to src path... ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch. ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff. ruby-1.8.7-head - #applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch. ruby-1.8.7-head - #autoreconf. ruby-1.8.7-head - #configuring............................... ruby-1.8.7-head - #post-configuration. ruby-1.8.7-head - #compiling...................................................| ruby-1.8.7-head - #installing. ruby-1.8.7-head - #making binaries executable.. ruby-1.8.7-head - #downloading rubygems-2.0.14 ruby-1.8.7-head - #extracting rubygems-2.0.14..... ruby-1.8.7-head - #removing old rubygems......... ruby-1.8.7-head - #installing rubygems-2.0.14..................................| ruby-1.8.7-head - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head@global ruby-1.8.7-head - #importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems.............................................................. ruby-1.8.7-head - #generating global wrappers........ ruby-1.8.7-head - #gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head ruby-1.8.7-head - #importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list ruby-1.8.7-head - #generating default wrappers........ ruby-1.8.7-head - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake). Install of ruby-1.8.7-head - #complete Please be aware that you just installed a ruby that requires 3 patches just to be compiled on an up to date linux system. This may have known and unaccounted for security vulnerabilities. Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches. Ruby was built without documentation, to build it run: rvm docs generate-ri Update Textmate preferences Verify \u201cupdated\u201d Textmate settings via some ruby-based bundles, e.g. Bundles->Text->Duplicate Line","title":"How to Fix Textmate OSX Yosemite ruby 1.8 issues?"},{"location":"blog/2015/2015-01-22-how-to-use-embedded-h2-with-h2-console/","text":"How to Use Embedded H2 with web Console? | java | There are several Java SQL databases which supports both server and embedded modes: H2 , HSQLDB and Derby . The most interesting for me is H2 with own web Console . The aim of this post is to show how to connect from H2 Console to embedded in-memory H2. H2 currently supports three servers: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). Please note that only the web server supports browser connections. The servers can be started in different ways, one is using the Server tool. Starting the server doesn\u2019t open a database - databases are opened as soon as a client connects. The next steps have to be performed to connect to embedded DB and populate initial data: Load DB driver Get Connection Create Statement and executeUpate queries Create TCP Server . We should start serve to make in-memory DB available for another process Let\u2019s try to implement this: Run sample application public class App { private static final String DBNAME = \"mytest\" ; public static void main ( String [] args ) throws ClassNotFoundException , SQLException , IOException { // open the in-memory database within a VM Class . forName ( \"org.h2.Driver\" ); // (1) Connection conn = DriverManager . getConnection ( \"jdbc:h2:mem:\" + DBNAME , \"sa\" , \"sa\" ); // (2) // username:password are very important and must be used for connecting via H2 Console Statement stat = conn . createStatement (); // (3) stat . executeUpdate ( \"create table mytbl(id int primary key, name varchar(255))\" ); stat . executeUpdate ( \"insert into mytbl values(1, 'Hello')\" ); stat . executeUpdate ( \"insert into mytbl values(2, 'World')\" ); // Verify that sample data was really inserted ResultSet rs = stat . executeQuery ( \"select * from mytbl\" ); System . out . println ( \"ResultSet output:\" ); while ( rs . next ()) { System . out . println ( \"> \" + rs . getString ( \"name\" )); } // start a TCP server Server server = Server . createTcpServer (). start (); // (4) // .. use in embedded mode .. // or use it from another process: System . out . println ( \"Server started and connection is open.\" ); System . out . println ( \"URL: jdbc:h2:\" + server . getURL () + \"/mem:\" + DBNAME ); System . out . println ( \"\\n\" ); System . out . println ( \"now start the H2 Console in another process using:\\n\" + \"$ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser\" ); System . out . println ( \"Press [Enter] to stop.\" ); System . in . read (); System . out . println ( \"Stopping server and closing the connection\" ); rs . close (); server . stop (); conn . close (); System . out . println ( \"Server is STOPPED\" ); } } Output for previous run: ResultSet output: > Hello > World Server started and connection is open. URL: jdbc:h2:tcp://192.168.1.100:9092/mem:mytest now start the H2 Console in another process using: $ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser Press [Enter] to stop. We assume that h2 installation bundle (zip file) was downloaded (from http://www.h2database.com/html/download.html ) beforehand and unpacked in some folder Go into H2 \u201cinstall/unpack\u201d folder and run the next command cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser Now we should copy URL (from sample App output) and credentials sa/sa to login into Console URL: jdbc:h2:tcp://192.168.1.100:9092/mem:mytest Username: sa Password: sa Login window (opened from shell by org.h2.tools.Console ) Verify that our custom table contains just inserted values Add Embedded TCP and Web Servers Now, it\u2019s time to add small improvements. The idea is to switch on H2 Console Web Server and TCP Server to have external access. We should add/update item (4) in previous code snippets like this public class App { private static final String DBNAME = \"mytest\" ; public static void main ( String [] args ) throws ClassNotFoundException , SQLException , IOException { ... Server webServer = Server . createWebServer ( \"-webAllowOthers\" , \"-webPort\" , \"8082\" ). start (); // (4a) Server server = Server . createTcpServer ( \"-tcpAllowOthers\" , \"-tcpPort\" , \"9092\" ). start (); // (4b) // .. use in embedded mode .. ... server . stop (); webServer . stop (); conn . close (); System . out . println ( \"Server is STOPPED\" ); } } After this we can access to Web Console without running external service Simply use URL in browser (access to Web Server ): http://localhost:8082/ Use any JDBC client (see IntelliJ IDEA as a sample below) access to TCP Server References H2 database in memory mode cannot be accessed by Console Official H2 Tutorial H2 Server methods GitHub Sources","title":"How to Use Embedded H2 with web Console?"},{"location":"blog/2015/2015-01-22-how-to-use-embedded-h2-with-h2-console/#how-to-use-embedded-h2-with-web-console","text":"| java | There are several Java SQL databases which supports both server and embedded modes: H2 , HSQLDB and Derby . The most interesting for me is H2 with own web Console . The aim of this post is to show how to connect from H2 Console to embedded in-memory H2. H2 currently supports three servers: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). Please note that only the web server supports browser connections. The servers can be started in different ways, one is using the Server tool. Starting the server doesn\u2019t open a database - databases are opened as soon as a client connects. The next steps have to be performed to connect to embedded DB and populate initial data: Load DB driver Get Connection Create Statement and executeUpate queries Create TCP Server . We should start serve to make in-memory DB available for another process","title":"How to Use Embedded H2 with web Console?"},{"location":"blog/2015/2015-01-22-how-to-use-embedded-h2-with-h2-console/#lets-try-to-implement-this","text":"Run sample application public class App { private static final String DBNAME = \"mytest\" ; public static void main ( String [] args ) throws ClassNotFoundException , SQLException , IOException { // open the in-memory database within a VM Class . forName ( \"org.h2.Driver\" ); // (1) Connection conn = DriverManager . getConnection ( \"jdbc:h2:mem:\" + DBNAME , \"sa\" , \"sa\" ); // (2) // username:password are very important and must be used for connecting via H2 Console Statement stat = conn . createStatement (); // (3) stat . executeUpdate ( \"create table mytbl(id int primary key, name varchar(255))\" ); stat . executeUpdate ( \"insert into mytbl values(1, 'Hello')\" ); stat . executeUpdate ( \"insert into mytbl values(2, 'World')\" ); // Verify that sample data was really inserted ResultSet rs = stat . executeQuery ( \"select * from mytbl\" ); System . out . println ( \"ResultSet output:\" ); while ( rs . next ()) { System . out . println ( \"> \" + rs . getString ( \"name\" )); } // start a TCP server Server server = Server . createTcpServer (). start (); // (4) // .. use in embedded mode .. // or use it from another process: System . out . println ( \"Server started and connection is open.\" ); System . out . println ( \"URL: jdbc:h2:\" + server . getURL () + \"/mem:\" + DBNAME ); System . out . println ( \"\\n\" ); System . out . println ( \"now start the H2 Console in another process using:\\n\" + \"$ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser\" ); System . out . println ( \"Press [Enter] to stop.\" ); System . in . read (); System . out . println ( \"Stopping server and closing the connection\" ); rs . close (); server . stop (); conn . close (); System . out . println ( \"Server is STOPPED\" ); } } Output for previous run: ResultSet output: > Hello > World Server started and connection is open. URL: jdbc:h2:tcp://192.168.1.100:9092/mem:mytest now start the H2 Console in another process using: $ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser Press [Enter] to stop. We assume that h2 installation bundle (zip file) was downloaded (from http://www.h2database.com/html/download.html ) beforehand and unpacked in some folder Go into H2 \u201cinstall/unpack\u201d folder and run the next command cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser Now we should copy URL (from sample App output) and credentials sa/sa to login into Console URL: jdbc:h2:tcp://192.168.1.100:9092/mem:mytest Username: sa Password: sa Login window (opened from shell by org.h2.tools.Console ) Verify that our custom table contains just inserted values","title":"Let's try to implement this:"},{"location":"blog/2015/2015-01-22-how-to-use-embedded-h2-with-h2-console/#add-embedded-tcp-and-web-servers","text":"Now, it\u2019s time to add small improvements. The idea is to switch on H2 Console Web Server and TCP Server to have external access. We should add/update item (4) in previous code snippets like this public class App { private static final String DBNAME = \"mytest\" ; public static void main ( String [] args ) throws ClassNotFoundException , SQLException , IOException { ... Server webServer = Server . createWebServer ( \"-webAllowOthers\" , \"-webPort\" , \"8082\" ). start (); // (4a) Server server = Server . createTcpServer ( \"-tcpAllowOthers\" , \"-tcpPort\" , \"9092\" ). start (); // (4b) // .. use in embedded mode .. ... server . stop (); webServer . stop (); conn . close (); System . out . println ( \"Server is STOPPED\" ); } } After this we can access to Web Console without running external service Simply use URL in browser (access to Web Server ): http://localhost:8082/ Use any JDBC client (see IntelliJ IDEA as a sample below) access to TCP Server","title":"Add Embedded TCP and Web Servers"},{"location":"blog/2015/2015-01-22-how-to-use-embedded-h2-with-h2-console/#references","text":"H2 database in memory mode cannot be accessed by Console Official H2 Tutorial H2 Server methods GitHub Sources","title":"References"},{"location":"blog/2015/2015-02-02-scripting-in-scala/","text":"Scripting in Scala | scala | Scala language compiles sources code to Java bytecode. But, it has some nice scripting facilities. Let\u2019s review them. So, the scala command is also a shell-script wrapper around the java command. According to official [scala utility] documentation (here highlighted only post-related notes): scala [ <option> ]... [ <torun> <argument>... ] The scala utility runs Scala code using a Java runtime environment. If a script file is specified to run, then the file is read and all Scala statements and declarations in the file are processed in order. Any arguments specified will be available via the argsvariable. Script files may have an optional header that is ignored if present. There are two ways to format the header: either beginning with #! and ending with !#, or beginning with ::#! and ending with ::!#. Such a header must have each header boundary start at the beginning of a line. Headers can be used to make stand-alone script files, as shown in the examples below. Here is a complete Scala script ( check.sh ) for Unix: #!/bin/sh exec scala \"$0\" \"$@\" !# Console.println(\"Hello, world!\") argv.toList foreach Console.println Here is a complete Scala script ( check.bat ) for MS Windows: ::#! @echo off call scala %0 %* goto :eof ::!# Console.println(\"Hello, world!\") argv.toList foreach Console.println If you want to use the compilation cache to speed up multiple executions of the script ( check.sh ), then add -savecompiled to the scala command: #!/bin/sh exec scala -savecompiled \"$0\" \"$@\" !# Console.println(\"Hello, world!\") argv.toList foreach Console.println These tricks give us an ability to run Scala script as plain shell script. Also, based on the setting above this script can have input parameters and almost cross-platform (see script header differences for Linux .vs. Windows). Now, we should save the mentioned above code snippet in some file (e.g. check.sh ) and make it executable. This script can be run as any Linux shell script ./check.sh ( check.bat - Windows). Scala utility internals Linux Linux script header uses the next items: #! it\u2019s [shebang] interpreter directive exec is used to run scala without creation new process. Commands which go right after exec will not be executed !# is simple marker for scala utility (see notes below) E.g. This script #! /bin/sh echo Header exec echo !# echo Body will have the next output $ ./test.sh Header We will get error in case exec is removed: #! /bin/sh echo Header !# echo Body Output $ ./test.sh Header ./test.sh: line 4: !#: command not found Body Windows Windows batch script header uses the next items: :: is a remark without displaying or executing that line when the batch file is run (see [Information on batch files]). ::#! is simple marker for scala utility (see notes below) @echo off disable echo call calls one batch program from another. goto :eof go to end of file ::!# is simple marker for scala utility (see notes below) The OS-specific script settings were identified, now let\u2019s dive deeper to understand how scala utility works. scala internals This utility performs the next flow to run script: Run scala.tools.nsc.MainGenericRunner#process and identify run target \u201cas Script\u201d (there are other targets) ScriptRunner.runScriptAndCatch(settings, thingToRun, command.arguments) ScriptRunner creates temp file File.makeTemp(\"scalacmd\", \".scala\") Run compiler and clean script header class ScriptRunner extends HasCompileSocket { ... private def withCompiledScript ( settings : GenericRunnerSettings , scriptFile : String ) ( handler : String => Boolean ): Boolean = { def mainClass = scriptMain ( settings ) val compiler = newGlobal ( settings , reporter ) new compiler . Run compile List ( scriptFile ) class Global /** If this compilation is scripted, convert the source to a script source. */ private def scripted ( s : SourceFile ) = s match { case b : BatchSourceFile if settings . script . isSetByUser => ScriptSourceFile ( b ) case _ => s } /** Compile abstract file until `globalPhase`, but at least * to phase \"namer\". */ def compileLate ( file : AbstractFile ) { if ( ! compiledFiles ( file . path )) compileLate ( new CompilationUnit ( scripted ( getSourceFile ( file )))) } Cleanup shell script (remove header) via SourceFile . Now, it\u2019s clear why script\u2019s header have such strange closing markers (see line 21, content drop headerLen - actual header remove) object ScriptSourceFile { /** Length of the script header from the given content, if there is one. * The header begins with \"#!\" or \"::#!\" and ends with a line starting * with \"!#\" or \"::!#\". */ def headerLength ( cs : Array [ Char ]): Int = { val headerPattern = Pattern . compile ( \"\"\"((?m)^(::)?!#.*|^.*/env .*)(\\r|\\n|\\r\\n)\"\"\" ) val headerStarts = List ( \"#!\" , \"::#!\" ) if ( headerStarts exists ( cs startsWith _ )) { val matcher = headerPattern matcher cs . mkString if ( matcher . find ) matcher . end else throw new IOException ( \"script file does not close its header with !# or ::!#\" ) } else 0 } def apply ( file : AbstractFile , content : Array [ Char ]) = { val underlying = new BatchSourceFile ( file , content ) val headerLen = headerLength ( content ) val stripped = new ScriptSourceFile ( underlying , content drop headerLen , headerLen ) stripped } Add libraries to Scala script Scala script libraries ( jar s) can be added in script\u2019s header section: #!/bin/sh exec scala -classpath \"lib/lib.1.jar:lib/lib.2.jar\" \" $0 \" \" $@ \" !# Summary There is nothing magical in Scala interpretation. Every single peace of code must be compiled. Such interesting scripting approach can be applied to Java as well. Unfortunately, Scala is not looks like nice scripting language (because it\u2019s not designed for this use case). It will be uncomfortable \u201cscripting\u201d in Scala without IDE. scala utility shebang Information on batch files References System Scripting with Scala [scala utility] [shebang] [Information on batch files] Scala Sources: ScriptRunner.scala SourceFile.scala Global.scala","title":"Scripting in Scala"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#scripting-in-scala","text":"| scala | Scala language compiles sources code to Java bytecode. But, it has some nice scripting facilities. Let\u2019s review them. So, the scala command is also a shell-script wrapper around the java command. According to official [scala utility] documentation (here highlighted only post-related notes): scala [ <option> ]... [ <torun> <argument>... ] The scala utility runs Scala code using a Java runtime environment. If a script file is specified to run, then the file is read and all Scala statements and declarations in the file are processed in order. Any arguments specified will be available via the argsvariable. Script files may have an optional header that is ignored if present. There are two ways to format the header: either beginning with #! and ending with !#, or beginning with ::#! and ending with ::!#. Such a header must have each header boundary start at the beginning of a line. Headers can be used to make stand-alone script files, as shown in the examples below. Here is a complete Scala script ( check.sh ) for Unix: #!/bin/sh exec scala \"$0\" \"$@\" !# Console.println(\"Hello, world!\") argv.toList foreach Console.println Here is a complete Scala script ( check.bat ) for MS Windows: ::#! @echo off call scala %0 %* goto :eof ::!# Console.println(\"Hello, world!\") argv.toList foreach Console.println If you want to use the compilation cache to speed up multiple executions of the script ( check.sh ), then add -savecompiled to the scala command: #!/bin/sh exec scala -savecompiled \"$0\" \"$@\" !# Console.println(\"Hello, world!\") argv.toList foreach Console.println These tricks give us an ability to run Scala script as plain shell script. Also, based on the setting above this script can have input parameters and almost cross-platform (see script header differences for Linux .vs. Windows). Now, we should save the mentioned above code snippet in some file (e.g. check.sh ) and make it executable. This script can be run as any Linux shell script ./check.sh ( check.bat - Windows).","title":"Scripting in Scala"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#scala-utility-internals","text":"","title":"Scala utility internals"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#linux","text":"Linux script header uses the next items: #! it\u2019s [shebang] interpreter directive exec is used to run scala without creation new process. Commands which go right after exec will not be executed !# is simple marker for scala utility (see notes below) E.g. This script #! /bin/sh echo Header exec echo !# echo Body will have the next output $ ./test.sh Header We will get error in case exec is removed: #! /bin/sh echo Header !# echo Body Output $ ./test.sh Header ./test.sh: line 4: !#: command not found Body","title":"Linux"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#windows","text":"Windows batch script header uses the next items: :: is a remark without displaying or executing that line when the batch file is run (see [Information on batch files]). ::#! is simple marker for scala utility (see notes below) @echo off disable echo call calls one batch program from another. goto :eof go to end of file ::!# is simple marker for scala utility (see notes below) The OS-specific script settings were identified, now let\u2019s dive deeper to understand how scala utility works.","title":"Windows"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#scala-internals","text":"This utility performs the next flow to run script: Run scala.tools.nsc.MainGenericRunner#process and identify run target \u201cas Script\u201d (there are other targets) ScriptRunner.runScriptAndCatch(settings, thingToRun, command.arguments) ScriptRunner creates temp file File.makeTemp(\"scalacmd\", \".scala\") Run compiler and clean script header class ScriptRunner extends HasCompileSocket { ... private def withCompiledScript ( settings : GenericRunnerSettings , scriptFile : String ) ( handler : String => Boolean ): Boolean = { def mainClass = scriptMain ( settings ) val compiler = newGlobal ( settings , reporter ) new compiler . Run compile List ( scriptFile ) class Global /** If this compilation is scripted, convert the source to a script source. */ private def scripted ( s : SourceFile ) = s match { case b : BatchSourceFile if settings . script . isSetByUser => ScriptSourceFile ( b ) case _ => s } /** Compile abstract file until `globalPhase`, but at least * to phase \"namer\". */ def compileLate ( file : AbstractFile ) { if ( ! compiledFiles ( file . path )) compileLate ( new CompilationUnit ( scripted ( getSourceFile ( file )))) } Cleanup shell script (remove header) via SourceFile . Now, it\u2019s clear why script\u2019s header have such strange closing markers (see line 21, content drop headerLen - actual header remove) object ScriptSourceFile { /** Length of the script header from the given content, if there is one. * The header begins with \"#!\" or \"::#!\" and ends with a line starting * with \"!#\" or \"::!#\". */ def headerLength ( cs : Array [ Char ]): Int = { val headerPattern = Pattern . compile ( \"\"\"((?m)^(::)?!#.*|^.*/env .*)(\\r|\\n|\\r\\n)\"\"\" ) val headerStarts = List ( \"#!\" , \"::#!\" ) if ( headerStarts exists ( cs startsWith _ )) { val matcher = headerPattern matcher cs . mkString if ( matcher . find ) matcher . end else throw new IOException ( \"script file does not close its header with !# or ::!#\" ) } else 0 } def apply ( file : AbstractFile , content : Array [ Char ]) = { val underlying = new BatchSourceFile ( file , content ) val headerLen = headerLength ( content ) val stripped = new ScriptSourceFile ( underlying , content drop headerLen , headerLen ) stripped }","title":"scala internals"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#add-libraries-to-scala-script","text":"Scala script libraries ( jar s) can be added in script\u2019s header section: #!/bin/sh exec scala -classpath \"lib/lib.1.jar:lib/lib.2.jar\" \" $0 \" \" $@ \" !#","title":"Add libraries to Scala script"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#summary","text":"There is nothing magical in Scala interpretation. Every single peace of code must be compiled. Such interesting scripting approach can be applied to Java as well. Unfortunately, Scala is not looks like nice scripting language (because it\u2019s not designed for this use case). It will be uncomfortable \u201cscripting\u201d in Scala without IDE. scala utility shebang Information on batch files","title":"Summary"},{"location":"blog/2015/2015-02-02-scripting-in-scala/#references","text":"System Scripting with Scala [scala utility] [shebang] [Information on batch files] Scala Sources: ScriptRunner.scala SourceFile.scala Global.scala","title":"References"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/","text":"How to Generate PermGen leak? | java | I\u2019m sure that a lot of Java developers experienced java.lang.OutOfMemoryError: PermGen space (OOME PermGen). It was very common to get this error after multiple WAR re-deploys on Tomcat v.6.x. Permanent generation (PermGen) region of memory is used to store the internal representation of loaded classes (and much more, see here [[1]] and [[2]]). So, we can get OOME PermGen when ClassLoader whats to store class definition, but there is not enough space in PermGen - i.e. loaded too many classes. Based on this OOME PermGen error can be generated via: decreasing PermGen size loading huge amount of classes I highly recommend to read What is a PermGen leak? post to get more info about this issue. Disclaimer The current post is totally based on How (not) to create a permgen leak? Generate PermGen leak The main idea is dynamically create a lot of classes via byte code manipulation library. We are going to use Javassist as it\u2019s the simplest library with nice API. We assume that it\u2019s maven based project. So, let\u2019s add Javassist to pom.xml . <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.mycompany.app </groupId> <artifactId> my-app </artifactId> <version> 1.0-SNAPSHOT </version> <packaging> jar </packaging> <name> my-app </name> <url> http://maven.apache.org </url> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <skipTests> true </skipTests> </properties> <dependencies> <dependency> <groupId> org.javassist </groupId> <artifactId> javassist </artifactId> <version> 3.15.0-GA </version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> appassembler-maven-plugin </artifactId> <version> 1.9 </version> <configuration> <extraJvmArguments> -XX:PermSize=2M -XX:MaxPermSize=4M </extraJvmArguments> <programs> <program> <mainClass> com.mycompany.app.App </mainClass> <id> app </id> </program> </programs> </configuration> </plugin> </plugins> </build> </project> Also, we should set PermGen and MaxPermGen size to 2M and 4M respectively (it gives us a chance to get error as quickly as possible). Maven Appassembler plugin [[3]] uses extraJvmArguments parameter while generating wrapper scripts: shell and batch (see pom.xml above, <extraJvmArguments>-XX:PermSize=2M -XX:MaxPermSize=2M</extraJvmArguments> ). \u2013XX:PermSize - Set initial PermGen Size \u2013XX:MaxPermSize - Set the maximum PermGen Size Below is a simple application which dynamically creates 1000 classes to cause PermGem leak. Class creation is very simple and self explanatory. The main idea is that we should use byte code manipulation library to create classes dynamically. See additional comments in the next code snippet package com.mycompany.app ; import javassist.CannotCompileException ; import javassist.ClassPool ; import java.util.concurrent.TimeUnit ; /** * Steps to build and run demo application: <br /> * * <li>mvn clean package appassembler:assemble * <li>target/appassembler/bin/app * */ public class App { /** * We should use static block for OutOfMemoryError \"initialization\" * It's very important to have it. In other case JVM won't be able to * throw (actually create new OutOfMemoryError) this exception because * there will be no free memory for this. That's why we creating it beforehand. * As you can see we intentionally added output to highlight that THIS error * was produces by us. */ static { new OutOfMemoryError (). printStackTrace (); try { TimeUnit . SECONDS . sleep ( 1 ); System . out . println ( \"=====================\" ); System . out . println ( \"Initialized/created OutOfMemoryError\" ); System . out . println ( \"=====================\" ); } catch ( InterruptedException e ) { e . printStackTrace (); } } public static void main ( String [] args ) throws Exception { System . out . println ( \"Start dynamic class creation.....\\n\" ); for ( int i = 0 ; i < 1000 ; i ++ ) { Class clazz = createClass ( \"MyClass\" + i ); // we use this output as indicator to see the rough number of created classes // it's not necessary to print every single (just created) class if ( i % 50 == 0 ) System . out . println ( clazz ); } } private static Class createClass ( String className ) throws CannotCompileException { ClassPool pool = ClassPool . getDefault (); return pool . makeClass ( className ). toClass (); } } Run the application $ mvn clean package appassembler:assemble $ target/appassembler/bin/app java.lang.OutOfMemoryError at com.mycompany.app.App.<clinit> ( App.java:15 ) ===================== Initialized/created OutOfMemoryError ===================== Start dynamic class creation..... class MyClass0 class MyClass50 class MyClass100 class MyClass150 class MyClass200 class MyClass250 class MyClass300 class MyClass350 class MyClass400 class MyClass450 class MyClass500 class MyClass550 Exception in thread \"Reference Handler\" java.lang.OutOfMemoryError: PermGen space at java.lang.ref.Reference $ReferenceHandler .run ( Reference.java:140 ) Exception in thread \"main\" java.lang.OutOfMemoryError: PermGen space at javassist.ClassPool.toClass ( ClassPool.java:1089 ) at javassist.ClassPool.toClass ( ClassPool.java:1032 ) at javassist.ClassPool.toClass ( ClassPool.java:990 ) at javassist.CtClass.toClass ( CtClass.java:1125 ) at com.mycompany.app.App.createClass ( App.java:36 ) at com.mycompany.app.App.main ( App.java:29 ) The next command runs under the hood: java -XX:PermSize=2M -XX:MaxPermSize=4M -classpath \"$CLASSPATH\" com.mycompany.app.App As you can see it was possible to create about 550 MyClass classes before we\u2019ve got an expected error. Tomcat Leaks Tomcat team created a nice wiki page where listed and shown the situations where leaks can be detected and fixed. References What is a PermGen leak? How (not) to create a permgen leak? Where Has the Java PermGen Gone? PermGen is replace with Metaspace in Java 8 Presenting the Permanent Generation General intro into the subject Javassist - Creating Java classes at runtime for evaluating numerical expressions Small article how to create Java classes dynamically Tomcat Wiki MemoryLeakProtection","title":"How to Generate PermGen leak?"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/#how-to-generate-permgen-leak","text":"| java | I\u2019m sure that a lot of Java developers experienced java.lang.OutOfMemoryError: PermGen space (OOME PermGen). It was very common to get this error after multiple WAR re-deploys on Tomcat v.6.x. Permanent generation (PermGen) region of memory is used to store the internal representation of loaded classes (and much more, see here [[1]] and [[2]]). So, we can get OOME PermGen when ClassLoader whats to store class definition, but there is not enough space in PermGen - i.e. loaded too many classes. Based on this OOME PermGen error can be generated via: decreasing PermGen size loading huge amount of classes I highly recommend to read What is a PermGen leak? post to get more info about this issue.","title":"How to Generate PermGen leak?"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/#disclaimer","text":"The current post is totally based on How (not) to create a permgen leak?","title":"Disclaimer"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/#generate-permgen-leak","text":"The main idea is dynamically create a lot of classes via byte code manipulation library. We are going to use Javassist as it\u2019s the simplest library with nice API. We assume that it\u2019s maven based project. So, let\u2019s add Javassist to pom.xml . <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.mycompany.app </groupId> <artifactId> my-app </artifactId> <version> 1.0-SNAPSHOT </version> <packaging> jar </packaging> <name> my-app </name> <url> http://maven.apache.org </url> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <skipTests> true </skipTests> </properties> <dependencies> <dependency> <groupId> org.javassist </groupId> <artifactId> javassist </artifactId> <version> 3.15.0-GA </version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> appassembler-maven-plugin </artifactId> <version> 1.9 </version> <configuration> <extraJvmArguments> -XX:PermSize=2M -XX:MaxPermSize=4M </extraJvmArguments> <programs> <program> <mainClass> com.mycompany.app.App </mainClass> <id> app </id> </program> </programs> </configuration> </plugin> </plugins> </build> </project> Also, we should set PermGen and MaxPermGen size to 2M and 4M respectively (it gives us a chance to get error as quickly as possible). Maven Appassembler plugin [[3]] uses extraJvmArguments parameter while generating wrapper scripts: shell and batch (see pom.xml above, <extraJvmArguments>-XX:PermSize=2M -XX:MaxPermSize=2M</extraJvmArguments> ). \u2013XX:PermSize - Set initial PermGen Size \u2013XX:MaxPermSize - Set the maximum PermGen Size Below is a simple application which dynamically creates 1000 classes to cause PermGem leak. Class creation is very simple and self explanatory. The main idea is that we should use byte code manipulation library to create classes dynamically. See additional comments in the next code snippet package com.mycompany.app ; import javassist.CannotCompileException ; import javassist.ClassPool ; import java.util.concurrent.TimeUnit ; /** * Steps to build and run demo application: <br /> * * <li>mvn clean package appassembler:assemble * <li>target/appassembler/bin/app * */ public class App { /** * We should use static block for OutOfMemoryError \"initialization\" * It's very important to have it. In other case JVM won't be able to * throw (actually create new OutOfMemoryError) this exception because * there will be no free memory for this. That's why we creating it beforehand. * As you can see we intentionally added output to highlight that THIS error * was produces by us. */ static { new OutOfMemoryError (). printStackTrace (); try { TimeUnit . SECONDS . sleep ( 1 ); System . out . println ( \"=====================\" ); System . out . println ( \"Initialized/created OutOfMemoryError\" ); System . out . println ( \"=====================\" ); } catch ( InterruptedException e ) { e . printStackTrace (); } } public static void main ( String [] args ) throws Exception { System . out . println ( \"Start dynamic class creation.....\\n\" ); for ( int i = 0 ; i < 1000 ; i ++ ) { Class clazz = createClass ( \"MyClass\" + i ); // we use this output as indicator to see the rough number of created classes // it's not necessary to print every single (just created) class if ( i % 50 == 0 ) System . out . println ( clazz ); } } private static Class createClass ( String className ) throws CannotCompileException { ClassPool pool = ClassPool . getDefault (); return pool . makeClass ( className ). toClass (); } } Run the application $ mvn clean package appassembler:assemble $ target/appassembler/bin/app java.lang.OutOfMemoryError at com.mycompany.app.App.<clinit> ( App.java:15 ) ===================== Initialized/created OutOfMemoryError ===================== Start dynamic class creation..... class MyClass0 class MyClass50 class MyClass100 class MyClass150 class MyClass200 class MyClass250 class MyClass300 class MyClass350 class MyClass400 class MyClass450 class MyClass500 class MyClass550 Exception in thread \"Reference Handler\" java.lang.OutOfMemoryError: PermGen space at java.lang.ref.Reference $ReferenceHandler .run ( Reference.java:140 ) Exception in thread \"main\" java.lang.OutOfMemoryError: PermGen space at javassist.ClassPool.toClass ( ClassPool.java:1089 ) at javassist.ClassPool.toClass ( ClassPool.java:1032 ) at javassist.ClassPool.toClass ( ClassPool.java:990 ) at javassist.CtClass.toClass ( CtClass.java:1125 ) at com.mycompany.app.App.createClass ( App.java:36 ) at com.mycompany.app.App.main ( App.java:29 ) The next command runs under the hood: java -XX:PermSize=2M -XX:MaxPermSize=4M -classpath \"$CLASSPATH\" com.mycompany.app.App As you can see it was possible to create about 550 MyClass classes before we\u2019ve got an expected error.","title":"Generate PermGen leak"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/#tomcat-leaks","text":"Tomcat team created a nice wiki page where listed and shown the situations where leaks can be detected and fixed.","title":"Tomcat Leaks"},{"location":"blog/2015/2015-02-05-how-to-generate-permgen/#references","text":"What is a PermGen leak? How (not) to create a permgen leak? Where Has the Java PermGen Gone? PermGen is replace with Metaspace in Java 8 Presenting the Permanent Generation General intro into the subject Javassist - Creating Java classes at runtime for evaluating numerical expressions Small article how to create Java classes dynamically Tomcat Wiki MemoryLeakProtection","title":"References"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/","text":"Do We Need Java for Everything? | java | Some time ago one guy wrote a post [Java for Everything]. The main idea is to use Java even for shell scripting. I\u2019m even taking this to an extreme and using Java for shell scripts. I\u2019ve found that anything other than a simple wrapper shell script eventually grows to the point where I\u2019m looking up the arcane syntax for removing some middle element from an array in bash \u2026 Write it in Java to start with. If shelling out to run commands is clumsy, write a utility function to make it easy. I\u2019ve also written a java_launcher shell script that allows me to write this at the top of Java programs: #!/usr/bin/env java_launcher # vim:ft=java # lib:/home/lk/lib/teamten.jar I can make the Java programs executable and drop the .java extension. The script strips the header, compiles and caches the class file, and runs the result with the specified jars. It provides one of the big advantages of Python: the lack of build scripts for simple one-off programs. Here is the actual source of [java_launcher]: #!/bin/bash # Put this script in your path and write the following line at the top of an # executable Java source program: # # #!/usr/bin/env java_launcher # # Additional documentation here: https://github.com/lkesteloot/java_launcher # Quit on error. set -e # Get the name of the script, which the shell passes to us automatically. SOURCE_PATHNAME = $1 if [ \" $SOURCE_PATHNAME \" = \"\" ] ; then echo \"java_launcher: Must supply name of script as first argument.\" exit 1 fi # Skip the script name. shift # Compute the MD5 of both the source file and this script. if [ -f /sbin/md5 ] ; then # Mac OS/X. SUM = $( cat \" $SOURCE_PATHNAME \" $0 | md5 ) else # Linux. SUM = $( cat \" $SOURCE_PATHNAME \" $0 | md5sum | cut -d ' ' -f1 ) fi SOURCE_FILENAME = $( basename \" $SOURCE_PATHNAME \" ) SOURCE_DIR = $( dirname \" $SOURCE_PATHNAME \" ) CLASS_NAME = $( echo $SOURCE_FILENAME | sed -e 's/\\.*//' ) CACHE_DIR = $HOME /.java_launcher_cache CLASS_DIR = $CACHE_DIR / $SUM PROCESSED_SOURCE = $CLASS_DIR / ${ SOURCE_FILENAME } .java PROCESSED_CLASS = $CLASS_DIR / ${ SOURCE_FILENAME } .class # Process source to find libs for classpath. Relative jars are made relative to the # source file. export CLASSPATH = $( awk 'BEGIN { CLASSPATH=\"\" } /^# lib:(.*)$/ { jar = substr($0, 7); if (substr(jar, 1, 1) != \"/\") jar = SOURCE_DIR \"/\" jar; if (CLASSPATH != \"\") CLASSPATH = CLASSPATH \":\"; CLASSPATH = CLASSPATH jar } END { print CLASSPATH }' SOURCE_DIR = \" $SOURCE_DIR \" < \" $SOURCE_PATHNAME \" ) # Default libraries. Put default ones last. SCRIPT_DIR = $( dirname $0 ) LIB_DIR = $SCRIPT_DIR /java_lib export CLASSPATH = $CLASSPATH : $LIB_DIR / \\* # Compile if necessary. if [ -f \" $PROCESSED_CLASS \" ] ; then # Refresh the dir so that we know we've used it recently. touch \" $CLASS_DIR \" else mkdir -p \" $CLASS_DIR \" # Remove header. That's anything that starts with #. Replace the lines with # an empty line so the line numbers don't get thrown off. sed -e 's/^#.*//' < \" $SOURCE_PATHNAME \" > \" $PROCESSED_SOURCE \" # Compile real source to our cache. javac -d \" $CLASS_DIR \" \" $PROCESSED_SOURCE \" fi # Run the program, passing on arguments from command line. export CLASSPATH = $CLASS_DIR : $CLASSPATH java -Xmx1024m $CLASS_NAME $* And suppose we\u2019d like to run helloworld Java \u201cscript\u201d using different jars located in default library location ( java_lib/ ) and custom ( /home/username/mylib1.jar and /home/username/mylib2.jar ) #!/usr/bin/env java_launcher # vim:ft=java # lib:/home/username/mylib1.jar:/home/username/mylib2.jar public class helloworld { public static void main ( String [] args ) { System.out.println ( \"Hello world!\" ) ; } } It can be run like this: $ ./helloworld So, how does java_launcher work? This launcher script works on Linux/MacOSX only. We should have additional java_launcher.bat script for Windows (cygwin and msys are not native Windows solution). It supports two types of CLASSPATH lib folders - default $SCRIPT_DIR/java_lib located in the same folder where the actual Java script located - custom libs, they should be listed at the head lib section of the script (see sample above). The script uses AWK to extract jars from lib section java_launcher uses MD5 hashing to track source changes and (re)compile the source script only when it has been changed. See MD5 calculated SUM variable above launcher has dedicated folder where it stores the processed and compiled script (based on MD5 hash changes). See the next variables: CACHE_DIR , PROCESSED_SOURCE and PROCESSED_CLASS . Then it combines the default and custom libs in resulted CLASSPATH Drawbacks I see the next drawbacks: libs should be distributed along with actual \u201cscript\u201d. The common use case is to have minimal required script, which downloads all required dependencies by yourself launcher is not cross-platform Java script requires additional configuration to be opened/edited in IDE (project file, adjust all dependencies, etc.) it\u2019s very hard to edit Java code in plain editor (Java language is verbose). Scripting in Java without IDE might be real pain Why not Groovy? I don\u2019t think that Java is \u201cgood\u201d language for scripting (see drawbacks above). Groovy is much better language with nice scripting capabilities. Every Groovy script might be treated like a Java code snippet (with some exceptions [[1]][Differences from Java] and [2] ). But, the most important is that Groovy has build-in [Grape dependency manager]: Grape (The Groovy Adaptable Packaging Engine or Groovy Advanced Packaging Engine) is the infrastructure enabling the grab() calls in Groovy, a set of classes leveraging Ivy to allow for a repository driven module system for Groovy. This allows a developer to write a script with an essentially arbitrary library requirement, and ship just the script. Grape will, at runtime, download as needed and link the named libraries and all dependencies forming a transitive closure when the script is run from existing repositories such as JCenter, Ibiblio, Codehaus, and java.net. Sample usage: @Grapes ([ @Grab ( group = 'commons-primitives' , module = 'commons-primitives' , version = '1.0' ), @Grab ( group = 'org.ccil.cowan.tagsoup' , module = 'tagsoup' , version = '0.9.7' )]) class Example { // ... } One or more groovy.lang.Grab annotations can be added at any place that annotations are accepted to tell the compiler that this code relies on the specific library. This will have the effect of adding the library to the classloader of the groovy compiler. This annotation is detected and evaluated before any other resolution of classes in the script, so imported classes can be properly resolved by a @Grab annotation. So, I have no idea why to reinvent the wheel. Use Groovy for scripting and Java for everything else. References Java for Everything Some reflections to the original post [Java for Everything]: Hacker News Reddit java_launcher source code Groovy Differences from Java Grape dependency manager","title":"Do We Need Java for Everything?"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/#do-we-need-java-for-everything","text":"| java | Some time ago one guy wrote a post [Java for Everything]. The main idea is to use Java even for shell scripting. I\u2019m even taking this to an extreme and using Java for shell scripts. I\u2019ve found that anything other than a simple wrapper shell script eventually grows to the point where I\u2019m looking up the arcane syntax for removing some middle element from an array in bash \u2026 Write it in Java to start with. If shelling out to run commands is clumsy, write a utility function to make it easy. I\u2019ve also written a java_launcher shell script that allows me to write this at the top of Java programs: #!/usr/bin/env java_launcher # vim:ft=java # lib:/home/lk/lib/teamten.jar I can make the Java programs executable and drop the .java extension. The script strips the header, compiles and caches the class file, and runs the result with the specified jars. It provides one of the big advantages of Python: the lack of build scripts for simple one-off programs. Here is the actual source of [java_launcher]: #!/bin/bash # Put this script in your path and write the following line at the top of an # executable Java source program: # # #!/usr/bin/env java_launcher # # Additional documentation here: https://github.com/lkesteloot/java_launcher # Quit on error. set -e # Get the name of the script, which the shell passes to us automatically. SOURCE_PATHNAME = $1 if [ \" $SOURCE_PATHNAME \" = \"\" ] ; then echo \"java_launcher: Must supply name of script as first argument.\" exit 1 fi # Skip the script name. shift # Compute the MD5 of both the source file and this script. if [ -f /sbin/md5 ] ; then # Mac OS/X. SUM = $( cat \" $SOURCE_PATHNAME \" $0 | md5 ) else # Linux. SUM = $( cat \" $SOURCE_PATHNAME \" $0 | md5sum | cut -d ' ' -f1 ) fi SOURCE_FILENAME = $( basename \" $SOURCE_PATHNAME \" ) SOURCE_DIR = $( dirname \" $SOURCE_PATHNAME \" ) CLASS_NAME = $( echo $SOURCE_FILENAME | sed -e 's/\\.*//' ) CACHE_DIR = $HOME /.java_launcher_cache CLASS_DIR = $CACHE_DIR / $SUM PROCESSED_SOURCE = $CLASS_DIR / ${ SOURCE_FILENAME } .java PROCESSED_CLASS = $CLASS_DIR / ${ SOURCE_FILENAME } .class # Process source to find libs for classpath. Relative jars are made relative to the # source file. export CLASSPATH = $( awk 'BEGIN { CLASSPATH=\"\" } /^# lib:(.*)$/ { jar = substr($0, 7); if (substr(jar, 1, 1) != \"/\") jar = SOURCE_DIR \"/\" jar; if (CLASSPATH != \"\") CLASSPATH = CLASSPATH \":\"; CLASSPATH = CLASSPATH jar } END { print CLASSPATH }' SOURCE_DIR = \" $SOURCE_DIR \" < \" $SOURCE_PATHNAME \" ) # Default libraries. Put default ones last. SCRIPT_DIR = $( dirname $0 ) LIB_DIR = $SCRIPT_DIR /java_lib export CLASSPATH = $CLASSPATH : $LIB_DIR / \\* # Compile if necessary. if [ -f \" $PROCESSED_CLASS \" ] ; then # Refresh the dir so that we know we've used it recently. touch \" $CLASS_DIR \" else mkdir -p \" $CLASS_DIR \" # Remove header. That's anything that starts with #. Replace the lines with # an empty line so the line numbers don't get thrown off. sed -e 's/^#.*//' < \" $SOURCE_PATHNAME \" > \" $PROCESSED_SOURCE \" # Compile real source to our cache. javac -d \" $CLASS_DIR \" \" $PROCESSED_SOURCE \" fi # Run the program, passing on arguments from command line. export CLASSPATH = $CLASS_DIR : $CLASSPATH java -Xmx1024m $CLASS_NAME $* And suppose we\u2019d like to run helloworld Java \u201cscript\u201d using different jars located in default library location ( java_lib/ ) and custom ( /home/username/mylib1.jar and /home/username/mylib2.jar ) #!/usr/bin/env java_launcher # vim:ft=java # lib:/home/username/mylib1.jar:/home/username/mylib2.jar public class helloworld { public static void main ( String [] args ) { System.out.println ( \"Hello world!\" ) ; } } It can be run like this: $ ./helloworld","title":"Do We Need Java for Everything?"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/#so-how-does-java_launcher-work","text":"This launcher script works on Linux/MacOSX only. We should have additional java_launcher.bat script for Windows (cygwin and msys are not native Windows solution). It supports two types of CLASSPATH lib folders - default $SCRIPT_DIR/java_lib located in the same folder where the actual Java script located - custom libs, they should be listed at the head lib section of the script (see sample above). The script uses AWK to extract jars from lib section java_launcher uses MD5 hashing to track source changes and (re)compile the source script only when it has been changed. See MD5 calculated SUM variable above launcher has dedicated folder where it stores the processed and compiled script (based on MD5 hash changes). See the next variables: CACHE_DIR , PROCESSED_SOURCE and PROCESSED_CLASS . Then it combines the default and custom libs in resulted CLASSPATH","title":"So, how does java_launcher work?"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/#drawbacks","text":"I see the next drawbacks: libs should be distributed along with actual \u201cscript\u201d. The common use case is to have minimal required script, which downloads all required dependencies by yourself launcher is not cross-platform Java script requires additional configuration to be opened/edited in IDE (project file, adjust all dependencies, etc.) it\u2019s very hard to edit Java code in plain editor (Java language is verbose). Scripting in Java without IDE might be real pain","title":"Drawbacks"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/#why-not-groovy","text":"I don\u2019t think that Java is \u201cgood\u201d language for scripting (see drawbacks above). Groovy is much better language with nice scripting capabilities. Every Groovy script might be treated like a Java code snippet (with some exceptions [[1]][Differences from Java] and [2] ). But, the most important is that Groovy has build-in [Grape dependency manager]: Grape (The Groovy Adaptable Packaging Engine or Groovy Advanced Packaging Engine) is the infrastructure enabling the grab() calls in Groovy, a set of classes leveraging Ivy to allow for a repository driven module system for Groovy. This allows a developer to write a script with an essentially arbitrary library requirement, and ship just the script. Grape will, at runtime, download as needed and link the named libraries and all dependencies forming a transitive closure when the script is run from existing repositories such as JCenter, Ibiblio, Codehaus, and java.net. Sample usage: @Grapes ([ @Grab ( group = 'commons-primitives' , module = 'commons-primitives' , version = '1.0' ), @Grab ( group = 'org.ccil.cowan.tagsoup' , module = 'tagsoup' , version = '0.9.7' )]) class Example { // ... } One or more groovy.lang.Grab annotations can be added at any place that annotations are accepted to tell the compiler that this code relies on the specific library. This will have the effect of adding the library to the classloader of the groovy compiler. This annotation is detected and evaluated before any other resolution of classes in the script, so imported classes can be properly resolved by a @Grab annotation. So, I have no idea why to reinvent the wheel. Use Groovy for scripting and Java for everything else.","title":"Why not Groovy?"},{"location":"blog/2015/2015-02-12-do-we-need-java-for-everything/#references","text":"Java for Everything Some reflections to the original post [Java for Everything]: Hacker News Reddit java_launcher source code Groovy Differences from Java Grape dependency manager","title":"References"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/","text":"Maven Flow for Simple App Creation | java | maven | I provided my reflections about \u201cJava for Everything\u201d in the previous post . Here we will review other implementation of this concept. I have the next concerns about any Java application (big or small): library dependency management must be simple it\u2019s very bad practice to distribute sources along with libraries (dependency management tools must be used instead: Ivy, Maven, Gradle, etc.) small application might have a little bit different project layout (not equals to traditional Maven layout) we should be able to setup IDE (in my case Intellij IDEA ) as quick a possible. I hate editing Java programs in plain text editor it must be a convenient way to run Java application with different arguments in production and development modes Use Case We have to create simple and small REST application based on Spark Java framework (A Sinatra inspired framework for Java). Here is the source: import static spark.Spark.get ; import static spark.SparkBase.port ; public class App { public static void main ( String [] args ) throws NumberFormatException { for ( String arg : args ) System . out . printf ( \"> %s\" , arg ); get ( \"/hello\" , ( request , response ) -> { return \"Hello World!\" ; }); } } So, here is the list of issues: get Spark dependency with all transitive dependencies pass command-line arguments into the app use this application in development mode and in \u201cproduction\u201d (packed in jar) Traditional Maven Way Generate empty project via Maven archetype mvn archetype:generate \\ -DgroupId = com.halyph \\ -DartifactId = sparkblog \\ -Dpackage = com.halyph.blog \\ -Dversion = 1 .0-SNAPSHOT \\ -DarchetypeGroupId = org.apache.maven.archetypes \\ -DarchetypeArtifactId = maven-archetype-quickstart \\ -DinteractiveMode = false Open this in IDEA (I don\u2019t use other IDEs) via \u201cOpen File or Project\u201d and select folder with generated pom.xml file. We don\u2019t need tests, so we can delete src->test folder and remove junit dependency from pom.xml file. Now, we can easily run our application via IDE. Add Spark framework dependency to pom.xml and update our App class <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.halyph </groupId> <artifactId> sparkblog </artifactId> <version> 1.0-SNAPSHOT </version> <packaging> jar </packaging> <name> sparkblog </name> <url> http://maven.apache.org </url> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId> com.sparkjava </groupId> <artifactId> spark-core </artifactId> <version> 2.1 </version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <target> 1.8 </target> <source> 1.8 </source> </configuration> </plugin> </plugins> </build> </project> package com.halyph.blog ; import static spark.Spark.get ; public class App { public static void main ( String [] args ) throws NumberFormatException { String myArgs = \"\" ; for ( String arg : args ) { System . out . printf ( \"> %s\" , arg ); myArgs += arg + \" : \" ; } System . out . println (); final String finalMyArgs = myArgs ; get ( \"/hello\" , ( request , response ) -> { return \"Hello World!\\n args = \" + finalMyArgs ; }); } } This application can be easily run via IDE, but lets run it via Maven We should use [Exec Maven Plugin] to run the app with all dependencies $ mvn clean compile exec:java -Dexec.mainClass = \"com.halyph.blog.App\" -Dexec.args = \"9090 one 1 2\" [ INFO ] Scanning for projects... [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] Building sparkblog 1 .0-SNAPSHOT [ INFO ] ------------------------------------------------------------------------ [ INFO ] [ INFO ] --- maven-clean-plugin:2.4.1:clean ( default-clean ) @ sparkblog --- [ INFO ] Deleting d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget [ INFO ] [ INFO ] --- maven-resources-plugin:2.5:resources ( default-resources ) @ sparkblog --- [ debug ] execute contextualize [ INFO ] Using 'UTF-8' encoding to copy filtered resources. [ INFO ] skip non existing resourceDirectory d: \\M yProjects \\s parkblog \\s rc \\m ain \\r esources [ INFO ] [ INFO ] --- maven-compiler-plugin:3.1:compile ( default-compile ) @ sparkblog --- [ INFO ] Changes detected - recompiling the module! [ INFO ] Compiling 1 source file to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\c lasses [ INFO ] [ INFO ] >>> exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog >>> [ INFO ] [ INFO ] <<< exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog <<< [ INFO ] [ INFO ] --- exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog --- > 9090 > one> 1 > 2 [ Thread-1 ] INFO spark.webserver.SparkServer - == Spark has ignited ... [ Thread-1 ] INFO spark.webserver.SparkServer - >> Listening on 0 .0.0.0:4567 [ Thread-1 ] INFO org.eclipse.jetty.server.Server - jetty-9.0.2.v20130417 [ Thread-1 ] INFO org.eclipse.jetty.server.ServerConnector - Started ServerConnector@4afe75c9 { HTTP/1.1 }{ 0 .0.0.0:4567 } In case the application run configurations is persistent (\u201cmain\u201d class and CLI arguments are changing rarely) we can configure it in pom.xml : <build> <plugins> ... <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.3.2 </version> <executions> <execution> <goals> <goal> java </goal> </goals> </execution> </executions> <configuration> <mainClass> com.halyph.blog.App </mainClass> <arguments> <argument> 9090 </argument> <argument> one </argument> <argument> 1 </argument> <argument> 2 </argument> </arguments> </configuration> </plugin> </plugins> </build> It\u2019s nice idea to use mvn exec:java , but it might be a little bit slow. So, we might decide to use some shell script which increase compiled application ramp up time. The problem is that the application have dependencies (which have transitive dependencies). I.e. java classpath have to be configured somehow. Well, I borrowed the ideas from \u201c[A better java shell script wrapper]\u201d script. Here it is: #!/usr/bin/env bash # # Copyright 2012 Zemian Deng # # A wrapper script that run any Java application in unix/cygwin bash env. # # This script is assumed to be located in an application's \"bin\" directory. It will # auto resolve its directory location relative to the application path (which is one # parent up from the script.) Therefore, this script can be run any where in the file # system and it will still reference the same application directory. # # This script will by default auto setup a Java classpath that picks up any \"config\" # and \"lib\" directories under the application directory. It also will also add a # any typical Maven project output directories such as \"target/test-classes\", # \"target/classes\", and \"target/dependency\" into classpath. This can be disable by # setting RUN_JAVA_NO_AUTOCP=1. # # If the \"Default parameters\" section bellow doesn't match to user's env, then user # may override these variables in their terminal session or preset them in shell's # profile startup script. The values of all path should be in cygwin/unix path, # and this script will auto convert them into Windows path where is needed. # # User may customize the Java classpath by setting RUN_JAVA_CP, which will prefix to existing # classpath, or use the \"-cp\" option, which will postfix to existing classpath. # # Usage: # run-java [java_opts] <java_main_class> [-cp /more/classpath] [-Dsysprop=value] # # Example: # run-java example.Hello # run-java example.Hello -Dname=World # run-java org.junit.runner.JUnitCore example.HelloTest -cp \"$HOME/apps/junit/lib/*\" # # Created by: Zemian Deng 03/09/2012 # This run script dir (resolve to absolute path) SCRIPT_DIR = $( cd $( dirname $0 ) && pwd ) # This dir is where this script live. APP_DIR = $( cd $SCRIPT_DIR /.. && pwd ) # Assume the application dir is one level up from script dir. # Default parameters JAVA_HOME = ${ JAVA_HOME := $HOME /apps/jdk } # This is the home directory of Java development kit. RUN_JAVA_CP = ${ RUN_JAVA_CP := $CLASSPATH } # A classpath prefix before -classpath option, default to $CLASSPATH RUN_JAVA_OPTS = ${ RUN_JAVA_OPTS := } # Java options (-Xmx512m -XX:MaxPermSize=128m etc) RUN_JAVA_DEBUG = ${ RUN_JAVA_DEBUG := } # If not empty, print the full java command line before executing it. RUN_JAVA_NO_PARSE = ${ RUN_JAVA_NO_PARSE := } # If not empty, skip the auto parsing of -D and -cp options from script arguments. RUN_JAVA_NO_AUTOCP = ${ RUN_JAVA_NO_AUTOCP := } # If not empty, do not auto setup Java classpath RUN_JAVA_DRY = ${ RUN_JAVA_DRY := } # If not empty, do not exec Java command, but just print # OS specific support. $var _must_ be set to either true or false. CYGWIN = false ; case \"`uname`\" in CYGWIN* ) CYGWIN = true ;; esac # Define where is the java executable is JAVA_CMD = java if [ -d \" $JAVA_HOME \" ] ; then JAVA_CMD = \" $JAVA_HOME /bin/java\" fi # Auto setup applciation's Java Classpath (only if they exists) if [ -z \" $RUN_JAVA_NO_AUTOCP \" ] ; then if [ -d \" $APP_DIR /config\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /config\" ; fi if [ -d \" $APP_DIR /target/test-classes\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/test-classes\" ; fi if [ -d \" $APP_DIR /target/classes\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/classes\" ; fi if [ -d \" $APP_DIR /target/dependency\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/dependency/*\" ; fi if [ -d \" $APP_DIR /lib\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /lib/*\" ; fi fi ARGS = \" $@ \" # Parse addition \"-cp\" and \"-D\" after the Java main class from script arguments # This is done for convenient sake so users do not have to export RUN_JAVA_CP and RUN_JAVA_OPTS # saparately, but now they can pass into end of this run-java script instead. # This can be disable by setting RUN_JAVA_NO_PARSE=1. if [ -z \" $RUN_JAVA_NO_PARSE \" ] ; then # Prepare variables for parsing FOUND_CP = NEW_ARGS [ 0 ]= '' IDX = 0 # Parse all arguments and look for \"-cp\" and \"-D\" for ARG in \" $@ \" ; do if [[ -n $FOUND_CP ]] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $ARG \" FOUND_CP = else case $ARG in '-cp' ) FOUND_CP = 1 ;; '-D' * ) RUN_JAVA_OPTS = \" $RUN_JAVA_OPTS $ARG \" ;; * ) NEW_ARGS [ $IDX ]= \" $ARG \" let IDX = $IDX +1 ;; esac fi done ARGS = \" ${ NEW_ARGS [@] } \" fi # Convert Windows Java Classpath if $CYGWIN ; then RUN_JAVA_CP = $( cygpath -mp $RUN_JAVA_CP ) fi # Display full Java command. if [ -n \" $RUN_JAVA_DEBUG \" ] || [ -n \" $RUN_JAVA_DRY \" ] ; then echo \" $JAVA_CMD \" $RUN_JAVA_OPTS -cp \" $RUN_JAVA_CP \" $ARGS fi # Run Java Main class if [ -z \" $RUN_JAVA_DRY \" ] ; then \" $JAVA_CMD \" $RUN_JAVA_OPTS -cp \" $RUN_JAVA_CP \" $ARGS fi The main idea is to run mvn dependency:copy-dependencies , this will generate all the jar files into target/dependency folder $ mvn dependency:copy-dependencies [ INFO ] Scanning for projects... [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] Building sparkblog 1 .0-SNAPSHOT [ INFO ] ------------------------------------------------------------------------ [ INFO ] [ INFO ] --- maven-dependency-plugin:2.1:copy-dependencies ( default-cli ) @ sparkblog --- [ INFO ] Copying spark-core-2.1.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s park-core-2.1.jar [ INFO ] Copying jetty-http-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-http-9.0.2.v20130417.jar [ INFO ] Copying jetty-io-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-io-9.0.2.v20130417.jar [ INFO ] Copying jetty-security-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-security-9.0.2.v20130417.jar [ INFO ] Copying jetty-server-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-server-9.0.2.v20130417.jar [ INFO ] Copying jetty-servlet-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-servlet-9.0.2.v20130417.jar [ INFO ] Copying jetty-util-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-util-9.0.2.v20130417.jar [ INFO ] Copying jetty-webapp-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-webapp-9.0.2.v20130417.jar [ INFO ] Copying jetty-xml-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-xml-9.0.2.v20130417.jar [ INFO ] Copying javax.servlet-3.0.0.v201112011016.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j avax.servlet-3.0.0.v201112011016.jar [ INFO ] Copying slf4j-api-1.7.7.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s lf4j-api-1.7.7.jar [ INFO ] Copying slf4j-simple-1.7.7.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s lf4j-simple-1.7.7.jar [ INFO ] ------------------------------------------------------------------------ [ INFO ] BUILD SUCCESS [ INFO ] ------------------------------------------------------------------------ [ INFO ] Total time: 2 .978s [ INFO ] Finished at: Thu Feb 12 18 :22:54 EET 2015 [ INFO ] Final Memory: 9M/243M [ INFO ] ------------------------------------------------------------------------ Now, we can reuse the provided above script or use the provided below one-liner: java -cp target \\c lasses ; target \\d ependency \\* com.halyph.blog.App 9090 one 1 2 This one-liner is very simple and can be transformed to shell/batch scripts depending on the level of re-use you\u2019d like to implement. Now, it\u2019s time to created pre-packed application bundle which can be easily distributed. We will use [Maven Application Assembler Plugin]: <build> <plugins> ... <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> appassembler-maven-plugin </artifactId> <version> 1.9 </version> <!-- This (executions) section can be omitted. In case it's omitted we should call the next command to generate wrapper: mvn package appassembler:assemble --> <executions> <execution> <phase> package </phase> <goals> <goal> assemble </goal> </goals> </execution> </executions> <configuration> <programs> <program> <mainClass> com.halyph.blog.App </mainClass> <id> app </id> </program> </programs> </configuration> </plugin> </plugins> </build> The Application Assembler Plugin is a Maven plugin for generating scripts for starting java applications. All dependencies and the artifact of the project itself are placed in a generated Maven repository in a defined assemble directory. All artifacts (dependencies + the artifact from the project) are added to the classpath in the generated bin scripts. [Maven Application Assembler Plugin] usage: $ mvn package $ target/appassembler/bin/app All dependencies and the artifact itself are placed in the defined assemble directory (defaults to $project.build.directory/appassembler ). A bin/ directory is created in the assemble directory and the generated bin scripts are placed in that directory (defaults to both unix shell scripts and Windows bat files). Note: [Maven Application Assembler Plugin] have a lot of customization options, just check the documentation. Summary Here was shown that using such tool as Maven you can be productive and \u201cagile\u201d (use Gradle if you\u2019d like to be in trend): generate project skeleton from scratch open it in IDE without ceremony call the app via Maven plugin call it as plain CLI application, but with small ceremony (need to run dependency:copy-dependencies ) package the app for further distribution Yes, it\u2019s not a simple write-one Java \u201cscript\u201d, but it\u2019s flexible enough to feel like it is. References Do We Need Java for Everything? A better java shell script wrapper Exec Maven Plugin Maven Application Assembler Plugin Wrapper Script for Java Command-Line Applications","title":"Maven Flow for Simple App Creation"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/#maven-flow-for-simple-app-creation","text":"| java | maven | I provided my reflections about \u201cJava for Everything\u201d in the previous post . Here we will review other implementation of this concept. I have the next concerns about any Java application (big or small): library dependency management must be simple it\u2019s very bad practice to distribute sources along with libraries (dependency management tools must be used instead: Ivy, Maven, Gradle, etc.) small application might have a little bit different project layout (not equals to traditional Maven layout) we should be able to setup IDE (in my case Intellij IDEA ) as quick a possible. I hate editing Java programs in plain text editor it must be a convenient way to run Java application with different arguments in production and development modes","title":"Maven Flow for Simple App Creation"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/#use-case","text":"We have to create simple and small REST application based on Spark Java framework (A Sinatra inspired framework for Java). Here is the source: import static spark.Spark.get ; import static spark.SparkBase.port ; public class App { public static void main ( String [] args ) throws NumberFormatException { for ( String arg : args ) System . out . printf ( \"> %s\" , arg ); get ( \"/hello\" , ( request , response ) -> { return \"Hello World!\" ; }); } } So, here is the list of issues: get Spark dependency with all transitive dependencies pass command-line arguments into the app use this application in development mode and in \u201cproduction\u201d (packed in jar)","title":"Use Case"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/#traditional-maven-way","text":"Generate empty project via Maven archetype mvn archetype:generate \\ -DgroupId = com.halyph \\ -DartifactId = sparkblog \\ -Dpackage = com.halyph.blog \\ -Dversion = 1 .0-SNAPSHOT \\ -DarchetypeGroupId = org.apache.maven.archetypes \\ -DarchetypeArtifactId = maven-archetype-quickstart \\ -DinteractiveMode = false Open this in IDEA (I don\u2019t use other IDEs) via \u201cOpen File or Project\u201d and select folder with generated pom.xml file. We don\u2019t need tests, so we can delete src->test folder and remove junit dependency from pom.xml file. Now, we can easily run our application via IDE. Add Spark framework dependency to pom.xml and update our App class <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.halyph </groupId> <artifactId> sparkblog </artifactId> <version> 1.0-SNAPSHOT </version> <packaging> jar </packaging> <name> sparkblog </name> <url> http://maven.apache.org </url> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId> com.sparkjava </groupId> <artifactId> spark-core </artifactId> <version> 2.1 </version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <target> 1.8 </target> <source> 1.8 </source> </configuration> </plugin> </plugins> </build> </project> package com.halyph.blog ; import static spark.Spark.get ; public class App { public static void main ( String [] args ) throws NumberFormatException { String myArgs = \"\" ; for ( String arg : args ) { System . out . printf ( \"> %s\" , arg ); myArgs += arg + \" : \" ; } System . out . println (); final String finalMyArgs = myArgs ; get ( \"/hello\" , ( request , response ) -> { return \"Hello World!\\n args = \" + finalMyArgs ; }); } } This application can be easily run via IDE, but lets run it via Maven We should use [Exec Maven Plugin] to run the app with all dependencies $ mvn clean compile exec:java -Dexec.mainClass = \"com.halyph.blog.App\" -Dexec.args = \"9090 one 1 2\" [ INFO ] Scanning for projects... [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] Building sparkblog 1 .0-SNAPSHOT [ INFO ] ------------------------------------------------------------------------ [ INFO ] [ INFO ] --- maven-clean-plugin:2.4.1:clean ( default-clean ) @ sparkblog --- [ INFO ] Deleting d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget [ INFO ] [ INFO ] --- maven-resources-plugin:2.5:resources ( default-resources ) @ sparkblog --- [ debug ] execute contextualize [ INFO ] Using 'UTF-8' encoding to copy filtered resources. [ INFO ] skip non existing resourceDirectory d: \\M yProjects \\s parkblog \\s rc \\m ain \\r esources [ INFO ] [ INFO ] --- maven-compiler-plugin:3.1:compile ( default-compile ) @ sparkblog --- [ INFO ] Changes detected - recompiling the module! [ INFO ] Compiling 1 source file to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\c lasses [ INFO ] [ INFO ] >>> exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog >>> [ INFO ] [ INFO ] <<< exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog <<< [ INFO ] [ INFO ] --- exec-maven-plugin:1.2.1:java ( default-cli ) @ sparkblog --- > 9090 > one> 1 > 2 [ Thread-1 ] INFO spark.webserver.SparkServer - == Spark has ignited ... [ Thread-1 ] INFO spark.webserver.SparkServer - >> Listening on 0 .0.0.0:4567 [ Thread-1 ] INFO org.eclipse.jetty.server.Server - jetty-9.0.2.v20130417 [ Thread-1 ] INFO org.eclipse.jetty.server.ServerConnector - Started ServerConnector@4afe75c9 { HTTP/1.1 }{ 0 .0.0.0:4567 } In case the application run configurations is persistent (\u201cmain\u201d class and CLI arguments are changing rarely) we can configure it in pom.xml : <build> <plugins> ... <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.3.2 </version> <executions> <execution> <goals> <goal> java </goal> </goals> </execution> </executions> <configuration> <mainClass> com.halyph.blog.App </mainClass> <arguments> <argument> 9090 </argument> <argument> one </argument> <argument> 1 </argument> <argument> 2 </argument> </arguments> </configuration> </plugin> </plugins> </build> It\u2019s nice idea to use mvn exec:java , but it might be a little bit slow. So, we might decide to use some shell script which increase compiled application ramp up time. The problem is that the application have dependencies (which have transitive dependencies). I.e. java classpath have to be configured somehow. Well, I borrowed the ideas from \u201c[A better java shell script wrapper]\u201d script. Here it is: #!/usr/bin/env bash # # Copyright 2012 Zemian Deng # # A wrapper script that run any Java application in unix/cygwin bash env. # # This script is assumed to be located in an application's \"bin\" directory. It will # auto resolve its directory location relative to the application path (which is one # parent up from the script.) Therefore, this script can be run any where in the file # system and it will still reference the same application directory. # # This script will by default auto setup a Java classpath that picks up any \"config\" # and \"lib\" directories under the application directory. It also will also add a # any typical Maven project output directories such as \"target/test-classes\", # \"target/classes\", and \"target/dependency\" into classpath. This can be disable by # setting RUN_JAVA_NO_AUTOCP=1. # # If the \"Default parameters\" section bellow doesn't match to user's env, then user # may override these variables in their terminal session or preset them in shell's # profile startup script. The values of all path should be in cygwin/unix path, # and this script will auto convert them into Windows path where is needed. # # User may customize the Java classpath by setting RUN_JAVA_CP, which will prefix to existing # classpath, or use the \"-cp\" option, which will postfix to existing classpath. # # Usage: # run-java [java_opts] <java_main_class> [-cp /more/classpath] [-Dsysprop=value] # # Example: # run-java example.Hello # run-java example.Hello -Dname=World # run-java org.junit.runner.JUnitCore example.HelloTest -cp \"$HOME/apps/junit/lib/*\" # # Created by: Zemian Deng 03/09/2012 # This run script dir (resolve to absolute path) SCRIPT_DIR = $( cd $( dirname $0 ) && pwd ) # This dir is where this script live. APP_DIR = $( cd $SCRIPT_DIR /.. && pwd ) # Assume the application dir is one level up from script dir. # Default parameters JAVA_HOME = ${ JAVA_HOME := $HOME /apps/jdk } # This is the home directory of Java development kit. RUN_JAVA_CP = ${ RUN_JAVA_CP := $CLASSPATH } # A classpath prefix before -classpath option, default to $CLASSPATH RUN_JAVA_OPTS = ${ RUN_JAVA_OPTS := } # Java options (-Xmx512m -XX:MaxPermSize=128m etc) RUN_JAVA_DEBUG = ${ RUN_JAVA_DEBUG := } # If not empty, print the full java command line before executing it. RUN_JAVA_NO_PARSE = ${ RUN_JAVA_NO_PARSE := } # If not empty, skip the auto parsing of -D and -cp options from script arguments. RUN_JAVA_NO_AUTOCP = ${ RUN_JAVA_NO_AUTOCP := } # If not empty, do not auto setup Java classpath RUN_JAVA_DRY = ${ RUN_JAVA_DRY := } # If not empty, do not exec Java command, but just print # OS specific support. $var _must_ be set to either true or false. CYGWIN = false ; case \"`uname`\" in CYGWIN* ) CYGWIN = true ;; esac # Define where is the java executable is JAVA_CMD = java if [ -d \" $JAVA_HOME \" ] ; then JAVA_CMD = \" $JAVA_HOME /bin/java\" fi # Auto setup applciation's Java Classpath (only if they exists) if [ -z \" $RUN_JAVA_NO_AUTOCP \" ] ; then if [ -d \" $APP_DIR /config\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /config\" ; fi if [ -d \" $APP_DIR /target/test-classes\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/test-classes\" ; fi if [ -d \" $APP_DIR /target/classes\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/classes\" ; fi if [ -d \" $APP_DIR /target/dependency\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /target/dependency/*\" ; fi if [ -d \" $APP_DIR /lib\" ] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $APP_DIR /lib/*\" ; fi fi ARGS = \" $@ \" # Parse addition \"-cp\" and \"-D\" after the Java main class from script arguments # This is done for convenient sake so users do not have to export RUN_JAVA_CP and RUN_JAVA_OPTS # saparately, but now they can pass into end of this run-java script instead. # This can be disable by setting RUN_JAVA_NO_PARSE=1. if [ -z \" $RUN_JAVA_NO_PARSE \" ] ; then # Prepare variables for parsing FOUND_CP = NEW_ARGS [ 0 ]= '' IDX = 0 # Parse all arguments and look for \"-cp\" and \"-D\" for ARG in \" $@ \" ; do if [[ -n $FOUND_CP ]] ; then RUN_JAVA_CP = \" $RUN_JAVA_CP : $ARG \" FOUND_CP = else case $ARG in '-cp' ) FOUND_CP = 1 ;; '-D' * ) RUN_JAVA_OPTS = \" $RUN_JAVA_OPTS $ARG \" ;; * ) NEW_ARGS [ $IDX ]= \" $ARG \" let IDX = $IDX +1 ;; esac fi done ARGS = \" ${ NEW_ARGS [@] } \" fi # Convert Windows Java Classpath if $CYGWIN ; then RUN_JAVA_CP = $( cygpath -mp $RUN_JAVA_CP ) fi # Display full Java command. if [ -n \" $RUN_JAVA_DEBUG \" ] || [ -n \" $RUN_JAVA_DRY \" ] ; then echo \" $JAVA_CMD \" $RUN_JAVA_OPTS -cp \" $RUN_JAVA_CP \" $ARGS fi # Run Java Main class if [ -z \" $RUN_JAVA_DRY \" ] ; then \" $JAVA_CMD \" $RUN_JAVA_OPTS -cp \" $RUN_JAVA_CP \" $ARGS fi The main idea is to run mvn dependency:copy-dependencies , this will generate all the jar files into target/dependency folder $ mvn dependency:copy-dependencies [ INFO ] Scanning for projects... [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] Building sparkblog 1 .0-SNAPSHOT [ INFO ] ------------------------------------------------------------------------ [ INFO ] [ INFO ] --- maven-dependency-plugin:2.1:copy-dependencies ( default-cli ) @ sparkblog --- [ INFO ] Copying spark-core-2.1.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s park-core-2.1.jar [ INFO ] Copying jetty-http-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-http-9.0.2.v20130417.jar [ INFO ] Copying jetty-io-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-io-9.0.2.v20130417.jar [ INFO ] Copying jetty-security-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-security-9.0.2.v20130417.jar [ INFO ] Copying jetty-server-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-server-9.0.2.v20130417.jar [ INFO ] Copying jetty-servlet-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-servlet-9.0.2.v20130417.jar [ INFO ] Copying jetty-util-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-util-9.0.2.v20130417.jar [ INFO ] Copying jetty-webapp-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-webapp-9.0.2.v20130417.jar [ INFO ] Copying jetty-xml-9.0.2.v20130417.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j etty-xml-9.0.2.v20130417.jar [ INFO ] Copying javax.servlet-3.0.0.v201112011016.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\j avax.servlet-3.0.0.v201112011016.jar [ INFO ] Copying slf4j-api-1.7.7.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s lf4j-api-1.7.7.jar [ INFO ] Copying slf4j-simple-1.7.7.jar to d: \\M yProjects \\j wrapper \\b loggg \\s parkblog \\t arget \\d ependency \\s lf4j-simple-1.7.7.jar [ INFO ] ------------------------------------------------------------------------ [ INFO ] BUILD SUCCESS [ INFO ] ------------------------------------------------------------------------ [ INFO ] Total time: 2 .978s [ INFO ] Finished at: Thu Feb 12 18 :22:54 EET 2015 [ INFO ] Final Memory: 9M/243M [ INFO ] ------------------------------------------------------------------------ Now, we can reuse the provided above script or use the provided below one-liner: java -cp target \\c lasses ; target \\d ependency \\* com.halyph.blog.App 9090 one 1 2 This one-liner is very simple and can be transformed to shell/batch scripts depending on the level of re-use you\u2019d like to implement. Now, it\u2019s time to created pre-packed application bundle which can be easily distributed. We will use [Maven Application Assembler Plugin]: <build> <plugins> ... <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> appassembler-maven-plugin </artifactId> <version> 1.9 </version> <!-- This (executions) section can be omitted. In case it's omitted we should call the next command to generate wrapper: mvn package appassembler:assemble --> <executions> <execution> <phase> package </phase> <goals> <goal> assemble </goal> </goals> </execution> </executions> <configuration> <programs> <program> <mainClass> com.halyph.blog.App </mainClass> <id> app </id> </program> </programs> </configuration> </plugin> </plugins> </build> The Application Assembler Plugin is a Maven plugin for generating scripts for starting java applications. All dependencies and the artifact of the project itself are placed in a generated Maven repository in a defined assemble directory. All artifacts (dependencies + the artifact from the project) are added to the classpath in the generated bin scripts. [Maven Application Assembler Plugin] usage: $ mvn package $ target/appassembler/bin/app All dependencies and the artifact itself are placed in the defined assemble directory (defaults to $project.build.directory/appassembler ). A bin/ directory is created in the assemble directory and the generated bin scripts are placed in that directory (defaults to both unix shell scripts and Windows bat files). Note: [Maven Application Assembler Plugin] have a lot of customization options, just check the documentation.","title":"Traditional Maven Way"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/#summary","text":"Here was shown that using such tool as Maven you can be productive and \u201cagile\u201d (use Gradle if you\u2019d like to be in trend): generate project skeleton from scratch open it in IDE without ceremony call the app via Maven plugin call it as plain CLI application, but with small ceremony (need to run dependency:copy-dependencies ) package the app for further distribution Yes, it\u2019s not a simple write-one Java \u201cscript\u201d, but it\u2019s flexible enough to feel like it is.","title":"Summary"},{"location":"blog/2015/2015-02-13-maven-flow-for-simple-app-creation/#references","text":"Do We Need Java for Everything? A better java shell script wrapper Exec Maven Plugin Maven Application Assembler Plugin Wrapper Script for Java Command-Line Applications","title":"References"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/","text":"How to Install Octopress on Windows? | ruby | blog | I\u2019ve been using Octopress on Mac OS X (i.e. have no problem). But, recently I\u2019ve decided to run my blog on Windows machine and felt pain. Ahh, Octopress uses bunch of native extensions which actually cause a lot of cross-platform issues. My first attempt was to try JRuby due to his better Windows support, but got this: $ bundle install Fetching gem metadata from https://rubygems.org/......... Installing rake ( 10 .4.2 ) Installing RedCloth ( 4 .2.9 ) Using blankslate ( 2 .1.2.4 ) Installing hitimes ( 1 .2.2 ) Installing timers ( 4 .0.1 ) Installing celluloid ( 0 .16.0 ) Installing chunky_png ( 1 .3.3 ) Installing fast-stemmer ( 1 .0.2 ) with native extensions Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension . D:/Tools/JRuby/jruby-1.7.0/bin/jruby.exe extconf.rb NotImplementedError: C extension support is not enabled. Pass -Xcext.enabled = true to JRuby or set JRUBY_OPTS or modify .jrubyrc to enable. ( root ) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/mkmf.rb:8 require at org/jruby/RubyKernel.java:1019 ( root ) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/rubygems/custom_require.rb:1 ( root ) at extconf.rb:1 Gem files will remain installed in D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2 for inspection. Results logged to D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2/ext/gem_make.out An error occurred while installing fast-stemmer ( 1 .0.2 ) , and Bundler cannot continue . Make sure that ` gem install fast-stemmer -v '1.0.2' ` succeeds before bundling. There is JRuby version of fast-stemmer gem called jruby-stemmer . But, I\u2019m not ready to maintain this. That\u2019s why I\u2019ve decided to use RubyInstaller . Install Ruby on Windows and SSL issues Download ( rubyinstaller-2.1.5-x64.exe in my case) and install [RubyInstaller]. I installed in d:\\Tools\\Ruby\\Ruby21-x64\\ folder. Check rubygems via running gem update and you should get the next error: $ gem update Updating installed gems ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/specs.4.8.gz) It\u2019s well known rubygems issues with ready to use solution SSL upgrades on rubygems.org and RubyInstaller versions : Step 1: Obtain the new trust certificate, download it AddTrustExternalCARoot-2048.pem in some temp folder Step 2: Locate RubyGems certificate directory in your installation (in my case it\u2019s D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/ ) $ gem which rubygems D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/rubygems.rb Step 3: Copy new trust certificate into D:\\Tools\\Ruby\\Ruby21-x64\\lib\\ruby\\2.1.0\\rubygems\\ssl_certs $ copy AddTrustExternalCARoot-2048.pem D:\\Tools\\Ruby\\Ruby21-x64\\lib\\ruby\\2.1.0\\rubygems\\ssl_certs Step 4: Now You should be able to run gem update without any issues Prepare environment for Octopress Now it\u2019s time to clone Octopress blog and run it. Unfortunately, there are some minor issues which still must be fixed. Fix Octopress native extensions issues We know that Octopress uses native extensions thats why we have to additionally install Development Kit Download and unpack it in adjacent to Ruby install folder ( d:\\Tools\\Ruby\\DevKit_2.1_x64\\ in my case) Link [Development Kit] installation to previously installed Ruby - Go to [Development Kit] install folder d:\\Tools\\Ruby\\DevKit_2.1_x64\\ - Run ruby dk.rb init which generate config.yml . Open config.yml and add - D:/Tools/Ruby/Ruby21-x64 to the end of this file. - Run ruby dk.rb install See my Development Kit config.yml : # This configuration file contains the absolute path locations of all # installed Rubies to be enhanced to work with the DevKit. This config # file is generated by the 'ruby dk.rb init' step and may be modified # before running the 'ruby dk.rb install' step. To include any installed # Rubies that were not automagically discovered, simply add a line below # the triple hyphens with the absolute path to the Ruby root directory. # # Example: # # --- # - C:/ruby19trunk # - C:/ruby192dev # --- - D:/Tools/Ruby/Ruby21-x64 Install Python The default syntax highlighting engine in Octopress/Jekyll is Pygments . It\u2019s requires Python v.2.7.x. Simply download Python v.2.7.8 and add it on system PATH . Final steps I assume that blog was previously cloned. Now, we should perform \u201ctraditional\u201d Ruby project ceremony: Install budler via gem install bundler Setup all required gems bundle install Run [Octopress] preview rake preview References Octopress on Windows and GitHub How to Install and Use Octopress on Windows SSL upgrades on rubygems.org and RubyInstaller versions Development Kit: Installation Instructions Development Kit","title":"How to Install Octopress on Windows?"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#how-to-install-octopress-on-windows","text":"| ruby | blog | I\u2019ve been using Octopress on Mac OS X (i.e. have no problem). But, recently I\u2019ve decided to run my blog on Windows machine and felt pain. Ahh, Octopress uses bunch of native extensions which actually cause a lot of cross-platform issues. My first attempt was to try JRuby due to his better Windows support, but got this: $ bundle install Fetching gem metadata from https://rubygems.org/......... Installing rake ( 10 .4.2 ) Installing RedCloth ( 4 .2.9 ) Using blankslate ( 2 .1.2.4 ) Installing hitimes ( 1 .2.2 ) Installing timers ( 4 .0.1 ) Installing celluloid ( 0 .16.0 ) Installing chunky_png ( 1 .3.3 ) Installing fast-stemmer ( 1 .0.2 ) with native extensions Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension . D:/Tools/JRuby/jruby-1.7.0/bin/jruby.exe extconf.rb NotImplementedError: C extension support is not enabled. Pass -Xcext.enabled = true to JRuby or set JRUBY_OPTS or modify .jrubyrc to enable. ( root ) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/mkmf.rb:8 require at org/jruby/RubyKernel.java:1019 ( root ) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/rubygems/custom_require.rb:1 ( root ) at extconf.rb:1 Gem files will remain installed in D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2 for inspection. Results logged to D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2/ext/gem_make.out An error occurred while installing fast-stemmer ( 1 .0.2 ) , and Bundler cannot continue . Make sure that ` gem install fast-stemmer -v '1.0.2' ` succeeds before bundling. There is JRuby version of fast-stemmer gem called jruby-stemmer . But, I\u2019m not ready to maintain this. That\u2019s why I\u2019ve decided to use RubyInstaller .","title":"How to Install Octopress on Windows?"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#install-ruby-on-windows-and-ssl-issues","text":"Download ( rubyinstaller-2.1.5-x64.exe in my case) and install [RubyInstaller]. I installed in d:\\Tools\\Ruby\\Ruby21-x64\\ folder. Check rubygems via running gem update and you should get the next error: $ gem update Updating installed gems ERROR: While executing gem ... (Gem::RemoteFetcher::FetchError) SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/specs.4.8.gz) It\u2019s well known rubygems issues with ready to use solution SSL upgrades on rubygems.org and RubyInstaller versions : Step 1: Obtain the new trust certificate, download it AddTrustExternalCARoot-2048.pem in some temp folder Step 2: Locate RubyGems certificate directory in your installation (in my case it\u2019s D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/ ) $ gem which rubygems D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/rubygems.rb Step 3: Copy new trust certificate into D:\\Tools\\Ruby\\Ruby21-x64\\lib\\ruby\\2.1.0\\rubygems\\ssl_certs $ copy AddTrustExternalCARoot-2048.pem D:\\Tools\\Ruby\\Ruby21-x64\\lib\\ruby\\2.1.0\\rubygems\\ssl_certs Step 4: Now You should be able to run gem update without any issues","title":"Install Ruby on Windows and SSL issues"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#prepare-environment-for-octopress","text":"Now it\u2019s time to clone Octopress blog and run it. Unfortunately, there are some minor issues which still must be fixed.","title":"Prepare environment for Octopress"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#fix-octopress-native-extensions-issues","text":"We know that Octopress uses native extensions thats why we have to additionally install Development Kit Download and unpack it in adjacent to Ruby install folder ( d:\\Tools\\Ruby\\DevKit_2.1_x64\\ in my case) Link [Development Kit] installation to previously installed Ruby - Go to [Development Kit] install folder d:\\Tools\\Ruby\\DevKit_2.1_x64\\ - Run ruby dk.rb init which generate config.yml . Open config.yml and add - D:/Tools/Ruby/Ruby21-x64 to the end of this file. - Run ruby dk.rb install See my Development Kit config.yml : # This configuration file contains the absolute path locations of all # installed Rubies to be enhanced to work with the DevKit. This config # file is generated by the 'ruby dk.rb init' step and may be modified # before running the 'ruby dk.rb install' step. To include any installed # Rubies that were not automagically discovered, simply add a line below # the triple hyphens with the absolute path to the Ruby root directory. # # Example: # # --- # - C:/ruby19trunk # - C:/ruby192dev # --- - D:/Tools/Ruby/Ruby21-x64","title":"Fix Octopress native extensions issues"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#install-python","text":"The default syntax highlighting engine in Octopress/Jekyll is Pygments . It\u2019s requires Python v.2.7.x. Simply download Python v.2.7.8 and add it on system PATH .","title":"Install Python"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#final-steps","text":"I assume that blog was previously cloned. Now, we should perform \u201ctraditional\u201d Ruby project ceremony: Install budler via gem install bundler Setup all required gems bundle install Run [Octopress] preview rake preview","title":"Final steps"},{"location":"blog/2015/2015-02-17-how-to-install-octopress-on-windows/#references","text":"Octopress on Windows and GitHub How to Install and Use Octopress on Windows SSL upgrades on rubygems.org and RubyInstaller versions Development Kit: Installation Instructions Development Kit","title":"References"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/","text":"How to download jars from Maven Central | java | maven | We know how to download Java libraries with it\u2019s dependencies (transitive included) via Maven pom.xml , Ant/Ivy build.xml script, Gradle build.gradle script etc. But what if we need to download them without these scripts. There are several ways to do this. Assume that we\u2019d like to download spark-core library ( groupId=com.sparkjava, artifactId=spark-core, version=2.1 ) with all dependencies from Maven Central into lib folder. Use Maven3 dependency plugin Here is there variants for lib download: ```bash Download library with all dependencies Specify repoUrl (it\u2019s optional) mvn dependency:get -DrepoUrl= http://download.java.net/maven/2/ -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1 OR use default repoUrl mvn dependency:get -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1 OR use parameter artifact as groupId:artifactId:version mvn dependency:get -Dartifact=com.sparkjava:spark-core:2.1 Now we need to copy just downloaded artifacts in our working directory: ```bash Copy jars from local maven repo mvn dependency:copy-dependencies -f $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.pom -DoutputDirectory=$(pwd)/lib # the previous command doesn't copy spark-core-x.x.jar, that's why we should copy it manually cp $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.jar $(pwd)/lib Use standalone Ivy We can use Ivy as standalone jar to download Maven dependencies without creating Ant build file: # 1. Download the latest ivy jar (currently it's v.2.4.0) curl -L -O http://search.maven.org/remotecontent?filepath = org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar # 2. Run ivy.jar to retrieve all dependencies java -jar ivy-2.4.0.jar -dependency com.sparkjava spark-core 2 .1 -retrieve \"lib/[artifact]-[revision](-[classifier]).[ext]\" As you can see Ivy downloads approach is much simpler. The only cons (or pros, it depends) that ivy.jar should be additionally downloaded. Calling Ivy from Groovy or Java Here I\u2019ve decided to store Evgeny\u2019s Goldin code snippet as a reference for myself. Programmatic artifacts downloads is not a common operation. It\u2019s alway nice to know the general concept how it can be done. Especially when Ivy documentation is not very informative. ```java Groovy snippet of calling Ivy import org.apache.ivy.Ivy import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor import org.apache.ivy.core.module.id.ModuleRevisionId import org.apache.ivy.core.resolve.ResolveOptions import org.apache.ivy.core.settings.IvySettings import org.apache.ivy.plugins.resolver.URLResolver import org.apache.ivy.core.report.ResolveReport import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter public File resolveArtifact(String groupId, String artifactId, String version) { //creates clear ivy settings IvySettings ivySettings = new IvySettings(); //url resolver for configuration of maven repo URLResolver resolver = new URLResolver(); resolver.setM2compatible(true); resolver.setName(\u2018central\u2019); //you can specify the url resolution pattern strategy resolver.addArtifactPattern( \u2018 http://repo1.maven.org/maven2/[organisation]/[module]/[revision]/ artifact .[ext]\u2019); //adding maven repo resolver ivySettings.addResolver(resolver); //set to the default resolver ivySettings.setDefaultResolver(resolver.getName()); //creates an Ivy instance with settings Ivy ivy = Ivy.newInstance(ivySettings); File ivyfile = File . createTempFile ( 'ivy', '.xml'); ivyfile . deleteOnExit () ; String [] dep = [ groupId , artifactId , version ] DefaultModuleDescriptor md = DefaultModuleDescriptor . newDefaultInstance ( ModuleRevisionId . newInstance ( dep [ 0 ] , dep [ 1 ] + '-caller', 'working')); DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor ( md , ModuleRevisionId . newInstance ( dep [ 0 ] , dep [ 1 ] , dep [ 2 ] ), false , false , true ) ; md . addDependency ( dd ) ; // creates an ivy configuration file XmlModuleDescriptorWriter . write ( md , ivyfile ) ; String [] confs = [ 'default']; ResolveOptions resolveOptions = new ResolveOptions (). setConfs ( confs ) ; // init resolve report ResolveReport report = ivy . resolve ( ivyfile . toURL (), resolveOptions ) ; // so you can get the jar library File jarArtifactFile = report . getAllArtifactsReports () [ 0 ] . getLocalFile () ; return jarArtifactFile ; } resolveArtifact( \u2018log4j\u2019, \u2018log4j\u2019, \u20181.2.16\u2019 ) ``` References Using Maven to download dependencies to a directory on the command line - Stack Overflow Simplest Ivy code to programmatically retrieve dependency from Maven Central - Stack Overflow Calling Ivy from Groovy or Java","title":"How to download jars from Maven Central"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#how-to-download-jars-from-maven-central","text":"| java | maven | We know how to download Java libraries with it\u2019s dependencies (transitive included) via Maven pom.xml , Ant/Ivy build.xml script, Gradle build.gradle script etc. But what if we need to download them without these scripts. There are several ways to do this. Assume that we\u2019d like to download spark-core library ( groupId=com.sparkjava, artifactId=spark-core, version=2.1 ) with all dependencies from Maven Central into lib folder.","title":"How to download jars from Maven Central"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#use-maven3-dependency-plugin","text":"Here is there variants for lib download: ```bash Download library with all dependencies","title":"Use Maven3 dependency plugin"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#specify-repourl-its-optional","text":"mvn dependency:get -DrepoUrl= http://download.java.net/maven/2/ -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1","title":"Specify repoUrl (it's optional)"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#or-use-default-repourl","text":"mvn dependency:get -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1","title":"OR use default repoUrl"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#or-use-parameter-artifact-as-groupidartifactidversion","text":"mvn dependency:get -Dartifact=com.sparkjava:spark-core:2.1 Now we need to copy just downloaded artifacts in our working directory: ```bash Copy jars from local maven repo mvn dependency:copy-dependencies -f $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.pom -DoutputDirectory=$(pwd)/lib # the previous command doesn't copy spark-core-x.x.jar, that's why we should copy it manually cp $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.jar $(pwd)/lib","title":"OR use parameter artifact as groupId:artifactId:version"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#use-standalone-ivy","text":"We can use Ivy as standalone jar to download Maven dependencies without creating Ant build file: # 1. Download the latest ivy jar (currently it's v.2.4.0) curl -L -O http://search.maven.org/remotecontent?filepath = org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar # 2. Run ivy.jar to retrieve all dependencies java -jar ivy-2.4.0.jar -dependency com.sparkjava spark-core 2 .1 -retrieve \"lib/[artifact]-[revision](-[classifier]).[ext]\" As you can see Ivy downloads approach is much simpler. The only cons (or pros, it depends) that ivy.jar should be additionally downloaded.","title":"Use standalone Ivy"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#calling-ivy-from-groovy-or-java","text":"Here I\u2019ve decided to store Evgeny\u2019s Goldin code snippet as a reference for myself. Programmatic artifacts downloads is not a common operation. It\u2019s alway nice to know the general concept how it can be done. Especially when Ivy documentation is not very informative. ```java Groovy snippet of calling Ivy import org.apache.ivy.Ivy import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor import org.apache.ivy.core.module.id.ModuleRevisionId import org.apache.ivy.core.resolve.ResolveOptions import org.apache.ivy.core.settings.IvySettings import org.apache.ivy.plugins.resolver.URLResolver import org.apache.ivy.core.report.ResolveReport import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter public File resolveArtifact(String groupId, String artifactId, String version) { //creates clear ivy settings IvySettings ivySettings = new IvySettings(); //url resolver for configuration of maven repo URLResolver resolver = new URLResolver(); resolver.setM2compatible(true); resolver.setName(\u2018central\u2019); //you can specify the url resolution pattern strategy resolver.addArtifactPattern( \u2018 http://repo1.maven.org/maven2/[organisation]/[module]/[revision]/ artifact .[ext]\u2019); //adding maven repo resolver ivySettings.addResolver(resolver); //set to the default resolver ivySettings.setDefaultResolver(resolver.getName()); //creates an Ivy instance with settings Ivy ivy = Ivy.newInstance(ivySettings); File ivyfile = File . createTempFile ( 'ivy', '.xml'); ivyfile . deleteOnExit () ; String [] dep = [ groupId , artifactId , version ] DefaultModuleDescriptor md = DefaultModuleDescriptor . newDefaultInstance ( ModuleRevisionId . newInstance ( dep [ 0 ] , dep [ 1 ] + '-caller', 'working')); DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor ( md , ModuleRevisionId . newInstance ( dep [ 0 ] , dep [ 1 ] , dep [ 2 ] ), false , false , true ) ; md . addDependency ( dd ) ; // creates an ivy configuration file XmlModuleDescriptorWriter . write ( md , ivyfile ) ; String [] confs = [ 'default']; ResolveOptions resolveOptions = new ResolveOptions (). setConfs ( confs ) ; // init resolve report ResolveReport report = ivy . resolve ( ivyfile . toURL (), resolveOptions ) ; // so you can get the jar library File jarArtifactFile = report . getAllArtifactsReports () [ 0 ] . getLocalFile () ; return jarArtifactFile ; } resolveArtifact( \u2018log4j\u2019, \u2018log4j\u2019, \u20181.2.16\u2019 ) ```","title":"Calling Ivy from Groovy or Java"},{"location":"blog/2015/2015-03-17-how-to-download-jars-from-maven-central/#references","text":"Using Maven to download dependencies to a directory on the command line - Stack Overflow Simplest Ivy code to programmatically retrieve dependency from Maven Central - Stack Overflow Calling Ivy from Groovy or Java","title":"References"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/","text":"Rails Architecture and Scalability | ruby | rails | Everybody know when this \u201cRails doesn\u2019t scale\u201d has been begun: 2009 Twitter message queue back-end moved from Ruby to Scala 2011 Twitter Search is Now 3x Faster Panic, we must not use Ruby on Rails because Twitter had scalability problems. I\u2019m a Java developer who love Ruby language, but don\u2019t write anything in Rails. Despite this I\u2019ve decided to look into this famous \u201cRails doesn\u2019t scale\u201d statement deeper to understand the root cause of this problem. So, I collected public available Ruby on Rails architecture and scalability case studies (videos of conference talks, reports and blog posts) and tried to extract the general patterns of architecture and scalability issues. There are two type of scalability issues: Application performance - when web application can\u2019t handle huge traffic Delivery velocity - when it\u2019s become hard to make changes in big Rails application, run quick tests, deploy it and manage big team Note : You are not another \u201ctwitter\u201d to worry about scalability issues right from beginning of the project (there are fewer web apps on the Internet to get enough traffic to even care about scalability). Your goal is to push your product as quick as possible. But, in the same time you\u2019d like to use Rails (due to it\u2019s productivity) and make you potentially application scalable (in all possible terms) The most interesting that scalability is about architecture, databases, caching, event queues, disk IO and less about Rails framework. Rails deployment architecture Let\u2019s review the common Rails deployment approaches (see Deployment with Ruby on Rails ) Simple Rails Setup One Rails instance handles all requests. Rails is single-threaded: There is only one concurrent request. Typical Rails Setup A load-balancer distributes the incoming requests Some load-balancers will deliver static requests themselves Several Rails instances handle all requests Number of concurrent requests equals number of Rails instances Application server (Phusion Passenger) Involving Phusion Passenger application server Makes setup easier on the single machine level Multiple servers still require load balancer Suitable for mass-hosting upcoming standard way of deploying Rails Recommended Rails Application Setups Small Site Apache with mod_rails/Phusion Passenger Medium Site Apache/Nginx as frontend proxy Passanger as backend Deliver static files with Apache/Nginx Large Site Redundant load-ballancer Redundant proxy Phusion Passenger/mod_rails Scale up Traditional Rails Application Caching There might be the cases when it\u2019s not enought and in this case we should start looking in \u201ccashing\u201d direction via involving Memcahed and/or Redis (based on Konstantin\u2019s Gredeskoul slides) Long-runnint task scaling (based on Konstantin\u2019s Gredeskoul slides) Background jobs with Reques (it sits on top of Redis) Use Solr/Elasticsearch instead of doing complex joins Rails moving towards SOA and micro services The shown above architectures are related to Monolith Architecture . This type of architecture has some problems: Development pain points: effective controllers and models have a lot of logic + ~1000 Models/Controllers, 200K LOC, 100s of jobs Merge issues arise in big team (20-30+) Lots of contributors and no ownership Difficult deployments with long integration cycles Tests are not green, it\u2019s really hard to support stable test quality The monolithic Rails app should evolve into ecosystems of connected services. It\u2019s becoming quite common for Rails apps to be working mainly as clients to other services. Splitting application into small pieces Split into smaller applications (based on Konstantin\u2019s Gredeskoul slides ) + Contains web UI, logic and data * Extract look and feel into gem to share across apps + May combine with other apps + May rely on common libraries + Typically run in their own Ruby VM Extract services and create APIs + Create client API wrapper gems for consumers Extract libraries (gems) + Create shared based client gem library Reference (sample) service orienter / micro service architecture Now, we have more than one Rails application and many service which are communicating using messaging, distributed cashed, etc. Groupon Flipcart Gilt I\u2019ve collect much more case studies, see here . Conclusion Moving Monolith Rails application to micro service architecture it\u2019s not one shot action. It\u2019s long run with lots of trade offs. And more over, micro service architecture is not silver bullet, it\u2019s just one alternative way to scale your application (see [Recommended Rails Application Setups][#Recommended.Rails.Application.Setups]). The key idea is to develop your application with SRP (Single responsibility principle) in mind. The more modular your application the more scalable it\u2019s. I\u2019m planning to add more architecture case studies to my collection (not only Rails related). Stay tuned. Rails related tech components Collection of major technology components mentioned in case studies. Web Servers / Proxy Apache Nginx HAProxy Application Servers Unicorn Phusion Passenger Puma Thin Libraries / Tools Redis Memcached Reque Sidekiq Solr Elasticsearch References Collection of Ruby on Rails Architecture Case Studies - Deployment with Ruby on Rails - Enterprise Architectures with Ruby (and Rails) Does Ruby on Rails scale - Quora \u201cKeeping Your Massive Rails App From Turning Into a S#!t Show with Benjamin Smith\u201d (see video and slides )","title":"Rails Architecture and Scalability"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#rails-architecture-and-scalability","text":"| ruby | rails | Everybody know when this \u201cRails doesn\u2019t scale\u201d has been begun: 2009 Twitter message queue back-end moved from Ruby to Scala 2011 Twitter Search is Now 3x Faster Panic, we must not use Ruby on Rails because Twitter had scalability problems. I\u2019m a Java developer who love Ruby language, but don\u2019t write anything in Rails. Despite this I\u2019ve decided to look into this famous \u201cRails doesn\u2019t scale\u201d statement deeper to understand the root cause of this problem. So, I collected public available Ruby on Rails architecture and scalability case studies (videos of conference talks, reports and blog posts) and tried to extract the general patterns of architecture and scalability issues. There are two type of scalability issues: Application performance - when web application can\u2019t handle huge traffic Delivery velocity - when it\u2019s become hard to make changes in big Rails application, run quick tests, deploy it and manage big team Note : You are not another \u201ctwitter\u201d to worry about scalability issues right from beginning of the project (there are fewer web apps on the Internet to get enough traffic to even care about scalability). Your goal is to push your product as quick as possible. But, in the same time you\u2019d like to use Rails (due to it\u2019s productivity) and make you potentially application scalable (in all possible terms) The most interesting that scalability is about architecture, databases, caching, event queues, disk IO and less about Rails framework.","title":"Rails Architecture and Scalability"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#rails-deployment-architecture","text":"Let\u2019s review the common Rails deployment approaches (see Deployment with Ruby on Rails )","title":"Rails deployment architecture"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#simple-rails-setup","text":"One Rails instance handles all requests. Rails is single-threaded: There is only one concurrent request.","title":"Simple Rails Setup"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#typical-rails-setup","text":"A load-balancer distributes the incoming requests Some load-balancers will deliver static requests themselves Several Rails instances handle all requests Number of concurrent requests equals number of Rails instances","title":"Typical Rails Setup"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#application-server-phusion-passenger","text":"Involving Phusion Passenger application server Makes setup easier on the single machine level Multiple servers still require load balancer Suitable for mass-hosting upcoming standard way of deploying Rails","title":"Application server (Phusion Passenger)"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#recommended-rails-application-setups","text":"","title":"Recommended Rails Application Setups"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#small-site","text":"Apache with mod_rails/Phusion Passenger","title":"Small Site"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#medium-site","text":"Apache/Nginx as frontend proxy Passanger as backend Deliver static files with Apache/Nginx","title":"Medium Site"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#large-site","text":"Redundant load-ballancer Redundant proxy Phusion Passenger/mod_rails","title":"Large Site"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#scale-up-traditional-rails-application","text":"","title":"Scale up Traditional Rails Application"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#caching","text":"There might be the cases when it\u2019s not enought and in this case we should start looking in \u201ccashing\u201d direction via involving Memcahed and/or Redis (based on Konstantin\u2019s Gredeskoul slides)","title":"Caching"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#long-runnint-task-scaling","text":"(based on Konstantin\u2019s Gredeskoul slides) Background jobs with Reques (it sits on top of Redis) Use Solr/Elasticsearch instead of doing complex joins","title":"Long-runnint task scaling"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#rails-moving-towards-soa-and-micro-services","text":"The shown above architectures are related to Monolith Architecture . This type of architecture has some problems: Development pain points: effective controllers and models have a lot of logic + ~1000 Models/Controllers, 200K LOC, 100s of jobs Merge issues arise in big team (20-30+) Lots of contributors and no ownership Difficult deployments with long integration cycles Tests are not green, it\u2019s really hard to support stable test quality The monolithic Rails app should evolve into ecosystems of connected services. It\u2019s becoming quite common for Rails apps to be working mainly as clients to other services.","title":"Rails moving towards SOA and micro services"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#splitting-application-into-small-pieces","text":"Split into smaller applications (based on Konstantin\u2019s Gredeskoul slides ) + Contains web UI, logic and data * Extract look and feel into gem to share across apps + May combine with other apps + May rely on common libraries + Typically run in their own Ruby VM Extract services and create APIs + Create client API wrapper gems for consumers Extract libraries (gems) + Create shared based client gem library","title":"Splitting application into small pieces"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#reference-sample-service-orienter-micro-service-architecture","text":"Now, we have more than one Rails application and many service which are communicating using messaging, distributed cashed, etc.","title":"Reference (sample) service orienter / micro service architecture"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#conclusion","text":"Moving Monolith Rails application to micro service architecture it\u2019s not one shot action. It\u2019s long run with lots of trade offs. And more over, micro service architecture is not silver bullet, it\u2019s just one alternative way to scale your application (see [Recommended Rails Application Setups][#Recommended.Rails.Application.Setups]). The key idea is to develop your application with SRP (Single responsibility principle) in mind. The more modular your application the more scalable it\u2019s. I\u2019m planning to add more architecture case studies to my collection (not only Rails related). Stay tuned.","title":"Conclusion"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#rails-related-tech-components","text":"Collection of major technology components mentioned in case studies.","title":"Rails related tech components"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#web-servers-proxy","text":"Apache Nginx HAProxy","title":"Web Servers / Proxy"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#application-servers","text":"Unicorn Phusion Passenger Puma Thin","title":"Application Servers"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#libraries-tools","text":"Redis Memcached Reque Sidekiq Solr Elasticsearch","title":"Libraries / Tools"},{"location":"blog/2015/2015-04-04-rails-architecture-and-scalability-issues/#references","text":"Collection of Ruby on Rails Architecture Case Studies - Deployment with Ruby on Rails - Enterprise Architectures with Ruby (and Rails) Does Ruby on Rails scale - Quora \u201cKeeping Your Massive Rails App From Turning Into a S#!t Show with Benjamin Smith\u201d (see video and slides )","title":"References"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/","text":"Java full stack web framework | java | I believe that everybody knows the most popular full-stack web framework - Ruby on Rails . Of course there are other frameworks for Ruby language, but Rails is the number one. Now, the question: how many full-stack web frameworks exist for Java? UPDATE (2016-11-20) : CUBA Platform is open sourced under Apache License 2.0 Overview Let\u2019s define the desired items for full-stack web framework: CoC - Convention over configuration MVC - Model-view-controller DRY - Don\u2019t repeat yourself Scaffolding ( it was one of the major selling point on the early stage of Rails ) Easy prototyping Data/Persistent Layer / ORM DB schema migration URI Routing HTML Rendering / Template engines Testing REST API Security Caching Request Filtering Session Management Form Validation i18n/l10n Grails I think Grails was and is the single \u201ctrue\u201d Rails reincarnation on JVM. Grails is based on Groovy language. It support all concepts Rails supports. It\u2019s based on Spring/Hibernate and Gradle since v.3.0 (Grails v.3.0.0 was released on Mar 31, 2015 ). Grails v.3 is build on Spring Boot . Some people arguing that Grails v.3 acts as simple wrapper on top of Spring Boot and now it does not worth any investments. But, we must not agree as CoC and DRY principles are very vague. Play Framework 2 Play Framework 2 is a special player. It has two implementations: Java and Scala. Actually Java version is not as powerful as Scala due to Java, as a language, \u201climitation\u201d. This framework lives under Typesafe umbrella, aka \u201cTypesafe Reactive Platform\u201d . Play is just different. It\u2019s not Servlet-based and is built on Netty async framework. A lot of people claiming that Play is very cool and productive. I haven\u2019t tried it yet. But it looks promising and interesting. Code Generation Frameworks I decided to define the special category \u201cCode Generation\u201d. Frameworks which are related to this category are not full stack, but can be called as RAD (Rapid Application Development) frameworks. Spring Roo Spring Roo was very popular some time ago and had a lot of investments from VMWare (former Spring stack owner). Later, the ownership was transferred to DISIG . Spring Roo is code generation framework, built on top of Spring stack. It\u2019s useful for quick prototyping. JBoss Forge JBoss Forge is conceptually equal to Spring Roo, but linked to Java EE stack (like Wildfly , TomEE ) and Maven. It\u2019s relly cool if you work with Java EE a lot. Forge is shine in prototyping and code generation. Community looks vibrant and active. AppFuse AppFuse can be called as ramp-up framework. The main goal is to quickly generate project with pre-onfigured functionality (see mvn archetype:generate ). JHipster JHipster is brand new and based on Spring Boot and Angular.js v.1.x. Classical code generation like in Forge or Spring Roo. But, code generation is build on top of node.js tool Yeoman . Concept is very interesting, especially when it uses so hipster\u2019s technologies ;-). It can generate both back-end (REST endpoint) and front-end (Angular.js Single-page application), even Liquibase migrations (which is cool too). Domain-driven Frameworks There is a very special category Domain-driven frameworks. For this category I\u2019ve selected two most popular frameworks: OpenXava and Apache Isis . The main idea is that they can generate views and RESTs based on domain entities. Both frameworks have active community. They have \u201cown\u201d concepts and no hipsters technologies. The usage domain is very narrow, I guess they can be easily used to quickly general application\u2019s back-offices (aka admin pages) and prototyping. Others There are several others frameworks Ninja , Javalight , Jodd , Jobby and airlift . They are build by small communities (or my single developer) and have some applications. But, it\u2019s risky to invest in them. You can look into because of curiosity, but not more. As for me it\u2019s much safe to use Play/Grails than some unpopular frameworks. Summary So, Java ecosystem has two full stack frameworks which use Java language minimally: Grails (Groovy/Java) and Play (Scala/Java). Also, we have a bunch of code generation frameworks and domain-driven frameworks (which occupy really special niche). References Full stack Grails Play Framework 2 Cuba-platform - CUBA Platform (Apache License 2.0) Code Generation Spring Roo JBoss Forge AppFuse JHipster DD Frameworks OpenXava ~~ Cuba-platform - CUBA Platform is free for applications with up to 5 concurrent sessions.~~ Apache Isis Others Ninja Javalight Jodd and Jodd \u00b5icro frameworks Jobby airlift Web4j Rife - dead","title":"Java full stack web framework"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#java-full-stack-web-framework","text":"| java | I believe that everybody knows the most popular full-stack web framework - Ruby on Rails . Of course there are other frameworks for Ruby language, but Rails is the number one. Now, the question: how many full-stack web frameworks exist for Java? UPDATE (2016-11-20) : CUBA Platform is open sourced under Apache License 2.0","title":"Java full stack web framework"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#overview","text":"Let\u2019s define the desired items for full-stack web framework: CoC - Convention over configuration MVC - Model-view-controller DRY - Don\u2019t repeat yourself Scaffolding ( it was one of the major selling point on the early stage of Rails ) Easy prototyping Data/Persistent Layer / ORM DB schema migration URI Routing HTML Rendering / Template engines Testing REST API Security Caching Request Filtering Session Management Form Validation i18n/l10n","title":"Overview"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#grails","text":"I think Grails was and is the single \u201ctrue\u201d Rails reincarnation on JVM. Grails is based on Groovy language. It support all concepts Rails supports. It\u2019s based on Spring/Hibernate and Gradle since v.3.0 (Grails v.3.0.0 was released on Mar 31, 2015 ). Grails v.3 is build on Spring Boot . Some people arguing that Grails v.3 acts as simple wrapper on top of Spring Boot and now it does not worth any investments. But, we must not agree as CoC and DRY principles are very vague.","title":"Grails"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#play-framework-2","text":"Play Framework 2 is a special player. It has two implementations: Java and Scala. Actually Java version is not as powerful as Scala due to Java, as a language, \u201climitation\u201d. This framework lives under Typesafe umbrella, aka \u201cTypesafe Reactive Platform\u201d . Play is just different. It\u2019s not Servlet-based and is built on Netty async framework. A lot of people claiming that Play is very cool and productive. I haven\u2019t tried it yet. But it looks promising and interesting.","title":"Play Framework 2"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#code-generation-frameworks","text":"I decided to define the special category \u201cCode Generation\u201d. Frameworks which are related to this category are not full stack, but can be called as RAD (Rapid Application Development) frameworks.","title":"Code Generation Frameworks"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#spring-roo","text":"Spring Roo was very popular some time ago and had a lot of investments from VMWare (former Spring stack owner). Later, the ownership was transferred to DISIG . Spring Roo is code generation framework, built on top of Spring stack. It\u2019s useful for quick prototyping.","title":"Spring Roo"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#jboss-forge","text":"JBoss Forge is conceptually equal to Spring Roo, but linked to Java EE stack (like Wildfly , TomEE ) and Maven. It\u2019s relly cool if you work with Java EE a lot. Forge is shine in prototyping and code generation. Community looks vibrant and active.","title":"JBoss Forge"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#appfuse","text":"AppFuse can be called as ramp-up framework. The main goal is to quickly generate project with pre-onfigured functionality (see mvn archetype:generate ).","title":"AppFuse"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#jhipster","text":"JHipster is brand new and based on Spring Boot and Angular.js v.1.x. Classical code generation like in Forge or Spring Roo. But, code generation is build on top of node.js tool Yeoman . Concept is very interesting, especially when it uses so hipster\u2019s technologies ;-). It can generate both back-end (REST endpoint) and front-end (Angular.js Single-page application), even Liquibase migrations (which is cool too).","title":"JHipster"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#domain-driven-frameworks","text":"There is a very special category Domain-driven frameworks. For this category I\u2019ve selected two most popular frameworks: OpenXava and Apache Isis . The main idea is that they can generate views and RESTs based on domain entities. Both frameworks have active community. They have \u201cown\u201d concepts and no hipsters technologies. The usage domain is very narrow, I guess they can be easily used to quickly general application\u2019s back-offices (aka admin pages) and prototyping.","title":"Domain-driven Frameworks"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#others","text":"There are several others frameworks Ninja , Javalight , Jodd , Jobby and airlift . They are build by small communities (or my single developer) and have some applications. But, it\u2019s risky to invest in them. You can look into because of curiosity, but not more. As for me it\u2019s much safe to use Play/Grails than some unpopular frameworks.","title":"Others"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#summary","text":"So, Java ecosystem has two full stack frameworks which use Java language minimally: Grails (Groovy/Java) and Play (Scala/Java). Also, we have a bunch of code generation frameworks and domain-driven frameworks (which occupy really special niche).","title":"Summary"},{"location":"blog/2015/2015-04-06-java-full-stack-web-framework/#references","text":"Full stack Grails Play Framework 2 Cuba-platform - CUBA Platform (Apache License 2.0) Code Generation Spring Roo JBoss Forge AppFuse JHipster DD Frameworks OpenXava ~~ Cuba-platform - CUBA Platform is free for applications with up to 5 concurrent sessions.~~ Apache Isis Others Ninja Javalight Jodd and Jodd \u00b5icro frameworks Jobby airlift Web4j Rife - dead","title":"References"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/","text":"Go presentation tool | golang | Have you ever noticed how Go community presents Go-related talks? Their slides are very simple and without any fancy animation features: see Go talks . You might say that they are no so feature-rich as Reveal.js . And it\u2019s true. But, simplicity is beauty, as for me. Also, it\u2019s very well aligned with Go language philosophy. So, here is listed steps required to setup and run Go present tool. Install Go I use Mac OS X in this tutorial (see the next article to install Go on other OS es). Install Go: $ brew install go == > Downloading https://homebrew.bintray.com/bottles/go-1.4.2.yosemite.bottle.1. ######################################################################## 100.0% == > Pouring go-1.4.2.yosemite.bottle.1.tar.gz == > Caveats As of go 1 .2, a valid GOPATH is required to use the ` go get ` command: https://golang.org/doc/code.html#GOPATH You may wish to add the GOROOT-based install location to your PATH: export PATH = $PATH :/usr/local/opt/go/libexec/bin == > Summary \ud83c\udf7a /usr/local/Cellar/go/1.4.2: 4566 files, 155M Define Go workspace Let\u2019s assume that our Go language workspace will be located at /Users/halyph/Projects/go : $ mkdir go $ pwd /Users/halyph/Projects/go Configure PATH variable $ cat .bash_profile #Golang settings export PATH = $PATH :/usr/local/opt/go/libexec/bin export GOPATH = $HOME /Projects/go #/Users/halyph/Projects/go export PATH = $PATH : $GOPATH /bin Install Go present tool present tool is located in separate package golang.org/x/tools which depends on golang.org/x/net package: $ go get golang.org/x/net $ go get golang.org/x/tools $ go install golang.org/x/tools/cmd/present Now, we can find present tool here: $ which present /Users/halyph/Projects/go/bin/present Run present tool The easiest way to test present tool is to render some slides: Create sample slide file (see .slide file format ) in any folder: $ cat sample.slide Title of document Subtitle of document 15:04 2 Jan 2006 Tags: foo, bar, baz Author Name Job title, Company joe@example.com http://url/ @twitter_name Some Text * Title of slide or section (must have asterisk) Some Text Run present in this folder: $ present 2015/05/19 00:55:33 Open your web browser and visit http://127.0.0.1:3999 You should see something like this: Go present works and you are ready to produce Go-fashion slides. References Go present package documentation Reveal.js - The HTML Presentation Framework Go talks - slides Go tool Represent - Static slide presentation and article pages, generated from text Video - go present - create html slides with extractable, executable go code Using Go\u2019s present with Python code snippets and Go-nuts discussion - how to embed runnable code snippets in a presentation How Do I Create A Presentation Using Go?","title":"Go presentation tool"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#go-presentation-tool","text":"| golang | Have you ever noticed how Go community presents Go-related talks? Their slides are very simple and without any fancy animation features: see Go talks . You might say that they are no so feature-rich as Reveal.js . And it\u2019s true. But, simplicity is beauty, as for me. Also, it\u2019s very well aligned with Go language philosophy. So, here is listed steps required to setup and run Go present tool.","title":"Go presentation tool"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#install-go","text":"I use Mac OS X in this tutorial (see the next article to install Go on other OS es). Install Go: $ brew install go == > Downloading https://homebrew.bintray.com/bottles/go-1.4.2.yosemite.bottle.1. ######################################################################## 100.0% == > Pouring go-1.4.2.yosemite.bottle.1.tar.gz == > Caveats As of go 1 .2, a valid GOPATH is required to use the ` go get ` command: https://golang.org/doc/code.html#GOPATH You may wish to add the GOROOT-based install location to your PATH: export PATH = $PATH :/usr/local/opt/go/libexec/bin == > Summary \ud83c\udf7a /usr/local/Cellar/go/1.4.2: 4566 files, 155M","title":"Install Go"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#define-go-workspace","text":"Let\u2019s assume that our Go language workspace will be located at /Users/halyph/Projects/go : $ mkdir go $ pwd /Users/halyph/Projects/go","title":"Define Go workspace"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#configure-path-variable","text":"$ cat .bash_profile #Golang settings export PATH = $PATH :/usr/local/opt/go/libexec/bin export GOPATH = $HOME /Projects/go #/Users/halyph/Projects/go export PATH = $PATH : $GOPATH /bin","title":"Configure PATH variable"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#install-go-present-tool","text":"present tool is located in separate package golang.org/x/tools which depends on golang.org/x/net package: $ go get golang.org/x/net $ go get golang.org/x/tools $ go install golang.org/x/tools/cmd/present Now, we can find present tool here: $ which present /Users/halyph/Projects/go/bin/present","title":"Install Go present tool"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#run-present-tool","text":"The easiest way to test present tool is to render some slides: Create sample slide file (see .slide file format ) in any folder: $ cat sample.slide Title of document Subtitle of document 15:04 2 Jan 2006 Tags: foo, bar, baz Author Name Job title, Company joe@example.com http://url/ @twitter_name Some Text * Title of slide or section (must have asterisk) Some Text Run present in this folder: $ present 2015/05/19 00:55:33 Open your web browser and visit http://127.0.0.1:3999 You should see something like this: Go present works and you are ready to produce Go-fashion slides.","title":"Run present tool"},{"location":"blog/2015/2015-05-18-golang-presentation-tool/#references","text":"Go present package documentation Reveal.js - The HTML Presentation Framework Go talks - slides Go tool Represent - Static slide presentation and article pages, generated from text Video - go present - create html slides with extractable, executable go code Using Go\u2019s present with Python code snippets and Go-nuts discussion - how to embed runnable code snippets in a presentation How Do I Create A Presentation Using Go?","title":"References"},{"location":"blog/2015/2015-05-19-grails-2-dot-5-0-debug-in-intellij-idea/","text":"Grails 2.5.0 debug in IntelliJ IDEA | groovy | grails | I\u2019ve been using Grails v.2.5.0 and tried to debug Grails app via traditional Intellij IDEA 14 Debug with no success. To be short : using IDEA Debug allows us debug Grails build system only . Why? Forked execution is configured via the grails-app/conf/BuildConfig.groovy file. The following is the default configuration: grails . project . fork = [ ... run: [ maxMemory: 768 , minMemory: 64 , debug: false , maxPerm: 256 ], // configure settings for the run-app JVM ... ] Based on this we should create two IDEA Run/Debug Configurations: Create simple Grails Run configuration with --debug-fork parameter: run-app --debug-fork . E.g. And run this Configuration. We should get the next output Listening for transport dt_socket at address: 5005 |Server running. Browse to http://localhost:8080/TekDays This socket address will be used for Remote connection. Create IDEA Remote Configuration ( Run/Debug Configuration -> Remote ) And run this Configuration. Now, we are able to debug our application. The main idea is that we should have two running Configurations ! References Grails Goodness: Debugging App in Forked Mode Grails 2.5 Forked Execution Stackoverflow - IntelliJ IDEA Debugger isn\u2019t working on a Grails Project Road to Grails 2.3: Forked Execution","title":"Grails 2.5.0 debug in IntelliJ IDEA"},{"location":"blog/2015/2015-05-19-grails-2-dot-5-0-debug-in-intellij-idea/#grails-250-debug-in-intellij-idea","text":"| groovy | grails | I\u2019ve been using Grails v.2.5.0 and tried to debug Grails app via traditional Intellij IDEA 14 Debug with no success. To be short : using IDEA Debug allows us debug Grails build system only . Why? Forked execution is configured via the grails-app/conf/BuildConfig.groovy file. The following is the default configuration: grails . project . fork = [ ... run: [ maxMemory: 768 , minMemory: 64 , debug: false , maxPerm: 256 ], // configure settings for the run-app JVM ... ] Based on this we should create two IDEA Run/Debug Configurations: Create simple Grails Run configuration with --debug-fork parameter: run-app --debug-fork . E.g. And run this Configuration. We should get the next output Listening for transport dt_socket at address: 5005 |Server running. Browse to http://localhost:8080/TekDays This socket address will be used for Remote connection. Create IDEA Remote Configuration ( Run/Debug Configuration -> Remote ) And run this Configuration. Now, we are able to debug our application. The main idea is that we should have two running Configurations !","title":"Grails 2.5.0 debug in IntelliJ IDEA"},{"location":"blog/2015/2015-05-19-grails-2-dot-5-0-debug-in-intellij-idea/#references","text":"Grails Goodness: Debugging App in Forked Mode Grails 2.5 Forked Execution Stackoverflow - IntelliJ IDEA Debugger isn\u2019t working on a Grails Project Road to Grails 2.3: Forked Execution","title":"References"},{"location":"blog/2015/2015-05-25-jeeconf-kiev/","text":"JEEConf - Kyiv, 2015 - Report | conference | java | It happened again - I attend JEEConf , May 22-23, 2015. And as usual it was inspiring. Also, I can say that \u201cScala\u201d was the most dominated buzz word at this conference. So, I attended the next talks: Pragmatic Functional Refactoring with Java 8, by Richard Warburton Java 8 functional features were introduced here. And were shown how we can refactor OOP program in functional way. I can say it\u2019s still a new way of thinking for Java developers. Just what are you doing, HotSpot? by Gleb Smirnov - Gleb gave us several advices for understanding tricky HotSpot behavior and why we should read HotSpot sources. Lessons from Implementing a Modern B2C System in Scala, by Yuriy Guts It was a case study talk about starting new project with Scala. The most interesting was the issues appeared during project development, team\u2019s relationship with Scala, and Scala influences on non-Scala developers. Spring Puzzlers, by Evgeny Borisov and Baruch Sadogursky - We can say that this topic is unique. At least I\u2019m not aware of similar talks on other Java conferences. Spring Puzzlers is a variation of classic Java puzzlers, but in Spring. It\u2019s really great collection of tricky Spring parts. JVM Languages Q&A Panel with Jacek Laskowski, Baruch Sadogursky, Dmytro Mantula, Alexander Podkhalyuzin, Tomer Gabel We can say that this panel was Groovy vs Scala. There are no other \u201clanguages\u201d on this talk. Building an Enterprise-less online bank, Anton Keks - Anton doesn\u2019t love bloated Spring and likes simple and clean solution. He doesn\u2019t use Play Framework 2 on Scala because of slow compilation. Instead of this, he told us about his banking platform implemented on Play 1.3 and Java 8 , and all other items included in his stack. Everything you wanted to know about writing async, high-concurrency HTTP applications in Java, but were afraid to ask, by Baruch Sadogursky - Baruch shared his experience about implementing asynchronous file downloader in Java. Scala Rock-Painting, by Dmytro Mantula - This talk was like Scala puzzlers and/or Scala tricky parts. Speaker also gave us several suggesting how we can learn Scala more effectively via practicing code katas and/or Anki flesh cards. This talk highlighted the \u201cdark\u201d side of Scala. Really, recommend it. Groovy under Macroscope, by Sergei Egorov and Baruch Sadogursky - Sergei demoed us very hacky Groovy library MacroGroovy . It\u2019s nice to see true Groovy hacker and his creature. About concurrency abstractions with Observable\u2019s, Future\u2019s, Akka (actors) in Scala, by Jacek Laskowski - Jacek did Scala concurrency overview talk and highlighted other non-Akka libraries. It\u2019s nice to know that there are other \u201cgood\u201d way to do concurrency without Akka. Node.js and Evented I/O Alternatives on the JVM, by Niko K\u00f6bler - I definitely heard about Avatar.js , but Niko told us that Avatar.js is dead and Oracle put development of Avatar on hold , i.e. full stop. As alternative were mentioned two solutions: DynJS an ECMAScript runtime for the JVM and Nodyn - Node.js compatible framework on JVM. It\u2019s very interesting to see what will happen with them. Nodyn has strong RedHat support. Let\u2019s hope it\u2019s much stronger than Avatar.js had from Oracle. Do we need JMS in 21st century? by Mikalai Alimenkou - The simple statements can be extracted from this talk: a) there are other non-JMS Message queues (MQs); b) we don\u2019t need bloated JMS for every tasks; c) use right MQ for right job Summary JEEConf has dedicated JVM track: 50% of this track was occupied by Scala (7 talks). As for me this is the sign ;-) Scala bandwagon reached Ukraine. Microservices everywhere. If you are not doing microservices - you should :-) Yes, JEEConf is simply the best. XP Injection did amazing work. Have fun, love Java! References JEEConf - Kiev, 2014 - Report JEEConf - Kiev, 2013 - Report JEEConf - Kiev, 2012 - Report JEEConf - Kiev, 2011 - Report","title":"JEEConf - Kyiv, 2015 - Report"},{"location":"blog/2015/2015-05-25-jeeconf-kiev/#jeeconf-kyiv-2015-report","text":"| conference | java | It happened again - I attend JEEConf , May 22-23, 2015. And as usual it was inspiring. Also, I can say that \u201cScala\u201d was the most dominated buzz word at this conference. So, I attended the next talks: Pragmatic Functional Refactoring with Java 8, by Richard Warburton Java 8 functional features were introduced here. And were shown how we can refactor OOP program in functional way. I can say it\u2019s still a new way of thinking for Java developers. Just what are you doing, HotSpot? by Gleb Smirnov - Gleb gave us several advices for understanding tricky HotSpot behavior and why we should read HotSpot sources. Lessons from Implementing a Modern B2C System in Scala, by Yuriy Guts It was a case study talk about starting new project with Scala. The most interesting was the issues appeared during project development, team\u2019s relationship with Scala, and Scala influences on non-Scala developers. Spring Puzzlers, by Evgeny Borisov and Baruch Sadogursky - We can say that this topic is unique. At least I\u2019m not aware of similar talks on other Java conferences. Spring Puzzlers is a variation of classic Java puzzlers, but in Spring. It\u2019s really great collection of tricky Spring parts. JVM Languages Q&A Panel with Jacek Laskowski, Baruch Sadogursky, Dmytro Mantula, Alexander Podkhalyuzin, Tomer Gabel We can say that this panel was Groovy vs Scala. There are no other \u201clanguages\u201d on this talk. Building an Enterprise-less online bank, Anton Keks - Anton doesn\u2019t love bloated Spring and likes simple and clean solution. He doesn\u2019t use Play Framework 2 on Scala because of slow compilation. Instead of this, he told us about his banking platform implemented on Play 1.3 and Java 8 , and all other items included in his stack. Everything you wanted to know about writing async, high-concurrency HTTP applications in Java, but were afraid to ask, by Baruch Sadogursky - Baruch shared his experience about implementing asynchronous file downloader in Java. Scala Rock-Painting, by Dmytro Mantula - This talk was like Scala puzzlers and/or Scala tricky parts. Speaker also gave us several suggesting how we can learn Scala more effectively via practicing code katas and/or Anki flesh cards. This talk highlighted the \u201cdark\u201d side of Scala. Really, recommend it. Groovy under Macroscope, by Sergei Egorov and Baruch Sadogursky - Sergei demoed us very hacky Groovy library MacroGroovy . It\u2019s nice to see true Groovy hacker and his creature. About concurrency abstractions with Observable\u2019s, Future\u2019s, Akka (actors) in Scala, by Jacek Laskowski - Jacek did Scala concurrency overview talk and highlighted other non-Akka libraries. It\u2019s nice to know that there are other \u201cgood\u201d way to do concurrency without Akka. Node.js and Evented I/O Alternatives on the JVM, by Niko K\u00f6bler - I definitely heard about Avatar.js , but Niko told us that Avatar.js is dead and Oracle put development of Avatar on hold , i.e. full stop. As alternative were mentioned two solutions: DynJS an ECMAScript runtime for the JVM and Nodyn - Node.js compatible framework on JVM. It\u2019s very interesting to see what will happen with them. Nodyn has strong RedHat support. Let\u2019s hope it\u2019s much stronger than Avatar.js had from Oracle. Do we need JMS in 21st century? by Mikalai Alimenkou - The simple statements can be extracted from this talk: a) there are other non-JMS Message queues (MQs); b) we don\u2019t need bloated JMS for every tasks; c) use right MQ for right job","title":"JEEConf - Kyiv, 2015 - Report"},{"location":"blog/2015/2015-05-25-jeeconf-kiev/#summary","text":"JEEConf has dedicated JVM track: 50% of this track was occupied by Scala (7 talks). As for me this is the sign ;-) Scala bandwagon reached Ukraine. Microservices everywhere. If you are not doing microservices - you should :-) Yes, JEEConf is simply the best. XP Injection did amazing work. Have fun, love Java!","title":"Summary"},{"location":"blog/2015/2015-05-25-jeeconf-kiev/#references","text":"JEEConf - Kiev, 2014 - Report JEEConf - Kiev, 2013 - Report JEEConf - Kiev, 2012 - Report JEEConf - Kiev, 2011 - Report","title":"References"},{"location":"blog/2015/2015-06-29-devoxxpl/","text":"DevoxxPL - Krakow, 2015 - Report | conference | java | This summer I\u2019ve decided to attend my 1 st foreign conference - DevoxxPL - Krakow, Poland, 22-25 June 2015 . It was very important experience, because I wanted to compare it with our local Ukrainian conferences. Long story short - the quality is equal. Any conference is based on speakers (I\u2019d like to be \u201cCaptain Obvious\u201d). And even awesome conference location can\u2019t make conference great . So, I\u2019ve attended the next talks: Day 1 \u201cThe Silver Bullet Syndrome\u201d by Hadi Hariri \u201cTips and tricks for clean relational db schemas\u201d by Cl\u00e9ment Delafargue \u201cJRebel under the covers - how is it even possible?\u201d by Simon Maple \u201cCorporate startup and Scala\u201d by Filip Rogaczewski from Spartez It was really nice case study about building project with Scala. Pros&cons were \u201chonestly\u201d highlighted. \u201cRefactoring to Functional\u201d by Hadi Hariri \u201cYou\u2019re an Architect\u2026Now What?\u201d by Nathaniel Schutta Day 2 \u201cWhy software developers should care about deployment and monitoring\u201d by Micha\u0142 Kosmulski from Allegro Group \u201cModern Java Component Design with Spring 4.2\u201d by Juergen Hoeller from Pivotal \u201cMake sense of your (BIG) data!\u201d by David Pilato from ElasticSearch Blog \u201cBuilding an Asynchronous Reactive NoSQL SDK with RxJava\u201d by Simon Basl\u00e9 from Couchbase \u201cLazy Evaluations\u201d by Venkat Subramaniam Blogpost - Lazy in Java \u201cGet Past the Syntax, The Real Scare is in the Semantics\u201d by Venkat Subramaniam Day 3 \u201cPubSub++ - few tips that make your life with kafka easier\u201d by Krzysztof Debski from Allegro Group \u201cDeep dive into Reactive Java\u201d by Tomasz Kowalczewski from Codewise: - Slides - Github \u201cEvent Sourcing & Functional Programming - a pair made in heaven\u201d by Pawe\u0142 Szulc - Blog \u201cFunctional Programming: Technical Reasons to Adapt\u201d by Venkat Subramaniam \u201cWhy I love Logstash and you should too\u201d by Jo\u00e3o Duarte from ElasticSearch Summary This conference had a huge buzz around microservices. I\u2019ve been inspired by some talks and planning to look deeper into: Elasticsearch Logstash Kibana RxJava and OMG ;-) Scala References Allegro Open Source Tech blog Elastic Blog Products: Elasticsearch Logstash Kibana Babun - a windows shell you will love","title":"DevoxxPL - Krakow, 2015 - Report"},{"location":"blog/2015/2015-06-29-devoxxpl/#devoxxpl-krakow-2015-report","text":"| conference | java | This summer I\u2019ve decided to attend my 1 st foreign conference - DevoxxPL - Krakow, Poland, 22-25 June 2015 . It was very important experience, because I wanted to compare it with our local Ukrainian conferences. Long story short - the quality is equal. Any conference is based on speakers (I\u2019d like to be \u201cCaptain Obvious\u201d). And even awesome conference location can\u2019t make conference great . So, I\u2019ve attended the next talks:","title":"DevoxxPL - Krakow, 2015 - Report"},{"location":"blog/2015/2015-06-29-devoxxpl/#day-1","text":"\u201cThe Silver Bullet Syndrome\u201d by Hadi Hariri \u201cTips and tricks for clean relational db schemas\u201d by Cl\u00e9ment Delafargue \u201cJRebel under the covers - how is it even possible?\u201d by Simon Maple \u201cCorporate startup and Scala\u201d by Filip Rogaczewski from Spartez It was really nice case study about building project with Scala. Pros&cons were \u201chonestly\u201d highlighted. \u201cRefactoring to Functional\u201d by Hadi Hariri \u201cYou\u2019re an Architect\u2026Now What?\u201d by Nathaniel Schutta","title":"Day 1"},{"location":"blog/2015/2015-06-29-devoxxpl/#day-2","text":"\u201cWhy software developers should care about deployment and monitoring\u201d by Micha\u0142 Kosmulski from Allegro Group \u201cModern Java Component Design with Spring 4.2\u201d by Juergen Hoeller from Pivotal \u201cMake sense of your (BIG) data!\u201d by David Pilato from ElasticSearch Blog \u201cBuilding an Asynchronous Reactive NoSQL SDK with RxJava\u201d by Simon Basl\u00e9 from Couchbase \u201cLazy Evaluations\u201d by Venkat Subramaniam Blogpost - Lazy in Java \u201cGet Past the Syntax, The Real Scare is in the Semantics\u201d by Venkat Subramaniam","title":"Day 2"},{"location":"blog/2015/2015-06-29-devoxxpl/#day-3","text":"\u201cPubSub++ - few tips that make your life with kafka easier\u201d by Krzysztof Debski from Allegro Group \u201cDeep dive into Reactive Java\u201d by Tomasz Kowalczewski from Codewise: - Slides - Github \u201cEvent Sourcing & Functional Programming - a pair made in heaven\u201d by Pawe\u0142 Szulc - Blog \u201cFunctional Programming: Technical Reasons to Adapt\u201d by Venkat Subramaniam \u201cWhy I love Logstash and you should too\u201d by Jo\u00e3o Duarte from ElasticSearch","title":"Day 3"},{"location":"blog/2015/2015-06-29-devoxxpl/#summary","text":"This conference had a huge buzz around microservices. I\u2019ve been inspired by some talks and planning to look deeper into: Elasticsearch Logstash Kibana RxJava and OMG ;-) Scala","title":"Summary"},{"location":"blog/2015/2015-06-29-devoxxpl/#references","text":"Allegro Open Source Tech blog Elastic Blog Products: Elasticsearch Logstash Kibana Babun - a windows shell you will love","title":"References"},{"location":"blog/2015/2015-07-20-grails-best-practices-collection/","text":"Grails 2.x best practices collection | groovy | grails | Recently, I had a pleasure to look into several Grails v.2.3+ projects. Despite the fact that I\u2019m not a Grails developer I discovered some anti-patterns. Then I started looking around to find some Grails projects best practices . And they are well known and people still doing mistakes. However, I\u2019ve found several nice resources and I\u2019m ( going to quite ) quoting them here. I keep references back to original source and use \u201ccopy-paste\u201d approach to have aggregated post in single place. References Grails Plugin Development Best Practices What I wish I knew about Grails before my first Grails Project Groovy & Grails Design Best Practices very detailed Grails Design Best Practices, 2013, by Nitin Kumar Grails Best Practices, 2013, by Nitin Kumar Grails Best Practice Resources, 2011 Best practices with services and controllers, 2012 InfoQ - Grails Best Practices, 2012 SO - Best Practices to be followed while developing Grails Application, 2011 Grails in large projects \u2013 Part 2, 2013 by Klaus Lehner Grails best practices, 2013 by Ashish Joseph Grails Best Practices presentation, 2013 Videos Cut your Grails application to pieces - build feature plugins Greach 2014 - Hexagonal Architecture in Grails by David Dawson Philosophical Architecture in Grails by David Dawson Experiences Using Grails in a Micro Service Architecture Application architectures with Grails Interesting Grails people: http://www.anyware.co.uk/2005/2011/09/12/optimising-your-application-with-grails-resources-plugin/ http://www.bobbywarner.com/","title":"Grails 2.x best practices collection"},{"location":"blog/2015/2015-07-20-grails-best-practices-collection/#grails-2x-best-practices-collection","text":"| groovy | grails | Recently, I had a pleasure to look into several Grails v.2.3+ projects. Despite the fact that I\u2019m not a Grails developer I discovered some anti-patterns. Then I started looking around to find some Grails projects best practices . And they are well known and people still doing mistakes. However, I\u2019ve found several nice resources and I\u2019m ( going to quite ) quoting them here. I keep references back to original source and use \u201ccopy-paste\u201d approach to have aggregated post in single place.","title":"Grails 2.x best practices collection"},{"location":"blog/2015/2015-07-20-grails-best-practices-collection/#references","text":"Grails Plugin Development Best Practices What I wish I knew about Grails before my first Grails Project Groovy & Grails Design Best Practices very detailed Grails Design Best Practices, 2013, by Nitin Kumar Grails Best Practices, 2013, by Nitin Kumar Grails Best Practice Resources, 2011 Best practices with services and controllers, 2012 InfoQ - Grails Best Practices, 2012 SO - Best Practices to be followed while developing Grails Application, 2011 Grails in large projects \u2013 Part 2, 2013 by Klaus Lehner Grails best practices, 2013 by Ashish Joseph Grails Best Practices presentation, 2013","title":"References"},{"location":"blog/2015/2015-07-20-grails-best-practices-collection/#videos","text":"Cut your Grails application to pieces - build feature plugins Greach 2014 - Hexagonal Architecture in Grails by David Dawson Philosophical Architecture in Grails by David Dawson Experiences Using Grails in a Micro Service Architecture Application architectures with Grails Interesting Grails people: http://www.anyware.co.uk/2005/2011/09/12/optimising-your-application-with-grails-resources-plugin/ http://www.bobbywarner.com/","title":"Videos"},{"location":"blog/2015/2015-09-20-jday-lviv-2015-report/","text":"JDay - Lviv, 2015 - Report | conference | java | September 19, 2015 I visited JDay Lviv Java conference. This report is for myself just to keep track talks I\u2019ve attended. Put Your Thinking CAP On by Tomer Gabel ( slides ) Consistency, availability and partition tolerance: these seemingly innocuous concepts have been giving engineers and researchers of distributed systems headaches for over 15 years. But despite how important they are to the design and architecture of modern software, they are still poorly understood by many engineers. This session covers the definition and practical ramifications of the CAP theorem; you may think that this has nothing to do with you because you \u201cdon\u2019t work on distributed systems\u201d, or possibly that it doesn\u2019t matter because you \u201crun over a local network.\u201d Yet even traditional enterprise CRUD applications must obey the laws of physics, which are exactly what the CAP theorem describes. Know the rules of the game and they\u2019ll serve you well, or ignore them at your own peril\u2026 Microservices and Modularity or the difference between treatment and cure! by Milen Dyankov ( slides ) Everyone is talking about microservices these days! So the question is should you also jump on that bandwagon and why those somewhat older colleagues of yours (yep, those that still remember the EJB 2 revolution) are not that enthusiastic? To help you make the right decisions, this talk will first focus on explaining complexity - the problem microservices claim to solve. It then will concentrate on modular architecture and how it compares to what most people understand by microservices! Live demo will present multiple ways to modularize existing JEE application going from \u201cmonolithic\u201d Glassfish EJB/JSF style app through SpringBoot and OSGi to reach a distributed system with a portal as front-end. The modern view on implementation of classic design patterns in Java by Mikalai Alimenkou ( slides , github ) Almost every developer heard about design patterns. They was introduced long time ago to solve particular set of repeating problems in systems of different complexity level and size. But there is an opinion that many design patters just filled holes in the OOP languages of that time. Java as one of them has transformed and improved significantly in the last 10 years. So may be we could review design patterns implementation in modern Java world? Some of them are now may be easily replaced with language idioms, some others may be covered with existing libraries and frameworks. I\u2019m sure you know some design patterns that are dead now or became anti-patterns in their initial implementation. Lets make this fun and useful review together! Functional programming concepts in Java 8: Lambdas && Monads by Grzegorz Piwowarek ( slides ) The aim of this presentation is to introduce listener to a functional programming concepts that were introduced in Java 8. Presentation covers lambda expressions, an imperative-programmer-friendly definition of a monad and an application of Java 8 monads in everyday java developer life. Handling 10k req/sec with 1 core or how you could get even more? by Dmitriy Dumanskiy For the past 5 years I have been working on highly-loaded systems, solving problems and optimizing them. In my talk I will explain how the IoT has changed the understanding of high-load and why this trend changes the rules. What are asynchronous sockets and how they work. What are the solutions up to date and why Netty has no competitors? How does Netty work, what are its strengths, weaknesses, pitfalls? How to get the most, out of your code, where to look and what to do? And many other tips and advices on how to optimize your code ranging from simple cases up to choosing a JDBC pool.","title":"JDay - Lviv, 2015 - Report"},{"location":"blog/2015/2015-09-20-jday-lviv-2015-report/#jday-lviv-2015-report","text":"| conference | java | September 19, 2015 I visited JDay Lviv Java conference. This report is for myself just to keep track talks I\u2019ve attended. Put Your Thinking CAP On by Tomer Gabel ( slides ) Consistency, availability and partition tolerance: these seemingly innocuous concepts have been giving engineers and researchers of distributed systems headaches for over 15 years. But despite how important they are to the design and architecture of modern software, they are still poorly understood by many engineers. This session covers the definition and practical ramifications of the CAP theorem; you may think that this has nothing to do with you because you \u201cdon\u2019t work on distributed systems\u201d, or possibly that it doesn\u2019t matter because you \u201crun over a local network.\u201d Yet even traditional enterprise CRUD applications must obey the laws of physics, which are exactly what the CAP theorem describes. Know the rules of the game and they\u2019ll serve you well, or ignore them at your own peril\u2026 Microservices and Modularity or the difference between treatment and cure! by Milen Dyankov ( slides ) Everyone is talking about microservices these days! So the question is should you also jump on that bandwagon and why those somewhat older colleagues of yours (yep, those that still remember the EJB 2 revolution) are not that enthusiastic? To help you make the right decisions, this talk will first focus on explaining complexity - the problem microservices claim to solve. It then will concentrate on modular architecture and how it compares to what most people understand by microservices! Live demo will present multiple ways to modularize existing JEE application going from \u201cmonolithic\u201d Glassfish EJB/JSF style app through SpringBoot and OSGi to reach a distributed system with a portal as front-end. The modern view on implementation of classic design patterns in Java by Mikalai Alimenkou ( slides , github ) Almost every developer heard about design patterns. They was introduced long time ago to solve particular set of repeating problems in systems of different complexity level and size. But there is an opinion that many design patters just filled holes in the OOP languages of that time. Java as one of them has transformed and improved significantly in the last 10 years. So may be we could review design patterns implementation in modern Java world? Some of them are now may be easily replaced with language idioms, some others may be covered with existing libraries and frameworks. I\u2019m sure you know some design patterns that are dead now or became anti-patterns in their initial implementation. Lets make this fun and useful review together! Functional programming concepts in Java 8: Lambdas && Monads by Grzegorz Piwowarek ( slides ) The aim of this presentation is to introduce listener to a functional programming concepts that were introduced in Java 8. Presentation covers lambda expressions, an imperative-programmer-friendly definition of a monad and an application of Java 8 monads in everyday java developer life. Handling 10k req/sec with 1 core or how you could get even more? by Dmitriy Dumanskiy For the past 5 years I have been working on highly-loaded systems, solving problems and optimizing them. In my talk I will explain how the IoT has changed the understanding of high-load and why this trend changes the rules. What are asynchronous sockets and how they work. What are the solutions up to date and why Netty has no competitors? How does Netty work, what are its strengths, weaknesses, pitfalls? How to get the most, out of your code, where to look and what to do? And many other tips and advices on how to optimize your code ranging from simple cases up to choosing a JDBC pool.","title":"JDay - Lviv, 2015 - Report"},{"location":"blog/2015/2015-09-25-programming-languages-to-native-code/","text":"Distribute application as Native Single binary | golang | python | rust | haskell | ocaml | ruby | lisp | Some time ago I had a pleasure to implement Ruby-based tool which theoretically must be easy to install and have no or limited dependencies. I\u2019ve picked JRuby and packed/distribute the application as a jar . I.e. JRE was the single dependency I had. In general it was very nice distribution model despite the fact that non-Java users must install JRE (Java SE Runtime Environment) to run the application. All other approaches like Ruby, Python, Perl, etc. were not acceptable as they requires additional user\u2019s efforts for tool installation and/or package distribution. The idea was/is to have single native binary for all major platforms which requires no dependencies. Simply copy and run. Now, the question: did I have other alternatives to implement this tool? Could it be implemented as native static binary? - Answer - YES. But, at that time there were only two mature solutions (acceptable for me): C and C++. And neither of them were very good for tool implementation and prototyping at the same time. Also, as far as I know, it\u2019s not a simple task to implement really cross-platform app, at least for Windows/Linux/OSX in C/C++. It adds additional maintenance efforts which I tried to avoid. Looking now at this task I can say that this king of application is nice to implement in Go . Go has everything I need for really cross-platform application development and single static binary output which is awesome for tools/utilities writers. I decided to look around and understand which other popular languages support compilation/packaging to native (semi-)single static binary. The term \u201csemi-single\u201d static binary will be explained later. Compilers Quick googling give us the next languages: Rust Haskell OCaml Lisp SBCL Clozure CL D Haskell , OCaml and Lisp are not widely used. And these langs should be picked carefully due to language specific learning curve. D language is not young and has small community. But it\u2019s much simpler and clean compared to C++, IMHO. Rust is the new hype along with Go . I guess it will be good alternative to C/C++. Also, the language is much more powerful compared to Go , it might be additional selling point. Dynamic Languages There is no direct compilation from interpret/dynamic language to native static binary. But, it\u2019s possible to pack application with language runtime into \u201carchive\u201d/executable to behave like static native binary. Python freezing (To \u201cFreeze\u201d your code is to distribute to end-users as an executable which includes a bundled Python interpreter) bbFreeze py2exe pyInstaller cx_Freeze py2app Perl PAR Packager Perl2Exe Node.js, Here is sample approaches Ruby: RubyScript2Exe OCRA Based on the list above, Python has many alternatives to accomplish single distribution artifact task. I.e. it\u2019s better to pick Python than other alternatives. Also, it looks like Ruby has limited and poor choices, i.e. it\u2019s not suitable for this kind of task. Summary IMHO, Go has the most appealing tool chain for accomplish this task.","title":"Distribute application as Native Single binary"},{"location":"blog/2015/2015-09-25-programming-languages-to-native-code/#distribute-application-as-native-single-binary","text":"| golang | python | rust | haskell | ocaml | ruby | lisp | Some time ago I had a pleasure to implement Ruby-based tool which theoretically must be easy to install and have no or limited dependencies. I\u2019ve picked JRuby and packed/distribute the application as a jar . I.e. JRE was the single dependency I had. In general it was very nice distribution model despite the fact that non-Java users must install JRE (Java SE Runtime Environment) to run the application. All other approaches like Ruby, Python, Perl, etc. were not acceptable as they requires additional user\u2019s efforts for tool installation and/or package distribution. The idea was/is to have single native binary for all major platforms which requires no dependencies. Simply copy and run. Now, the question: did I have other alternatives to implement this tool? Could it be implemented as native static binary? - Answer - YES. But, at that time there were only two mature solutions (acceptable for me): C and C++. And neither of them were very good for tool implementation and prototyping at the same time. Also, as far as I know, it\u2019s not a simple task to implement really cross-platform app, at least for Windows/Linux/OSX in C/C++. It adds additional maintenance efforts which I tried to avoid. Looking now at this task I can say that this king of application is nice to implement in Go . Go has everything I need for really cross-platform application development and single static binary output which is awesome for tools/utilities writers. I decided to look around and understand which other popular languages support compilation/packaging to native (semi-)single static binary. The term \u201csemi-single\u201d static binary will be explained later.","title":"Distribute application as Native Single binary"},{"location":"blog/2015/2015-09-25-programming-languages-to-native-code/#compilers","text":"Quick googling give us the next languages: Rust Haskell OCaml Lisp SBCL Clozure CL D Haskell , OCaml and Lisp are not widely used. And these langs should be picked carefully due to language specific learning curve. D language is not young and has small community. But it\u2019s much simpler and clean compared to C++, IMHO. Rust is the new hype along with Go . I guess it will be good alternative to C/C++. Also, the language is much more powerful compared to Go , it might be additional selling point.","title":"Compilers"},{"location":"blog/2015/2015-09-25-programming-languages-to-native-code/#dynamic-languages","text":"There is no direct compilation from interpret/dynamic language to native static binary. But, it\u2019s possible to pack application with language runtime into \u201carchive\u201d/executable to behave like static native binary. Python freezing (To \u201cFreeze\u201d your code is to distribute to end-users as an executable which includes a bundled Python interpreter) bbFreeze py2exe pyInstaller cx_Freeze py2app Perl PAR Packager Perl2Exe Node.js, Here is sample approaches Ruby: RubyScript2Exe OCRA Based on the list above, Python has many alternatives to accomplish single distribution artifact task. I.e. it\u2019s better to pick Python than other alternatives. Also, it looks like Ruby has limited and poor choices, i.e. it\u2019s not suitable for this kind of task.","title":"Dynamic Languages"},{"location":"blog/2015/2015-09-25-programming-languages-to-native-code/#summary","text":"IMHO, Go has the most appealing tool chain for accomplish this task.","title":"Summary"},{"location":"blog/2015/2015-10-20-using-webrunner/","text":"How to run Netflix Eureka via Webapp Runner? | java | Some time ago I had to run Netflix Eureka server (to be more specific it was version 1.1.151) not using Spring Boot. There were several ways: simply deploy eureka-server.war into Tomcat use Jetty runner . The idea of the jetty-runner is extremely simple \u2013 run a webapp directly from the command line using a single jar and as much default configuration as possible. Of course, if your webapp is not so straightforward, the jetty-runner has command line options which allow you to customize the execution environment. use Webapp Runner . Webapp runner is designed to allow you to launch an exploded or compressed war that is on your filesystem into a tomcat container with a simple java -jar command. I decided to go with Webapp Runner . So, here is the list of steps: Download eureka-server war from maven central (e.g. http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151 ). Also, we can clone the Netflix Eureka github repo and perform build locally. But, our intent is just get ready to use war file as quick as possible. Rename eureka-server-1.1.151.war to eureka-server.war . Download webapp-runnner jar from maven central (e.g. http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0 ) I assume that eureka-server.war and webapp-runner-8.0.24.0.jar are located in the same directory. Now we can simply run the eureka-server on port 4000 via runme.bat file: $ cat runme.bat java -jar webapp-runner-8.0.24.0.jar eureka.war --path /eureka --port 4000 Local directory should have the next files/folders: $ dir /b eureka-server-1.1.151.war eureka.war runme.bat target/ webapp-runner-8.0.24.0.jar The server is up and running: check Eureka UI http://localhost:4000/eureka/ or registered apps http://localhost:4000/eureka/v2/apps/ XML output. References Github Webapp Runner Github Netflix Eureka Deploy a Java Web Application that launches with Jetty Runner Deploying Tomcat-based Java Web Applications with Webapp Runner Standing up a local Netflix Eureka","title":"How to run Netflix Eureka via Webapp Runner?"},{"location":"blog/2015/2015-10-20-using-webrunner/#how-to-run-netflix-eureka-via-webapp-runner","text":"| java | Some time ago I had to run Netflix Eureka server (to be more specific it was version 1.1.151) not using Spring Boot. There were several ways: simply deploy eureka-server.war into Tomcat use Jetty runner . The idea of the jetty-runner is extremely simple \u2013 run a webapp directly from the command line using a single jar and as much default configuration as possible. Of course, if your webapp is not so straightforward, the jetty-runner has command line options which allow you to customize the execution environment. use Webapp Runner . Webapp runner is designed to allow you to launch an exploded or compressed war that is on your filesystem into a tomcat container with a simple java -jar command. I decided to go with Webapp Runner . So, here is the list of steps: Download eureka-server war from maven central (e.g. http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151 ). Also, we can clone the Netflix Eureka github repo and perform build locally. But, our intent is just get ready to use war file as quick as possible. Rename eureka-server-1.1.151.war to eureka-server.war . Download webapp-runnner jar from maven central (e.g. http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0 ) I assume that eureka-server.war and webapp-runner-8.0.24.0.jar are located in the same directory. Now we can simply run the eureka-server on port 4000 via runme.bat file: $ cat runme.bat java -jar webapp-runner-8.0.24.0.jar eureka.war --path /eureka --port 4000 Local directory should have the next files/folders: $ dir /b eureka-server-1.1.151.war eureka.war runme.bat target/ webapp-runner-8.0.24.0.jar The server is up and running: check Eureka UI http://localhost:4000/eureka/ or registered apps http://localhost:4000/eureka/v2/apps/ XML output.","title":"How to run Netflix Eureka via Webapp Runner?"},{"location":"blog/2015/2015-10-20-using-webrunner/#references","text":"Github Webapp Runner Github Netflix Eureka Deploy a Java Web Application that launches with Jetty Runner Deploying Tomcat-based Java Web Applications with Webapp Runner Standing up a local Netflix Eureka","title":"References"},{"location":"blog/2015/2015-11-08-java-day-kiev-2015-report/","text":"Java Day - Kiev, 2015 - Report | conference | java | November 6-7, 2015 I visited Java Day Kyiv conference. This report is for myself just to keep track talks I\u2019ve attended. Day 1 Get Past the Syntax, the Real Scare\u2019s in the Semantics by Venkat Subramaniam We often hear programmers complain about the syntax, especially when learning a new language. It turns out that, while syntax plays a role in our ability to learn and use languages, the real force we have to deal with is in the semantics. Once we get past the syntax, the semantics is where the real power and the real scare is. Curious to learn more? Enterprise Integration Patterns Revisited for the Era of Big Data, Internet of Things and Microservices by Kai Waehner ( slides ) Data exchanges between companies increase a lot. Hence, the number of applications, which must be integrated increases, too. The realization of these integration scenarios is a complex and time-consuming task because different applications and services do not use the same concepts, interfaces, data formats and technologies. Originated and published over ten years ago by Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns (EIP) became the world wide de facto standard for describing integration problems. They offer a standardized way to split huge, complex integration scenarios into smaller recurring problems. This session revisits EIPs and gives an overview about the status quo and its relevance regarding modern concepts such as Big Data, Internet of Things or Microservices. Fortunately, EIPs offer more possibilities than just being used for modeling integration problems in a standardized way. Several frameworks and tools already implement these patterns. The developer does not have to implement EIPs on his own. Therefore, the end of the session shows different open source frameworks and proprietary tools available, which can be used for modeling and implementing complex integration scenarios by using the EIPs. Microservices at Proximus: Netflix OSS and HATEOAS deployed on production by Andreas Evers ( slides ) At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. Throughout this session you will learn what the microservices hype is all about, including its benefits and pitfalls based on our experiences of running microservices (including the Netflix OSS) in production at a major company in Belgium. To manage hundreds of microservices you need to apply certain patterns such as circuit breakers, gateways, service registries and so on. You will learn how these patterns work, how they are applied through the Netflix stack and how easy it is to use them in your architecture through code examples and demos. The contracts between these microservices should be well defined and loosely coupled. Using hypermedia as the engine of application state (hateoas), we can benefit from independent evolution and decoupled implementation. How we can implement these using Spring Hateoas, correctly document using Spring Restdocs, integrate with the HAL browser and version using JsonViews will become clear in the second part of this session. Java in production for Data Mining Research projects by Alexey Zinoviev ( slide ) Java is often criticized for hard parsing CSV datasets, poor matrix and vectors manipulations. This makes it hard to easy and efficiently implement certain types of machine learning algorithms. In many cases data scientists choose R or Python languages for modeling and problem solution and you as a Java developer should rewrite R algorithms in Java or integrate many small Python scripts in Java application. But why so many highload tools like Cassandra, Hadoop, Giraph, Spark are written in Java or executed on JVM? What the secret of successful implementation and running? Maybe we should forget old manufacturing approach of dividing on developers and research engineers in production projects? During the report, we will discuss how to build full Java-stack Data Mining application, deploy it, make charts, integrate with databases, how to improve performance with JVM tuning and etc. Attendees of my talk will become familiar with the development and deploy of research Java projects, Hadoop/Spark \u2014 based Data Mining tools and will get useful tips about possible integration ways. How Java developers should test their applications by Mikalai Alimenkou It was a real code sharing session where were demoed and discussed different testing approaches Day 2 The Future [Java] Developer by Bruno Souza . Keynote What kind of developer do you want to be? The kind that plans, organizes, prepares, and prepares\u2026 and prepares\u2026 Or the kind that focus on delivering and on transforming your customers\u2019 lives? Software development is a creative and complex work. It is trully \u201cMeaningful Work\u201d. But\u2026 If we do it right! Java has allowed us to adventure into all kinds of new technologies, while improving our core knowledge. But how does the ever changing technology landscape and things like Cloud Computing, Internet of Things, BigData and DevOps impact our ability to deliver? This talk will take a look at the abilities of the Future [Java] Developer, and how open source, startups and containers play a role into our future careers. 20 Years of Java by Marcus Lagergren . Keynote This keynote will be a historical trip down memory lane - going through 20 years of Java and JVM implementations. This will be partly from Marcus\u2019s own perspective as one of the architects behind JRockit, with plenty of stories from the trenches, like the benchmarking competitions between BEA/Oracle, Sun and IBM. We will see how Java and the JVM turned into the robust high performance server side platform that it is today, partly through personal observations and partly through a more objective \u201cwhat a long strange trip this has been\u201d. He will take you back to 1995 in a time machine and slowly bring you to 2014, going over the major Java releases and the runtime innovations made in the JVM side to get us here. Finally, we will do a short trip into the future, even though the future is always fuzzy, to explore what might be coming next. With Java 8, the biggest release in Java history, Java is more vibrant and alive than ever before. This is an evolution that won\u2019t be stopped. Brand new proximus microservices architecture in production by Andreas Evers ( slides ) At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. During this talk we will shed a light on the migration path we went through to get Spring Cloud microservices based on Netflix deployed to production. Migrating from a monolith to containerized microservices doesn\u2019t always go smoothly in a rigid regulated enterprise. This is not your regular microservice talk. This is a journey through our struggles to reform both technically and culturally (reverse Conway\u2019s law) towards a devops distributed architecture which actually runs on production. E.g. gradually evolving from a manual infrastructure deploying on JBoss and using dedicated apache load balancers, to a PaaS private cloud solution. One VM To Rule Them All by Thomas Wuerthinger ( slides ) Running a multitude of programming languages is a common requirement for large scale applications. This talk presents a virtual machine architecture that allows to handle different programming languages and their interoperability while not sacrificing performance. It bases on partial evaluation of AST interpreters to automatically derive compiled code. A prototype of this architecture has been developed as part of the Graal OpenJDK project ( http://openjdk.java.net/projects/graal/ ) as well as the TruffleRuby, ZipPy, and FastR open source projects. The talk will be about the general principles behind our VM, special aspects of the Ruby, Python, and R implementations, and our vision for making language interoperability work efficiently. Microservices Design Patterns for Java Application by Arun Gupta ( DZone Refcard ) Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicate using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture \u2013 both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery. Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration? This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications. Scaling Wix with microservices architecture and multi-cloud platform by Aviran Mordo ( slides ) Many small startups build their systems on top of a traditional toolset like Tomcat, Hibernate, and MySQL. These systems are used because they facilitate easy development and fast progress, but many of them are monolithic and have limited scalability. So as a startup grows, the team is confronted with the problem of how to evolve the system and make it scalable. Facing the same dilemma, Wix.com grew from 0 to 70 million users in just a few years. Facing some interesting challenges, like performance and availability. Traditional performance solutions, such as caching, would not help due to a very long tail problem which causes caching to be highly inefficient. And because every minute of downtime means customers lose money, the product needed to have near 100% availability. Solving these issues required some interesting and out-of-the-box thinking, and this talk will discuss some of these strategies: building a highly preformant, highly available and highly scalable system; and leveraging microservices architecture and multi-cloud platforms to help build a very efficient and cost-effective system. From CRUD to Hypermedia APIs with Spring by Vladimir Tsukur Typical way to design and expose HTTP API today is a so called CRUD approach: come up with URL templates for resources, map create-read-update-delete operations to HTTP verbs and serialize domain model as JSON. Nice and easy, isn\u2019t it? This talk will present limitations of CRUD style APIs and how to address them using \u201creal\u201d REST and hypermedia, HAL and ALPS. We\u2019ll take a look how a set of libraries and tools from Spring helps building these APIs. All the talking is not worth it without an example, so Spring-based application will be our guide. Amazon, PayPal, GitHub and other API providers have already started embracing hypermedia and linking by enhancing their HTTP interfaces. Are you next? #rest #hypermedia #http #api #design #spring #spring-hateoas #java #hal #alps References Spring REST Docs - Documenting RESTful APIs using your tests by Andreas Evers Graal Compiler slides Microservice Design Patterns","title":"Java Day - Kiev, 2015 - Report"},{"location":"blog/2015/2015-11-08-java-day-kiev-2015-report/#java-day-kiev-2015-report","text":"| conference | java | November 6-7, 2015 I visited Java Day Kyiv conference. This report is for myself just to keep track talks I\u2019ve attended.","title":"Java Day - Kiev, 2015 - Report"},{"location":"blog/2015/2015-11-08-java-day-kiev-2015-report/#day-1","text":"Get Past the Syntax, the Real Scare\u2019s in the Semantics by Venkat Subramaniam We often hear programmers complain about the syntax, especially when learning a new language. It turns out that, while syntax plays a role in our ability to learn and use languages, the real force we have to deal with is in the semantics. Once we get past the syntax, the semantics is where the real power and the real scare is. Curious to learn more? Enterprise Integration Patterns Revisited for the Era of Big Data, Internet of Things and Microservices by Kai Waehner ( slides ) Data exchanges between companies increase a lot. Hence, the number of applications, which must be integrated increases, too. The realization of these integration scenarios is a complex and time-consuming task because different applications and services do not use the same concepts, interfaces, data formats and technologies. Originated and published over ten years ago by Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns (EIP) became the world wide de facto standard for describing integration problems. They offer a standardized way to split huge, complex integration scenarios into smaller recurring problems. This session revisits EIPs and gives an overview about the status quo and its relevance regarding modern concepts such as Big Data, Internet of Things or Microservices. Fortunately, EIPs offer more possibilities than just being used for modeling integration problems in a standardized way. Several frameworks and tools already implement these patterns. The developer does not have to implement EIPs on his own. Therefore, the end of the session shows different open source frameworks and proprietary tools available, which can be used for modeling and implementing complex integration scenarios by using the EIPs. Microservices at Proximus: Netflix OSS and HATEOAS deployed on production by Andreas Evers ( slides ) At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. Throughout this session you will learn what the microservices hype is all about, including its benefits and pitfalls based on our experiences of running microservices (including the Netflix OSS) in production at a major company in Belgium. To manage hundreds of microservices you need to apply certain patterns such as circuit breakers, gateways, service registries and so on. You will learn how these patterns work, how they are applied through the Netflix stack and how easy it is to use them in your architecture through code examples and demos. The contracts between these microservices should be well defined and loosely coupled. Using hypermedia as the engine of application state (hateoas), we can benefit from independent evolution and decoupled implementation. How we can implement these using Spring Hateoas, correctly document using Spring Restdocs, integrate with the HAL browser and version using JsonViews will become clear in the second part of this session. Java in production for Data Mining Research projects by Alexey Zinoviev ( slide ) Java is often criticized for hard parsing CSV datasets, poor matrix and vectors manipulations. This makes it hard to easy and efficiently implement certain types of machine learning algorithms. In many cases data scientists choose R or Python languages for modeling and problem solution and you as a Java developer should rewrite R algorithms in Java or integrate many small Python scripts in Java application. But why so many highload tools like Cassandra, Hadoop, Giraph, Spark are written in Java or executed on JVM? What the secret of successful implementation and running? Maybe we should forget old manufacturing approach of dividing on developers and research engineers in production projects? During the report, we will discuss how to build full Java-stack Data Mining application, deploy it, make charts, integrate with databases, how to improve performance with JVM tuning and etc. Attendees of my talk will become familiar with the development and deploy of research Java projects, Hadoop/Spark \u2014 based Data Mining tools and will get useful tips about possible integration ways. How Java developers should test their applications by Mikalai Alimenkou It was a real code sharing session where were demoed and discussed different testing approaches","title":"Day 1"},{"location":"blog/2015/2015-11-08-java-day-kiev-2015-report/#day-2","text":"The Future [Java] Developer by Bruno Souza . Keynote What kind of developer do you want to be? The kind that plans, organizes, prepares, and prepares\u2026 and prepares\u2026 Or the kind that focus on delivering and on transforming your customers\u2019 lives? Software development is a creative and complex work. It is trully \u201cMeaningful Work\u201d. But\u2026 If we do it right! Java has allowed us to adventure into all kinds of new technologies, while improving our core knowledge. But how does the ever changing technology landscape and things like Cloud Computing, Internet of Things, BigData and DevOps impact our ability to deliver? This talk will take a look at the abilities of the Future [Java] Developer, and how open source, startups and containers play a role into our future careers. 20 Years of Java by Marcus Lagergren . Keynote This keynote will be a historical trip down memory lane - going through 20 years of Java and JVM implementations. This will be partly from Marcus\u2019s own perspective as one of the architects behind JRockit, with plenty of stories from the trenches, like the benchmarking competitions between BEA/Oracle, Sun and IBM. We will see how Java and the JVM turned into the robust high performance server side platform that it is today, partly through personal observations and partly through a more objective \u201cwhat a long strange trip this has been\u201d. He will take you back to 1995 in a time machine and slowly bring you to 2014, going over the major Java releases and the runtime innovations made in the JVM side to get us here. Finally, we will do a short trip into the future, even though the future is always fuzzy, to explore what might be coming next. With Java 8, the biggest release in Java history, Java is more vibrant and alive than ever before. This is an evolution that won\u2019t be stopped. Brand new proximus microservices architecture in production by Andreas Evers ( slides ) At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. During this talk we will shed a light on the migration path we went through to get Spring Cloud microservices based on Netflix deployed to production. Migrating from a monolith to containerized microservices doesn\u2019t always go smoothly in a rigid regulated enterprise. This is not your regular microservice talk. This is a journey through our struggles to reform both technically and culturally (reverse Conway\u2019s law) towards a devops distributed architecture which actually runs on production. E.g. gradually evolving from a manual infrastructure deploying on JBoss and using dedicated apache load balancers, to a PaaS private cloud solution. One VM To Rule Them All by Thomas Wuerthinger ( slides ) Running a multitude of programming languages is a common requirement for large scale applications. This talk presents a virtual machine architecture that allows to handle different programming languages and their interoperability while not sacrificing performance. It bases on partial evaluation of AST interpreters to automatically derive compiled code. A prototype of this architecture has been developed as part of the Graal OpenJDK project ( http://openjdk.java.net/projects/graal/ ) as well as the TruffleRuby, ZipPy, and FastR open source projects. The talk will be about the general principles behind our VM, special aspects of the Ruby, Python, and R implementations, and our vision for making language interoperability work efficiently. Microservices Design Patterns for Java Application by Arun Gupta ( DZone Refcard ) Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicate using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture \u2013 both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery. Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration? This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications. Scaling Wix with microservices architecture and multi-cloud platform by Aviran Mordo ( slides ) Many small startups build their systems on top of a traditional toolset like Tomcat, Hibernate, and MySQL. These systems are used because they facilitate easy development and fast progress, but many of them are monolithic and have limited scalability. So as a startup grows, the team is confronted with the problem of how to evolve the system and make it scalable. Facing the same dilemma, Wix.com grew from 0 to 70 million users in just a few years. Facing some interesting challenges, like performance and availability. Traditional performance solutions, such as caching, would not help due to a very long tail problem which causes caching to be highly inefficient. And because every minute of downtime means customers lose money, the product needed to have near 100% availability. Solving these issues required some interesting and out-of-the-box thinking, and this talk will discuss some of these strategies: building a highly preformant, highly available and highly scalable system; and leveraging microservices architecture and multi-cloud platforms to help build a very efficient and cost-effective system. From CRUD to Hypermedia APIs with Spring by Vladimir Tsukur Typical way to design and expose HTTP API today is a so called CRUD approach: come up with URL templates for resources, map create-read-update-delete operations to HTTP verbs and serialize domain model as JSON. Nice and easy, isn\u2019t it? This talk will present limitations of CRUD style APIs and how to address them using \u201creal\u201d REST and hypermedia, HAL and ALPS. We\u2019ll take a look how a set of libraries and tools from Spring helps building these APIs. All the talking is not worth it without an example, so Spring-based application will be our guide. Amazon, PayPal, GitHub and other API providers have already started embracing hypermedia and linking by enhancing their HTTP interfaces. Are you next? #rest #hypermedia #http #api #design #spring #spring-hateoas #java #hal #alps","title":"Day 2"},{"location":"blog/2015/2015-11-08-java-day-kiev-2015-report/#references","text":"Spring REST Docs - Documenting RESTful APIs using your tests by Andreas Evers Graal Compiler slides Microservice Design Patterns","title":"References"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/","text":"The state of Groovy and other JVM Languages | groovy | scala | Well, I like the Groovy language in general. This language has nice pragmatic applications and all other related \u201ccookie\u201d, but it looks like other languages, Scala especially, are more popular or trendy. Figure 1. JVM language History (image created by zeroturnaround ) The actual motivation was based on the numbers provided by https://libraries.io Here we have the next numbers projects per language (on Github): Golang\u200a\u2014\u200a352K JavaScript\u200a\u2014\u200a232K Ruby - 73K Java\u200a\u2014\u200a44.5K Python\u200a\u2014\u200a35.9K Clojure\u200a\u2014\u200a11.2K Scala\u200a\u2014\u200a10.1K C\u200a\u2014\u200a5.29K Haskell\u200a\u2014\u200a4.71K Shell\u200a\u2014\u200a3.61K Groovy\u200a\u2014\u200a729 (WTF? What? Why?) I do not understand why Github has so few Groovy based projects. But, let\u2019s double check these numbers. About Groovy Language ecosystem If somebody asks you about Groovy the next projects come up to your mind: Gradle \u200a\u2014\u200a\u2606 3483 Grails \u200a\u2014\u200a\u2606 1789 Spock - \u2606 1063 Ratpack (Java/Groovy)\u200a\u2014\u200a\u2606 1075 Can you name some other \u201cpopular\u201d Groovy projects? Well, maybe awesome-groovy can help. Language Trends Tiobe This language rating is very strange because it\u2019s not aligned with other trends. But, it\u2019s better to have it for comparison. Groovy is 17 , Scala\u200a\u2014\u200a32. It\u2019s strange result. PYPL PopularitY of Programming Language GitHut languages GitHut is an attempt to visualize and explore the complexity of the universe of programming languages used across the repositories hosted on GitHub. Indeed Job Trends Scala, Groovy, Clojure Job Trends\u200a\u2014\u200a Absolute Scala, Groovy, Clojure Job Trends\u200a\u2014\u200a Relative Stackoverflow Developer Survey Most Popular Technologies More people use JavaScript than use any other programming language. PHP appears to be falling out of favor as Node and Angular emerge. Most Loved, Dreaded, and Wanted % of developers who are not developing with the language or tech but have expressed interest in developing with it Top Paying Tech Make it rain! Cloud technology pays big bucks. So does tech frequently used in finance. Spark, Scala, Cassandra, and F# top the list of the top paying technologies. (This year\u2019s list looks a lot like last year\u2019s list.) Trends Summary As you can see Groovy has some issues in popularity. I don\u2019t understand why. GitHub Repos Analysis Let\u2019s define some baseline for further analysis based on popular Java repos JUnit 4\u200a\u2014\u200a\u2606 4847, fork 1905 JUnit 5 \u2014 \u2606 419, fork 77 Google Guava \u2014 \u26069108, fork 2109 Spring Framework \u2014 \u2606 8824, fork 7286 Groovy Repos Apache Groovy\u200a\u2014\u200a\u2606 1135, fork 409 Netflix/asgard\u200a\u2014\u200a\u2606 2091, fork 415 (Asgard is deprecated at Netflix) gradle/gradle\u200a\u2014\u200a\u2606 3483, fork 1374 grails/grails-core - \u2606 1789, fork 805 ratpack/ratpack\u200a\u2014\u200a\u2606 1075, fork 253 rundeck/rundeck - \u2606 1332, fork 307 (Job scheduler and runbook automation) betamaxteam/betamax\u200a\u2014\u200a\u2606 300, fork 107 Scala Repos scala/scala\u200a\u2014\u200a\u2606 6127 , fork 1541 apache/spark\u200a\u2014\u200a\u2606 8511, fork 7906 playframework - \u2606 7855, fork 2726 akka/akka - \u2606 5504 , fork 1712 twitter/finagle - \u2606 4614, fork 870 openzipkin/zipkin - \u2606 3537, fork 493 scalatra/scalatra - \u2606 1924 , fork 274 JVM Languages Clojure- \u2606 5310, fork 916 Kotlin- \u2606 5083, fork 543 JRuby-\u2606 2519, fork 655 Non-JVM Repos rails/rails - \u2606 31119, fork 12608 expressjs/express - \u2606 25105 , fork 4731 docker/docker - \u2606 31206, fork 8874 kubernetes/kubernetes\u200a\u2014\u200a\u2606 14371, fork 4319 github/hub - \u2606 8447 , fork 754 Summary You should make your own conclusion base on this data. I don\u2019t understand why Groovy is not in trend. But numbers show the general picture. Looking forward for your thoughts References awesome-groovy awesome-scala A Comprehensive Analysis: Java vs Scala The Adventurous Developer\u2019s Guide to JVM Languages","title":"The state of Groovy and other JVM Languages"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#the-state-of-groovy-and-other-jvm-languages","text":"| groovy | scala | Well, I like the Groovy language in general. This language has nice pragmatic applications and all other related \u201ccookie\u201d, but it looks like other languages, Scala especially, are more popular or trendy. Figure 1. JVM language History (image created by zeroturnaround ) The actual motivation was based on the numbers provided by https://libraries.io Here we have the next numbers projects per language (on Github): Golang\u200a\u2014\u200a352K JavaScript\u200a\u2014\u200a232K Ruby - 73K Java\u200a\u2014\u200a44.5K Python\u200a\u2014\u200a35.9K Clojure\u200a\u2014\u200a11.2K Scala\u200a\u2014\u200a10.1K C\u200a\u2014\u200a5.29K Haskell\u200a\u2014\u200a4.71K Shell\u200a\u2014\u200a3.61K Groovy\u200a\u2014\u200a729 (WTF? What? Why?) I do not understand why Github has so few Groovy based projects. But, let\u2019s double check these numbers.","title":"The state of Groovy and other JVM Languages"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#about-groovy-language-ecosystem","text":"If somebody asks you about Groovy the next projects come up to your mind: Gradle \u200a\u2014\u200a\u2606 3483 Grails \u200a\u2014\u200a\u2606 1789 Spock - \u2606 1063 Ratpack (Java/Groovy)\u200a\u2014\u200a\u2606 1075 Can you name some other \u201cpopular\u201d Groovy projects? Well, maybe awesome-groovy can help.","title":"About Groovy Language ecosystem"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#language-trends","text":"","title":"Language Trends"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#tiobe","text":"This language rating is very strange because it\u2019s not aligned with other trends. But, it\u2019s better to have it for comparison. Groovy is 17 , Scala\u200a\u2014\u200a32. It\u2019s strange result.","title":"Tiobe"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#pypl-popularity-of-programming-language","text":"","title":"PYPL PopularitY of Programming Language"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#githut-languages","text":"GitHut is an attempt to visualize and explore the complexity of the universe of programming languages used across the repositories hosted on GitHub.","title":"GitHut languages"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#indeed-job-trends","text":"Scala, Groovy, Clojure Job Trends\u200a\u2014\u200a Absolute Scala, Groovy, Clojure Job Trends\u200a\u2014\u200a Relative","title":"Indeed Job Trends"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#stackoverflow-developer-survey","text":"","title":"Stackoverflow Developer Survey"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#github-repos-analysis","text":"Let\u2019s define some baseline for further analysis based on popular Java repos JUnit 4\u200a\u2014\u200a\u2606 4847, fork 1905 JUnit 5 \u2014 \u2606 419, fork 77 Google Guava \u2014 \u26069108, fork 2109 Spring Framework \u2014 \u2606 8824, fork 7286","title":"GitHub Repos Analysis"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#groovy-repos","text":"Apache Groovy\u200a\u2014\u200a\u2606 1135, fork 409 Netflix/asgard\u200a\u2014\u200a\u2606 2091, fork 415 (Asgard is deprecated at Netflix) gradle/gradle\u200a\u2014\u200a\u2606 3483, fork 1374 grails/grails-core - \u2606 1789, fork 805 ratpack/ratpack\u200a\u2014\u200a\u2606 1075, fork 253 rundeck/rundeck - \u2606 1332, fork 307 (Job scheduler and runbook automation) betamaxteam/betamax\u200a\u2014\u200a\u2606 300, fork 107","title":"Groovy Repos"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#scala-repos","text":"scala/scala\u200a\u2014\u200a\u2606 6127 , fork 1541 apache/spark\u200a\u2014\u200a\u2606 8511, fork 7906 playframework - \u2606 7855, fork 2726 akka/akka - \u2606 5504 , fork 1712 twitter/finagle - \u2606 4614, fork 870 openzipkin/zipkin - \u2606 3537, fork 493 scalatra/scalatra - \u2606 1924 , fork 274","title":"Scala Repos"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#jvm-languages","text":"Clojure- \u2606 5310, fork 916 Kotlin- \u2606 5083, fork 543 JRuby-\u2606 2519, fork 655","title":"JVM Languages"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#non-jvm-repos","text":"rails/rails - \u2606 31119, fork 12608 expressjs/express - \u2606 25105 , fork 4731 docker/docker - \u2606 31206, fork 8874 kubernetes/kubernetes\u200a\u2014\u200a\u2606 14371, fork 4319 github/hub - \u2606 8447 , fork 754","title":"Non-JVM Repos"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#summary","text":"You should make your own conclusion base on this data. I don\u2019t understand why Groovy is not in trend. But numbers show the general picture. Looking forward for your thoughts","title":"Summary"},{"location":"blog/2016/2016-05-14-the-state-of-groovy-and-other-jvm-languages/#references","text":"awesome-groovy awesome-scala A Comprehensive Analysis: Java vs Scala The Adventurous Developer\u2019s Guide to JVM Languages","title":"References"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/","text":"JEEConf\u200a- Kyiv, 2016\u200a- Report | conference | java | This week (May 20\u201321, 2016) I attended JEEConf the 6th time. The conference was well organized, but there was one very important improvement\u200a\u2014\u200athe organizer has changed the venue of the conference. Four of five stages were located on the same floor which was very convenient for attendees. All buzzwords were on this conference: reactiveness, cloud, big data, nosql, scala/akka/spark. This report is for myself just to keep track talks I\u2019ve attended. Day 1 (May 20, 2016) Search and analyze your data with ElasticSearch by Anton Udovychenko ( slides ) The importance of search for modern application is evident and nowadays it is higher than ever. A lot of projects use search forms as a primary interface for communication with a user. Though implementation of an intelligent search functionality is still a challenge and we need a good set of tools. In this presentation, I will talk through the high-level architecture and benefits of ElasticSearch with some examples. Aside from that, we will also take a look at its existing competitors, their similarities, and differences. This talk was an Elasticsearch intro. I think it\u2019s good overview and start point for further diving into the topic. Lambda Architecture with Apache Spark by Taras Matyashovskyy ( slides ) A lot of players on the market have built successful MapReduce workflows to daily process terabytes of historical data. But who wants to wait for 24h to get updated analytics? This talk will introduce you to the lambda architecture designed to take advantages of both batch and streaming processing methods. So we will leverage fast access to historical data with real-time streaming data using Spark (Core, SQL, Streaming), Kafka, Apache Parquet, etc. Clear code plus intuitive demo are also included! Taras has recommended to read \u201cBig Data. Principles and best practices of scalable realtime data systems\u201d by Nathan Marz and James Warren. So, I\u2019ve added this book in my reading backlog. Caught in the Act: Kotlin Bytecode Generation and Runtime Performance by Dmitry Jemerov ( slides ) In this talk, we\u2019ll dive into the details of how various language features supported by Kotlin are translated to Java bytecode. We\u2019ll use the JMH microbenchmarking tool to study the relative performance of various constructs and to understand how we can ensure top performance of the Kotlin code that we write. This was an into Kotlin\u2019s talk. There were plenty of code snippets Kotlin vs Java. Nice comparison. IMHO, Kotlin is very similar in features to Groovy (with @TypeChecked or @CompileStatic). But, due to it\u2019s (Kotlin) static nature, it looks more appealing for people. Kotlin looks very pragmatic (like Groovy). It is interesting to see who will \u201csurvive\u201d especially related to new Gradle\u2019s wave of adding Kotlin support . Petabyte-Scale Text Processing with Spark by Aleksey Slyusarenko ( Grammarly blog post ) At Grammarly, we have long used Amazon EMR with Hadoop and Pig in support of our big data processing needs. However, we were really excited about the improvements that the maturing Apache Spark offers over Hadoop and Pig, and so set about getting Spark to work with our petabyte text data set. This talk describes the challenges we had in the process and a scalable working setup of Spark that we have discovered as a result. Lord of the Spark or an easy way for Java Developers to tame Big Data by Evgeny Borisov (no slides) Are you frightened of Big Data? Do you think it\u2019s complicated, and in order to work in this field you need to learn a lot of new concepts, tools and paradigms? I have good news for you: Apache Spark, an open source Big Data processing framework, can spare you these concerns. You might heard that in order to use Spark you should know Scala or Python? Perhaps somebody had told you that Java API of Spark is limited, bulky and inconvenient? That all your previous Java experience is useless? Inversion of Control, design patterns, Java frameworks such as Spring, JUnit or Maven/Gradle are not your friends anymore? I have further good news for you: Writing Spark with Java can be very elegant and for sure more familiar to you. This talk is for Java developers who want to process Big Data in the most efficient and simple way, using the cutting edge technology\u200a\u2014\u200aSpark. We will take a look on Spark API and cover its capabilities. Finally, I\u2019ll demonstrate that in order to work with Spark you can still use the same techniques and knowledge you\u2019ve gained in the world of Java. Lightning Talks Code generation with Javac Plugin by Oleksandr Radchykov Javac plugin API was introduced in java 8. We can use this API for getting cool things done (like code generation/code analyzing). However it is not widely used right now. Most of java magic projects like Lombok, Java-OO are using annotation processing. I want to show brand new approach for making the magic in java which has some benefits. Right now I have prototype which gives us the power of auto type casting in java and, if you want to use it, you shouldn\u2019t add any dependencies to your project for using it, you should only add flag for compiler. In future I think it can be done through build tool plugin. Unfortunately I missed the beginning of this talk. Looking forward for video record. The end of this talk was very interesting. RxJava Applied: Concise Examples where It Shines by Igor Lozynskyi ( slides , github ) FRP & RxJava have already gained an important place in software development of all kinds, from mobile applications to high load servers. But it is just a beginning. The approach proposed by RxJava gives us such benefits as functional composition over observable streams, easy asynchronous programming, including error handling, an amazing toolbox of functions to build workflows.This talk is all about short but expressive examples where RxJava gives more possibilities requiring less code. Intro into RxJava topic. Nice slides and sample. I hope people got the idea. Well done. Different flavors of polymorphism in Scala by h Boris Trofimov ( slides , personal blog ) Working with Scala can be compared to experiencing the \u201cforth dimension\u201d. Many of the features of Scala are unique and provide ways to look at application development in a new way. Polymorphism in Scala is multifaceted and this is going to be our topic. Very interesting and clear sample of Scala\u2019s polymorphism. Day 2 (May 21, 2016) How to cook Apache Kafka with Camel and Spring Boot by Ivan Vasyliev Will present basics of Apache Kafka for developers and show how to develop and test applications with use of Apache Camel and Spring Boot with Kafka in embedded mode. WILD microSERVICES v2 (part 1) by Aleksandr Tarasov and Kirill Tolkachev (github: project and lazybones templates ) The following topics will be covered: - What are microservices? Where is the theory, bro? - What kind of technologies should we choose? What have we chosen and why? - Why RPC is still competetive in REST-domination era? - How to pack and distribute microservices? How can SpringBoot and Docker help us to solve our problems? - Why is service discovery considered as one of the crucial components? How to cook Spring Cloud and what problems > you may face in real life? - Security of microservices, API gateway and other. - Speakers will also cover other topics related to distributed system development. This talk was divided in two sessions (I was on session #1 ONLY). Guys tried to show some live-coding. I had a strong believe that live coding is very bad approach for a conference (git revision checkout works much better). I don\u2019t want to spend my time watching while somebody typing and trying to resolve development issues. So, why did I attended this talk? Because I know these speakers (from other conferences and podcast) and wanted to see them in action. About live coding . I know only two speakers who are really good in this: Venkat Subramaniam and Josh Long . Introduction to Akka Streams by Dmytro Mantula Streams of data and pipelines are everywhere. It\u2019s a useful conceptual model: you have an input; you wire some little functions together to compose bigger and more complex pipelines; and you produce an output. To reach prominent throughput, we need to make these functions asynchronous, and parallelize them over input data. Akka Streams is a toolkit that provides a way to define and run a chain of asynchronous processing steps on a >sequence of elements, using tried-and-true actor model under the cover. In my talk I\u2019m going to explain the motivation of using Akka Streams, and cover the following topics: Problems of streaming data Actor model in the nutshell Problems of actor model from stream processing point of view Problems of buffers and mailboxes overflow What is back-pressure How Akka Streams helps with resolving these problems Code examples in Akka Streams How to learn a programming language in 25 minutes by Dmytro Mantula ( slides ) 3,5 years ago I was a \u201ccool-Java-hacker\u201d. Suddenly I decided to learn a course \u201cFunProg in Scala\u201d. It blew my mind! I felt I\u2019m a Junior in Scala, but I had no willing to come back to Java\u2026 so I needed a job in Scala. But who needs a newbie without commercial experience but with Senior\u2019s ambitions? Thus I started searching for lifehacks: how to mobilize my energy and learn the new programming paradigms in a short time. I found them. And eventually it developed into a system that I use to this day. My talk is about this system of continuous self-education. Spring Boot under the Cover by Nicolas Fr\u00e4nkel ( slides ) Spring Boot is a stack enabling you to kickstart your Spring application in a matter of minutes. It has been a resounding success among both developers already using Spring and microservices adopters. Favoring Spring Boot over the traditional Spring framework comes at a cost, though: you have to let Boot in control and some like to know everything what happens. Come to this talk to discover about auto-configuration and the different flavors of conditionals. After this talk, you\u2019ll be able to understand Spring Boot internals and develop your own starter dependency. The problem of real-time data binding by Alexander Derkach ( slides ) As the popularity of any event-driven application increases, the number of concurrent connections may increase. Applications that employ thread-per-client architecture, frustrate scalability by exhausting a server\u2019s memory with excessive allocations and by exhausting a server\u2019s CPU with excessive context-switching. One of obvious solutions, is exorcising blocking operations from such applications. Vert.x is event driven and non blocking toolkit, which may help you to achive this goal. In this talk, we are going to cover it\u2019s core features and develop a primitive application using WebSockets, RxJava and Vert.x.","title":"JEEConf\u200a- Kyiv, 2016\u200a- Report"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#jeeconf-kyiv-2016-report","text":"| conference | java | This week (May 20\u201321, 2016) I attended JEEConf the 6th time. The conference was well organized, but there was one very important improvement\u200a\u2014\u200athe organizer has changed the venue of the conference. Four of five stages were located on the same floor which was very convenient for attendees. All buzzwords were on this conference: reactiveness, cloud, big data, nosql, scala/akka/spark. This report is for myself just to keep track talks I\u2019ve attended.","title":"JEEConf\u200a- Kyiv, 2016\u200a- Report"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#day-1-may-20-2016","text":"","title":"Day 1 (May 20, 2016)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#search-and-analyze-your-data-with-elasticsearch-by-anton-udovychenko-slides","text":"The importance of search for modern application is evident and nowadays it is higher than ever. A lot of projects use search forms as a primary interface for communication with a user. Though implementation of an intelligent search functionality is still a challenge and we need a good set of tools. In this presentation, I will talk through the high-level architecture and benefits of ElasticSearch with some examples. Aside from that, we will also take a look at its existing competitors, their similarities, and differences. This talk was an Elasticsearch intro. I think it\u2019s good overview and start point for further diving into the topic.","title":"Search and analyze your data with ElasticSearch by Anton Udovychenko (slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#lambda-architecture-with-apache-spark-by-taras-matyashovskyy-slides","text":"A lot of players on the market have built successful MapReduce workflows to daily process terabytes of historical data. But who wants to wait for 24h to get updated analytics? This talk will introduce you to the lambda architecture designed to take advantages of both batch and streaming processing methods. So we will leverage fast access to historical data with real-time streaming data using Spark (Core, SQL, Streaming), Kafka, Apache Parquet, etc. Clear code plus intuitive demo are also included! Taras has recommended to read \u201cBig Data. Principles and best practices of scalable realtime data systems\u201d by Nathan Marz and James Warren. So, I\u2019ve added this book in my reading backlog.","title":"Lambda Architecture with Apache Spark by Taras Matyashovskyy (slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#caught-in-the-act-kotlin-bytecode-generation-and-runtime-performance-by-dmitry-jemerov-slides","text":"In this talk, we\u2019ll dive into the details of how various language features supported by Kotlin are translated to Java bytecode. We\u2019ll use the JMH microbenchmarking tool to study the relative performance of various constructs and to understand how we can ensure top performance of the Kotlin code that we write. This was an into Kotlin\u2019s talk. There were plenty of code snippets Kotlin vs Java. Nice comparison. IMHO, Kotlin is very similar in features to Groovy (with @TypeChecked or @CompileStatic). But, due to it\u2019s (Kotlin) static nature, it looks more appealing for people. Kotlin looks very pragmatic (like Groovy). It is interesting to see who will \u201csurvive\u201d especially related to new Gradle\u2019s wave of adding Kotlin support .","title":"Caught in the Act: Kotlin Bytecode Generation and Runtime Performance by Dmitry Jemerov (slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#petabyte-scale-text-processing-with-spark-by-aleksey-slyusarenko-grammarly-blog-post","text":"At Grammarly, we have long used Amazon EMR with Hadoop and Pig in support of our big data processing needs. However, we were really excited about the improvements that the maturing Apache Spark offers over Hadoop and Pig, and so set about getting Spark to work with our petabyte text data set. This talk describes the challenges we had in the process and a scalable working setup of Spark that we have discovered as a result.","title":"Petabyte-Scale Text Processing with Spark by Aleksey Slyusarenko (Grammarly blog post)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#lord-of-the-spark-or-an-easy-way-for-java-developers-to-tame-big-data-by-evgeny-borisov-no-slides","text":"Are you frightened of Big Data? Do you think it\u2019s complicated, and in order to work in this field you need to learn a lot of new concepts, tools and paradigms? I have good news for you: Apache Spark, an open source Big Data processing framework, can spare you these concerns. You might heard that in order to use Spark you should know Scala or Python? Perhaps somebody had told you that Java API of Spark is limited, bulky and inconvenient? That all your previous Java experience is useless? Inversion of Control, design patterns, Java frameworks such as Spring, JUnit or Maven/Gradle are not your friends anymore? I have further good news for you: Writing Spark with Java can be very elegant and for sure more familiar to you. This talk is for Java developers who want to process Big Data in the most efficient and simple way, using the cutting edge technology\u200a\u2014\u200aSpark. We will take a look on Spark API and cover its capabilities. Finally, I\u2019ll demonstrate that in order to work with Spark you can still use the same techniques and knowledge you\u2019ve gained in the world of Java.","title":"Lord of the Spark or an easy way for Java Developers to tame Big Data by Evgeny Borisov (no slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#lightning-talks","text":"","title":"Lightning Talks"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#code-generation-with-javac-plugin-by-oleksandr-radchykov","text":"Javac plugin API was introduced in java 8. We can use this API for getting cool things done (like code generation/code analyzing). However it is not widely used right now. Most of java magic projects like Lombok, Java-OO are using annotation processing. I want to show brand new approach for making the magic in java which has some benefits. Right now I have prototype which gives us the power of auto type casting in java and, if you want to use it, you shouldn\u2019t add any dependencies to your project for using it, you should only add flag for compiler. In future I think it can be done through build tool plugin. Unfortunately I missed the beginning of this talk. Looking forward for video record. The end of this talk was very interesting.","title":"Code generation with Javac Plugin by Oleksandr Radchykov"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#rxjava-applied-concise-examples-where-it-shines-by-igor-lozynskyi-slides-github","text":"FRP & RxJava have already gained an important place in software development of all kinds, from mobile applications to high load servers. But it is just a beginning. The approach proposed by RxJava gives us such benefits as functional composition over observable streams, easy asynchronous programming, including error handling, an amazing toolbox of functions to build workflows.This talk is all about short but expressive examples where RxJava gives more possibilities requiring less code. Intro into RxJava topic. Nice slides and sample. I hope people got the idea. Well done.","title":"RxJava Applied: Concise Examples where It Shines by Igor Lozynskyi (slides, github)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#different-flavors-of-polymorphism-in-scala-by-hboris-trofimov-slides-personal-blog","text":"Working with Scala can be compared to experiencing the \u201cforth dimension\u201d. Many of the features of Scala are unique and provide ways to look at application development in a new way. Polymorphism in Scala is multifaceted and this is going to be our topic. Very interesting and clear sample of Scala\u2019s polymorphism.","title":"Different flavors of polymorphism in Scala by hBoris Trofimov (slides, personal blog)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#day-2-may-21-2016","text":"","title":"Day 2 (May 21, 2016)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#how-to-cook-apache-kafka-with-camel-and-spring-boot-by-ivan-vasyliev","text":"Will present basics of Apache Kafka for developers and show how to develop and test applications with use of Apache Camel and Spring Boot with Kafka in embedded mode.","title":"How to cook Apache Kafka with Camel and Spring Boot by Ivan Vasyliev"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#wild-microservices-v2-part-1-by-aleksandr-tarasov-and-kirill-tolkachev-github-project-and-lazybones-templates","text":"The following topics will be covered: - What are microservices? Where is the theory, bro? - What kind of technologies should we choose? What have we chosen and why? - Why RPC is still competetive in REST-domination era? - How to pack and distribute microservices? How can SpringBoot and Docker help us to solve our problems? - Why is service discovery considered as one of the crucial components? How to cook Spring Cloud and what problems > you may face in real life? - Security of microservices, API gateway and other. - Speakers will also cover other topics related to distributed system development. This talk was divided in two sessions (I was on session #1 ONLY). Guys tried to show some live-coding. I had a strong believe that live coding is very bad approach for a conference (git revision checkout works much better). I don\u2019t want to spend my time watching while somebody typing and trying to resolve development issues. So, why did I attended this talk? Because I know these speakers (from other conferences and podcast) and wanted to see them in action. About live coding . I know only two speakers who are really good in this: Venkat Subramaniam and Josh Long .","title":"WILD microSERVICES v2 (part 1) by Aleksandr Tarasov and Kirill Tolkachev (github: project and lazybones templates)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#introduction-to-akka-streams-by-dmytro-mantula","text":"Streams of data and pipelines are everywhere. It\u2019s a useful conceptual model: you have an input; you wire some little functions together to compose bigger and more complex pipelines; and you produce an output. To reach prominent throughput, we need to make these functions asynchronous, and parallelize them over input data. Akka Streams is a toolkit that provides a way to define and run a chain of asynchronous processing steps on a >sequence of elements, using tried-and-true actor model under the cover. In my talk I\u2019m going to explain the motivation of using Akka Streams, and cover the following topics: Problems of streaming data Actor model in the nutshell Problems of actor model from stream processing point of view Problems of buffers and mailboxes overflow What is back-pressure How Akka Streams helps with resolving these problems Code examples in Akka Streams","title":"Introduction to Akka Streams by Dmytro Mantula"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#how-to-learn-a-programming-language-in-25-minutes-by-dmytro-mantula-slides","text":"3,5 years ago I was a \u201ccool-Java-hacker\u201d. Suddenly I decided to learn a course \u201cFunProg in Scala\u201d. It blew my mind! I felt I\u2019m a Junior in Scala, but I had no willing to come back to Java\u2026 so I needed a job in Scala. But who needs a newbie without commercial experience but with Senior\u2019s ambitions? Thus I started searching for lifehacks: how to mobilize my energy and learn the new programming paradigms in a short time. I found them. And eventually it developed into a system that I use to this day. My talk is about this system of continuous self-education.","title":"How to learn a programming language in 25 minutes by Dmytro Mantula (slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#spring-boot-under-the-cover-by-nicolas-frankel-slides","text":"Spring Boot is a stack enabling you to kickstart your Spring application in a matter of minutes. It has been a resounding success among both developers already using Spring and microservices adopters. Favoring Spring Boot over the traditional Spring framework comes at a cost, though: you have to let Boot in control and some like to know everything what happens. Come to this talk to discover about auto-configuration and the different flavors of conditionals. After this talk, you\u2019ll be able to understand Spring Boot internals and develop your own starter dependency.","title":"Spring Boot under the Cover by Nicolas Fr\u00e4nkel (slides)"},{"location":"blog/2016/2016-05-22-jeeconf-kiev/#the-problem-of-real-time-data-binding-by-alexander-derkach-slides","text":"As the popularity of any event-driven application increases, the number of concurrent connections may increase. Applications that employ thread-per-client architecture, frustrate scalability by exhausting a server\u2019s memory with excessive allocations and by exhausting a server\u2019s CPU with excessive context-switching. One of obvious solutions, is exorcising blocking operations from such applications. Vert.x is event driven and non blocking toolkit, which may help you to achive this goal. In this talk, we are going to cover it\u2019s core features and develop a primitive application using WebSockets, RxJava and Vert.x.","title":"The problem of real-time data binding by Alexander Derkach (slides)"},{"location":"blog/2016/2016-06-15-gradle-groovy-kotlin-ftw/","text":"Gradle, Groovy, Kotlin. FTW? | gradle | groovy | kotlin | You\u2019ve probably heard about \u201cKotlin-based approach to writing Gradle build scripts\u201d . A lot of noise was produced based on this announcement and C\u00e9dric Champeau tried to explain the real state of Groovy, Gradle and their future relationship . Just to avoid different speculation about \u201cGradle is written in Groovy\u201d and now \u201cit will be re-written in Kotlin\u201d here are some numbers : Let\u2019s check the Gradle repo language statistic provided by GitHub Gradle root folder has several very important sub-folders: buildSrc - https://docs.gradle.org/current/userguide/-ganizing_build_logic.html#sec:build_sources[It's related to Gradle -ild process] config - nothing interesting: condenarc and checkstyle configs design-docs - markdown documentation gradle - Gradle scripts subprojects - Gradle sources. It\u2019s our goal to analyze this folder and understand the language statistics subprojects contains several interesting sub-folders: src/main - actual \u201cgradle\u201d source code src/test , src/integTest and src/testFixtures test source code. Now, count the language stats by https://github.com/AlDanial/cloc[cloc ] tool: src/main : $ cloc-1.66.exe --match-d=\"src/main/\" --found=oicloc2.log . 6052 text files. Wrote oicloc2.log 5975 unique files. 1881 files ignored. https://github.com/AlDanial/cloc v 1.66 T=19.50 s (298.2 files/s, 23192.5 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Java 5466 56689 128109 238097 Groovy 278 3100 5179 14336 JavaScript 3 160 272 4528 XML 15 8 0 669 CSS 6 64 38 354 XSLT 1 24 31 140 C++ 7 7 0 51 C 6 22 22 50 Scala 15 12 39 50 C/C++ Header 6 9 4 33 HTML 3 9 17 24 Objective C++ 2 7 0 18 Assembly 2 1 0 17 JSP 3 0 0 14 IDL 1 2 0 14 Objective C 1 3 0 7 ------------------------------------------------------------------------------- SUM: 5815 60117 133711 258402 ------------------------------------------------------------------------------- Based on this raw analysis we have 93% Java files and 4.7% Groovy files. Let\u2019s add test ( src/test , src/integTest and src/testFixtures ) folders to our statistics: $ cloc-1.66.exe --match-d=\"src/(test|integTest|testFixtures)/\" --found=oicloc3.log . 3867 text files. Wrote oicloc3.log 3775 unique files. 2657 files ignored. https://github.com/AlDanial/cloc v 1.66 T=15.24 s (243.1 files/s, 29213.4 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Groovy 3043 65654 47398 291716 Java 536 5830 7278 23568 XML 57 19 36 1845 Maven 22 57 20 571 HTML 10 18 10 430 Scala 24 48 122 162 JavaScript 5 14 13 105 CSS 1 19 0 91 DTD 1 54 164 33 XSLT 2 6 0 20 CoffeeScript 1 7 8 13 YAML 1 0 0 7 JSP 1 0 0 6 SQL 1 2 1 2 C 1 0 0 1 ------------------------------------------------------------------------------- SUM: 3706 71728 55050 318570 ------------------------------------------------------------------------------- As You can see we have 14.5% Java files and 82% Groovy files. Summary Gradle is Java -based project and it uses Groovy for testing and as a DSL implementation tool, nothing more. The noise around \u201cGroovy vs Kotlin\u201d for DSL implementation inside Gradle sounds strange. Gradle Inc. has just made pragmatic decision. That\u2019s it.","title":"Gradle, Groovy, Kotlin. FTW?"},{"location":"blog/2016/2016-06-15-gradle-groovy-kotlin-ftw/#gradle-groovy-kotlin-ftw","text":"| gradle | groovy | kotlin | You\u2019ve probably heard about \u201cKotlin-based approach to writing Gradle build scripts\u201d . A lot of noise was produced based on this announcement and C\u00e9dric Champeau tried to explain the real state of Groovy, Gradle and their future relationship . Just to avoid different speculation about \u201cGradle is written in Groovy\u201d and now \u201cit will be re-written in Kotlin\u201d here are some numbers : Let\u2019s check the Gradle repo language statistic provided by GitHub Gradle root folder has several very important sub-folders: buildSrc - https://docs.gradle.org/current/userguide/-ganizing_build_logic.html#sec:build_sources[It's related to Gradle -ild process] config - nothing interesting: condenarc and checkstyle configs design-docs - markdown documentation gradle - Gradle scripts subprojects - Gradle sources. It\u2019s our goal to analyze this folder and understand the language statistics subprojects contains several interesting sub-folders: src/main - actual \u201cgradle\u201d source code src/test , src/integTest and src/testFixtures test source code. Now, count the language stats by https://github.com/AlDanial/cloc[cloc ] tool: src/main : $ cloc-1.66.exe --match-d=\"src/main/\" --found=oicloc2.log . 6052 text files. Wrote oicloc2.log 5975 unique files. 1881 files ignored. https://github.com/AlDanial/cloc v 1.66 T=19.50 s (298.2 files/s, 23192.5 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Java 5466 56689 128109 238097 Groovy 278 3100 5179 14336 JavaScript 3 160 272 4528 XML 15 8 0 669 CSS 6 64 38 354 XSLT 1 24 31 140 C++ 7 7 0 51 C 6 22 22 50 Scala 15 12 39 50 C/C++ Header 6 9 4 33 HTML 3 9 17 24 Objective C++ 2 7 0 18 Assembly 2 1 0 17 JSP 3 0 0 14 IDL 1 2 0 14 Objective C 1 3 0 7 ------------------------------------------------------------------------------- SUM: 5815 60117 133711 258402 ------------------------------------------------------------------------------- Based on this raw analysis we have 93% Java files and 4.7% Groovy files. Let\u2019s add test ( src/test , src/integTest and src/testFixtures ) folders to our statistics: $ cloc-1.66.exe --match-d=\"src/(test|integTest|testFixtures)/\" --found=oicloc3.log . 3867 text files. Wrote oicloc3.log 3775 unique files. 2657 files ignored. https://github.com/AlDanial/cloc v 1.66 T=15.24 s (243.1 files/s, 29213.4 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Groovy 3043 65654 47398 291716 Java 536 5830 7278 23568 XML 57 19 36 1845 Maven 22 57 20 571 HTML 10 18 10 430 Scala 24 48 122 162 JavaScript 5 14 13 105 CSS 1 19 0 91 DTD 1 54 164 33 XSLT 2 6 0 20 CoffeeScript 1 7 8 13 YAML 1 0 0 7 JSP 1 0 0 6 SQL 1 2 1 2 C 1 0 0 1 ------------------------------------------------------------------------------- SUM: 3706 71728 55050 318570 ------------------------------------------------------------------------------- As You can see we have 14.5% Java files and 82% Groovy files.","title":"Gradle, Groovy, Kotlin. FTW?"},{"location":"blog/2016/2016-06-15-gradle-groovy-kotlin-ftw/#summary","text":"Gradle is Java -based project and it uses Groovy for testing and as a DSL implementation tool, nothing more. The noise around \u201cGroovy vs Kotlin\u201d for DSL implementation inside Gradle sounds strange. Gradle Inc. has just made pragmatic decision. That\u2019s it.","title":"Summary"},{"location":"blog/2016/2016-11-27-who-left-ruby-community/","text":"Who left Ruby Community? | ruby | I\u2019ve been listening The Ruby Rogues podcast for several years. Despite the fact the I\u2019m not a Ruby developer ;-). I\u2019m Ruby user if You will. So, there was one very interesting episode \u201c#283 - Is Ruby Dying?\u201d . I\u2019m in Java community and it\u2019s very common to hear that \u201cJava is Dying\u201d ;-). But, it\u2019s very uncommon to hear such statement in Ruby-related podcast. The most interesting part is: Charles: Yeah, it\u2019s really interesting too. This goes back, you talking about people coming in, it comes back at least for me to the people who say that the Ruby community is shrinking. They see prominent members of the community leaving but at the same time they\u2019re typically doing Ruby and something else. If they\u2019re going and picking up JavaScript, they\u2019re picking up a front-end framework or something and occasionally they\u2019ll move off to express or something instead of Rails. But yeah, is the Ruby community really shrinking? Well, the ticket for Rails Conf and Ruby Conf as far as I can tell are getting harder and harder to get. The conference really isn\u2019t getting bigger or smaller, it\u2019s harder and harder to get because more and more people want to go. And, I\u2019ve decided to find out who are from prominent members of the community leaving: Name Info Ruby Community Alt/New Community Yehuda Katz github , site Merb, Ruby on Rails, Bundler, Thor Rust Steve Klabnik github , site Ruby on Rails Rust Jos\u00e9 Valim github Ruby on Rails Elixir Dave Thomas github , blog wrote the 1st English Ruby Book in 2000 Elixir Matt Aimonetti github , site Merb, MacRuby Golang Mark Bates github , site Ruby Conf Speacker, Screencast Golang Blake Mizerany github Sinatra Golang Ron Evans github KidsRuby Ruby, Golang Katrina Owen github , site Ruby Conf Speacker Golang, Ruby Bryan Liles github Ruby Conf Speacker Golang Chad Fowler github , site Ruby Conf orginizer, Ruby Books writer Ruby, Scala, Clojure David Chelimsky github RSpec Ruby, Clojure Chris McCord github Ruby on Rails Elixir It\u2019s very interesting aspect of any community. Please comment/correct me if this table has incorrect info. Died Ezra Zygmuntowicz - a founder of the rails hosting company Engine Yard and original developer of the web framework Merb Jim Weirich - Rake build tool for Ruby Guy Decoux","title":"Who left Ruby Community?"},{"location":"blog/2016/2016-11-27-who-left-ruby-community/#who-left-ruby-community","text":"| ruby | I\u2019ve been listening The Ruby Rogues podcast for several years. Despite the fact the I\u2019m not a Ruby developer ;-). I\u2019m Ruby user if You will. So, there was one very interesting episode \u201c#283 - Is Ruby Dying?\u201d . I\u2019m in Java community and it\u2019s very common to hear that \u201cJava is Dying\u201d ;-). But, it\u2019s very uncommon to hear such statement in Ruby-related podcast. The most interesting part is: Charles: Yeah, it\u2019s really interesting too. This goes back, you talking about people coming in, it comes back at least for me to the people who say that the Ruby community is shrinking. They see prominent members of the community leaving but at the same time they\u2019re typically doing Ruby and something else. If they\u2019re going and picking up JavaScript, they\u2019re picking up a front-end framework or something and occasionally they\u2019ll move off to express or something instead of Rails. But yeah, is the Ruby community really shrinking? Well, the ticket for Rails Conf and Ruby Conf as far as I can tell are getting harder and harder to get. The conference really isn\u2019t getting bigger or smaller, it\u2019s harder and harder to get because more and more people want to go. And, I\u2019ve decided to find out who are from prominent members of the community leaving: Name Info Ruby Community Alt/New Community Yehuda Katz github , site Merb, Ruby on Rails, Bundler, Thor Rust Steve Klabnik github , site Ruby on Rails Rust Jos\u00e9 Valim github Ruby on Rails Elixir Dave Thomas github , blog wrote the 1st English Ruby Book in 2000 Elixir Matt Aimonetti github , site Merb, MacRuby Golang Mark Bates github , site Ruby Conf Speacker, Screencast Golang Blake Mizerany github Sinatra Golang Ron Evans github KidsRuby Ruby, Golang Katrina Owen github , site Ruby Conf Speacker Golang, Ruby Bryan Liles github Ruby Conf Speacker Golang Chad Fowler github , site Ruby Conf orginizer, Ruby Books writer Ruby, Scala, Clojure David Chelimsky github RSpec Ruby, Clojure Chris McCord github Ruby on Rails Elixir It\u2019s very interesting aspect of any community. Please comment/correct me if this table has incorrect info.","title":"Who left Ruby Community?"},{"location":"blog/2016/2016-11-27-who-left-ruby-community/#died","text":"Ezra Zygmuntowicz - a founder of the rails hosting company Engine Yard and original developer of the web framework Merb Jim Weirich - Rake build tool for Ruby Guy Decoux","title":"Died"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/","text":"Reserved Words of Programming languages | ruby | python | java | scala | golang | cpp | c | Amount of reserved words per programming language: C++ - 92 C89 - 32 C99 - 37 C11 - 42 Python 2 - 31 Python 3 - 33 Ruby - 41 Golang - 25 Java - 53 Scala - 50 As You can see Golang has the minimal amount of reserved words. C++ keywords : 92 words alignas (since C++11) dynamic_cast reinterpret_cast alignof (since C++11) else requires (concepts TS) and enum return and_eq explicit short asm export(1) signed atomic_cancel (TM TS) extern(1) sizeof(1) atomic_commit (TM TS) false static atomic_noexcept (TM TS) float static_assert (since C++11) auto(1) for static_cast bitand friend struct(1) bitor goto switch bool if synchronized (TM TS) break import (modules TS) template case inline(1) this catch int thread_local (since C++11) char long throw char16_t (since C++11) module (modules TS) true char32_t (since C++11) mutable(1) try class(1) namespace typedef compl new typeid concept (concepts TS) noexcept (since C++11) typename const not union constexpr (since C++11) not_eq unsigned const_cast nullptr (since C++11) using(1) continue operator virtual decltype (since C++11) or void default(1) or_eq volatile delete(1) private wchar_t do protected while double public xor register(2) xor_eq C keywords C89: 32 words auto goto break if case int char long const register continue return default short do signed double sizeof else static enum struct extern switch float typedef for union C99: C89 + 5 words _Bool _Complex _Imaginary inline restrict C11: C99 + 5 words _Alignas _Noreturn _Alignof _Static_assert _Atomic _Thread_local _Generic _Noreturn Python 2 : 31 words and del from not while as elif global or with assert else if pass yield break except import print class exec in raise continue finally is return def for lambda try Python 3 : 33 words False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise Ruby : 41 words __ENCODING__ __FILE__ and def end in or self unless __LINE__ begin defined? ensure module redo super until BEGIN break do false next rescue then when END case else for nil retry true while alias class elsif if not return undef yield Golang : 25 words break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var Java : 53 words abstract continue for new switch assert*** default goto* package synchronized boolean do if private this break double implements protected throw byte else import public throws case enum**** instanceof return transient catch extends int short try char final interface static void class finally long strictfp** volatile const* float native super while false true null * not used ** added in 1.2 *** added in 1.4 **** added in 5.0 Scala : 50 words abstract case catch class def do else extends false final finally for forSome if implicit import lazy macro match new null object override package private protected return sealed super this throw trait try true type val var while with yield _ : = => <- <: <% >: # @ Scala \u2018s special symbols ( _ : = => <- <: <% >: # @ ) can be excluded and in this case Scala might have only 40 reserverd words.","title":"Reserved Words of Programming languages"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#reserved-words-of-programming-languages","text":"| ruby | python | java | scala | golang | cpp | c | Amount of reserved words per programming language: C++ - 92 C89 - 32 C99 - 37 C11 - 42 Python 2 - 31 Python 3 - 33 Ruby - 41 Golang - 25 Java - 53 Scala - 50 As You can see Golang has the minimal amount of reserved words.","title":"Reserved Words of Programming languages"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#c-keywords-92-words","text":"alignas (since C++11) dynamic_cast reinterpret_cast alignof (since C++11) else requires (concepts TS) and enum return and_eq explicit short asm export(1) signed atomic_cancel (TM TS) extern(1) sizeof(1) atomic_commit (TM TS) false static atomic_noexcept (TM TS) float static_assert (since C++11) auto(1) for static_cast bitand friend struct(1) bitor goto switch bool if synchronized (TM TS) break import (modules TS) template case inline(1) this catch int thread_local (since C++11) char long throw char16_t (since C++11) module (modules TS) true char32_t (since C++11) mutable(1) try class(1) namespace typedef compl new typeid concept (concepts TS) noexcept (since C++11) typename const not union constexpr (since C++11) not_eq unsigned const_cast nullptr (since C++11) using(1) continue operator virtual decltype (since C++11) or void default(1) or_eq volatile delete(1) private wchar_t do protected while double public xor register(2) xor_eq","title":"C++ keywords: 92 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#c-keywords","text":"","title":"C keywords"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#c89-32-words","text":"auto goto break if case int char long const register continue return default short do signed double sizeof else static enum struct extern switch float typedef for union","title":"C89: 32 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#c99-c89-5-words","text":"_Bool _Complex _Imaginary inline restrict","title":"C99: C89 + 5 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#c11-c99-5-words","text":"_Alignas _Noreturn _Alignof _Static_assert _Atomic _Thread_local _Generic _Noreturn","title":"C11: C99 + 5 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#python-2-31-words","text":"and del from not while as elif global or with assert else if pass yield break except import print class exec in raise continue finally is return def for lambda try","title":"Python 2: 31 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#python-3-33-words","text":"False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise","title":"Python 3: 33 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#ruby-41-words","text":"__ENCODING__ __FILE__ and def end in or self unless __LINE__ begin defined? ensure module redo super until BEGIN break do false next rescue then when END case else for nil retry true while alias class elsif if not return undef yield","title":"Ruby: 41 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#golang-25-words","text":"break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var","title":"Golang: 25 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#java-53-words","text":"abstract continue for new switch assert*** default goto* package synchronized boolean do if private this break double implements protected throw byte else import public throws case enum**** instanceof return transient catch extends int short try char final interface static void class finally long strictfp** volatile const* float native super while false true null * not used ** added in 1.2 *** added in 1.4 **** added in 5.0","title":"Java: 53 words"},{"location":"blog/2016/2016-11-28-prog-lang-reserved-words/#scala-50-words","text":"abstract case catch class def do else extends false final finally for forSome if implicit import lazy macro match new null object override package private protected return sealed super this throw trait try true type val var while with yield _ : = => <- <: <% >: # @ Scala \u2018s special symbols ( _ : = => <- <: <% >: # @ ) can be excluded and in this case Scala might have only 40 reserverd words.","title":"Scala : 50 words"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/","text":"Ruby and Rails: The Bad Parts by Volodymyr Melnyk | ruby | References Good Parts Bad Ruby isn\u2019t Static- typed Ruby has an unclear concept of Module Proc & Lambda Ruby Standard Library is a ghetto Abbrev Delegator Alternate syntax && versus and || versus or Values against expressions You should know! Boolean Algebra Fail Ruby is not that strongly-typed language. nil References These notes are compilled from: * https://speakerdeck.com/egoholic/ruby-and-rails-the-bad-parts Good Parts It has high abilities in meta-programming It\u2019s good for DSL It allows to write prototypes very fast It has a huge ecosystem with tons of gems and development tools Bad Ruby isn\u2019t Static- typed Ruby has no typed signatures. This means that you need to do all type checks manually. x = 5 y = \u201c string \" lambda = ->{ x + y } # you will not get an # error until execution # next code line: lambda.call Ruby has an unclear concept of Module In Ruby a module is a class which can\u2019t have instances and can be included into another class or another class can be extended with it. module InstanceMethods ; end module ClassMethods ; end class C include InstanceMethods extend ClassMethods end C . ancestors #=> [C, InstanceMethods, Object, Kernel, BasicObject] C . singleton_class . ancestors #=> [ # #<Class:C>, ClassMethods, #<Class:Object>, # <Class:BasicObject>, Class, Module, Object, Kernel, # BasicObject #] Proc & Lambda In Ruby we have a Proc class and two types of its instances (it\u2019s strange), but actually we need only one of them (as for me, I prefer lambdas). p1 = Proc . new { | a , b | a + b } p2 = Proc . new { | a , b | return a + b } l1 = -> ( a , b ) { a + b } l2 = -> ( a , b ) { return a + b } p1 . class # Proc l1 . class # Proc p1 . lambda? # false l1 . lambda? # true def mtd ( pobj , a , b = nil ) args = b ? [ a , b ] : [ a ] puts \"method code 1\" puts pobj . call * args puts \"method code 2\" end mtd p1 , 1 # method code 1 # TypeError: nil can't be coerced into Fixnum mtd p1 , 1 , 3 # method code 1 # 4 # method code 2 mtd p2 , 1 # method code 1 # TypeError: nil can't be coerced into Fixnum mtd p2 , 1 , 3 # method code 1 # LocalJumpError: unexpected return mtd l1 , 1 # method code 1 # ArgumentError: wrong number of arguments (1 for 2) mtd l1 , 1 , 3 # method code 1 # 4 # method code 2 mtd l2 , 1 # method code 1 # ArgumentError: wrong number of arguments (1 for 2) mtd l2 , 1 , 3 # method code 1 # 4 # method code 2 Ruby Standard Library is a ghetto Ruby Standard Library has a huge number of low-quality and useless libraries. Abbrev require 'abbrev' %w{ car cone } . abbrev #=> { \u201ccar\u201d => \"car\", \"ca\" => \"car\" , \"cone\" => \"cone\" , \"con\" => \"cone\" , \"co\" => \"cone\" } Delegator class SimpleDelegator < Delegator def initialize obj super @delegate_sd_obj = obj end def __getobj__ @delegate_sd_obj end def __setobj__ obj @delegate_sd_obj = obj end end Alternate syntax Ruby has a lot of alternate syntaxes for different things. Because of that Ruby code can look very differently. {...} vs do ... end ->() {...} , -> {} , lambda {|| } , lambda {} def mtd(a, b) , def mtd a, b 0..10 , 0...10 %w{} , %w[] , %w() , %w// , %w\"\" , %w|| , %w[] , %W[] , %i[] , %i[] // , %r// , %s[] '' , \"\" && versus and n = 1 && n + 1 # NoMethodError: undefined # method `+' for nil n = 1 #=> 1 n = 2 && n + 1 #=> 2 n = 2 && n + 1 #=> 3 n = 2 && n + 1 #=> 4 n = 2 && n + 1 #=> 5 n #=> 5 n = 1 and n + 1 #=> 2 n = 1 #=> 1 n = 2 and n + 1 #=> 3 n = 2 and n + 1 #=> 3 n = 2 and n + 1 #=> 3 n = 2 and n + 1 #=> 3 n #=> 2 || versus or n = 1 n = 1 n = nil || n + 2 #=> 3 n = nil or n + 2 # NoMethodError: undefined # method `+' for nil Values against expressions You should know! Boolean Algebra Fail If && and || are boolean operators, why their in/out arguments aren\u2019t booleans? true && \"string\" #=> \"string\" 1 || nil #=> 1 Ruby is not that strongly-typed language. Add more cases nil nil is more code checks special cases error handling more specs / tests more errors","title":"Ruby and Rails: The Bad Parts by Volodymyr Melnyk"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#ruby-and-rails-the-bad-parts-by-volodymyr-melnyk","text":"| ruby | References Good Parts Bad Ruby isn\u2019t Static- typed Ruby has an unclear concept of Module Proc & Lambda Ruby Standard Library is a ghetto Abbrev Delegator Alternate syntax && versus and || versus or Values against expressions You should know! Boolean Algebra Fail Ruby is not that strongly-typed language. nil","title":"Ruby and Rails: The Bad Parts by Volodymyr Melnyk"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#references","text":"These notes are compilled from: * https://speakerdeck.com/egoholic/ruby-and-rails-the-bad-parts","title":"References"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#good-parts","text":"It has high abilities in meta-programming It\u2019s good for DSL It allows to write prototypes very fast It has a huge ecosystem with tons of gems and development tools","title":"Good Parts"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#bad","text":"","title":"Bad"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#ruby-isnt-static-typed","text":"Ruby has no typed signatures. This means that you need to do all type checks manually. x = 5 y = \u201c string \" lambda = ->{ x + y } # you will not get an # error until execution # next code line: lambda.call","title":"Ruby isn\u2019t Static- typed"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#ruby-has-an-unclear-concept-of-module","text":"In Ruby a module is a class which can\u2019t have instances and can be included into another class or another class can be extended with it. module InstanceMethods ; end module ClassMethods ; end class C include InstanceMethods extend ClassMethods end C . ancestors #=> [C, InstanceMethods, Object, Kernel, BasicObject] C . singleton_class . ancestors #=> [ # #<Class:C>, ClassMethods, #<Class:Object>, # <Class:BasicObject>, Class, Module, Object, Kernel, # BasicObject #]","title":"Ruby has an unclear concept of Module"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#proc-lambda","text":"In Ruby we have a Proc class and two types of its instances (it\u2019s strange), but actually we need only one of them (as for me, I prefer lambdas). p1 = Proc . new { | a , b | a + b } p2 = Proc . new { | a , b | return a + b } l1 = -> ( a , b ) { a + b } l2 = -> ( a , b ) { return a + b } p1 . class # Proc l1 . class # Proc p1 . lambda? # false l1 . lambda? # true def mtd ( pobj , a , b = nil ) args = b ? [ a , b ] : [ a ] puts \"method code 1\" puts pobj . call * args puts \"method code 2\" end mtd p1 , 1 # method code 1 # TypeError: nil can't be coerced into Fixnum mtd p1 , 1 , 3 # method code 1 # 4 # method code 2 mtd p2 , 1 # method code 1 # TypeError: nil can't be coerced into Fixnum mtd p2 , 1 , 3 # method code 1 # LocalJumpError: unexpected return mtd l1 , 1 # method code 1 # ArgumentError: wrong number of arguments (1 for 2) mtd l1 , 1 , 3 # method code 1 # 4 # method code 2 mtd l2 , 1 # method code 1 # ArgumentError: wrong number of arguments (1 for 2) mtd l2 , 1 , 3 # method code 1 # 4 # method code 2","title":"Proc &amp; Lambda"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#ruby-standard-library-is-a-ghetto","text":"Ruby Standard Library has a huge number of low-quality and useless libraries.","title":"Ruby Standard Library is a ghetto"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#values-against-expressions-you-should-know","text":"","title":"Values against expressions You should know!"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#boolean-algebra-fail","text":"If && and || are boolean operators, why their in/out arguments aren\u2019t booleans? true && \"string\" #=> \"string\" 1 || nil #=> 1","title":"Boolean Algebra Fail"},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#ruby-is-not-that-strongly-typed-language","text":"Add more cases","title":"Ruby is not that strongly-typed language."},{"location":"blog/2016/2016-11-28-ruby-and-rails-the-bad-parts-by-volodymyr-melnyk/#nil","text":"nil is more code checks special cases error handling more specs / tests more errors","title":"nil"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/","text":"Ruby: The Bad Parts by Bozhidar Batsov | ruby | Reference The Problem :-) The Real Problem Problems with the Runtime Rubygems and Bundler The Rails Effect Stewardship Problem with the Language The useless stuff The bad stuff Reference These notes are compilled from: https://speakerdeck.com/bbatsov/ruby-the-bad-parts http://batsov.com http://batsov.com/articles/categories/style/ http://batsov.com/articles/2014/02/05/a-list-of-deprecated-stuff-in-ruby/ Ruby: The Bad Parts by Bozhidar Batsov Ruby 4.0: To Infinity and Beyond (Athens Ruby Meetup) by Bozhidar Batsov The Problem :-) Ruby is object-oriented Ruby is dynamically typed Ruby doesn\u2019t have immutable data structures Ruby doesn\u2019t have strong concurrency primitives Ruby doesn\u2019t have enough parentheses :-) Ruby is not Clojure! The Real Problem Problems with the Runtime Ruby is slow -> MRI is slow Ruby\u2019s threads suck -> MRI\u2019s threads suck Running Ruby on Windows is a pain in the ass -> Running MRI on Windows is a pain in the ass Ruby doesn\u2019t do JIT compilation -> MRI doesn\u2019t do JIT compilation The core library is not very approachable for Rubyists Language != Runtime Rubygems and Bundler bundle exec rake RubyGems 2.2 introduced support for Gemfile http://blog.rubygems.org/2013/12/26/2.2.0-released.html Major enhancements: - RubyGems can check for gem dependencies files (gem.deps.rb or Gemfile) when rubygems executables are started and uses the found dependencies. This means rake will work similar to bundle exec rake. To enable this set the RUBYGEMS_GEMDEPS environment variable to the location of your dependencies file. See Gem::use_gemdeps for further details. A RubyGems directory may now be shared amongst multiple ruby versions. Upon activation RubyGems will automatically compile missing extensions for the current platform when the built objects are missing. Issue #596 by Michal Papis By default different platforms do not share gem install locations so this must be configured by setting GEM_HOME to a common directory. Some gems use fixed paths for requiring extensions and are not compatible with sharing gem directories. The default sharing location may be configured by RubyGems packagers through Gem.default_ext_dir_for. Pull Request #744 by V\u00edt Ondruch. The Rails Effect Ruby (2005) :-O Ruby (2006) - OMG, Rails is amazing Ruby (2008) - OMG, Rails is amazing & useful! Ruby (today) - Wev Development 96% (Rails 90%, Other - 10%), Other - 4% Ruby 2.2.0 Released Ruby 2.2 includes many new features and improvements for the increasingly diverse and expanding demands for Ruby. For example, Ruby\u2019s Garbage Collector is now able to collect Symbol type objects. This reduces memory usage of Symbols; because GC was previously unable to collect them before 2.2. Since Rails 5.0 will require Symbol GC, it will support only Ruby 2.2 or later. (See Rails 4.2 release post for details.) Also, a reduced pause time thanks to the new Incremental Garbage Collector will be helpful for running Rails applications. Recent developments mentioned on the Rails blog suggest that Rails 5.0 will take advantage of Incremental GC as well as Symbol GC. We need to grow out of Rails\u2019s shadwo! Stewardship Matz - Benevolent dictators are still dictators No clear vision No standard Informal deprecation policy Limited collaboration with alternative implementations Where\u2019s the innovation? Problem with the Language The useless stuff for loops for name in names puts name end names . each do | name | puts name end BEGIN & END Kernel#at_exit, anyone? END { puts 'Bye!' } puts 'Processing...' BEGIN { puts 'Starting...' } puts 'Bye!' puts 'Starting...' puts 'Processing...' flip-flops https://bugs.ruby-lang.org/issues/5400 DATA . each_line do | line | print ( line ) if ( line =~ /begin/ ) .. ( line =~ /end/ ) end block comments Must be placed at the very beginning of a line =begin comment line another comment line =end class SomeClass =begin This is a top comment. Or is it? =end def some_method end end core lib aliases Where is filter ? collect => map inject => reduce detect => find select => find_all sprintf => format length => size raise => fail procs Proc.new or Kernel#proc No arity check Non-local return Do we really need them? So many languages are getting by just fine with only lambdas\u2026 Single-quoted string literals A ton of obscure %- something literals %s, %x, %w, %W, %r, %q, %Q, %, %i Two types of block syntax 3 . times { puts \"Hello!\" } 3 . times do puts \"Hello!\" end for i in 1 .. 3 puts \"Hello, Kiev!\" end 3 . times { puts \"Hello, Kiev!\" } 3 . times do puts \"Hello, Kiev!\" end 3 . times do puts %(Hello, Kiev!) end 3 . times do puts %Q(Hello, Kiev!) end 3 . times do puts 'Hello, Kiev!' end 3 . times do puts %q(Hello, Kiev!) end # 1 result = [] for name in names result << name . upcase end #2 result = [] names . each do | name | result << name . upcase end #3 names . collect { | name | name . upcase } #4 names . collect ( & :upcase ) #5 names . map ( & :upcase ) The bad stuff So many nil s floating around pry ( main ) > \"TOP\" . upcase => \"TOP\" pry ( main ) > \"TOP\" . upcase! => nil autoload (deprecated & scheduled for removal in 3.0) and , or , not Those are not flow of control operators! and & or have the same precedence Mutable strings Even JavaScript got this right\u2026 Reassignable constants pry ( main ) > A = 5 => 5 pry ( main ) > A = 6 ( pry ): 39 : warning : already initialized constant A ( pry ): 38 : warning : previous definition of A was here => 6 pry ( main ) > Class = 3 ( pry ): 40 : warning : already initialized constant Class => 3 pry ( main ) > Class => 3 Class variables Just forget about them\u2026 \u2026and use class instance variables instead class Parent @@class_var = 'parent' def self . print_class_var puts @@class_var end end class Child < Parent @@class_var = 'child' end Parent . print_class_var # => will print \"child\" Sets are not first-class citizens Poorly named methods Kernel#puts Kernel#println , anyone? Kernel#print defined? Is any of the values returned by defined? a boolean? Is this the right behaviour for a predicate method? [ 1 ] pry ( main ) > defined? 10 => \"expression\" [ 2 ] pry ( main ) > defined? Test => nil [ 3 ] pry ( main ) > defined? TrueClass => \"constant\" Enumerable#include? Enumerable#include s? Kernel#% '%d %d' % [20, 10] sprintf('%d %d', 20, 10) sprintf ( '%{first} %{second}' , first : 20 , second : 10 ) `format(\u2018%{first} %{second}\u2019, first: 20, second: 10) In what universe would you prefer this over Kernel#format ??? Perl-style global variables $: $LOAD_PATH $; $FIELD_SEPARATOR $* $ARGV JRuby defines the English aliases by default Let\u2019s pray MRI will follow suit soon Ruby 1.9 hash syntax { :one => 1 , :two => 2 } { :'one.1' => 1 , :'two.2' => 2 } { 'one' => 1 , 'two' => 2 } { 1 => 'one' , 2 => 'two' } { one : 1 , two : 2 } { 'one.1' : 1 , 'two.2' : 2 } { ala : :bala , porto : :kala , trala : :lala } Perl-style regexp interactions irb ( main ) > 'Bruce' =~ /B(.*)/ => 0 irb ( main ) > $~ => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > $1 => \"ruce\" irb ( main ) > Regexp . last_match => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > Regexp . last_match ( 0 ) => \"Bruce\" irb ( main ) > Regexp . last_match ( 1 ) => \"ruce\" irb ( main ) > 'Bruce' . match ( /B(.*)/ ) => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > 'Bruce' . match ( /B(.*)/ ) do | m | irb ( main ) > puts m [ 0 ] irb ( main ) > puts m [ 1 ] irb ( main ) > end Bruce ruce => nil The documentation is somewhat lacking irb ( main ) > 'x' !~ /x/ => false irb ( main ) > 'x' !~ /y/ => true The Ruby Stdlib is a Ghetto The Ruby Stdlib is a Ghetto Nov 22, 2010 Much of Ruby\u2019s standard library (the set of classes shipped with the Ruby VM itself) is old and crufty. For laughs, go look at the code for some of the classes that you\u2019ve never used. Chances are it\u2019s from 2000-2003 and doesn\u2019t even look like The canonical example is Ruby\u2019s net/http library. Its performance and API are just terrible. (Side note: how do you know if an API is terrible? If you have to consult the docs even after having used the API for the past 5 years.) But because it\u2019s in the standard library, most people use it as the base for higher-level API abstractions (e.g. httparty , rest-client ). So looking at Ruby\u2019s core RDoc, my suggested list for removal (where removal means move to a rubygem): Net::* DRb REXML RSS Rinda WEBrick XML A ton of legacy code (often last updated 2000-2003) Horrible APIs net/http anyone? Any others I missed? Will Ruby 1.9.3 or 2.0 get a good spring cleaning or will we have to live with these classes forever? Move the important bits to the Core Library Remove everything outdated/obscure Leverage modern Ruby feature in the Standard Library","title":"Ruby: The Bad Parts by Bozhidar Batsov"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#ruby-the-bad-parts-by-bozhidar-batsov","text":"| ruby | Reference The Problem :-) The Real Problem Problems with the Runtime Rubygems and Bundler The Rails Effect Stewardship Problem with the Language The useless stuff The bad stuff","title":"Ruby: The Bad Parts by Bozhidar Batsov"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#reference","text":"These notes are compilled from: https://speakerdeck.com/bbatsov/ruby-the-bad-parts http://batsov.com http://batsov.com/articles/categories/style/ http://batsov.com/articles/2014/02/05/a-list-of-deprecated-stuff-in-ruby/ Ruby: The Bad Parts by Bozhidar Batsov Ruby 4.0: To Infinity and Beyond (Athens Ruby Meetup) by Bozhidar Batsov","title":"Reference"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#the-problem-","text":"Ruby is object-oriented Ruby is dynamically typed Ruby doesn\u2019t have immutable data structures Ruby doesn\u2019t have strong concurrency primitives Ruby doesn\u2019t have enough parentheses :-) Ruby is not Clojure!","title":"The Problem :-)"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#the-real-problem","text":"","title":"The Real Problem"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#problems-with-the-runtime","text":"Ruby is slow -> MRI is slow Ruby\u2019s threads suck -> MRI\u2019s threads suck Running Ruby on Windows is a pain in the ass -> Running MRI on Windows is a pain in the ass Ruby doesn\u2019t do JIT compilation -> MRI doesn\u2019t do JIT compilation The core library is not very approachable for Rubyists Language != Runtime","title":"Problems with the Runtime"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#rubygems-and-bundler","text":"bundle exec rake RubyGems 2.2 introduced support for Gemfile http://blog.rubygems.org/2013/12/26/2.2.0-released.html Major enhancements: - RubyGems can check for gem dependencies files (gem.deps.rb or Gemfile) when rubygems executables are started and uses the found dependencies. This means rake will work similar to bundle exec rake. To enable this set the RUBYGEMS_GEMDEPS environment variable to the location of your dependencies file. See Gem::use_gemdeps for further details. A RubyGems directory may now be shared amongst multiple ruby versions. Upon activation RubyGems will automatically compile missing extensions for the current platform when the built objects are missing. Issue #596 by Michal Papis By default different platforms do not share gem install locations so this must be configured by setting GEM_HOME to a common directory. Some gems use fixed paths for requiring extensions and are not compatible with sharing gem directories. The default sharing location may be configured by RubyGems packagers through Gem.default_ext_dir_for. Pull Request #744 by V\u00edt Ondruch.","title":"Rubygems and Bundler"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#the-rails-effect","text":"Ruby (2005) :-O Ruby (2006) - OMG, Rails is amazing Ruby (2008) - OMG, Rails is amazing & useful! Ruby (today) - Wev Development 96% (Rails 90%, Other - 10%), Other - 4% Ruby 2.2.0 Released Ruby 2.2 includes many new features and improvements for the increasingly diverse and expanding demands for Ruby. For example, Ruby\u2019s Garbage Collector is now able to collect Symbol type objects. This reduces memory usage of Symbols; because GC was previously unable to collect them before 2.2. Since Rails 5.0 will require Symbol GC, it will support only Ruby 2.2 or later. (See Rails 4.2 release post for details.) Also, a reduced pause time thanks to the new Incremental Garbage Collector will be helpful for running Rails applications. Recent developments mentioned on the Rails blog suggest that Rails 5.0 will take advantage of Incremental GC as well as Symbol GC. We need to grow out of Rails\u2019s shadwo!","title":"The Rails Effect"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#stewardship","text":"Matz - Benevolent dictators are still dictators No clear vision No standard Informal deprecation policy Limited collaboration with alternative implementations Where\u2019s the innovation?","title":"Stewardship"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#problem-with-the-language","text":"","title":"Problem with the Language"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#the-useless-stuff","text":"for loops for name in names puts name end names . each do | name | puts name end BEGIN & END Kernel#at_exit, anyone? END { puts 'Bye!' } puts 'Processing...' BEGIN { puts 'Starting...' } puts 'Bye!' puts 'Starting...' puts 'Processing...' flip-flops https://bugs.ruby-lang.org/issues/5400 DATA . each_line do | line | print ( line ) if ( line =~ /begin/ ) .. ( line =~ /end/ ) end block comments Must be placed at the very beginning of a line =begin comment line another comment line =end class SomeClass =begin This is a top comment. Or is it? =end def some_method end end core lib aliases Where is filter ? collect => map inject => reduce detect => find select => find_all sprintf => format length => size raise => fail procs Proc.new or Kernel#proc No arity check Non-local return Do we really need them? So many languages are getting by just fine with only lambdas\u2026 Single-quoted string literals A ton of obscure %- something literals %s, %x, %w, %W, %r, %q, %Q, %, %i Two types of block syntax 3 . times { puts \"Hello!\" } 3 . times do puts \"Hello!\" end for i in 1 .. 3 puts \"Hello, Kiev!\" end 3 . times { puts \"Hello, Kiev!\" } 3 . times do puts \"Hello, Kiev!\" end 3 . times do puts %(Hello, Kiev!) end 3 . times do puts %Q(Hello, Kiev!) end 3 . times do puts 'Hello, Kiev!' end 3 . times do puts %q(Hello, Kiev!) end # 1 result = [] for name in names result << name . upcase end #2 result = [] names . each do | name | result << name . upcase end #3 names . collect { | name | name . upcase } #4 names . collect ( & :upcase ) #5 names . map ( & :upcase )","title":"The useless stuff"},{"location":"blog/2016/2016-11-29-the-bad-parts-by-bozhidar-batsov/#the-bad-stuff","text":"So many nil s floating around pry ( main ) > \"TOP\" . upcase => \"TOP\" pry ( main ) > \"TOP\" . upcase! => nil autoload (deprecated & scheduled for removal in 3.0) and , or , not Those are not flow of control operators! and & or have the same precedence Mutable strings Even JavaScript got this right\u2026 Reassignable constants pry ( main ) > A = 5 => 5 pry ( main ) > A = 6 ( pry ): 39 : warning : already initialized constant A ( pry ): 38 : warning : previous definition of A was here => 6 pry ( main ) > Class = 3 ( pry ): 40 : warning : already initialized constant Class => 3 pry ( main ) > Class => 3 Class variables Just forget about them\u2026 \u2026and use class instance variables instead class Parent @@class_var = 'parent' def self . print_class_var puts @@class_var end end class Child < Parent @@class_var = 'child' end Parent . print_class_var # => will print \"child\" Sets are not first-class citizens Poorly named methods Kernel#puts Kernel#println , anyone? Kernel#print defined? Is any of the values returned by defined? a boolean? Is this the right behaviour for a predicate method? [ 1 ] pry ( main ) > defined? 10 => \"expression\" [ 2 ] pry ( main ) > defined? Test => nil [ 3 ] pry ( main ) > defined? TrueClass => \"constant\" Enumerable#include? Enumerable#include s? Kernel#% '%d %d' % [20, 10] sprintf('%d %d', 20, 10) sprintf ( '%{first} %{second}' , first : 20 , second : 10 ) `format(\u2018%{first} %{second}\u2019, first: 20, second: 10) In what universe would you prefer this over Kernel#format ??? Perl-style global variables $: $LOAD_PATH $; $FIELD_SEPARATOR $* $ARGV JRuby defines the English aliases by default Let\u2019s pray MRI will follow suit soon Ruby 1.9 hash syntax { :one => 1 , :two => 2 } { :'one.1' => 1 , :'two.2' => 2 } { 'one' => 1 , 'two' => 2 } { 1 => 'one' , 2 => 'two' } { one : 1 , two : 2 } { 'one.1' : 1 , 'two.2' : 2 } { ala : :bala , porto : :kala , trala : :lala } Perl-style regexp interactions irb ( main ) > 'Bruce' =~ /B(.*)/ => 0 irb ( main ) > $~ => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > $1 => \"ruce\" irb ( main ) > Regexp . last_match => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > Regexp . last_match ( 0 ) => \"Bruce\" irb ( main ) > Regexp . last_match ( 1 ) => \"ruce\" irb ( main ) > 'Bruce' . match ( /B(.*)/ ) => #<MatchData \"Bruce\" 1:\"ruce\"> irb ( main ) > 'Bruce' . match ( /B(.*)/ ) do | m | irb ( main ) > puts m [ 0 ] irb ( main ) > puts m [ 1 ] irb ( main ) > end Bruce ruce => nil The documentation is somewhat lacking irb ( main ) > 'x' !~ /x/ => false irb ( main ) > 'x' !~ /y/ => true The Ruby Stdlib is a Ghetto The Ruby Stdlib is a Ghetto Nov 22, 2010 Much of Ruby\u2019s standard library (the set of classes shipped with the Ruby VM itself) is old and crufty. For laughs, go look at the code for some of the classes that you\u2019ve never used. Chances are it\u2019s from 2000-2003 and doesn\u2019t even look like The canonical example is Ruby\u2019s net/http library. Its performance and API are just terrible. (Side note: how do you know if an API is terrible? If you have to consult the docs even after having used the API for the past 5 years.) But because it\u2019s in the standard library, most people use it as the base for higher-level API abstractions (e.g. httparty , rest-client ). So looking at Ruby\u2019s core RDoc, my suggested list for removal (where removal means move to a rubygem): Net::* DRb REXML RSS Rinda WEBrick XML A ton of legacy code (often last updated 2000-2003) Horrible APIs net/http anyone? Any others I missed? Will Ruby 1.9.3 or 2.0 get a good spring cleaning or will we have to live with these classes forever? Move the important bits to the Core Library Remove everything outdated/obscure Leverage modern Ruby feature in the Standard Library","title":"The bad stuff"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/","text":"Python vs. Ruby: A Battle to The Death by Gary Bernhardt | ruby | python | vs | comparison | Ruby Experience I. Ruby Complaints The Zen of Python (PEP-20) 8. Special cases aren\u2019t special enough to break the rules 13. There should be one\u2013 and preferably only one \u2013obvious way to do it 16. Although never is often better than right now 17. If the implementation is hard to explain, it\u2019s a bad idea Ruby Grammar Python Grammar 19. Namespaces are one honking great idea \u2013 let\u2019s do more of those! II. Ruby Praise Composability RSpec Python Mote (spec runner) WARNING! Extreme Opinions Ahead! Cucumber References Ruby Experience end for block () are optional method name can be ended in ! or ? I. Ruby Complaints The Zen of Python ( PEP-20 ) Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren\u2019t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one\u2013 and preferably only one \u2013obvious way to do it. Although that way may not be obvious at first unless you\u2019re Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it\u2019s a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea \u2013 let\u2019s do more of those! 8. Special cases aren\u2019t special enough to break the rules Very strange behavior >> x = Proc . new { 5 } >> x () NoMethodError : undefined method `x' for main:Object >> x.call 5 >> x[] 5 13. There should be one\u2013 and preferably only one \u2013obvious way to do it Yukihiro Matsumoto : Ruby inherited the Perl philosophy of having more than one way to do the same thing. I inherited that philosophy from Larry Wall, who is my hero actually. I want to make Ruby users free. I want to give them the freedom to choose. People are different. People choose different criteria. But if there is a better way among many alternatives, I want to encourage that way by making it comfortable. So that\u2019s what I\u2019ve tried to do. Maybe Python code is a bit more readable. Everyone can write the same style of Python code, so it can be easier to read, maybe. But the difference from one person to the next is so big, providing only one way is little help even if you\u2019re using Python, I think. I\u2019d rather provide many ways if it\u2019s possible, but encourage or guide users to choose a better way if it\u2019s possible. - Reference: The Philosophy of Ruby.A Conversation with Yukihiro Matsumoto, Part I by Bill Venners. September 29, 2003 16. Although never is often better than right now ~~Then Ruby v.1.8.6~~ >> [ 'a' , 'b' ]. map ( & :upcase ) TypeError : wrong argument type Symbol ( expected Proc ) form ( irb ): 4 >> require 'activerecord' => true >> [ 'a' , 'b' ]. map ( & :upcase ) => [ \"A\" , \"B\" ] Ruby 1.8.6: No &:foo Ruby 1.8.7: &:foo syntax added Now >> [ 'a' , 'b' ]. map ( & :upcase ) => [ \"A\" , \"B\" ] 17. If the implementation is hard to explain, it\u2019s a bad idea Python grammar dependency graph. Generated from this Python 2.3.3 grammar from antlr.org. Ruby 1.8.4 grammar dependency graph Visualization of Ruby\u2019s Grammar Ruby Grammar Python Grammar 19. Namespaces are one honking great idea \u2013 let\u2019s do more of those! >> require 'activerecord' >> ActiveSupport => ActiveSupport II. Ruby Praise Good part Composability Python lacks this feature ' \\n ' . join ( obj . name for obj in ( repository . retrieve ( id ) for id in ids ) ) ids . map do | id | repository . retrieve ( id ) end . compact . map do | obj | obj . name end . join ( ' \\n ' ) Python has comprehensions and sum Ruby has the full Lisp chainsaw RSpec # game_spec.rb describe Game do describe \"#score\" do it \"returns 0 for an all gutter game\" do game = Game . new 20 . times { game . roll ( 0 ) } expect ( game . score ) . to eq ( 0 ) end end end lambda do MyClass . add ( 2 , 'foo' ) end . should raise_error ( TypeError ) matz . should have_item ( chain_show ) Python Mote (spec runner) from __future__ import with_statement from expecter import expect def describe_integer (): def describe_when_adding_one_and_one (): x = 1 + 1 def should_get_two (): assert x == 2 def raises_error_when_dividing_by_zero (): with expect . raises ( ZeroDivisionError ): 1 / 0 # Output: # # integer # integer when adding one and one # - should get two # - raises error when dividing by zero # OK WARNING! Extreme Opinions Ahead! At the beginning : Ruby is ugly; Python is beautifyl. Then : Nose is ugle; RSpec is beautiful. Cucumber # features/step_definitions/coffee_steps.rb Given /there are (\\d+) coffees left in the machine/ do | n | @machine = Machine . new ( n . to_i ) end # features/step_definitions/coffee_steps.rb Then \"I should be served coffee\" do @machine . dispensed_drink . should == \"coffee\" end References Vimeo: Python vs. Ruby: A Battle to The Death This talk was given at Northwest Python Day 2010. The companion blog post is at blog.extracheese.org/2010/02/python-vs-ruby-a-battle-to-the-death.html Blog post: Python vs. Ruby: A Battle to The Death","title":"Python vs. Ruby: A Battle to The Death by Gary Bernhardt"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#python-vs-ruby-a-battle-to-the-death-by-gary-bernhardt","text":"| ruby | python | vs | comparison | Ruby Experience I. Ruby Complaints The Zen of Python (PEP-20) 8. Special cases aren\u2019t special enough to break the rules 13. There should be one\u2013 and preferably only one \u2013obvious way to do it 16. Although never is often better than right now 17. If the implementation is hard to explain, it\u2019s a bad idea Ruby Grammar Python Grammar 19. Namespaces are one honking great idea \u2013 let\u2019s do more of those! II. Ruby Praise Composability RSpec Python Mote (spec runner) WARNING! Extreme Opinions Ahead! Cucumber References","title":"Python vs. Ruby: A Battle to The Death by Gary Bernhardt"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#ruby-experience","text":"end for block () are optional method name can be ended in ! or ?","title":"Ruby Experience"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#i-ruby-complaints","text":"","title":"I. Ruby Complaints"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#the-zen-of-python-pep-20","text":"Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren\u2019t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one\u2013 and preferably only one \u2013obvious way to do it. Although that way may not be obvious at first unless you\u2019re Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it\u2019s a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea \u2013 let\u2019s do more of those!","title":"The Zen of Python (PEP-20)"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#ii-ruby-praise","text":"Good part","title":"II. Ruby Praise"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#composability","text":"Python lacks this feature ' \\n ' . join ( obj . name for obj in ( repository . retrieve ( id ) for id in ids ) ) ids . map do | id | repository . retrieve ( id ) end . compact . map do | obj | obj . name end . join ( ' \\n ' ) Python has comprehensions and sum Ruby has the full Lisp chainsaw","title":"Composability"},{"location":"blog/2016/2016-11-30-python-vs-ruby-battle-to-the-death-by-gary-bernhardt/#references","text":"Vimeo: Python vs. Ruby: A Battle to The Death This talk was given at Northwest Python Day 2010. The companion blog post is at blog.extracheese.org/2010/02/python-vs-ruby-a-battle-to-the-death.html Blog post: Python vs. Ruby: A Battle to The Death","title":"References"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/","text":"Scala for Python Developers by Kevin Stanton | scala | python | vs | comparison | Reference 1. Classes 2. Dictionaries and Maps 3. IO and Files 4. For Comprehensions 5. Function literals 6. Functions one-liner 7. Functions 8. Java interop 9. Lists 9.1. Overview 9.2. Concatenating lists 9.3. Sorting a list 10. Looping range and notes on operators 10.1. Loop over range of numbers 10.2. Operators 11. Sets 12. Tuples Reference Github - stantonk/scala-for-python-developers 1. Classes Python class Dog ( object ): def __init__ ( self , name ): print 'This line runs upon instantiation' self . name = name def speak ( self ): print ' %s : Bark!' % self . name def command ( self , cmd ): print ' %s :: %s ::' % ( self . name , cmd ) dog = Dog ( 'Rover' ) dog . speak () dog . command ( 'sit' ) Scala class Dog ( name : String ) { /* The body of the class can contain code for the primary constructor, instead of an explicitly defined constructor method like in Java or Python. Also, note that the parameters for the constructor are in the class definition portion at the top. Scala automatically places them in fields named after the parameter name. Less boilerplate! */ println ( \"This line runs upon instantiation\" ) /* Notice how there is no equals sign on the speak method, that's because it doesn't return anything. Technically, it returns Unit, which is like Java's void and Python's None. */ def speak () { println ( this . name + \": Bark!\" ) } def command ( cmd : String ) = { println ( name + \" ::\" + cmd + \"::\" ) } } val dog = new Dog ( \"Rover\" ) // This line runs upon instantiation of a Dog, it is the primary constructor // dog: Dog = Dog@11727596 dog . speak () // Rover: Bark! dog . command ( \"sit\" ) // Rover ::sit:: 2. Dictionaries and Maps Python >>> x = { \"dog\" : \"Woof\" , \"cat\" : \"Meow\" } >>> for k , v in x . items (): ... print \" %s = %s \" % ( k , v ) ... dog = Woof cat = Meow >>> print \"the dog says \" + x [ \"dog\" ] + \" and the cat says \" + x [ \"cat\" ] the dog says Woof and the cat says Meow >>> print x . get ( \"duck\" , \"quack\" ) quack >>> x [ 'fox' ] = '??????' >>> print \"what does the fox say: \" + x [ 'fox' ] what does the fox say : ?????? Scala var x = Map ( \"dog\" -> \"Woof\" , \"cat\" -> \"Meow\" ) for (( k , v ) <- x ) printf ( \"%s=%s\\n\" , k , v ) // dog=Woof // cat=Meow println ( \"the dog says \" + x ( \"dog\" ) + \" and the cat says \" + x ( \"cat\" )) // like lists, note parens..not brackets // the dog says Woof and the cat says Meow println ( x . getOrElse ( \"duck\" , \"quack\" )) // quack x += ( \"fox\" -> \"??????\" ) println ( \"what does the fox say: \" + x ( \"fox\" )) // what does the fox say: ?????? 3. IO and Files Python import sys if len ( sys . argv ) > 0 : for line in open ( sys . argv [ 1 ]): print line . rstrip ( ' \\r\\n ' ) # scala.io.Source removes line terminators else : sys . stderr . write ( 'Please enter filename' ) Scala import scala . io . Source if ( args . length > 0 ) { for ( line <- Source . fromFile ( args ( 0 )). getLines ) println ( line ) } else { Console . err . println ( \"Please enter filename\" ) } 4. For Comprehensions Python Python l = [ 1 , 2 , 3 , 4 , 5 , 6 ] evens = [ n for n in l if n % 2 == 0 ] Scala val l = List ( 1 , 2 , 3 , 4 , 5 , 6 ) val evens = for ( n <- l if n % 2 == 0 ) yield n 5. Function literals Python # Python does not have a function literal syntax per se, but functions are first # class objects and you can treat them in similar ways in Scala. greeting = lambda name : \"Hello \" + name print greeting ( \"world\" ) def greet ( name ): return \"Hello \" + name greeting = greet print greeting ( \"world\" ) Scala var greeting = ( name : String ) => \"Hello \" + name println ( greeting ( \"world\" )) def greet ( name : String ) = \"Hello \" + name greeting = greet println ( greeting ( \"world\" )) 6. Functions one-liner Python def max2 ( x , y ): return x if x > y else y >>> max2 ( 17 , 19 ) 19 >>> max2 ( 19 , 17 ) 19 Scala // scala, function definition (brief) def max2 ( x : Int , y : Int ) = if ( x > y ) x else y max2 ( 17 , 19 ) // res2: Int = 19 max2 ( 19 , 17 ) // res3: Int = 19 7. Functions Python def max ( x , y ): if x > y : return x else : return y Scala def max ( x : Int , y : Int ): Int = { if ( x > y ) x else y } /* Note that type information is present in the function definition. Scala is a statically-typed language. But it's type system is advanced, and usually it can infer the type. So you can leave some type information off for improved readability. */ def max ( x : Int , y : Int ) = { if ( x > y ) x else y } /* Seen in the second form, Scala can usually infer the return type. So you can leave it off. In some cases it can't infer the return type, i.e. recursion. Also, note how there is no explicit return statement in the functions. In Scala, the last statement executed in the body of a function becomes the return value. */ def max ( x : Int , y : Int ): Int = { if ( x > y ) return x else return y } /* You can use return statements, but if you do, Scala's compiler cannot infer the return type so you must specify it. http://stackoverflow.com/questions/2209179/type-inference-on-method-return-type */ 8. Java interop Python This isn\u2019t for Python programmers, but it is pretty cool to see how seamlessly Java code can be used in Scala. The entire world of existing Java libraries can be leveraged. Scala import java . io .{ FileReader , BufferedReader , IOException } if ( args . length > 0 ) { try { val reader = new BufferedReader ( new FileReader ( args ( 0 ))) var done = false while ( ! done ) { val line = reader . readLine if ( line == null ) done = true else println ( line ) } } catch { case ioe : IOException => println ( \"ERROR: IOException\" ) } } else { println ( \"ERROR: no file specified\" ) } 9. Lists 9.1. Overview Python l = [ \"one\" , \"two\" , \"three\" ] print l [ 0 ] for a in l : print a */ Scala val l = List ( \"one\" , \"two\" , \"three\" ) println ( l ( 0 )) for ( a <- l ) println ( a ) Note how the list is indexed with parens, not square brackets. This is because you\u2019re actually making a method call. println(l(0)) <\u2013 outputs \u201cone\u201d println(l.apply(0)) <\u2013 outputs \u201cone\u201d 9.2. Concatenating lists Python list1 = [ 1 , 2 ] list2 = [ 3 , 4 ] biglist = list1 + list2 Scala // scala concatenating lists val list1 = List ( 1 , 2 ) val list2 = List ( 3 , 4 ) val biglist = list1 ::: list2 Note: In Scala, Lists are immutable. Python\u2019s lists, however, are mutable. Arrays, on the other hand, are mutable. scala, prepend an element (using the \u201ccons\u201d operator, ::) to an existing list will generate a new list: val list3 = List ( 2 , 3 ) val newlist = 1 :: list3 In python , you would do this using concatenation and a temporary list of length 1: list1 = [ 2 , 3 ] newlist = [ 1 ] + list1 Or you could prepend the 1 to the existing list at the front, but this would be inefficient: list1 . insert ( 0 , 1 ) 9.3. Sorting a list Python alist = [ 7 , 2 , 18 , 3 , 6 ] sorted ( alist ) # returns a new list, sorted alist . sort () # sorts the list in place Scala val alist = List ( 7 , 2 , 18 , 3 , 6 ) println ( alist . sorted ) 10. Looping range and notes on operators 10.1. Loop over range of numbers Python for i in range ( 0 , 5 ): print i Note, last number printed is 4. Scala // Scala is inclusive over the range, last number printed is 5 for ( i <- 0 to 5 ) println ( i ) // interesting to note, this code is equivalent: for ( i <- 0 . to ( 5 )) println ( i ) // because \"to\" is actually not an operator, but a method on Int, see: 0 . to ( 5 ) // res16: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5) 0 to 5 // res17: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5) 10.2. Operators This may seem somewhat odd, but it actually is similar (at least to my non-expert eye) to how operators are implemented in languages like Python and PHP, e.g. Python >>> x = 5 >>> x . __add__ < method - wrapper '__add__' of int object at 0x7fc339c10788 > >>> x . __add__ ( 2 ) 7 >>> x + 2 7 Scala val x = 5 // x: Int = 5 x . + ( 2 ) // res20: Int = 7 x + 2 // res21: Int = 7 11. Sets Python >>> basket1 = set ([ \"apple\" , \"pear\" ]) >>> basket1 . add ( \"strawberry\" ) >>> basket2 = set ([ \"grape\" , \"apple\" , \"starfruit\" ]) >>> print \"common to both: %s \" % ( basket1 & basket2 ) common to both : set ([ 'apple' ]) >>> print \"in either basket: %s \" % ( basket1 | basket2 ) in either basket : set ([ 'strawberry' , 'grape' , 'apple' , 'pear' , 'starfruit' ]) Scala var basket1 = Set ( \"apple\" , \"pear\" ) // basket1: scala.collection.immutable.Set[String] = Set(apple, pear) basket1 += \"strawberry\" var basket2 = Set ( \"grape\" , \"apple\" , \"starfruit\" ) // basket2: scala.collection.immutable.Set[String] = Set(grape, apple, starfruit) println ( \"common to both: \" + ( basket1 & basket2 )) // common to both: Set(apple) println ( \"in either basket: \" + ( basket1 | basket2 )) // in either basket: Set(grape, apple, pear, strawberry, starfruit) // If you needed a mutable set: import scala . collection . mutable val mutableSet = mutable . Set ( \"a\" , \"b\" ) mutableSet += \"c\" // or maybe an immutable HashSet? import scala . collection . immutable . HashSet var hashSet = HashSet ( 1 , 2 , 3 ) 12. Tuples Python >>> pair = ( 1 , \"foo\" ) >>> print pair [ 0 ] 1 >>> print pair [ 1 ] foo Scala val pair = ( 1 , \"foo\" ) // pair: (Int, String) = (1,foo) println ( pair . _1 ) // 1 println ( pair . _2 ) // foo Scala has tuples too (yay, no JavaBean silliness for returning multiple values of varied types!) Both Scala and Python tuples are immutable, but Scala\u2019s are type safe, hence the strange accessing mechanism (pair._1 vs. pair[0]). Scala actually defines multiple tuple types, up to Tuple22, to achieve this.","title":"Scala for Python Developers by _Kevin Stanton_"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#scala-for-python-developers-by-kevin-stanton","text":"| scala | python | vs | comparison | Reference 1. Classes 2. Dictionaries and Maps 3. IO and Files 4. For Comprehensions 5. Function literals 6. Functions one-liner 7. Functions 8. Java interop 9. Lists 9.1. Overview 9.2. Concatenating lists 9.3. Sorting a list 10. Looping range and notes on operators 10.1. Loop over range of numbers 10.2. Operators 11. Sets 12. Tuples","title":"Scala for Python Developers by Kevin Stanton"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#reference","text":"Github - stantonk/scala-for-python-developers","title":"Reference"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#1-classes","text":"Python class Dog ( object ): def __init__ ( self , name ): print 'This line runs upon instantiation' self . name = name def speak ( self ): print ' %s : Bark!' % self . name def command ( self , cmd ): print ' %s :: %s ::' % ( self . name , cmd ) dog = Dog ( 'Rover' ) dog . speak () dog . command ( 'sit' ) Scala class Dog ( name : String ) { /* The body of the class can contain code for the primary constructor, instead of an explicitly defined constructor method like in Java or Python. Also, note that the parameters for the constructor are in the class definition portion at the top. Scala automatically places them in fields named after the parameter name. Less boilerplate! */ println ( \"This line runs upon instantiation\" ) /* Notice how there is no equals sign on the speak method, that's because it doesn't return anything. Technically, it returns Unit, which is like Java's void and Python's None. */ def speak () { println ( this . name + \": Bark!\" ) } def command ( cmd : String ) = { println ( name + \" ::\" + cmd + \"::\" ) } } val dog = new Dog ( \"Rover\" ) // This line runs upon instantiation of a Dog, it is the primary constructor // dog: Dog = Dog@11727596 dog . speak () // Rover: Bark! dog . command ( \"sit\" ) // Rover ::sit::","title":"1. Classes"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#2-dictionaries-and-maps","text":"Python >>> x = { \"dog\" : \"Woof\" , \"cat\" : \"Meow\" } >>> for k , v in x . items (): ... print \" %s = %s \" % ( k , v ) ... dog = Woof cat = Meow >>> print \"the dog says \" + x [ \"dog\" ] + \" and the cat says \" + x [ \"cat\" ] the dog says Woof and the cat says Meow >>> print x . get ( \"duck\" , \"quack\" ) quack >>> x [ 'fox' ] = '??????' >>> print \"what does the fox say: \" + x [ 'fox' ] what does the fox say : ?????? Scala var x = Map ( \"dog\" -> \"Woof\" , \"cat\" -> \"Meow\" ) for (( k , v ) <- x ) printf ( \"%s=%s\\n\" , k , v ) // dog=Woof // cat=Meow println ( \"the dog says \" + x ( \"dog\" ) + \" and the cat says \" + x ( \"cat\" )) // like lists, note parens..not brackets // the dog says Woof and the cat says Meow println ( x . getOrElse ( \"duck\" , \"quack\" )) // quack x += ( \"fox\" -> \"??????\" ) println ( \"what does the fox say: \" + x ( \"fox\" )) // what does the fox say: ??????","title":"2. Dictionaries and Maps"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#3-io-and-files","text":"Python import sys if len ( sys . argv ) > 0 : for line in open ( sys . argv [ 1 ]): print line . rstrip ( ' \\r\\n ' ) # scala.io.Source removes line terminators else : sys . stderr . write ( 'Please enter filename' ) Scala import scala . io . Source if ( args . length > 0 ) { for ( line <- Source . fromFile ( args ( 0 )). getLines ) println ( line ) } else { Console . err . println ( \"Please enter filename\" ) }","title":"3. IO and Files"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#4-for-comprehensions","text":"Python Python l = [ 1 , 2 , 3 , 4 , 5 , 6 ] evens = [ n for n in l if n % 2 == 0 ] Scala val l = List ( 1 , 2 , 3 , 4 , 5 , 6 ) val evens = for ( n <- l if n % 2 == 0 ) yield n","title":"4. For Comprehensions"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#5-function-literals","text":"Python # Python does not have a function literal syntax per se, but functions are first # class objects and you can treat them in similar ways in Scala. greeting = lambda name : \"Hello \" + name print greeting ( \"world\" ) def greet ( name ): return \"Hello \" + name greeting = greet print greeting ( \"world\" ) Scala var greeting = ( name : String ) => \"Hello \" + name println ( greeting ( \"world\" )) def greet ( name : String ) = \"Hello \" + name greeting = greet println ( greeting ( \"world\" ))","title":"5. Function literals"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#6-functions-one-liner","text":"Python def max2 ( x , y ): return x if x > y else y >>> max2 ( 17 , 19 ) 19 >>> max2 ( 19 , 17 ) 19 Scala // scala, function definition (brief) def max2 ( x : Int , y : Int ) = if ( x > y ) x else y max2 ( 17 , 19 ) // res2: Int = 19 max2 ( 19 , 17 ) // res3: Int = 19","title":"6. Functions one-liner"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#7-functions","text":"Python def max ( x , y ): if x > y : return x else : return y Scala def max ( x : Int , y : Int ): Int = { if ( x > y ) x else y } /* Note that type information is present in the function definition. Scala is a statically-typed language. But it's type system is advanced, and usually it can infer the type. So you can leave some type information off for improved readability. */ def max ( x : Int , y : Int ) = { if ( x > y ) x else y } /* Seen in the second form, Scala can usually infer the return type. So you can leave it off. In some cases it can't infer the return type, i.e. recursion. Also, note how there is no explicit return statement in the functions. In Scala, the last statement executed in the body of a function becomes the return value. */ def max ( x : Int , y : Int ): Int = { if ( x > y ) return x else return y } /* You can use return statements, but if you do, Scala's compiler cannot infer the return type so you must specify it. http://stackoverflow.com/questions/2209179/type-inference-on-method-return-type */","title":"7. Functions"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#8-java-interop","text":"Python This isn\u2019t for Python programmers, but it is pretty cool to see how seamlessly Java code can be used in Scala. The entire world of existing Java libraries can be leveraged. Scala import java . io .{ FileReader , BufferedReader , IOException } if ( args . length > 0 ) { try { val reader = new BufferedReader ( new FileReader ( args ( 0 ))) var done = false while ( ! done ) { val line = reader . readLine if ( line == null ) done = true else println ( line ) } } catch { case ioe : IOException => println ( \"ERROR: IOException\" ) } } else { println ( \"ERROR: no file specified\" ) }","title":"8. Java interop"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#9-lists","text":"","title":"9. Lists"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#91-overview","text":"Python l = [ \"one\" , \"two\" , \"three\" ] print l [ 0 ] for a in l : print a */ Scala val l = List ( \"one\" , \"two\" , \"three\" ) println ( l ( 0 )) for ( a <- l ) println ( a ) Note how the list is indexed with parens, not square brackets. This is because you\u2019re actually making a method call. println(l(0)) <\u2013 outputs \u201cone\u201d println(l.apply(0)) <\u2013 outputs \u201cone\u201d","title":"9.1. Overview"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#92-concatenating-lists","text":"Python list1 = [ 1 , 2 ] list2 = [ 3 , 4 ] biglist = list1 + list2 Scala // scala concatenating lists val list1 = List ( 1 , 2 ) val list2 = List ( 3 , 4 ) val biglist = list1 ::: list2 Note: In Scala, Lists are immutable. Python\u2019s lists, however, are mutable. Arrays, on the other hand, are mutable. scala, prepend an element (using the \u201ccons\u201d operator, ::) to an existing list will generate a new list: val list3 = List ( 2 , 3 ) val newlist = 1 :: list3 In python , you would do this using concatenation and a temporary list of length 1: list1 = [ 2 , 3 ] newlist = [ 1 ] + list1 Or you could prepend the 1 to the existing list at the front, but this would be inefficient: list1 . insert ( 0 , 1 )","title":"9.2. Concatenating lists"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#93-sorting-a-list","text":"Python alist = [ 7 , 2 , 18 , 3 , 6 ] sorted ( alist ) # returns a new list, sorted alist . sort () # sorts the list in place Scala val alist = List ( 7 , 2 , 18 , 3 , 6 ) println ( alist . sorted )","title":"9.3. Sorting a list"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#10-looping-range-and-notes-on-operators","text":"","title":"10. Looping range and notes on operators"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#101-loop-over-range-of-numbers","text":"Python for i in range ( 0 , 5 ): print i Note, last number printed is 4. Scala // Scala is inclusive over the range, last number printed is 5 for ( i <- 0 to 5 ) println ( i ) // interesting to note, this code is equivalent: for ( i <- 0 . to ( 5 )) println ( i ) // because \"to\" is actually not an operator, but a method on Int, see: 0 . to ( 5 ) // res16: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5) 0 to 5 // res17: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5)","title":"10.1. Loop over range of numbers"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#102-operators","text":"This may seem somewhat odd, but it actually is similar (at least to my non-expert eye) to how operators are implemented in languages like Python and PHP, e.g. Python >>> x = 5 >>> x . __add__ < method - wrapper '__add__' of int object at 0x7fc339c10788 > >>> x . __add__ ( 2 ) 7 >>> x + 2 7 Scala val x = 5 // x: Int = 5 x . + ( 2 ) // res20: Int = 7 x + 2 // res21: Int = 7","title":"10.2. Operators"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#11-sets","text":"Python >>> basket1 = set ([ \"apple\" , \"pear\" ]) >>> basket1 . add ( \"strawberry\" ) >>> basket2 = set ([ \"grape\" , \"apple\" , \"starfruit\" ]) >>> print \"common to both: %s \" % ( basket1 & basket2 ) common to both : set ([ 'apple' ]) >>> print \"in either basket: %s \" % ( basket1 | basket2 ) in either basket : set ([ 'strawberry' , 'grape' , 'apple' , 'pear' , 'starfruit' ]) Scala var basket1 = Set ( \"apple\" , \"pear\" ) // basket1: scala.collection.immutable.Set[String] = Set(apple, pear) basket1 += \"strawberry\" var basket2 = Set ( \"grape\" , \"apple\" , \"starfruit\" ) // basket2: scala.collection.immutable.Set[String] = Set(grape, apple, starfruit) println ( \"common to both: \" + ( basket1 & basket2 )) // common to both: Set(apple) println ( \"in either basket: \" + ( basket1 | basket2 )) // in either basket: Set(grape, apple, pear, strawberry, starfruit) // If you needed a mutable set: import scala . collection . mutable val mutableSet = mutable . Set ( \"a\" , \"b\" ) mutableSet += \"c\" // or maybe an immutable HashSet? import scala . collection . immutable . HashSet var hashSet = HashSet ( 1 , 2 , 3 )","title":"11. Sets"},{"location":"blog/2016/2016-12-01-scala-for-python-developers/#12-tuples","text":"Python >>> pair = ( 1 , \"foo\" ) >>> print pair [ 0 ] 1 >>> print pair [ 1 ] foo Scala val pair = ( 1 , \"foo\" ) // pair: (Int, String) = (1,foo) println ( pair . _1 ) // 1 println ( pair . _2 ) // foo Scala has tuples too (yay, no JavaBean silliness for returning multiple values of varied types!) Both Scala and Python tuples are immutable, but Scala\u2019s are type safe, hence the strange accessing mechanism (pair._1 vs. pair[0]). Scala actually defines multiple tuple types, up to Tuple22, to achieve this.","title":"12. Tuples"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/","text":"Scala for Ruby Developers | scala | python | vs | comparison | References 1. Initial Ruby vs Scala comparison 2.1 Map and Reduce 2.2 Labmdas 3. Named Arguments 4. Partial Functions 5. Pattern Matching 6. Random from array 7. Monkey Patching 8. Mixins 9. Line Ending 10. Dynamic calls 11. Duck Typing 12. Types References Github - Ruby vs Scala http://www.slideshare.net/squixy/scala-vs-ruby-45694031 http://www.slideshare.net/El_Picador/scala-vs-ruby 1. Initial Ruby vs Scala comparison Ruby Designed for humans, not machines Extreme flexibility: if you mess up, it\u2019s on you Everything has to be easy, elegant and fun DSL on top of DSLs on top of DSLs Testing is critical Things move quickly, learn to keep up Passionate and vibrant community Scala Have the best of both object oriented and functional programming worlds Let the compiler do some of the work for you Concurrency matters Less ceremony than Java, but aiming for same or better performance Live in harmony with the Java ecosystem 2.1 Map and Reduce Ruby def fun ( 3 .. 999 ) . select { | n | n % 5 == 0 || n % 3 == 0 } . reduce :+ end Scala def fun = ( 3 to 999 ). filter { n => n % 5 == 0 || n % 3 == 0 }. reduce ( _+_ ) 2.2 Labmdas Scala list . filter ( _ % 2 == 0 ) list . filter { e : Int => ( e % 2 == 0 )) } Ruby list . select do | e | e % 2 == 0 end 3. Named Arguments Show an example of named arguments in constructors of functions Ruby class Foo def initialize ( foo :, bar :) end end Foo . new ( foo : 1 , bar : false ) class Bar def initialize ( foo , bar ) end end Bar . new ( foo = 1 , bar = false ) Scala case class Foo ( foo : Int , bar : Boolean ) new Foo ( foo = 1 , bar = false ) def bar ( attr : String ) = {} bar ( attr = \"\" ) 4. Partial Functions You are given a function that sums two numbers: Ruby def add ( a , b ) a + b end Scala def add ( a : Int , b : Int ) = a + b Write a function called add2 , that uses add function, takes one parameter and adds 2 to it. Ruby [ 1 ] ( pry ) main : 0 > def add ( a , b ) [ 1 ] ( pry ) main : 0 * a + b [ 1 ] ( pry ) main : 0 * end => :add [ 2 ] ( pry ) main : 0 > add2 = -> b { add ( 2 , b ) } => #<Proc:0x007fa8b9975d38@(pry):4 (lambda)> [ 3 ] ( pry ) main : 0 > add2 . ( 3 ) => 5 [ 3 ] ( pry ) main : 0 > add2 [ 3 ] => 5 Scala scala > def add ( a : Int , b : Int ) = a + b add : ( a : Int , b : Int ) Int scala > val add2 = add ( 2 , _: Int ) add2 : Int => Int = < function1 > scala > add2 ( 3 ) res4 : Int = 5 5. Pattern Matching Write a function that checks whether a given argument is an integer or string. Otherwise print Not match Ruby [ 0 ] ( pry ) main : 0 > def pattern_matching ( value ) [ 0 ] ( pry ) main : 0 * case value [ 0 ] ( pry ) main : 0 * when Integer then puts \"Integer\" [ 0 ] ( pry ) main : 0 * when String then puts \"String\" [ 0 ] ( pry ) main : 0 * else puts \"Not match\" [ 0 ] ( pry ) main : 0 * end [ 0 ] ( pry ) main : 0 * end => :pattern_matching [ 1 ] ( pry ) main : 0 > pattern_matching ( \"a\" ) String => nil [ 2 ] ( pry ) main : 0 > pattern_matching ( 1 ) Integer => nil [ 3 ] ( pry ) main : 0 > pattern_matching ( false ) Not match => nil Scala scala > : paste // Entering paste mode (ctrl-D to finish) def patternMatching ( value : Any ) = value match { case _: Integer => println ( \"Integer\" ) case _: String => println ( \"String\" ) case _ => println ( \"Not match\" ) } // Exiting paste mode, now interpreting. patternMatching : ( value : Any ) Unit scala > patternMatching ( \"a\" ) String scala > patternMatching ( 1 ) Integer scala > patternMatching ( false ) Not match Scala def matchTest ( x : Any ): Any = x match { case 1 => \"one\" case \"two\" => 2 case y : Int => \"scala.Int\" case 2 :: tail => tail } Ruby gem install case require 'case' def matchTest x case x when 1 \"one\" when \"two\" 2 when Case :: All [ Integer ] \"ruby.Integer\" when Case :: Array [ 2 , Case :: Any ] x [ 1 ..- 1 ] end end 6. Random from array Write a function that finds a random element from given array. Ruby def get_random_element ( array ) array . sample end Scala import scala . util . Random def getRandomElement [ T ]( list : Seq [ T ]): T = list ( Random nextInt list . length ) 7. Monkey Patching Write a function belonging to String class that allows to remove all occurrences of given substring. Ruby String . class_eval do # ALWAYS .class_eval def remove ( substring ) gsub ( substring , '' ) end end Scala implicit class SuperString ( val string : String ) extends AnyVal { def remove ( substring : String ) = string . replaceAll ( substring , \"\" ) } Usage Ruby [ 0 ] ( pry ) main : 0 > String . class_eval do # ALWAYS .class_eval [ 0 ] ( pry ) main : 0 * def remove ( substring ) [ 0 ] ( pry ) main : 0 * gsub ( substring , '' ) [ 0 ] ( pry ) main : 0 * end [ 0 ] ( pry ) main : 0 * end => :remove [ 1 ] ( pry ) main : 0 > 'test' . remove 't' => \"es\" Scala scala > implicit class SuperString ( val string : String ) extends AnyVal { | def remove ( substring : String ) = string . replaceAll ( substring , \"\" ) | } defined class SuperString scala > \"test\" remove \"t\" res0 : String = es Ruby Monkey Patching puts \"a\" . to_s # => a class String def to_s \"Monkey !\" end def my_method \"Patch !\" end end puts \"a\" . to_s # => Monkey ! puts \"a\" . my_method # => Patch ! Scala Implicits class MySuperString ( original : String ) { def myMethod = \"Patch !\" } implicit def string2super ( x : String ) = new MySuperString ( x ) println ( \"a\" . myMethod ) // => Patch ! 8. Mixins Create a Helper mixin with auxilary method that can be adopted in many classes Scala scala > trait Helper { | def help = \"I'm from helper\" | } defined trait Helper scala > scala > class IncludeHelper extends Helper defined class IncludeHelper scala > scala > ( new IncludeHelper ). help res0 : String = I 'm from helper Ruby [ 1 ] ( pry ) main : 0 > module Helper [ 1 ] ( pry ) main : 0 * def help [ 1 ] ( pry ) main : 0 * \"I'm from helper\" [ 1 ] ( pry ) main : 0 * end [ 1 ] ( pry ) main : 0 * end => :help [ 2 ] ( pry ) main : 0 > class IncludeHelper [ 2 ] ( pry ) main : 0 * include Helper [ 2 ] ( pry ) main : 0 * end => IncludeHelper [ 3 ] ( pry ) main : 0 > IncludeHelper . new . help => \"I'm from helper\" 9. Line Ending Both Languages should not end line with ; 10. Dynamic calls Ruby class Animal def method_missing name , * args if args . empty? puts \"Animal says \" + name . to_s else puts \"Animal wants to \" + name . to_s + args . join ( \", \" ) end self end end # --- animal = Animal . new animal . qualk # => Animal says : qualks ! animal . say ( \"hello\" ) # => Animal wants to say hello Scala class Animal extends Dynamic { def _select_ ( name : String ) = println ( \"Animal says \" + name ) def _invoke_ ( name : String , args : Any * ) = { println ( \"Animal wants to \" + name + args . mkString ( \", \" )) this } } val animal = new Animal animal . qualk // => Animal says qualk animal . say ( \"hello\" ) // => Animal wants to say hello 11. Duck Typing Ruby class Duck def quack ; end def walk ; end end class Platypus def quack ; end def walk ; end end def act_as_a_duck animal animal . quack animal . walk end duck = Duck . new platypus = Platypus . new act_as_a_duck ( duck ) act_as_a_duck ( platypus ) Scala class Duck { def quack = ... def walk = ... } class Platypus { def quack = ... def walk = ... } def ActAsADuck ( a : { def quack ; def walk }) = { a . quack a . walk } val duck = new Duck val platypus = new Platypus ActAsADuck ( duck ) ActAsADuck ( platypus ) 12. Types Scala var hash = new HashMap [ Int , String ] Ruby hash = Hash . new hash = 3","title":"Scala for Ruby Developers"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#scala-for-ruby-developers","text":"| scala | python | vs | comparison | References 1. Initial Ruby vs Scala comparison 2.1 Map and Reduce 2.2 Labmdas 3. Named Arguments 4. Partial Functions 5. Pattern Matching 6. Random from array 7. Monkey Patching 8. Mixins 9. Line Ending 10. Dynamic calls 11. Duck Typing 12. Types","title":"Scala for Ruby Developers"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#references","text":"Github - Ruby vs Scala http://www.slideshare.net/squixy/scala-vs-ruby-45694031 http://www.slideshare.net/El_Picador/scala-vs-ruby","title":"References"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#1-initial-ruby-vs-scala-comparison","text":"Ruby Designed for humans, not machines Extreme flexibility: if you mess up, it\u2019s on you Everything has to be easy, elegant and fun DSL on top of DSLs on top of DSLs Testing is critical Things move quickly, learn to keep up Passionate and vibrant community Scala Have the best of both object oriented and functional programming worlds Let the compiler do some of the work for you Concurrency matters Less ceremony than Java, but aiming for same or better performance Live in harmony with the Java ecosystem","title":"1. Initial Ruby vs Scala comparison"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#21-map-and-reduce","text":"Ruby def fun ( 3 .. 999 ) . select { | n | n % 5 == 0 || n % 3 == 0 } . reduce :+ end Scala def fun = ( 3 to 999 ). filter { n => n % 5 == 0 || n % 3 == 0 }. reduce ( _+_ )","title":"2.1 Map and Reduce"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#22-labmdas","text":"Scala list . filter ( _ % 2 == 0 ) list . filter { e : Int => ( e % 2 == 0 )) } Ruby list . select do | e | e % 2 == 0 end","title":"2.2 Labmdas"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#3-named-arguments","text":"Show an example of named arguments in constructors of functions Ruby class Foo def initialize ( foo :, bar :) end end Foo . new ( foo : 1 , bar : false ) class Bar def initialize ( foo , bar ) end end Bar . new ( foo = 1 , bar = false ) Scala case class Foo ( foo : Int , bar : Boolean ) new Foo ( foo = 1 , bar = false ) def bar ( attr : String ) = {} bar ( attr = \"\" )","title":"3. Named Arguments"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#4-partial-functions","text":"You are given a function that sums two numbers: Ruby def add ( a , b ) a + b end Scala def add ( a : Int , b : Int ) = a + b Write a function called add2 , that uses add function, takes one parameter and adds 2 to it. Ruby [ 1 ] ( pry ) main : 0 > def add ( a , b ) [ 1 ] ( pry ) main : 0 * a + b [ 1 ] ( pry ) main : 0 * end => :add [ 2 ] ( pry ) main : 0 > add2 = -> b { add ( 2 , b ) } => #<Proc:0x007fa8b9975d38@(pry):4 (lambda)> [ 3 ] ( pry ) main : 0 > add2 . ( 3 ) => 5 [ 3 ] ( pry ) main : 0 > add2 [ 3 ] => 5 Scala scala > def add ( a : Int , b : Int ) = a + b add : ( a : Int , b : Int ) Int scala > val add2 = add ( 2 , _: Int ) add2 : Int => Int = < function1 > scala > add2 ( 3 ) res4 : Int = 5","title":"4. Partial Functions"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#5-pattern-matching","text":"Write a function that checks whether a given argument is an integer or string. Otherwise print Not match Ruby [ 0 ] ( pry ) main : 0 > def pattern_matching ( value ) [ 0 ] ( pry ) main : 0 * case value [ 0 ] ( pry ) main : 0 * when Integer then puts \"Integer\" [ 0 ] ( pry ) main : 0 * when String then puts \"String\" [ 0 ] ( pry ) main : 0 * else puts \"Not match\" [ 0 ] ( pry ) main : 0 * end [ 0 ] ( pry ) main : 0 * end => :pattern_matching [ 1 ] ( pry ) main : 0 > pattern_matching ( \"a\" ) String => nil [ 2 ] ( pry ) main : 0 > pattern_matching ( 1 ) Integer => nil [ 3 ] ( pry ) main : 0 > pattern_matching ( false ) Not match => nil Scala scala > : paste // Entering paste mode (ctrl-D to finish) def patternMatching ( value : Any ) = value match { case _: Integer => println ( \"Integer\" ) case _: String => println ( \"String\" ) case _ => println ( \"Not match\" ) } // Exiting paste mode, now interpreting. patternMatching : ( value : Any ) Unit scala > patternMatching ( \"a\" ) String scala > patternMatching ( 1 ) Integer scala > patternMatching ( false ) Not match Scala def matchTest ( x : Any ): Any = x match { case 1 => \"one\" case \"two\" => 2 case y : Int => \"scala.Int\" case 2 :: tail => tail } Ruby gem install case require 'case' def matchTest x case x when 1 \"one\" when \"two\" 2 when Case :: All [ Integer ] \"ruby.Integer\" when Case :: Array [ 2 , Case :: Any ] x [ 1 ..- 1 ] end end","title":"5. Pattern Matching"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#6-random-from-array","text":"Write a function that finds a random element from given array. Ruby def get_random_element ( array ) array . sample end Scala import scala . util . Random def getRandomElement [ T ]( list : Seq [ T ]): T = list ( Random nextInt list . length )","title":"6. Random from array"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#7-monkey-patching","text":"Write a function belonging to String class that allows to remove all occurrences of given substring. Ruby String . class_eval do # ALWAYS .class_eval def remove ( substring ) gsub ( substring , '' ) end end Scala implicit class SuperString ( val string : String ) extends AnyVal { def remove ( substring : String ) = string . replaceAll ( substring , \"\" ) } Usage Ruby [ 0 ] ( pry ) main : 0 > String . class_eval do # ALWAYS .class_eval [ 0 ] ( pry ) main : 0 * def remove ( substring ) [ 0 ] ( pry ) main : 0 * gsub ( substring , '' ) [ 0 ] ( pry ) main : 0 * end [ 0 ] ( pry ) main : 0 * end => :remove [ 1 ] ( pry ) main : 0 > 'test' . remove 't' => \"es\" Scala scala > implicit class SuperString ( val string : String ) extends AnyVal { | def remove ( substring : String ) = string . replaceAll ( substring , \"\" ) | } defined class SuperString scala > \"test\" remove \"t\" res0 : String = es Ruby Monkey Patching puts \"a\" . to_s # => a class String def to_s \"Monkey !\" end def my_method \"Patch !\" end end puts \"a\" . to_s # => Monkey ! puts \"a\" . my_method # => Patch ! Scala Implicits class MySuperString ( original : String ) { def myMethod = \"Patch !\" } implicit def string2super ( x : String ) = new MySuperString ( x ) println ( \"a\" . myMethod ) // => Patch !","title":"7. Monkey Patching"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#8-mixins","text":"Create a Helper mixin with auxilary method that can be adopted in many classes Scala scala > trait Helper { | def help = \"I'm from helper\" | } defined trait Helper scala > scala > class IncludeHelper extends Helper defined class IncludeHelper scala > scala > ( new IncludeHelper ). help res0 : String = I 'm from helper Ruby [ 1 ] ( pry ) main : 0 > module Helper [ 1 ] ( pry ) main : 0 * def help [ 1 ] ( pry ) main : 0 * \"I'm from helper\" [ 1 ] ( pry ) main : 0 * end [ 1 ] ( pry ) main : 0 * end => :help [ 2 ] ( pry ) main : 0 > class IncludeHelper [ 2 ] ( pry ) main : 0 * include Helper [ 2 ] ( pry ) main : 0 * end => IncludeHelper [ 3 ] ( pry ) main : 0 > IncludeHelper . new . help => \"I'm from helper\"","title":"8. Mixins"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#9-line-ending","text":"Both Languages should not end line with ;","title":"9. Line Ending"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#10-dynamic-calls","text":"Ruby class Animal def method_missing name , * args if args . empty? puts \"Animal says \" + name . to_s else puts \"Animal wants to \" + name . to_s + args . join ( \", \" ) end self end end # --- animal = Animal . new animal . qualk # => Animal says : qualks ! animal . say ( \"hello\" ) # => Animal wants to say hello Scala class Animal extends Dynamic { def _select_ ( name : String ) = println ( \"Animal says \" + name ) def _invoke_ ( name : String , args : Any * ) = { println ( \"Animal wants to \" + name + args . mkString ( \", \" )) this } } val animal = new Animal animal . qualk // => Animal says qualk animal . say ( \"hello\" ) // => Animal wants to say hello","title":"10. Dynamic calls"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#11-duck-typing","text":"Ruby class Duck def quack ; end def walk ; end end class Platypus def quack ; end def walk ; end end def act_as_a_duck animal animal . quack animal . walk end duck = Duck . new platypus = Platypus . new act_as_a_duck ( duck ) act_as_a_duck ( platypus ) Scala class Duck { def quack = ... def walk = ... } class Platypus { def quack = ... def walk = ... } def ActAsADuck ( a : { def quack ; def walk }) = { a . quack a . walk } val duck = new Duck val platypus = new Platypus ActAsADuck ( duck ) ActAsADuck ( platypus )","title":"11. Duck Typing"},{"location":"blog/2016/2016-12-02-scala-for-ruby-developers/#12-types","text":"Scala var hash = new HashMap [ Int , String ] Ruby hash = Hash . new hash = 3","title":"12. Types"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/","text":"Reflection about the next main scripting language | python | ruby | groovy | I differentiate normal programming language and scripting programming language . Scripting language must be used for quick prototyping, automation, has a nice integration with shell, etc. Also, it should be very quick at startup time. So, any automation task can have the next implementations evolution, e.g. : bash script then any scripting language ( Python , Ruby , Groovy , Perl , etc.) CLI application I have been using several languages which have such characteristics (or similar): Ruby and Groovy . Ruby I started using Ruby (as a scripting language) in 2008. It was cool. In that time Ruby community was \u201cbashing\u201d Java. The community was and is Ruby on Rails centric, mainly non -Windows. Almost nothing has happen outside of Rails (Vagrant, Chef and Puppet are exceptions), and it\u2019s sad. But this language has a \u201csoul\u201d . I could not explain, but I feel happiness while I am writing something in Ruby :-) Groovy Groovy is nice JVM language which has own pros & cons . But now, this language has some problems with popularity ( see link:{2016-groovy-post}[The state of Groovy and other JVM Languages]). And for me it\u2019s a very important point. Also, due to JVM nature, the script startup is very slow (I do not count GroovyServ ). Groovy language syntax is much better for me than Ruby. I like Groovy packages and hate Ruby Modules and Namespaces . Again, it just a matter of taste. Thoughts If we compare different scripting languages they are almost the same in terms of what can be implement using them. But, some of them have community problems, some - ecosystem problems, some - is just not well suited to your development approaches (e.g Perl , Lua , Js/Node.js ). And as always there must be some shift or motivation to look around and try something new and hopefully better. The time invested in learning new \u201ctool\u201d must be rewarded in future. If we look around the decision of picking another better scripting language is very simple - it\u2019s Python . And by \u201cbetter\u201d I don\u2019t mean syntax. Python I have never used Python because Ruby (or Groovy) had the similar language features and I have not seen any benefits in switching to another language. On the another hand, Python has huge ecosystem, it has library for almost everything, it is not a framework-centric language ( see Ruby on Rails, Groovy: Grails or Gradle). And the most important it has a momentum in terms of Data Science , Machine Learning and Artificial Intelligence (where I have big interests as the other people). Unfortunately, Ruby has lost this fight. For several month, I have been using a lot of Python-based tools ( AWS CLI , ZMON , Stups ) during my work day and this is another big motivation for me to look into the Python as my potential next scripting language. There is a very interesting moment. I do not like Python syntax (I am not dogmatic). For some reason Python syntax (and language features) is very ugly for me. And I would pick Python only because of pragmatism and not because I like it. But, I am not sure whether Python will be my main scripting language since Python is not equal to \u201chappiness\u201d :-( Python is very popular right now (check the numbers below) and it\u2019s a very good time to start using it if you don\u2019t have biases like I have. Languages Popularity Statistics RedMonk The RedMonk Programming Language Rankings: June 2017 TIOBE Index TIOBE Index for October 2017 PYPL PYPL PopularitY of Programming Language IEEE Spectrum Interactive: The Top Programming Languages 2017 Stack Overflow Growth of major programming languages Github The fifteen most popular languages on GitHub (2017) by opened pull request References The RedMonk Programming Language Rankings: June 2017 TIOBE Index PYPL PopularitY of Programming Language Interactive: The Top Programming Languages 2017 The Incredible Growth of Python, published September 6, 2017 The State of the Octoverse 2017, Github statistics GitHut 2.0. A small place to discover languages in Github","title":"Reflection about the next main scripting language"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#reflection-about-the-next-main-scripting-language","text":"| python | ruby | groovy | I differentiate normal programming language and scripting programming language . Scripting language must be used for quick prototyping, automation, has a nice integration with shell, etc. Also, it should be very quick at startup time. So, any automation task can have the next implementations evolution, e.g. : bash script then any scripting language ( Python , Ruby , Groovy , Perl , etc.) CLI application I have been using several languages which have such characteristics (or similar): Ruby and Groovy .","title":"Reflection about the next main scripting language"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#ruby","text":"I started using Ruby (as a scripting language) in 2008. It was cool. In that time Ruby community was \u201cbashing\u201d Java. The community was and is Ruby on Rails centric, mainly non -Windows. Almost nothing has happen outside of Rails (Vagrant, Chef and Puppet are exceptions), and it\u2019s sad. But this language has a \u201csoul\u201d . I could not explain, but I feel happiness while I am writing something in Ruby :-)","title":"Ruby"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#groovy","text":"Groovy is nice JVM language which has own pros & cons . But now, this language has some problems with popularity ( see link:{2016-groovy-post}[The state of Groovy and other JVM Languages]). And for me it\u2019s a very important point. Also, due to JVM nature, the script startup is very slow (I do not count GroovyServ ). Groovy language syntax is much better for me than Ruby. I like Groovy packages and hate Ruby Modules and Namespaces . Again, it just a matter of taste.","title":"Groovy"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#thoughts","text":"If we compare different scripting languages they are almost the same in terms of what can be implement using them. But, some of them have community problems, some - ecosystem problems, some - is just not well suited to your development approaches (e.g Perl , Lua , Js/Node.js ). And as always there must be some shift or motivation to look around and try something new and hopefully better. The time invested in learning new \u201ctool\u201d must be rewarded in future. If we look around the decision of picking another better scripting language is very simple - it\u2019s Python . And by \u201cbetter\u201d I don\u2019t mean syntax.","title":"Thoughts"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#python","text":"I have never used Python because Ruby (or Groovy) had the similar language features and I have not seen any benefits in switching to another language. On the another hand, Python has huge ecosystem, it has library for almost everything, it is not a framework-centric language ( see Ruby on Rails, Groovy: Grails or Gradle). And the most important it has a momentum in terms of Data Science , Machine Learning and Artificial Intelligence (where I have big interests as the other people). Unfortunately, Ruby has lost this fight. For several month, I have been using a lot of Python-based tools ( AWS CLI , ZMON , Stups ) during my work day and this is another big motivation for me to look into the Python as my potential next scripting language. There is a very interesting moment. I do not like Python syntax (I am not dogmatic). For some reason Python syntax (and language features) is very ugly for me. And I would pick Python only because of pragmatism and not because I like it. But, I am not sure whether Python will be my main scripting language since Python is not equal to \u201chappiness\u201d :-( Python is very popular right now (check the numbers below) and it\u2019s a very good time to start using it if you don\u2019t have biases like I have.","title":"Python"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#languages-popularity-statistics","text":"","title":"Languages Popularity Statistics"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#redmonk","text":"The RedMonk Programming Language Rankings: June 2017","title":"RedMonk"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#tiobe-index","text":"TIOBE Index for October 2017","title":"TIOBE Index"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#pypl","text":"PYPL PopularitY of Programming Language","title":"PYPL"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#ieee-spectrum","text":"Interactive: The Top Programming Languages 2017","title":"IEEE Spectrum"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#stack-overflow","text":"Growth of major programming languages","title":"Stack Overflow"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#github","text":"The fifteen most popular languages on GitHub (2017) by opened pull request","title":"Github"},{"location":"blog/2017/2017-10-31-reflection-about-the-main-scripting-language/#references","text":"The RedMonk Programming Language Rankings: June 2017 TIOBE Index PYPL PopularitY of Programming Language Interactive: The Top Programming Languages 2017 The Incredible Growth of Python, published September 6, 2017 The State of the Octoverse 2017, Github statistics GitHut 2.0. A small place to discover languages in Github","title":"References"},{"location":"blog/2017/2017-11-05-my-favorite-podcasts/","text":"My Favorite Podcasts | podcast | I\u2019ve been listening podcasts for many years. Mostly (99%) technical podcasts. Here is the list in my favorite order (Please note, some of them are not in English) (RUS) DevZen : Very interesting. It covers broad range of different technical topics (RUS) Scalaz Podcast : Podcast about Scala (RUS) Radio-t : Tech podcast. Sometimes might be boring because it has a lot of blaming and trolling (RUS) GolangShow : only #Golang, only hardcore (ENG) The Ruby Rogues : broad range of topics, not only #Ruby (ENG) Functional Geekery : A podcast on Functional Programming, covering topics across multiple languages (ENG) LambdaCast : LambdaCast is a podcast about functional programming for working developers (ENG) Mapping The Journey : interviews with famous people from IT (ENG) The Chanelog : broad range of topics (RUS) CTOcast : mostly interviews, tech podcast with different guests from different companies (RUS) SDCast : mostly interviews, tech podcast with different guests from different companies (RUS) Americhka.us : non-technical podcast about life (ENG) The Chariot TechCast : \u201cThe Chariot TechCast is an interview show that covers emerging and important tends in the world of software development.\u201d (ENG) Software Engineering Radio : different tech topics (RUS) Razbor poletov : Java-related talks","title":"My Favorite Podcasts"},{"location":"blog/2017/2017-11-05-my-favorite-podcasts/#my-favorite-podcasts","text":"| podcast | I\u2019ve been listening podcasts for many years. Mostly (99%) technical podcasts. Here is the list in my favorite order (Please note, some of them are not in English) (RUS) DevZen : Very interesting. It covers broad range of different technical topics (RUS) Scalaz Podcast : Podcast about Scala (RUS) Radio-t : Tech podcast. Sometimes might be boring because it has a lot of blaming and trolling (RUS) GolangShow : only #Golang, only hardcore (ENG) The Ruby Rogues : broad range of topics, not only #Ruby (ENG) Functional Geekery : A podcast on Functional Programming, covering topics across multiple languages (ENG) LambdaCast : LambdaCast is a podcast about functional programming for working developers (ENG) Mapping The Journey : interviews with famous people from IT (ENG) The Chanelog : broad range of topics (RUS) CTOcast : mostly interviews, tech podcast with different guests from different companies (RUS) SDCast : mostly interviews, tech podcast with different guests from different companies (RUS) Americhka.us : non-technical podcast about life (ENG) The Chariot TechCast : \u201cThe Chariot TechCast is an interview show that covers emerging and important tends in the world of software development.\u201d (ENG) Software Engineering Radio : different tech topics (RUS) Razbor poletov : Java-related talks","title":"My Favorite Podcasts"},{"location":"blog/2018/2018-03-15-rest-api-guidelines/","text":"REST API Guidelines | api | rest | REST API is the most popular interface for communication between different component of the system. There are a lot of different common sense approaches to design RESTful API. Despite this fact it is always better to have something written as a reference to follow common principles during API design of the system. Here I have collected some REST API guidelines and API References. It\u2019s nice start point for your inspiration . REST API Guidelines Microsoft - REST API Guidelines Microsoft - Best Practices - API Design Zalando - REST API Guidelines Paypal - REST API Guidelines Atlassian - REST API design guidelines version 1 Digital Ocean - API v2 Introduction Google Cloud Platform - API Design Guide Red Hat Lessons learnt from designing the Red Hat Enterprise Virtualization API Australian Government Agencies - AusDTO API Design Guide Cloud Foundry - Cloud Controller API v3 Style Guide (Proposal) Heroku - API Design Guide A RESTful Tutorial Sample APIs GitHub REST API v3 Twitter API Google Drive APIs Trello API Stack Exchange API v2.2 Jira API Stripe API Heroku API Travis CI API Also, Apigee provides huge list of different API providers in one place: https://apigee.com/providers","title":"REST API Guidelines"},{"location":"blog/2018/2018-03-15-rest-api-guidelines/#rest-api-guidelines","text":"| api | rest | REST API is the most popular interface for communication between different component of the system. There are a lot of different common sense approaches to design RESTful API. Despite this fact it is always better to have something written as a reference to follow common principles during API design of the system. Here I have collected some REST API guidelines and API References. It\u2019s nice start point for your inspiration .","title":"REST API Guidelines"},{"location":"blog/2018/2018-03-15-rest-api-guidelines/#rest-api-guidelines_1","text":"Microsoft - REST API Guidelines Microsoft - Best Practices - API Design Zalando - REST API Guidelines Paypal - REST API Guidelines Atlassian - REST API design guidelines version 1 Digital Ocean - API v2 Introduction Google Cloud Platform - API Design Guide Red Hat Lessons learnt from designing the Red Hat Enterprise Virtualization API Australian Government Agencies - AusDTO API Design Guide Cloud Foundry - Cloud Controller API v3 Style Guide (Proposal) Heroku - API Design Guide A RESTful Tutorial","title":"REST API Guidelines"},{"location":"blog/2018/2018-03-15-rest-api-guidelines/#sample-apis","text":"GitHub REST API v3 Twitter API Google Drive APIs Trello API Stack Exchange API v2.2 Jira API Stripe API Heroku API Travis CI API Also, Apigee provides huge list of different API providers in one place: https://apigee.com/providers","title":"Sample APIs"},{"location":"blog/2018/2018-04-05-programmin-quizzes/","text":"Programming Quizzes Many years ago there was a site with collection of Ruby Quizzes : http://rubyquiz.com . What Is Ruby Quiz? Ruby Quiz is a weekly programming challenge for Ruby programmers Idea is superb. So, I have decided to look around and collect here similar resources : Ruby Quiz : 1 - 156 quizzes \u201cBest of Ruby Quiz\u201d by James Edward Gray II . This book contains 25 problems from Ruby Quiz Ruby Quiz : 157 - 234 quizzes Haskell Quiz S-99: Ninety-Nine Scala Problems : 99 quizzes JavaScript snippets that you can understand in 30 seconds or less . This huge list of snippets is not like \u201coriginal\u201d Ruby Quiz, but it might be used as quiz list. The current list is not very impressive. But, I am going to maintain it and I hope it will be bigger. The last list is not a quiz, but contains \u201ca list of practical projects that anyone can solve in any programming language\u201d : https://github.com/karan/Projects","title":"Programming Quizzes"},{"location":"blog/2018/2018-04-05-programmin-quizzes/#programming-quizzes","text":"Many years ago there was a site with collection of Ruby Quizzes : http://rubyquiz.com . What Is Ruby Quiz? Ruby Quiz is a weekly programming challenge for Ruby programmers Idea is superb. So, I have decided to look around and collect here similar resources : Ruby Quiz : 1 - 156 quizzes \u201cBest of Ruby Quiz\u201d by James Edward Gray II . This book contains 25 problems from Ruby Quiz Ruby Quiz : 157 - 234 quizzes Haskell Quiz S-99: Ninety-Nine Scala Problems : 99 quizzes JavaScript snippets that you can understand in 30 seconds or less . This huge list of snippets is not like \u201coriginal\u201d Ruby Quiz, but it might be used as quiz list. The current list is not very impressive. But, I am going to maintain it and I hope it will be bigger. The last list is not a quiz, but contains \u201ca list of practical projects that anyone can solve in any programming language\u201d : https://github.com/karan/Projects","title":"Programming Quizzes"},{"location":"blog/2018/2018-05-20-scaladays/","text":"Scala Days - Berlin, 2018 - Report | scala | conference | I attended Scala Days Berlin conference (May 15th - May 17th, 20018). It was almost two days conference: two full days: day 2 and 3, and one keynote talk for day 1. There were some talks I didn\u2019t like and I do not want to mention them here. This report is for myself only just to keep track talks I\u2019ve attended. Summary It nice to see that Scala is not another better Java (see Kotlin). The Scala community has own way of doing stuff, own ecosystem, philosophy if you will etc. Scala Native looks interesting, but I do not see it as an alternative to Rust, Golang. Scala.js is a nice tool, but I think that it\u2019s an additional mental pressure in Web development: JS (related hell) + Scala.js issues. I am not sure if this is a good direction for me. GraalVM looks super cool. I think this project will have a huge success in future. Akka and Langom talks were interesting in terms of new features. Sbt is evolving, guys put a lot of efforts to make it better and faster. And of course \u201cfunctional programming\u201d talks is a key component of any Scala-related conference ;-) Day 1 (May 15, 2018) Opening Keynote: 2.13 And Beyond by Martin Odersky and Adriaan Moors ( slides ) The next version of Scala, 2.13, is ready. We will give an overview of the improvements in tooling and the standard library that this release delivers. The planned steps after this release are directed towards Scala 3. This will be an important transition for the Scala ecosystem, introducing a simpler, more regular, and more expressive version of the language. We will give an outline of what to expect, lay out our roadmap towards its release, and provide recommendations how to prepare for the change. This talk was dedicated to the current state of Scala and road map for Scala 3. Day 2 (May 16, 2018) Keynote: Functionalist programming language design by Tomas Petricek The word \u201cfunction\u201d in \u201cfunctional programming\u201d refers to mathematical concept of a function, but in this talk, I will pretend that that\u2019s not the case. Imagine that functional programming was instead inspired by functionalist architecture and the word \u201cfunction\u201d referred to the modernist design principle that \u201cform follows function\u201d. How would this perspective transform our thinking about programming? Using a number of practical F# examples, I will try to convince you that \u201cfunction\u201d in the design sense is already more useful for understanding what makes functional programming great than \u201cfunction\u201d in the mathematical sense. Along the way, I will go through a number of interesting language features and libraries available in F# that have close, but not quite equivalent cousins in Scala. We will look at the design principles behind \u201ctype providers\u201d which provide an easy way to integrate external data sources into the language; we will look at \u201c\u201dasynchronous workflows\u201d\u201d which is the F# way for writing non-blocking computations and I will reflect on the cautious F# approach to meta-programming. I might not be able to retroactively change what \u201cfunctional programming\u201d means in just one talk, but I will try nevertheless! Akka: Present and Future by Christopher Batey ( slides ) In this talk we\u2019ll go through all the major additions over the last year to Akka, Akka HTTP and Akka Streams as well as a look to the future. This is a really exciting time for Akka with the typed API on its way to maturity. Some of the things we\u2019ll cover: Akka typed: When is it ready for production? Persistence and cluster API Coexistence with untyped Akka Multi DC clustering Artery (Aeron and TCP) What can Lagom do for you? by Renato Cavalcanti Much has been said about building Microservices and the advantages of it, but do people really understand what that all means and the implications of it? In this talk, we will go through the main motivations for moving to a Microservices architecture and the existing challenges one may encounter. We will take that journey together and discover how Lagom tackles each of these challenges and helps you to focus on solving business problems. You will get a good understanding of Lagom?s Service Descriptor API and Persistence API. How it favours Event-First Application Design and how it?s design principles lays the foundation for Reactive Microservice Architecture. Dive into Deep Learning with Scala by S\u00f6ren Brunk Deep learning is an emerging field with the potential to transform whole industries, and to significantly affect software development. This talk is an introduction to deep learning for Scala developers. We?ll see why deep learning enables a new programming paradigm, and how it?s related to functional programming. We\u2019ll discuss what makes Scala an interesting choice for deep learning, and look at the current landscape of deep learning libraries for Scala. Equipped with that knowledge, we\u2019ll walk through a concrete example that shows you how to create, train and deploy a neural network using Scala. A pragmatic introduction to Category Theory by Daniela Sfregol ( slides ) Category Theory has become one of the hot topics in the community. Why is it so interesting for us? Why are the cool kids passionate about it? This talk will introduce the general principles of Category Theory in a pragmatic, non-mathematical way. We will show practical examples of how this theory has managed to simplify and solve common challenges that we encounter in our code daily, such as nullable values, error handling, parallel and sequential operations and data validation. We will apply them to create our own category theory library from scratch using ScalaCheck as the only dependency. sbt 1 by Eugene Yokota and Dale Wijnand sbt (an interactive build tool for Java, Scala, and more) has finally reached 1.0! In this talk, we will first over the basics of how a build is organized using sbt. Next, we will talk about the development process, new features (such as Zinc 1, sbt server, unified slash syntax), and the migration from sbt 0.13. Starting from Scratch with Scala Native by Richard Whaling In this talk, we\u2019ll learn how Scala Native uses POSIX and ANSI C API\u2019s to build concise, expressive programs that run unusually close to bare metal. By examining real-world programs, we\u2019ll learn just how accessible and expressive low-level programming can be with a modern language like Scala. Compiling Scala Faster with GraalVM by Vojin Jovanovic Scala\u2019s features such as higher-order functions and implicit conversions encourage writing concise and readable programs. These features, however, introduce many indirections and come with a hidden cost: if not removed by the compiler they can cause severe performance hits. In this talk, we present GraalVM: a high-performance polyglot VM whose unique JIT compiler greatly improves the performance of Scala programs. We demo how GraalVM can increase the productivity of the Scala community: With GraalVM the Scala compiler is more than 1.3x faster and the compiler native image requires no warmup. Day 3 (May 17, 2018) Functional interpreters and you by Dave Gurnell ( slides and code ) Phrases like \u201cfree monads\u201d and \u201cfinally tagless\u201d get thrown around in the Scala community like they\u2019re going out of fashion. But what do they mean and why are they so popular?In this talk we will discuss \u201cinterpreters\u201d, an essential functional programming pattern that underpins these terms. We will show how any problem in functional programming can be described using the interpreter pattern, and how modelling things this way naturally gives rise to abstractions like the free monad and encodings like finally tagless. Strings are Evil: Methods to hide the use of primitive types by Noel Welsh Most primitive types we use are \u201ctoo wide\u201d for how we are using them; for example, there are an infinite number of Strings, but we are only using the String (hex!) representation of a 128-bit UUID. This is a huge source of bugs in our programs. This talk will go over the many ways we can reduce these kinds of errors in Scala, such as wrapper types, refined types, type restrictions, and more. Full Stack Scala by Trond Bjerkestrand ( video - ScalaIO FR ) Demand for a richer experience client side is continuously increasing. We can no longer generate HTML server side and will instead create JSON APIs, investigate JS frameworks, learn JavaScript, its tools and libraries or leave the task to a dedicated front-end developer. Wait, ScalaJS is here, mature and with a growing community. It allows creating beautiful and rich front-ends without leaving our comfort zone of strong static typing protected from JavaScript surprises. The talk will explore shared data objects, validation logic and easy client server communication in a full stack Scala app. Applications of Implicit Function Types by Olivier Blanvillain ( slides ) This talk presents a generalization of implicit parameters to implicit function types, a powerful way to abstract over the context in which some piece of code is run. To illustrate their abstraction capabilities, we present several applications that make use of implicit function types. We show how to encode the builder pattern, the reader monad, tagless interpreters, and free structures.","title":"Scala Days - Berlin, 2018 - Report"},{"location":"blog/2018/2018-05-20-scaladays/#scala-days-berlin-2018-report","text":"| scala | conference | I attended Scala Days Berlin conference (May 15th - May 17th, 20018). It was almost two days conference: two full days: day 2 and 3, and one keynote talk for day 1. There were some talks I didn\u2019t like and I do not want to mention them here. This report is for myself only just to keep track talks I\u2019ve attended.","title":"Scala Days - Berlin, 2018 - Report"},{"location":"blog/2018/2018-05-20-scaladays/#summary","text":"It nice to see that Scala is not another better Java (see Kotlin). The Scala community has own way of doing stuff, own ecosystem, philosophy if you will etc. Scala Native looks interesting, but I do not see it as an alternative to Rust, Golang. Scala.js is a nice tool, but I think that it\u2019s an additional mental pressure in Web development: JS (related hell) + Scala.js issues. I am not sure if this is a good direction for me. GraalVM looks super cool. I think this project will have a huge success in future. Akka and Langom talks were interesting in terms of new features. Sbt is evolving, guys put a lot of efforts to make it better and faster. And of course \u201cfunctional programming\u201d talks is a key component of any Scala-related conference ;-)","title":"Summary"},{"location":"blog/2018/2018-05-20-scaladays/#day-1-may-15-2018","text":"","title":"Day 1 (May 15, 2018)"},{"location":"blog/2018/2018-05-20-scaladays/#opening-keynote-213-and-beyond-by-martin-odersky-and-adriaan-moors-slides","text":"The next version of Scala, 2.13, is ready. We will give an overview of the improvements in tooling and the standard library that this release delivers. The planned steps after this release are directed towards Scala 3. This will be an important transition for the Scala ecosystem, introducing a simpler, more regular, and more expressive version of the language. We will give an outline of what to expect, lay out our roadmap towards its release, and provide recommendations how to prepare for the change. This talk was dedicated to the current state of Scala and road map for Scala 3.","title":"Opening Keynote: 2.13 And Beyond by Martin Odersky and Adriaan Moors (slides)"},{"location":"blog/2018/2018-05-20-scaladays/#day-2-may-16-2018","text":"","title":"Day 2 (May 16, 2018)"},{"location":"blog/2018/2018-05-20-scaladays/#keynote-functionalist-programming-language-design-by-tomas-petricek","text":"The word \u201cfunction\u201d in \u201cfunctional programming\u201d refers to mathematical concept of a function, but in this talk, I will pretend that that\u2019s not the case. Imagine that functional programming was instead inspired by functionalist architecture and the word \u201cfunction\u201d referred to the modernist design principle that \u201cform follows function\u201d. How would this perspective transform our thinking about programming? Using a number of practical F# examples, I will try to convince you that \u201cfunction\u201d in the design sense is already more useful for understanding what makes functional programming great than \u201cfunction\u201d in the mathematical sense. Along the way, I will go through a number of interesting language features and libraries available in F# that have close, but not quite equivalent cousins in Scala. We will look at the design principles behind \u201ctype providers\u201d which provide an easy way to integrate external data sources into the language; we will look at \u201c\u201dasynchronous workflows\u201d\u201d which is the F# way for writing non-blocking computations and I will reflect on the cautious F# approach to meta-programming. I might not be able to retroactively change what \u201cfunctional programming\u201d means in just one talk, but I will try nevertheless!","title":"Keynote: Functionalist programming language design by Tomas Petricek"},{"location":"blog/2018/2018-05-20-scaladays/#akka-present-and-future-by-christopher-batey-slides","text":"In this talk we\u2019ll go through all the major additions over the last year to Akka, Akka HTTP and Akka Streams as well as a look to the future. This is a really exciting time for Akka with the typed API on its way to maturity. Some of the things we\u2019ll cover: Akka typed: When is it ready for production? Persistence and cluster API Coexistence with untyped Akka Multi DC clustering Artery (Aeron and TCP)","title":"Akka: Present and Future by Christopher Batey (slides)"},{"location":"blog/2018/2018-05-20-scaladays/#what-can-lagom-do-for-you-by-renato-cavalcanti","text":"Much has been said about building Microservices and the advantages of it, but do people really understand what that all means and the implications of it? In this talk, we will go through the main motivations for moving to a Microservices architecture and the existing challenges one may encounter. We will take that journey together and discover how Lagom tackles each of these challenges and helps you to focus on solving business problems. You will get a good understanding of Lagom?s Service Descriptor API and Persistence API. How it favours Event-First Application Design and how it?s design principles lays the foundation for Reactive Microservice Architecture.","title":"What can Lagom do for you? by Renato Cavalcanti"},{"location":"blog/2018/2018-05-20-scaladays/#dive-into-deep-learning-with-scala-by-soren-brunk","text":"Deep learning is an emerging field with the potential to transform whole industries, and to significantly affect software development. This talk is an introduction to deep learning for Scala developers. We?ll see why deep learning enables a new programming paradigm, and how it?s related to functional programming. We\u2019ll discuss what makes Scala an interesting choice for deep learning, and look at the current landscape of deep learning libraries for Scala. Equipped with that knowledge, we\u2019ll walk through a concrete example that shows you how to create, train and deploy a neural network using Scala.","title":"Dive into Deep Learning with Scala by S\u00f6ren Brunk"},{"location":"blog/2018/2018-05-20-scaladays/#a-pragmatic-introduction-to-category-theory-by-daniela-sfregol-slides","text":"Category Theory has become one of the hot topics in the community. Why is it so interesting for us? Why are the cool kids passionate about it? This talk will introduce the general principles of Category Theory in a pragmatic, non-mathematical way. We will show practical examples of how this theory has managed to simplify and solve common challenges that we encounter in our code daily, such as nullable values, error handling, parallel and sequential operations and data validation. We will apply them to create our own category theory library from scratch using ScalaCheck as the only dependency.","title":"A pragmatic introduction to Category Theory by Daniela Sfregol (slides)"},{"location":"blog/2018/2018-05-20-scaladays/#sbt-1-by-eugene-yokota-and-dale-wijnand","text":"sbt (an interactive build tool for Java, Scala, and more) has finally reached 1.0! In this talk, we will first over the basics of how a build is organized using sbt. Next, we will talk about the development process, new features (such as Zinc 1, sbt server, unified slash syntax), and the migration from sbt 0.13.","title":"sbt 1 by Eugene Yokota and Dale Wijnand"},{"location":"blog/2018/2018-05-20-scaladays/#starting-from-scratch-with-scala-native-by-richard-whaling","text":"In this talk, we\u2019ll learn how Scala Native uses POSIX and ANSI C API\u2019s to build concise, expressive programs that run unusually close to bare metal. By examining real-world programs, we\u2019ll learn just how accessible and expressive low-level programming can be with a modern language like Scala.","title":"Starting from Scratch with Scala Native by Richard Whaling"},{"location":"blog/2018/2018-05-20-scaladays/#compiling-scala-faster-with-graalvm-by-vojin-jovanovic","text":"Scala\u2019s features such as higher-order functions and implicit conversions encourage writing concise and readable programs. These features, however, introduce many indirections and come with a hidden cost: if not removed by the compiler they can cause severe performance hits. In this talk, we present GraalVM: a high-performance polyglot VM whose unique JIT compiler greatly improves the performance of Scala programs. We demo how GraalVM can increase the productivity of the Scala community: With GraalVM the Scala compiler is more than 1.3x faster and the compiler native image requires no warmup.","title":"Compiling Scala Faster with GraalVM by Vojin Jovanovic"},{"location":"blog/2018/2018-05-20-scaladays/#day-3-may-17-2018","text":"","title":"Day 3 (May 17, 2018)"},{"location":"blog/2018/2018-05-20-scaladays/#functional-interpreters-and-you-by-dave-gurnell-slides-and-code","text":"Phrases like \u201cfree monads\u201d and \u201cfinally tagless\u201d get thrown around in the Scala community like they\u2019re going out of fashion. But what do they mean and why are they so popular?In this talk we will discuss \u201cinterpreters\u201d, an essential functional programming pattern that underpins these terms. We will show how any problem in functional programming can be described using the interpreter pattern, and how modelling things this way naturally gives rise to abstractions like the free monad and encodings like finally tagless.","title":"Functional interpreters and you by Dave Gurnell (slides and code)"},{"location":"blog/2018/2018-05-20-scaladays/#strings-are-evil-methods-to-hide-the-use-of-primitive-types-by-noel-welsh","text":"Most primitive types we use are \u201ctoo wide\u201d for how we are using them; for example, there are an infinite number of Strings, but we are only using the String (hex!) representation of a 128-bit UUID. This is a huge source of bugs in our programs. This talk will go over the many ways we can reduce these kinds of errors in Scala, such as wrapper types, refined types, type restrictions, and more.","title":"Strings are Evil: Methods to hide the use of primitive types by Noel Welsh"},{"location":"blog/2018/2018-05-20-scaladays/#full-stack-scala-by-trond-bjerkestrand-video-scalaio-fr","text":"Demand for a richer experience client side is continuously increasing. We can no longer generate HTML server side and will instead create JSON APIs, investigate JS frameworks, learn JavaScript, its tools and libraries or leave the task to a dedicated front-end developer. Wait, ScalaJS is here, mature and with a growing community. It allows creating beautiful and rich front-ends without leaving our comfort zone of strong static typing protected from JavaScript surprises. The talk will explore shared data objects, validation logic and easy client server communication in a full stack Scala app.","title":"Full Stack Scala by Trond Bjerkestrand (video - ScalaIO FR)"},{"location":"blog/2018/2018-05-20-scaladays/#applications-of-implicit-function-types-by-olivier-blanvillain-slides","text":"This talk presents a generalization of implicit parameters to implicit function types, a powerful way to abstract over the context in which some piece of code is run. To illustrate their abstraction capabilities, we present several applications that make use of implicit function types. We show how to encode the builder pattern, the reader monad, tagless interpreters, and free structures.","title":"Applications of Implicit Function Types by Olivier Blanvillain (slides)"},{"location":"blog/2018/2018-10-30-russian-moocs/","text":"Russian MOOCs | mooc | Algorithms and Data Structures Data Science and Machine Learning Stepik Software Engineering Data Bases Highload Python Haskell System Programming and Linux Math Glossary: MOOC - Massive open online course I\u2019ve been following the next resources: Stepik Computer Science Center Computer Science Center - Youtube Computer Science Club \u041b\u0435\u043a\u0442\u043e\u0440\u0438\u0443\u043c - Lektorium \u041b\u0435\u043a\u0442\u043e\u0440\u0438\u0443\u043c - Youtube \u0422\u0435\u0445\u043d\u043e\u0441\u0442\u0440\u0438\u043c Mail.Ru Group - Youtube \u0410\u043a\u0430\u0434\u0435\u043c\u0438\u044f \u042f\u043d\u0434\u0435\u043a\u0441\u0430 - Youtube \u0428\u043a\u043e\u043b\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 See below the list of different topics and direction I am interested in (grouped) Algorithms and Data Structures \u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0445 \u043f\u0443\u0442\u0435\u0439 \u0432 \u0434\u043e\u0440\u043e\u0436\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445: \u043e\u0442 \u0442\u0435\u043e\u0440\u0438\u0438 \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 , \u0412\u0438\u0442\u0430\u043b\u0438\u0439 \u041e\u0441\u0438\u043f\u043e\u0432 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f NP-\u0442\u0440\u0443\u0434\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043e\u0441\u0435\u043d\u044c 2013 , \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u043c\u043c\u0438\u0432\u043e\u044f\u0436\u0451\u0440\u0430, \u043e\u0441\u0435\u043d\u044c 2017 , \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 and Youtube]() Data Science and Machine Learning Teacher \u0412\u0430\u0434\u0438\u043c \u0410\u0431\u0431\u0430\u043a\u0443\u043c\u043e\u0432 \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Python \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445. \u0427\u0430\u0441\u0442\u044c 1, (\u0432\u0435\u0441\u043d\u0430 2018) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Python \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445. \u0427\u0430\u0441\u0442\u044c 2, (\u043e\u0441\u0435\u043d\u044c 2018) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 R \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0427\u0430\u0441\u0442\u044c 1, (\u0432\u0435\u0441\u043d\u0430 2016) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 R \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0427\u0430\u0441\u0442\u044c 2, (\u0432\u0435\u0441\u043d\u0430 2017) and Youtube \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u0435\u0441\u043d\u0430 2016) Stepik \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 R \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 R. \u0427\u0430\u0441\u0442\u044c 2 \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 R \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0430\u0441\u0442\u044c 2 \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0430\u0441\u0442\u044c 3 Software Engineering CSC - \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0432\u0435\u0441\u043d\u0430 2014) Data Bases CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0441\u0435\u043d\u044c 2017 , \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0411\u0430\u0440\u0430\u0448\u0435\u0432: Stepik - \u041f\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0421\u0423\u0411\u0414. \u0421\u0435\u0437\u043e\u043d 2017 CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0441\u0435\u043d\u044c 2013) , \u0412\u0430\u0434\u0438\u043c \u0426\u0435\u0441\u044c\u043a\u043e CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0441\u0435\u043d\u044c 2017) \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 , \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0411\u0430\u0440\u0430\u0448\u0435\u0432: CSC and Youtube Highload Highload. \u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. (\u0422\u0435\u0445\u043d\u043e\u043f\u043e\u043b\u0438\u0441, \u043e\u0441\u0435\u043d\u044c 2017) 1. HIGHLOAD. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 2. HIGHLOAD. \u0422\u0438\u043f\u043e\u0432\u044b\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b 3. HIGHLOAD. \u042d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c | \u0422\u0435\u0445\u043d\u043e\u0441\u0442\u0440\u0438\u043c 4. HIGHLOAD. \u0421\u0435\u0442\u0435\u0432\u043e\u0439 \u0441\u0442\u0435\u043a 5. HIGHLOAD. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f 6. HIGHLOAD. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0438 \u043f\u0430\u043c\u044f\u0442\u044c 7. HIGHLOAD. \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 8. HIGHLOAD. JVM. Java \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 9. HIGHLOAD. \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 10. HIGHLOAD. \u041e\u0431\u043b\u0430\u043a\u0430 11. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Actor Model. Futures. Reactive streams 12. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Live-coding \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 13. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 JVM 14. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Site Reliability Engineering 15. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 16. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u0420\u0435\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u044f Python CSC - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Python (\u043e\u0441\u0435\u043d\u044c 2018) Haskell Stepik - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell Stepik - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell (\u0447\u0430\u0441\u0442\u044c 2) CSC - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u201d (\u0432\u0435\u0441\u043d\u0430 2015) \u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 GHC \u044f\u0437\u044b\u043a\u0430 Haskell: \u0442\u0435\u043e\u0440\u0438\u044f \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 System Programming and Linux \u041e\u0441\u043d\u043e\u0432\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439, \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d - it is the best intro lecture Stepik - \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f Linux, \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d CSC - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 Linux), (\u043e\u0441\u0435\u043d\u044c 2017) , \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d CSC - \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u042d\u0412\u041c \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u041e\u0421 - (\u043e\u0441\u0435\u043d\u044c\u044e 2013) , \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d \u041d\u041e\u0423 \u0418\u041d\u0422\u0423\u0418\u0422 - \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u044f\u0434\u0440\u0430 Linux (\u043e\u0441\u0435\u043d\u044c 2015) Math \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (\u0447\u0430\u0441\u0442\u044c 1) \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (\u0447\u0430\u0441\u0442\u044c 2) \u0422\u0435\u043e\u0440\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0442\u043e\u0440\u0438\u043a\u0438","title":"Russian MOOCs"},{"location":"blog/2018/2018-10-30-russian-moocs/#russian-moocs","text":"| mooc | Algorithms and Data Structures Data Science and Machine Learning Stepik Software Engineering Data Bases Highload Python Haskell System Programming and Linux Math Glossary: MOOC - Massive open online course I\u2019ve been following the next resources: Stepik Computer Science Center Computer Science Center - Youtube Computer Science Club \u041b\u0435\u043a\u0442\u043e\u0440\u0438\u0443\u043c - Lektorium \u041b\u0435\u043a\u0442\u043e\u0440\u0438\u0443\u043c - Youtube \u0422\u0435\u0445\u043d\u043e\u0441\u0442\u0440\u0438\u043c Mail.Ru Group - Youtube \u0410\u043a\u0430\u0434\u0435\u043c\u0438\u044f \u042f\u043d\u0434\u0435\u043a\u0441\u0430 - Youtube \u0428\u043a\u043e\u043b\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 See below the list of different topics and direction I am interested in (grouped)","title":"Russian MOOCs"},{"location":"blog/2018/2018-10-30-russian-moocs/#algorithms-and-data-structures","text":"\u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0445 \u043f\u0443\u0442\u0435\u0439 \u0432 \u0434\u043e\u0440\u043e\u0436\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445: \u043e\u0442 \u0442\u0435\u043e\u0440\u0438\u0438 \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 , \u0412\u0438\u0442\u0430\u043b\u0438\u0439 \u041e\u0441\u0438\u043f\u043e\u0432 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f NP-\u0442\u0440\u0443\u0434\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043e\u0441\u0435\u043d\u044c 2013 , \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u043c\u043c\u0438\u0432\u043e\u044f\u0436\u0451\u0440\u0430, \u043e\u0441\u0435\u043d\u044c 2017 , \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a\u0443\u043b\u0438\u043a\u043e\u0432 and Youtube]()","title":"Algorithms and Data Structures"},{"location":"blog/2018/2018-10-30-russian-moocs/#data-science-and-machine-learning","text":"Teacher \u0412\u0430\u0434\u0438\u043c \u0410\u0431\u0431\u0430\u043a\u0443\u043c\u043e\u0432 \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Python \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445. \u0427\u0430\u0441\u0442\u044c 1, (\u0432\u0435\u0441\u043d\u0430 2018) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Python \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445. \u0427\u0430\u0441\u0442\u044c 2, (\u043e\u0441\u0435\u043d\u044c 2018) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 R \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0427\u0430\u0441\u0442\u044c 1, (\u0432\u0435\u0441\u043d\u0430 2016) and Youtube \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 R \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0427\u0430\u0441\u0442\u044c 2, (\u0432\u0435\u0441\u043d\u0430 2017) and Youtube \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u0435\u0441\u043d\u0430 2016)","title":"Data Science and Machine Learning"},{"location":"blog/2018/2018-10-30-russian-moocs/#stepik","text":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 R \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 R. \u0427\u0430\u0441\u0442\u044c 2 \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 R \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0430\u0441\u0442\u044c 2 \u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0430\u0441\u0442\u044c 3","title":"Stepik"},{"location":"blog/2018/2018-10-30-russian-moocs/#software-engineering","text":"CSC - \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0432\u0435\u0441\u043d\u0430 2014)","title":"Software Engineering"},{"location":"blog/2018/2018-10-30-russian-moocs/#data-bases","text":"CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0441\u0435\u043d\u044c 2017 , \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0411\u0430\u0440\u0430\u0448\u0435\u0432: Stepik - \u041f\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0421\u0423\u0411\u0414. \u0421\u0435\u0437\u043e\u043d 2017 CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0441\u0435\u043d\u044c 2013) , \u0412\u0430\u0434\u0438\u043c \u0426\u0435\u0441\u044c\u043a\u043e CSC - \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0441\u0435\u043d\u044c 2017) \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 , \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0411\u0430\u0440\u0430\u0448\u0435\u0432: CSC and Youtube","title":"Data Bases"},{"location":"blog/2018/2018-10-30-russian-moocs/#highload","text":"Highload. \u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. (\u0422\u0435\u0445\u043d\u043e\u043f\u043e\u043b\u0438\u0441, \u043e\u0441\u0435\u043d\u044c 2017) 1. HIGHLOAD. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 2. HIGHLOAD. \u0422\u0438\u043f\u043e\u0432\u044b\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b 3. HIGHLOAD. \u042d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c | \u0422\u0435\u0445\u043d\u043e\u0441\u0442\u0440\u0438\u043c 4. HIGHLOAD. \u0421\u0435\u0442\u0435\u0432\u043e\u0439 \u0441\u0442\u0435\u043a 5. HIGHLOAD. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f 6. HIGHLOAD. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0438 \u043f\u0430\u043c\u044f\u0442\u044c 7. HIGHLOAD. \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 8. HIGHLOAD. JVM. Java \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 9. HIGHLOAD. \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 10. HIGHLOAD. \u041e\u0431\u043b\u0430\u043a\u0430 11. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Actor Model. Futures. Reactive streams 12. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Live-coding \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 13. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 JVM 14. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. Site Reliability Engineering 15. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 16. HIGHLOAD. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u043b\u0430\u0432\u044b. \u0420\u0435\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u044f","title":"Highload"},{"location":"blog/2018/2018-10-30-russian-moocs/#python","text":"CSC - \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 Python (\u043e\u0441\u0435\u043d\u044c 2018)","title":"Python"},{"location":"blog/2018/2018-10-30-russian-moocs/#haskell","text":"Stepik - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell Stepik - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell (\u0447\u0430\u0441\u0442\u044c 2) CSC - \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u201d (\u0432\u0435\u0441\u043d\u0430 2015) \u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 GHC \u044f\u0437\u044b\u043a\u0430 Haskell: \u0442\u0435\u043e\u0440\u0438\u044f \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435","title":"Haskell"},{"location":"blog/2018/2018-10-30-russian-moocs/#system-programming-and-linux","text":"\u041e\u0441\u043d\u043e\u0432\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439, \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d - it is the best intro lecture Stepik - \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f Linux, \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d CSC - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 Linux), (\u043e\u0441\u0435\u043d\u044c 2017) , \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d CSC - \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u042d\u0412\u041c \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u041e\u0421 - (\u043e\u0441\u0435\u043d\u044c\u044e 2013) , \u041a\u0438\u0440\u0438\u043b\u043b \u041a\u0440\u0438\u043d\u043a\u0438\u043d \u041d\u041e\u0423 \u0418\u041d\u0422\u0423\u0418\u0422 - \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u044f\u0434\u0440\u0430 Linux (\u043e\u0441\u0435\u043d\u044c 2015)","title":"System Programming and Linux"},{"location":"blog/2018/2018-10-30-russian-moocs/#math","text":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (\u0447\u0430\u0441\u0442\u044c 1) \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 (\u0447\u0430\u0441\u0442\u044c 2) \u0422\u0435\u043e\u0440\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0442\u043e\u0440\u0438\u043a\u0438","title":"Math"},{"location":"blog/2018/2018-12-18-github-markup-gem/","text":"[WIP] Verify Ruby github/markup gem for markdown rendering | ruby | markdown | github | I\u2019ve cloned github/markup and tried to built my own Docker image: docker build -t halyph/markup . But there was some error Step 22/26 : COPY Gemfile.lock . COPY failed: stat /var/lib/docker/tmp/docker-builder774079505/Gemfile.lock: no such file or directory The easiest solution for solving this problem is commenting the next line # COPY Gemfile.lock . And run docker build again. Also, do not forget to push the newly created image to Docker Hub: docker push halyph/markup Now, I can try to run github/markup on some local/test files. Lol, I noticed that this Docker file does not support my needs :-/ I need to fix it a bit. References github/markup How to run github/markup Docker image: https://github.com/yokogawa-k/docker-github-markup .","title":"[WIP] Verify Ruby `github/markup` gem for markdown rendering"},{"location":"blog/2018/2018-12-18-github-markup-gem/#wip-verify-ruby-githubmarkup-gem-for-markdown-rendering","text":"| ruby | markdown | github | I\u2019ve cloned github/markup and tried to built my own Docker image: docker build -t halyph/markup . But there was some error Step 22/26 : COPY Gemfile.lock . COPY failed: stat /var/lib/docker/tmp/docker-builder774079505/Gemfile.lock: no such file or directory The easiest solution for solving this problem is commenting the next line # COPY Gemfile.lock . And run docker build again. Also, do not forget to push the newly created image to Docker Hub: docker push halyph/markup Now, I can try to run github/markup on some local/test files. Lol, I noticed that this Docker file does not support my needs :-/ I need to fix it a bit.","title":"[WIP] Verify Ruby github/markup gem for markdown rendering"},{"location":"blog/2018/2018-12-18-github-markup-gem/#references","text":"github/markup How to run github/markup Docker image: https://github.com/yokogawa-k/docker-github-markup .","title":"References"},{"location":"blog/2018/2018-12-19-docker-bash-complition/","text":"How to configure docker bash completion on Mac | docker | bash | Run the next commands to add completion to docker , docker-machine and docker-compose : cd $(brew --prefix)/etc/bash_completion.d ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion or like in official docker doc (both approaches are equal): etc=/Applications/Docker.app/Contents/Resources/etc ln -s $etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker ln -s $etc/docker-machine.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-machine ln -s $etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose We assume that .bash_profile has the next lines: if [ -f $(brew --prefix)/etc/bash_completion ]; then . $(brew --prefix)/etc/bash_completion fi References Official Docker Docs https://blog.alexellis.io/docker-mac-bash-completion/","title":"How to configure docker bash completion on Mac"},{"location":"blog/2018/2018-12-19-docker-bash-complition/#how-to-configure-docker-bash-completion-on-mac","text":"| docker | bash | Run the next commands to add completion to docker , docker-machine and docker-compose : cd $(brew --prefix)/etc/bash_completion.d ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion or like in official docker doc (both approaches are equal): etc=/Applications/Docker.app/Contents/Resources/etc ln -s $etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker ln -s $etc/docker-machine.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-machine ln -s $etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose We assume that .bash_profile has the next lines: if [ -f $(brew --prefix)/etc/bash_completion ]; then . $(brew --prefix)/etc/bash_completion fi","title":"How to configure docker bash completion on Mac"},{"location":"blog/2018/2018-12-19-docker-bash-complition/#references","text":"Official Docker Docs https://blog.alexellis.io/docker-mac-bash-completion/","title":"References"},{"location":"blog/2018/2018-12-20-git-notes/","text":"Git Notes | git | How to change commit author for the last commit My base Git aliases References How to change commit author for the last commit git commit --amend --author=\"Orest Ivasiv <halyph@gmail.com>\" My base Git aliases git config --global user.email \"halyph@gmail.com\" git config --global user.name \"Orest Ivasiv\" git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status git config --global alias.hist \"log --pretty=format:\\\"%h %ad | %s%d [%an]\\\" --graph --date=short\" git config --global alias.cf \"!cat .git/config\" References SO: How to change the commit author for one specific commit?","title":"Git Notes"},{"location":"blog/2018/2018-12-20-git-notes/#git-notes","text":"| git | How to change commit author for the last commit My base Git aliases References","title":"Git Notes"},{"location":"blog/2018/2018-12-20-git-notes/#how-to-change-commit-author-for-the-last-commit","text":"git commit --amend --author=\"Orest Ivasiv <halyph@gmail.com>\"","title":"How to change commit author for the last commit"},{"location":"blog/2018/2018-12-20-git-notes/#my-base-git-aliases","text":"git config --global user.email \"halyph@gmail.com\" git config --global user.name \"Orest Ivasiv\" git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status git config --global alias.hist \"log --pretty=format:\\\"%h %ad | %s%d [%an]\\\" --graph --date=short\" git config --global alias.cf \"!cat .git/config\"","title":"My base Git aliases"},{"location":"blog/2018/2018-12-20-git-notes/#references","text":"SO: How to change the commit author for one specific commit?","title":"References"},{"location":"blog/2018/2018-12-20-scala-for-compr/","text":"Scala for -comprehensions | scala | video | functional programming | This is a complete copy of Josh Suereth & Dick Wall talk on Scala World conference: \u201cFor: What is it good for? \u2014 Josh Suereth & Dick Wall\u201d (see references). Actually, I have found github repository with Jupiter notebooks. But, I don\u2019t like this format and decided to store these notes here. References 01 - For \u201cloops\u201d 02 - For with yield 03 - Options 04 - Future 05 - Guards 06 - Inline Assignments 07 - Generators 08 - For Grep and Glory 09 - Desugaring the fors 10 - Other Monads 11 - scala-arm 12 - Monads don\u2019t mix 13 - Emm & M[_] 14 - How to Option Your Futures 15 - Sink References Youtube: For: What is it good for? \u2014 Josh Suereth & Dick Wall Github: dickwall/use-the-fors-luke - soutse code realted to \u201cFor: What is it good for?\u201d talk Github: jsuereth/intro-to-fp - This repo contains nice sample of \u201cmonadic\u201d Github client Github: jsuereth/scala-arm - This project aims to be the Scala Incubator project for Automatic-Resource-Management in the scala library \u201cThe Essence of the Iterator Pattern\u201d post by Eric Torreborre 01 - For \u201cloops\u201d 01.01 for ( i <- 1 to 10 ) println ( \"hello world\" ) // Output hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world 01.02 for ( i <- 1 to 10 ) println ( i * i ) // Output 1 4 9 16 25 36 49 64 81 100 01.03 for ( _ <- 1 to 10 ) println ( \"hello world\" ) // Output hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world 01.04 for ( i <- 1 to 10 ) { print ( f\"the square of $ i %2d\" ) println ( f\" is ${ i * i } %3d\" ) } // Output the square of 1 is 1 the square of 2 is 4 the square of 3 is 9 the square of 4 is 16 the square of 5 is 25 the square of 6 is 36 the square of 7 is 49 the square of 8 is 64 the square of 9 is 81 the square of 10 is 100 01.05 ( 1 to 10 ) // Output res0 : scala . collection . immutable . Range . Inclusive = Range 1 to 10 01.06 ( 1 to 10 ). foreach { i => print ( f\"the square of $ i %2d\" ) println ( f\" is ${ i * i } %3d\" ) } // Output the square of 1 is 1 the square of 2 is 4 the square of 3 is 9 the square of 4 is 16 the square of 5 is 25 the square of 6 is 36 the square of 7 is 49 the square of 8 is 64 the square of 9 is 81 the square of 10 is 100 01.07 for { i <- 1 to 5 j <- 1 to 5 } println ( s\" $ i times $ j is ${ i * j } \" ) // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 01.08 ( 1 to 5 ). foreach { i => ( 1 to 5 ). foreach { j => println ( s\" $ i times $ j is ${ i * j } \" ) } } // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 01.09 val x1 = ( 1 to 5 ). foreach { i => ( 1 to 5 ). foreach { j => println ( s\" $ i times $ j is ${ i * j } \" ) } } val x2 = for { i <- 1 to 5 j <- 1 to 5 } println ( s\" $ i times $ j is ${ i * j } \" ) println ( x1 ) println ( x2 ) import scala . reflect . runtime . universe . _ def typeOf [ T : TypeTag ]( t : T ) = typeTag [ T ] typeOf ( x1 ) typeOf ( x2 ) // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 x1 : Unit = () 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 x2 : Unit = () () () import scala . reflect . runtime . universe . _ typeOf : [ T ]( t : T )( implicit evidence$1 : reflect . runtime . universe . TypeTag [ T ]) reflect . runtime . universe . TypeTag [ T ] res2 : reflect . runtime . universe . TypeTag [ Unit ] = TypeTag [ Unit ] res3 : reflect . runtime . universe . TypeTag [ Unit ] = TypeTag [ Unit ] 02 - For with yield 02.01 val squares = for ( i <- 1 to 10 ) yield ( i * i ) // Output squares : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 ) 02.02 val squareMap = ( for ( i <- 1 to 10 ) yield ( i -> ( i * i ))). toMap // Output squareMap : Map [ Int , Int ] = Map ( 5 -> 25 , 10 -> 100 , 1 -> 1 , 6 -> 36 , 9 -> 81 , 2 -> 4 , 7 -> 49 , 3 -> 9 , 8 -> 64 , 4 -> 16 ) 02.03 case class TimesResult ( i : Int , j : Int , mult : Int ) val timesTable = for { i <- 1 to 5 j <- 1 to 5 } yield TimesResult ( i , j , i * j ) // Output defined class TimesResult timesTable : collection . immutable . IndexedSeq [ $user . TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ... 02.04 val squares = ( 1 to 10 ). map ( i => i * i ) // Output squares : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 ) 02.05 val squaresMap = ( 1 to 10 ). map ( i => i -> ( i * i )). toMap // Output squaresMap : scala . collection . immutable . Map [ Int , Int ] = Map ( 5 -> 25 , 10 -> 100 , 1 -> 1 , 6 -> 36 , 9 -> 81 , 2 -> 4 , 7 -> 49 , 3 -> 9 , 8 -> 64 , 4 -> 16 ) 02.06 val timesTable = ( 1 to 5 ). map ( i => ( 1 to 5 ). map ( j => TimesResult ( i , j , i * j ))) // Output timesTable : collection . immutable . IndexedSeq [ collection . immutable . IndexedSeq [ TimesResult ]] = Vector ( Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ) ), Vector ( TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ) ), Vector ( TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), ... 02.07 timesTable . flatten // Output res5 : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ... 02.08 val timesTableFlat = ( 1 to 5 ). flatMap ( i => ( 1 to 5 ). map ( j => TimesResult ( i , j , i * j ))) // Output timesTableFlat : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ... 02.09 val timesTable = for { i <- 1 to 5 // flatMap j <- 1 to 5 // map } yield TimesResult ( i , j , i * j ) // Output timesTableFlat : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ... 02.10 for { i <- 1 to 3 // flatMap j <- 1 to 3 // flatMap k <- 1 to 3 // map } yield i * j * k // Output res0 : scala . collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 2 , 3 , 2 , 4 , 6 , 3 , 6 , 9 , 2 , 4 , 6 , 4 , 8 , 12 , 6 , 12 , 18 , 3 , 6 , 9 , 6 , 12 , 18 , 9 , 18 , 27 ) 03 - Options 03.01 val x = 1 val y = 2 val z = 3 // Output val result = x * y * z x : Int = 1 y : Int = 2 z : Int = 3 result : Int = 6 03.02 val ox = Some ( 1 ) val oy = Some ( 2 ) val oz = Some ( 3 ) val oResult = for { x <- ox y <- oy z <- oz } yield { x * y * z } // Output ox : Some [ Int ] = Some ( 1 ) oy : Some [ Int ] = Some ( 2 ) oz : Some [ Int ] = Some ( 3 ) oResult : Option [ Int ] = Some ( 6 ) 03.03 val ox = Some ( 1 ) val oy : Option [ Int ] = None val oz = Some ( 3 ) val oResult = for { x <- ox y <- oy z <- oz } yield { x * y * z } // Output ox : Some [ Int ] = Some ( 1 ) oy : Option [ Int ] = None oz : Some [ Int ] = Some ( 3 ) oResult : Option [ Int ] = None 04 - Future 04.01 import scala . concurrent . _ import ExecutionContext . Implicits . global import duration . _ val f1 = Future { Thread . sleep ( 10000 ); 6 } val f2 = Future { Thread . sleep ( 10000 ); 7 } val f3 = for { x <- f1 y <- f2 } yield x * y f3 . value // Output f1 : Future [ Int ] = List ( scala . concurrent . impl . CallbackRunnable @ 5e5167 e0 ) f2 : Future [ Int ] = List () f3 : Future [ Int ] = List () res2_3 : Option [ scala . util . Try [ Int ]] = None 04.02 Await . result ( f3 , 11 . seconds ) // Output res3 : Int = 42 04.03 val f1 = Future { Thread . sleep ( 1000 ); 6 } val f2 = Future { Thread . sleep ( 1000 ); 7 / 0 } val f3 = for { x <- f1 y <- f2 } yield x * y f3 . value Await . result ( f3 , 2 . seconds ) // Output res0 : Option [ scala . util . Try [ Int ]] = None java . lang . ArithmeticException : / by zero at . $anonfun$f2$1 ( < console >: 18 ) at scala . runtime . java8 . JFunction0$mcI$sp . apply ( JFunction0$mcI$sp . java : 23 ) at scala . concurrent . Future$ . $anonfun$apply$1 ( Future . scala : 658 ) at scala . util . Success . $anonfun$map$1 ( Try . scala : 255 ) at scala . util . Success . map ( Try . scala : 213 ) at scala . concurrent . Future . $anonfun$map$1 ( Future . scala : 292 ) at scala . concurrent . impl . Promise . liftedTree1$1 ( Promise . scala : 33 ) at scala . concurrent . impl . Promise . $anonfun$transform$1 ( Promise . scala : 33 ) at scala . concurrent . impl . CallbackRunnable . run ( Promise . scala : 64 ) at java . util . concurrent . ForkJoinTask$RunnableExecuteAction . exec ( ForkJoinTask . java : 1402 ) at java . util . concurrent . ForkJoinTask . doExec ( ForkJoinTask . java : 289 ) at java . util . concurrent . ForkJoinPool$WorkQueue . runTask ( ForkJoinPool . java : 1056 ) at java . util . concurrent . ForkJoinPool . runWorker ( ForkJoinPool . java : 1692 ) at java . util . concurrent . ForkJoinWorkerThread . run ( ForkJoinWorkerThread . java : 157 ) 05 - Guards 05.01 for { x <- 1 to 10 y <- 1 to 10 if x % 4 < y % 5 if x % 2 == 0 } yield x * y // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 8 , 16 , 18 , 4 , 8 , 12 , 16 , 24 , 28 , 32 , 36 , 18 , 24 , 48 , 54 , 8 , 16 , 24 , ... 05.02 for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // Output res1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ... 05.03 ( 1 to 10 ). flatMap { i => ( 1 to 10 ). withFilter ( j => i % 3 == 0 || j % 3 == 0 ). flatMap { j => ( 1 to 10 ). withFilter ( k => i * j * k % 2 == 0 ). map { k => i * j * k } } } // Output res2 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ... 05.04 for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // Output res3 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ... 06 - Inline Assignments 06.01 for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // why repeat this? // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ... 06.02 for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 mult = i * j * k if mult % 2 == 0 } yield mult // Output res1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ... 06.03 ( 1 to 10 ). flatMap { i => ( 1 to 10 ). withFilter ( j => i % 3 == 0 || j % 3 == 0 ). flatMap { j => ( 1 to 10 ). map { k => val mult = i * j * k ( k , mult ) }. withFilter { case ( k , mult ) => mult % 2 == 0 }. map { case ( k , mult ) => mult } } } // Output res0 : scala . collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , 90 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 18 , 36 , 54 , 72 , 90 , 108 , 126 , 144 , 162 , 180 , 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , 90 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 30 , 60 , 90 , 120 , 150 , 18 , 36 , 54 , 72 , 90 , 108 , 126 , 144 , 162 , 180 , 42 , 84 , 126 , 168 , 210 , 24 , 48 , 72 , 96 , 120 , 144 , 168 , 192 , 216 , 240 , 54 , 108 , 162 , 216 , 270 , 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 24 , 48 , 72 , 96 , 120 , 144 , 168 , 192 , 216 , 240 , 36 , 72 , 108 , 144 , 180 , 216 , 252 , 288 , 324 , 360 , 30 , 60 , 90 , 120 , 150 , 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 90 ,... 06.04 // what else can we do with assiGnments? val mults = for { i <- 1 to 5 _ = println ( s\"i is $ i \" ) // or logger.info(s\"$i\") - SIDE EFFECTS! j <- 1 to 5 } yield i * j // Output i is 1 i is 2 i is 3 i is 4 i is 5 mults : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 2 , 3 , 4 , 5 , 2 , 4 , 6 , 8 , 10 , 3 , 6 , 9 , 12 , 15 , 4 , 8 , 12 , 16 , ... 07 - Generators 07.01 for ( i <- 1 to 5 ) yield i * i // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 ) 07.02 val treasureMap = Map ( 1 -> \"Go to island\" , 2 -> \"Find big X on ground\" , 3 -> \"Dig to find treasure\" ) for (( stepNo , instruction ) <- treasureMap ) { println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island Step 2 : Find big X on ground Step 3 : Dig to find treasure treasureMap : Map [ Int , String ] = Map ( 1 -> \"Go to island\" , 2 -> \"Find big X on ground\" , 3 -> \"Dig to find treasure\" ) 07.03 treasureMap . head match { case ( stepNo , instruction ) => println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island 07.04 treasureMap . map { case ( stepNo , instruction ) => println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island Step 2 : Find big X on ground Step 3 : Dig to find treasure res3 : collection . immutable . Iterable [ Unit ] = List ((), (), ()) 07.05 val ( stepNo , instruction ) = treasureMap . head // Output stepNo : Int = 1 instruction : String = \"Go to island\" 07.06 val foo : Any = \"foo\" val ( stepNo , instruction ) = foo // Output scala . MatchError : foo ( of class java . lang . String ) ( foo ( of class java . lang . String )) 07.07 case class Person ( first : String , last : String , age : Int ) val people = Seq ( Person ( \"Harry\" , \"Potter\" , 30 ), Person ( \"Hermione\" , \"Weasley\" , 30 ), Person ( \"Ginny\" , \"Potter\" , 28 )) for ( Person ( first , last , age ) <- people ) println ( s\"Amazingly, $ first $ last is now $ age years old\" ) println ( \"Are you feeling old yet?\" ) // Output Amazingly , Harry Potter is now 30 years old Amazingly , Hermione Weasley is now 30 years old Amazingly , Ginny Potter is now 28 years old Are you feeling old yet ? defined class Person people : Seq [ $user . Person ] = List ( Person ( \"Harry\" , \"Potter\" , 30 ), Person ( \"Hermione\" , \"Weasley\" , 30 ), Person ( \"Ginny\" , \"Potter\" , 28 ) ) 07.08 object Even { def unapply ( x : Int ): Boolean = x % 2 == 0 } for { x @ Even () <- 1 to 100 } yield x // Output defined object Even res7_1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 , 36 , 38 , ... 08 - For Grep and Glory 08.01 val filesHere = ( new java . io . File ( \".\" )). listFiles for ( file <- filesHere if file . getName . endsWith ( \".ipynb\" )) println ( file ) 08.02 def fileLines ( file : java . io . File ) = scala . io . Source . fromFile ( file ). getLines . toList 08.03 val grepResults = for { file <- filesHere if file . getName . endsWith ( \".ipynb\" ) line <- fileLines ( file ) trimmed = line . trim if trimmed . length > 25 if trimmed . matches ( \".*for.*\" ) } yield trimmed . length -> trimmed grepResults foreach println 09 - Desugaring the fors 09.01 object ForExpansion1 { val mults = for { i <- 1 to 3 // flatMap j <- 1 to 3 // flatMap k <- 1 to 3 // map } yield i * j * k } // Output $ scalac -Xprint:parser ForExpansion1.scala [[syntax trees at end of parser]] // ForExpansion1.scala package <empty> { object ForExpansion1 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(3).flatMap(((i) => 1.to(3).flatMap(((j) => 1.to(3).map(((k) => i.$times(j).$times(k))))))) } } 09.02 object ForExpansion2 { val mults = for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k } // Output $ scalac -Xprint:parser ForExpansion2.scala [[syntax trees at end of parser]] // ForExpansion2.scala package <empty> { object ForExpansion2 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(10).flatMap(((i) => 1.to(10).withFilter(((j) => i.$percent(3).$eq$eq(0).$bar$bar(j.$percent(3).$eq$eq(0)))).flatMap(((j) => 1.to(10).withFilter(((k) => i.$times(j).$times(k).$percent(2).$eq$eq(0))).map(((k) => i.$times(j).$times(k))))))) } } 09.03 object ForExpansion3 { val mults = for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 mult = i * j * k if mult % 2 == 0 } yield mult } // Output $ scalac -Xprint:parser ForExpansion3.scala [[syntax trees at end of parser]] // ForExpansion3.scala package <empty> { object ForExpansion3 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(10).flatMap(((i) => 1.to(10).withFilter(((j) => i.$percent(3).$eq$eq(0).$bar$bar(j.$percent(3).$eq$eq(0)))).flatMap(((j) => 1.to(10).map(((k) => { val mult = i.$times(j).$times(k); scala.Tuple2(k, mult) })).withFilter(((x$1) => x$1: @scala.unchecked match { case scala.Tuple2((k @ _), (mult @ _)) => mult.$percent(2).$eq$eq(0) })).map(((x$2) => x$2: @scala.unchecked match { case scala.Tuple2((k @ _), (mult @ _)) => mult })))))) } } 09.04 $ scalac -Xshow-phases phase name id description ---------- -- ----------- parser 1 parse source into ASTs, perform simple desugaring namer 2 resolve names, attach symbols to named trees packageobjects 3 load package objects typer 4 the meat and potatoes: type the trees patmat 5 translate match expressions superaccessors 6 add super accessors in traits and nested classes extmethods 7 add extension methods for inline classes pickler 8 serialize symbol tables refchecks 9 reference/override checking, translate nested objects uncurry 10 uncurry, translate function values to anonymous classes tailcalls 11 replace tail calls by jumps specialize 12 @specialized-driven class and method specialization explicitouter 13 this refs to outer pointers erasure 14 erase types, add interfaces for traits posterasure 15 clean up erased inline classes lazyvals 16 allocate bitmaps, translate lazy vals into lazified defs lambdalift 17 move nested functions to top level constructors 18 move field definitions into constructors flatten 19 eliminate inner classes mixin 20 mixin composition cleanup 21 platform-specific cleanups, generate reflective calls delambdafy 22 remove lambdas icode 23 generate portable intermediate code jvm 24 generate JVM bytecode terminal 25 the last phase during a compilation run 10 - Other Monads 10.01 val e1 : Either [ String , Int ] = Right ( 6 ) val e2 : Either [ String , Int ] = Right ( 7 ) for { x <- e1 . right y <- e2 . right } yield x * y // Output e1 : Either [ String , Int ] = Right ( 6 ) e2 : Either [ String , Int ] = Right ( 7 ) res0_2 : Either [ String , Int ] = Right ( 42 ) 10.02 val e1 : Either [ String , Int ] = Right ( 6 ) val e2 : Either [ String , Int ] = Left ( \"Bad Number\" ) for { x <- e1 . right y <- e2 . right } yield x * y // Output e1 : Either [ String , Int ] = Right ( 6 ) e2 : Either [ String , Int ] = Left ( \"Bad Number\" ) res1_2 : Either [ String , Int ] = Left ( \"Bad Number\" ) 10.03 // add to classpath: // ---- // classpath.add(\"org.scalactic\" %% \"scalactic\" % \"3.0.0\") // ---- import org . scalactic . _ def parseName ( input : String ): String Or ErrorMessage = { val trimmed = input . trim if ( ! trimmed . isEmpty ) Good ( trimmed ) else Bad ( s\"\"\"\" ${ input } \" is not a valid name\"\"\" ) } def parseAge ( input : String ): Int Or ErrorMessage = { try { val age = input . trim . toInt if ( age >= 0 ) Good ( age ) else Bad ( s\"\"\"\" ${ age } \" is not a valid age\"\"\" ) } catch { case _: NumberFormatException => Bad ( s\"\"\"\" ${ input } \" is not a valid integer\"\"\" ) } } case class Person ( name : String , age : Int ) def parsePerson ( inputName : String , inputAge : String ): Person Or ErrorMessage = for { name <- parseName ( inputName ) age <- parseAge ( inputAge ) } yield Person ( name , age ) parsePerson ( \"Sally\" , \"25\" ) parsePerson ( \" \" , \"22\" ) parsePerson ( \"Sally\" , \"twenty eight\" ) // Output res5_0 : Or [ Person , ErrorMessage ] = Good ( Person ( \"Sally\" , 25 )) res5_1 : Or [ Person , ErrorMessage ] = Bad ( \"\"\" \" \" is not a valid name \"\"\" ) res5_2 : Or [ Person , ErrorMessage ] = Bad ( \"\"\" twenty eight\" is not a valid integer \"\"\" ) 10.04 // add to classpath: // ---- // classpath.add(\"org.typelevel\" %% \"cats\" % \"0.7.2\") // ---- import cats . data . _ type IndexState [ A ] = State [ Int , A ] // This returns a next `State` and the index to use for the current node. def nextIdx : State [ Int , Int ] = State { currentIndex => ( currentIndex + 1 , currentIndex ) } val program : State [ Int , ( Int , Int , Int )] = for { x <- nextIdx y <- nextIdx z <- nextIdx } yield ( x , y , z ) program . run ( 1 ). value 11 - scala-arm // add to classpath: // ---- // classpath.add(\"com.jsuereth\" %% \"scala-arm\" % \"1.4\") // ---- import java . io . _ import resource . _ // Copy input into output. for { input <- managed ( new java . io . FileInputStream ( \"test.txt\" )) output <- managed ( new java . io . FileOutputStream ( \"test2.txt\" )) } { val buffer = new Array [ Byte ]( 512 ) def read (): Unit = input . read ( buffer ) match { case - 1 => () case n => output . write ( buffer , 0 , n ) read () } read () } 12 - Monads don\u2019t mix 12.01 case class Passenger ( name : String , cellPhoneNumber : Option [ String ]) case class Carriage ( passengers : List [ Passenger ]) case class Train ( name : String , carriages : List [ Carriage ]) case class Route ( name : String , activeTrain : Option [ Train ]) val route1 = Route ( \"Glen Gach to Glen Pach\" , Some ( Train ( \"The Flying Scotsman\" , List ( Carriage ( List ( Passenger ( \"Rob Roy\" , Some ( \"121-212-1212\" )), Passenger ( \"Connor McCleod\" , None ))), Carriage ( List ( Passenger ( \"Joey McDougall\" , Some ( \"454-545-4545\" ))))) )) ) val route2 = Route ( \"Defuncto 1\" , None ) val route3 = Route ( \"Busy Route of Luddites\" , Some ( Train ( \"The Tech Express\" , List ( Carriage ( List ( Passenger ( \"Ug\" , None ), Passenger ( \"Glug\" , None ))), Carriage ( Nil ), Carriage ( List ( Passenger ( \"Smug\" , Some ( \"323-232-3232\" ))))) )) ) val routes = List ( route1 , route2 , route3 ) // --- for { route <- routes active <- route . activeTrain // huh! carriage <- active . carriages passenger <- carriage . passengers number <- passenger . cellPhoneNumber } yield number // Output Main . scala : 28 : type mismatch ; found : List [ String ] required : Option [ ? ] carriage <- active . carriages ^ 12.02 routes . flatMap { route => // Seq (flatMap A => Seq[B]) route . activeTrain . flatMap { active => // Option (flatMap A => Option[B]) // these two active . carriages . flatMap { carriage => // Seq (flatMap A => Seq[B]) // are the problem... carriage . passengers . flatMap { passenger => // Seq passenger . cellPhoneNumber . map { number => // Option number } } } } } // Output Main . scala : 27 : type mismatch ; found : List [ String ] required : Option [ ? ] active . carriages . flatMap { carriage => // Seq (flatMap A => Seq[B]) // are the problem... ^ 12.03 for { route <- routes active <- route . activeTrain . toSeq // recommended whenever mixing options and seqs carriage <- active . carriages passenger <- carriage . passengers number <- passenger . cellPhoneNumber . toSeq // unnecessary here, but still clear } yield number // Output res2 : List [ String ] = List ( \"121-212-1212\" , \"454-545-4545\" , \"323-232-3232\" ) 12.04 import scala . concurrent . _ import ExecutionContext . Implicits . global import duration . _ val fListONums = Future ( List ( 1 , 2 , 3 , 4 , 5 )) def square ( x : Int ): Future [ Int ] = Future ( x * x ) for { nums <- fListONums num <- nums // doh! - no mixie! sq <- square ( num ) } yield sq // Output Main . scala : 43 : type mismatch ; found : scala . concurrent . Future [ Int ] required : scala . collection . GenTraversableOnce [ ? ] sq <- square ( num ) ^ Main . scala : 42 : type mismatch ; found : List [ Nothing ] required : scala . concurrent . Future [ ? ] num <- nums // doh! - no mixie! ^ 12.05 val fListONums = Future ( List ( 1 , 2 , 3 , 4 , 5 )) def square ( x : Int ): Future [ Int ] = Future ( x * x ) for { nums <- fListONums squares <- Future . traverse ( nums )( x => square ( x )) // Seq[Int] & Int => Future[Int] => Future[Seq[Int]] } yield squares // Output fListONums : Future [ List [ Int ]] = Success ( List ( 1 , 2 , 3 , 4 , 5 )) res4_2 : Future [ List [ Int ]] = Success ( List ( 1 , 4 , 9 , 16 , 25 )) 13 - Emm & M[_] 13.01 // classpath.addRepository(\"https://dl.bintray.com/djspiewak/maven\") // classpath.add(\"com.codecommit\" %% \"emm-cats\" % \"0.2.1\") // --- import emm . _ import emm . compat . cats . _ import cats . std . list . _ import cats . std . option . _ import cats . std . future . _ import scala . concurrent .{ Await , Future } import scala . concurrent . duration . _ implicit val ec = scala . concurrent . ExecutionContext . global type E = Future |: Option |: Base val effect1 = Option ( 3 ). liftM [ E ] val effect2 = Option ( 2 ). liftM [ E ] //val effect2 = (None: Option[Int]).liftM[E] val effect3 = Future { Thread . sleep ( 5000 ); 7 }. liftM [ E ] val effect4 = for { x <- effect1 y <- effect2 z <- effect3 } yield x * y * z effect4 . run . value effect1 effect2 effect3 Await . result ( effect4 . run , 10 seconds ) 14 - How to Option Your Futures 14.01 import scala . concurrent . _ import scala . concurrent . ExecutionContext . Implicits . global import duration . _ val f1 = Future ( 10 ) val o2 = Option ( 20 ) val f3 = Future ( 30 ) val result = for { x <- f1 y <- o2 z <- f3 } yield x * y * z // Sad Vader... // Output Main . scala : 44 : type mismatch ; found : scala . concurrent . Future [ Int ] required : Option [ ? ] z <- f3 ^ Main . scala : 43 : type mismatch ; found : Option [ Nothing ] required : scala . concurrent . Future [ ? ] y <- o2 ^ 14.02 val result = for { x <- f1 z <- f3 res = for ( y <- o2 ) yield x * y * z } yield res Await . result ( result , 1 . second ) // Output result : Future [ Option [ Int ]] = Success ( Some ( 6000 )) res2_1 : Option [ Int ] = Some ( 6000 ) 14.03 def multOptions ( o1 : Option [ Int ], o2 : Option [ Int ], o3 : Option [ Int ]): Option [ Int ] = for { x <- o1 y <- o2 z <- o3 } yield x * y * z val result = for { v1 <- f1 v3 <- f3 } yield multOptions ( Some ( v1 ), o2 , Some ( v3 )) Await . result ( result , 1 . second ) // Output result : Future [ Option [ Int ]] = Success ( Some ( 6000 )) res3_2 : Option [ Int ] = Some ( 6000 ) 15 - Sink 15.01 trait Sink [ To ] { sink => def apply ( t : To ): Unit final def stage [ E ]: StagedSink [ E , E , To ] = StagedSink ( StagedSink . stagedIdentity [ E ], this ) } final case class StagedSink [ First , Current , Final ]( staged : First => Traversable [ Current ], sink : Sink [ Final ]) { def map [ B , To ]( f : Current => B )( implicit isDone : CanSink [ First , B , Final , To ]): To = isDone . result ( this , f ) def flatMap [ B , To ]( f : Current => TraversableOnce [ B ])( implicit isDone : CanSink [ First , B , Final , To ]): To = isDone . result2 ( this , f ) def withFilter ( f : Current => Boolean ): StagedSink [ First , Current , Final ] = StagedSink ( staged andThen { xs => for ( x <- xs ; if f ( x )) yield x }, sink ) } object StagedSink { def stagedIdentity [ E ]: E => Traversable [ E ] = ( e : E ) => List ( e ) } trait CanSink [ First , Now , Final , To ] { def result [ E ]( in : StagedSink [ First , E , Final ], f : E => Now ): To def result2 [ E ]( in : StagedSink [ First , E , Final ], f : E => TraversableOnce [ Now ]): To } trait LowPrioritySinkImplicits { implicit def sinkChain [ First , Now , Final ]: CanSink [ First , Now , Final , StagedSink [ First , Now , Final ]] = new CanSink [ First , Now , Final , StagedSink [ First , Now , Final ]] { def result [ E ]( in : StagedSink [ First , E , Final ], f : E => Now ): StagedSink [ First , Now , Final ] = StagedSink ( in . staged andThen ( x => x map f ), in . sink ) def result2 [ E ]( in : StagedSink [ First , E , Final ], f : E => TraversableOnce [ Now ]): StagedSink [ First , Now , Final ] = StagedSink ( in . staged andThen ( x => x flatMap f ), in . sink ) } } object CanSink extends LowPrioritySinkImplicits { implicit def finalSink [ First , E ]: CanSink [ First , E , E , Sink [ First ]] = new CanSink [ First , E , E , Sink [ First ]] { def result [ A ]( ss : StagedSink [ First , A , E ], f : A => E ): Sink [ First ] = new Sink [ First ] { def apply ( in : First ): Unit = { val staged = ss . staged . andThen { xs => xs map f } for { x <- staged ( in ) } ss . sink ( x ) } } def result2 [ A ]( ss : StagedSink [ First , A , E ], f : A => TraversableOnce [ E ]): Sink [ First ] = new Sink [ First ] { def apply ( in : First ): Unit = { val staged = ss . staged . andThen { xs => xs flatMap f } for { x <- staged ( in ) } ss . sink ( x ) } } } } 15.02 case class User ( name : String , city : String ) { def livesIn ( in : String ): Boolean = city == in } object stdout extends Sink [ String ] { override def apply ( in : String ): Unit = System . out . println ( in ); } def userSink : Sink [ User ] = for { user <- stdout . stage [ User ] if user livesIn \"pittsburgh\" } yield user . name for { user <- List ( User ( \"josh\" , \"pittsburgh\" ), User ( \"dick\" , \"morgan hill\" )) } userSink ( user ) // Output josh defined class User defined object stdout defined function userSink","title":"Scala `for`-comprehensions"},{"location":"blog/2018/2018-12-20-scala-for-compr/#scala-for-comprehensions","text":"| scala | video | functional programming | This is a complete copy of Josh Suereth & Dick Wall talk on Scala World conference: \u201cFor: What is it good for? \u2014 Josh Suereth & Dick Wall\u201d (see references). Actually, I have found github repository with Jupiter notebooks. But, I don\u2019t like this format and decided to store these notes here. References 01 - For \u201cloops\u201d 02 - For with yield 03 - Options 04 - Future 05 - Guards 06 - Inline Assignments 07 - Generators 08 - For Grep and Glory 09 - Desugaring the fors 10 - Other Monads 11 - scala-arm 12 - Monads don\u2019t mix 13 - Emm & M[_] 14 - How to Option Your Futures 15 - Sink","title":"Scala for-comprehensions"},{"location":"blog/2018/2018-12-20-scala-for-compr/#references","text":"Youtube: For: What is it good for? \u2014 Josh Suereth & Dick Wall Github: dickwall/use-the-fors-luke - soutse code realted to \u201cFor: What is it good for?\u201d talk Github: jsuereth/intro-to-fp - This repo contains nice sample of \u201cmonadic\u201d Github client Github: jsuereth/scala-arm - This project aims to be the Scala Incubator project for Automatic-Resource-Management in the scala library \u201cThe Essence of the Iterator Pattern\u201d post by Eric Torreborre","title":"References"},{"location":"blog/2018/2018-12-20-scala-for-compr/#01-for-loops","text":"","title":"01 - For \"loops\""},{"location":"blog/2018/2018-12-20-scala-for-compr/#0101","text":"for ( i <- 1 to 10 ) println ( \"hello world\" ) // Output hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world","title":"01.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0102","text":"for ( i <- 1 to 10 ) println ( i * i ) // Output 1 4 9 16 25 36 49 64 81 100","title":"01.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0103","text":"for ( _ <- 1 to 10 ) println ( \"hello world\" ) // Output hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world","title":"01.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0104","text":"for ( i <- 1 to 10 ) { print ( f\"the square of $ i %2d\" ) println ( f\" is ${ i * i } %3d\" ) } // Output the square of 1 is 1 the square of 2 is 4 the square of 3 is 9 the square of 4 is 16 the square of 5 is 25 the square of 6 is 36 the square of 7 is 49 the square of 8 is 64 the square of 9 is 81 the square of 10 is 100","title":"01.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0105","text":"( 1 to 10 ) // Output res0 : scala . collection . immutable . Range . Inclusive = Range 1 to 10","title":"01.05"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0106","text":"( 1 to 10 ). foreach { i => print ( f\"the square of $ i %2d\" ) println ( f\" is ${ i * i } %3d\" ) } // Output the square of 1 is 1 the square of 2 is 4 the square of 3 is 9 the square of 4 is 16 the square of 5 is 25 the square of 6 is 36 the square of 7 is 49 the square of 8 is 64 the square of 9 is 81 the square of 10 is 100","title":"01.06"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0107","text":"for { i <- 1 to 5 j <- 1 to 5 } println ( s\" $ i times $ j is ${ i * j } \" ) // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25","title":"01.07"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0108","text":"( 1 to 5 ). foreach { i => ( 1 to 5 ). foreach { j => println ( s\" $ i times $ j is ${ i * j } \" ) } } // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25","title":"01.08"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0109","text":"val x1 = ( 1 to 5 ). foreach { i => ( 1 to 5 ). foreach { j => println ( s\" $ i times $ j is ${ i * j } \" ) } } val x2 = for { i <- 1 to 5 j <- 1 to 5 } println ( s\" $ i times $ j is ${ i * j } \" ) println ( x1 ) println ( x2 ) import scala . reflect . runtime . universe . _ def typeOf [ T : TypeTag ]( t : T ) = typeTag [ T ] typeOf ( x1 ) typeOf ( x2 ) // Output 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 x1 : Unit = () 1 times 1 is 1 1 times 2 is 2 1 times 3 is 3 1 times 4 is 4 1 times 5 is 5 2 times 1 is 2 2 times 2 is 4 2 times 3 is 6 2 times 4 is 8 2 times 5 is 10 3 times 1 is 3 3 times 2 is 6 3 times 3 is 9 3 times 4 is 12 3 times 5 is 15 4 times 1 is 4 4 times 2 is 8 4 times 3 is 12 4 times 4 is 16 4 times 5 is 20 5 times 1 is 5 5 times 2 is 10 5 times 3 is 15 5 times 4 is 20 5 times 5 is 25 x2 : Unit = () () () import scala . reflect . runtime . universe . _ typeOf : [ T ]( t : T )( implicit evidence$1 : reflect . runtime . universe . TypeTag [ T ]) reflect . runtime . universe . TypeTag [ T ] res2 : reflect . runtime . universe . TypeTag [ Unit ] = TypeTag [ Unit ] res3 : reflect . runtime . universe . TypeTag [ Unit ] = TypeTag [ Unit ]","title":"01.09"},{"location":"blog/2018/2018-12-20-scala-for-compr/#02-for-with-yield","text":"","title":"02 - For with yield"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0201","text":"val squares = for ( i <- 1 to 10 ) yield ( i * i ) // Output squares : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 )","title":"02.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0202","text":"val squareMap = ( for ( i <- 1 to 10 ) yield ( i -> ( i * i ))). toMap // Output squareMap : Map [ Int , Int ] = Map ( 5 -> 25 , 10 -> 100 , 1 -> 1 , 6 -> 36 , 9 -> 81 , 2 -> 4 , 7 -> 49 , 3 -> 9 , 8 -> 64 , 4 -> 16 )","title":"02.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0203","text":"case class TimesResult ( i : Int , j : Int , mult : Int ) val timesTable = for { i <- 1 to 5 j <- 1 to 5 } yield TimesResult ( i , j , i * j ) // Output defined class TimesResult timesTable : collection . immutable . IndexedSeq [ $user . TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ...","title":"02.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0204","text":"val squares = ( 1 to 10 ). map ( i => i * i ) // Output squares : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 )","title":"02.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0205","text":"val squaresMap = ( 1 to 10 ). map ( i => i -> ( i * i )). toMap // Output squaresMap : scala . collection . immutable . Map [ Int , Int ] = Map ( 5 -> 25 , 10 -> 100 , 1 -> 1 , 6 -> 36 , 9 -> 81 , 2 -> 4 , 7 -> 49 , 3 -> 9 , 8 -> 64 , 4 -> 16 )","title":"02.05"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0206","text":"val timesTable = ( 1 to 5 ). map ( i => ( 1 to 5 ). map ( j => TimesResult ( i , j , i * j ))) // Output timesTable : collection . immutable . IndexedSeq [ collection . immutable . IndexedSeq [ TimesResult ]] = Vector ( Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ) ), Vector ( TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ) ), Vector ( TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), ...","title":"02.06"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0207","text":"timesTable . flatten // Output res5 : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ...","title":"02.07"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0208","text":"val timesTableFlat = ( 1 to 5 ). flatMap ( i => ( 1 to 5 ). map ( j => TimesResult ( i , j , i * j ))) // Output timesTableFlat : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ...","title":"02.08"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0209","text":"val timesTable = for { i <- 1 to 5 // flatMap j <- 1 to 5 // map } yield TimesResult ( i , j , i * j ) // Output timesTableFlat : collection . immutable . IndexedSeq [ TimesResult ] = Vector ( TimesResult ( 1 , 1 , 1 ), TimesResult ( 1 , 2 , 2 ), TimesResult ( 1 , 3 , 3 ), TimesResult ( 1 , 4 , 4 ), TimesResult ( 1 , 5 , 5 ), TimesResult ( 2 , 1 , 2 ), TimesResult ( 2 , 2 , 4 ), TimesResult ( 2 , 3 , 6 ), TimesResult ( 2 , 4 , 8 ), TimesResult ( 2 , 5 , 10 ), TimesResult ( 3 , 1 , 3 ), TimesResult ( 3 , 2 , 6 ), TimesResult ( 3 , 3 , 9 ), TimesResult ( 3 , 4 , 12 ), TimesResult ( 3 , 5 , 15 ), TimesResult ( 4 , 1 , 4 ), TimesResult ( 4 , 2 , 8 ), TimesResult ( 4 , 3 , 12 ), TimesResult ( 4 , 4 , 16 ), ...","title":"02.09"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0210","text":"for { i <- 1 to 3 // flatMap j <- 1 to 3 // flatMap k <- 1 to 3 // map } yield i * j * k // Output res0 : scala . collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 2 , 3 , 2 , 4 , 6 , 3 , 6 , 9 , 2 , 4 , 6 , 4 , 8 , 12 , 6 , 12 , 18 , 3 , 6 , 9 , 6 , 12 , 18 , 9 , 18 , 27 )","title":"02.10"},{"location":"blog/2018/2018-12-20-scala-for-compr/#03-options","text":"","title":"03 - Options"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0301","text":"val x = 1 val y = 2 val z = 3 // Output val result = x * y * z x : Int = 1 y : Int = 2 z : Int = 3 result : Int = 6","title":"03.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0302","text":"val ox = Some ( 1 ) val oy = Some ( 2 ) val oz = Some ( 3 ) val oResult = for { x <- ox y <- oy z <- oz } yield { x * y * z } // Output ox : Some [ Int ] = Some ( 1 ) oy : Some [ Int ] = Some ( 2 ) oz : Some [ Int ] = Some ( 3 ) oResult : Option [ Int ] = Some ( 6 )","title":"03.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0303","text":"val ox = Some ( 1 ) val oy : Option [ Int ] = None val oz = Some ( 3 ) val oResult = for { x <- ox y <- oy z <- oz } yield { x * y * z } // Output ox : Some [ Int ] = Some ( 1 ) oy : Option [ Int ] = None oz : Some [ Int ] = Some ( 3 ) oResult : Option [ Int ] = None","title":"03.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#04-future","text":"","title":"04 - Future"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0401","text":"import scala . concurrent . _ import ExecutionContext . Implicits . global import duration . _ val f1 = Future { Thread . sleep ( 10000 ); 6 } val f2 = Future { Thread . sleep ( 10000 ); 7 } val f3 = for { x <- f1 y <- f2 } yield x * y f3 . value // Output f1 : Future [ Int ] = List ( scala . concurrent . impl . CallbackRunnable @ 5e5167 e0 ) f2 : Future [ Int ] = List () f3 : Future [ Int ] = List () res2_3 : Option [ scala . util . Try [ Int ]] = None","title":"04.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0402","text":"Await . result ( f3 , 11 . seconds ) // Output res3 : Int = 42","title":"04.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0403","text":"val f1 = Future { Thread . sleep ( 1000 ); 6 } val f2 = Future { Thread . sleep ( 1000 ); 7 / 0 } val f3 = for { x <- f1 y <- f2 } yield x * y f3 . value Await . result ( f3 , 2 . seconds ) // Output res0 : Option [ scala . util . Try [ Int ]] = None java . lang . ArithmeticException : / by zero at . $anonfun$f2$1 ( < console >: 18 ) at scala . runtime . java8 . JFunction0$mcI$sp . apply ( JFunction0$mcI$sp . java : 23 ) at scala . concurrent . Future$ . $anonfun$apply$1 ( Future . scala : 658 ) at scala . util . Success . $anonfun$map$1 ( Try . scala : 255 ) at scala . util . Success . map ( Try . scala : 213 ) at scala . concurrent . Future . $anonfun$map$1 ( Future . scala : 292 ) at scala . concurrent . impl . Promise . liftedTree1$1 ( Promise . scala : 33 ) at scala . concurrent . impl . Promise . $anonfun$transform$1 ( Promise . scala : 33 ) at scala . concurrent . impl . CallbackRunnable . run ( Promise . scala : 64 ) at java . util . concurrent . ForkJoinTask$RunnableExecuteAction . exec ( ForkJoinTask . java : 1402 ) at java . util . concurrent . ForkJoinTask . doExec ( ForkJoinTask . java : 289 ) at java . util . concurrent . ForkJoinPool$WorkQueue . runTask ( ForkJoinPool . java : 1056 ) at java . util . concurrent . ForkJoinPool . runWorker ( ForkJoinPool . java : 1692 ) at java . util . concurrent . ForkJoinWorkerThread . run ( ForkJoinWorkerThread . java : 157 )","title":"04.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#05-guards","text":"","title":"05 - Guards"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0501","text":"for { x <- 1 to 10 y <- 1 to 10 if x % 4 < y % 5 if x % 2 == 0 } yield x * y // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 8 , 16 , 18 , 4 , 8 , 12 , 16 , 24 , 28 , 32 , 36 , 18 , 24 , 48 , 54 , 8 , 16 , 24 , ...","title":"05.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0502","text":"for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // Output res1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ...","title":"05.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0503","text":"( 1 to 10 ). flatMap { i => ( 1 to 10 ). withFilter ( j => i % 3 == 0 || j % 3 == 0 ). flatMap { j => ( 1 to 10 ). withFilter ( k => i * j * k % 2 == 0 ). map { k => i * j * k } } } // Output res2 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ...","title":"05.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0504","text":"for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // Output res3 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ...","title":"05.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#06-inline-assignments","text":"","title":"06 - Inline Assignments"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0601","text":"for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k // why repeat this? // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ...","title":"06.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0602","text":"for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 mult = i * j * k if mult % 2 == 0 } yield mult // Output res1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , ...","title":"06.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0603","text":"( 1 to 10 ). flatMap { i => ( 1 to 10 ). withFilter ( j => i % 3 == 0 || j % 3 == 0 ). flatMap { j => ( 1 to 10 ). map { k => val mult = i * j * k ( k , mult ) }. withFilter { case ( k , mult ) => mult % 2 == 0 }. map { case ( k , mult ) => mult } } } // Output res0 : scala . collection . immutable . IndexedSeq [ Int ] = Vector ( 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , 90 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 18 , 36 , 54 , 72 , 90 , 108 , 126 , 144 , 162 , 180 , 6 , 12 , 18 , 24 , 30 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , 48 , 54 , 60 , 18 , 36 , 54 , 72 , 90 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 30 , 60 , 90 , 120 , 150 , 18 , 36 , 54 , 72 , 90 , 108 , 126 , 144 , 162 , 180 , 42 , 84 , 126 , 168 , 210 , 24 , 48 , 72 , 96 , 120 , 144 , 168 , 192 , 216 , 240 , 54 , 108 , 162 , 216 , 270 , 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 12 , 24 , 36 , 48 , 60 , 72 , 84 , 96 , 108 , 120 , 24 , 48 , 72 , 96 , 120 , 144 , 168 , 192 , 216 , 240 , 36 , 72 , 108 , 144 , 180 , 216 , 252 , 288 , 324 , 360 , 30 , 60 , 90 , 120 , 150 , 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 90 ,...","title":"06.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0604","text":"// what else can we do with assiGnments? val mults = for { i <- 1 to 5 _ = println ( s\"i is $ i \" ) // or logger.info(s\"$i\") - SIDE EFFECTS! j <- 1 to 5 } yield i * j // Output i is 1 i is 2 i is 3 i is 4 i is 5 mults : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 2 , 3 , 4 , 5 , 2 , 4 , 6 , 8 , 10 , 3 , 6 , 9 , 12 , 15 , 4 , 8 , 12 , 16 , ...","title":"06.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#07-generators","text":"","title":"07 - Generators"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0701","text":"for ( i <- 1 to 5 ) yield i * i // Output res0 : collection . immutable . IndexedSeq [ Int ] = Vector ( 1 , 4 , 9 , 16 , 25 )","title":"07.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0702","text":"val treasureMap = Map ( 1 -> \"Go to island\" , 2 -> \"Find big X on ground\" , 3 -> \"Dig to find treasure\" ) for (( stepNo , instruction ) <- treasureMap ) { println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island Step 2 : Find big X on ground Step 3 : Dig to find treasure treasureMap : Map [ Int , String ] = Map ( 1 -> \"Go to island\" , 2 -> \"Find big X on ground\" , 3 -> \"Dig to find treasure\" )","title":"07.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0703","text":"treasureMap . head match { case ( stepNo , instruction ) => println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island","title":"07.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0704","text":"treasureMap . map { case ( stepNo , instruction ) => println ( s\"Step $ stepNo : $ instruction \" ) } // Output Step 1 : Go to island Step 2 : Find big X on ground Step 3 : Dig to find treasure res3 : collection . immutable . Iterable [ Unit ] = List ((), (), ())","title":"07.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0705","text":"val ( stepNo , instruction ) = treasureMap . head // Output stepNo : Int = 1 instruction : String = \"Go to island\"","title":"07.05"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0706","text":"val foo : Any = \"foo\" val ( stepNo , instruction ) = foo // Output scala . MatchError : foo ( of class java . lang . String ) ( foo ( of class java . lang . String ))","title":"07.06"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0707","text":"case class Person ( first : String , last : String , age : Int ) val people = Seq ( Person ( \"Harry\" , \"Potter\" , 30 ), Person ( \"Hermione\" , \"Weasley\" , 30 ), Person ( \"Ginny\" , \"Potter\" , 28 )) for ( Person ( first , last , age ) <- people ) println ( s\"Amazingly, $ first $ last is now $ age years old\" ) println ( \"Are you feeling old yet?\" ) // Output Amazingly , Harry Potter is now 30 years old Amazingly , Hermione Weasley is now 30 years old Amazingly , Ginny Potter is now 28 years old Are you feeling old yet ? defined class Person people : Seq [ $user . Person ] = List ( Person ( \"Harry\" , \"Potter\" , 30 ), Person ( \"Hermione\" , \"Weasley\" , 30 ), Person ( \"Ginny\" , \"Potter\" , 28 ) )","title":"07.07"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0708","text":"object Even { def unapply ( x : Int ): Boolean = x % 2 == 0 } for { x @ Even () <- 1 to 100 } yield x // Output defined object Even res7_1 : collection . immutable . IndexedSeq [ Int ] = Vector ( 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 , 36 , 38 , ...","title":"07.08"},{"location":"blog/2018/2018-12-20-scala-for-compr/#08-for-grep-and-glory","text":"","title":"08 - For Grep and Glory"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0801","text":"val filesHere = ( new java . io . File ( \".\" )). listFiles for ( file <- filesHere if file . getName . endsWith ( \".ipynb\" )) println ( file )","title":"08.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0802","text":"def fileLines ( file : java . io . File ) = scala . io . Source . fromFile ( file ). getLines . toList","title":"08.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0803","text":"val grepResults = for { file <- filesHere if file . getName . endsWith ( \".ipynb\" ) line <- fileLines ( file ) trimmed = line . trim if trimmed . length > 25 if trimmed . matches ( \".*for.*\" ) } yield trimmed . length -> trimmed grepResults foreach println","title":"08.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#09-desugaring-the-fors","text":"","title":"09 - Desugaring the fors"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0901","text":"object ForExpansion1 { val mults = for { i <- 1 to 3 // flatMap j <- 1 to 3 // flatMap k <- 1 to 3 // map } yield i * j * k } // Output $ scalac -Xprint:parser ForExpansion1.scala [[syntax trees at end of parser]] // ForExpansion1.scala package <empty> { object ForExpansion1 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(3).flatMap(((i) => 1.to(3).flatMap(((j) => 1.to(3).map(((k) => i.$times(j).$times(k))))))) } }","title":"09.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0902","text":"object ForExpansion2 { val mults = for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 if i * j * k % 2 == 0 } yield i * j * k } // Output $ scalac -Xprint:parser ForExpansion2.scala [[syntax trees at end of parser]] // ForExpansion2.scala package <empty> { object ForExpansion2 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(10).flatMap(((i) => 1.to(10).withFilter(((j) => i.$percent(3).$eq$eq(0).$bar$bar(j.$percent(3).$eq$eq(0)))).flatMap(((j) => 1.to(10).withFilter(((k) => i.$times(j).$times(k).$percent(2).$eq$eq(0))).map(((k) => i.$times(j).$times(k))))))) } }","title":"09.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0903","text":"object ForExpansion3 { val mults = for { i <- 1 to 10 j <- 1 to 10 if i % 3 == 0 || j % 3 == 0 k <- 1 to 10 mult = i * j * k if mult % 2 == 0 } yield mult } // Output $ scalac -Xprint:parser ForExpansion3.scala [[syntax trees at end of parser]] // ForExpansion3.scala package <empty> { object ForExpansion3 extends scala.AnyRef { def <init>() = { super.<init>(); () }; val mults = 1.to(10).flatMap(((i) => 1.to(10).withFilter(((j) => i.$percent(3).$eq$eq(0).$bar$bar(j.$percent(3).$eq$eq(0)))).flatMap(((j) => 1.to(10).map(((k) => { val mult = i.$times(j).$times(k); scala.Tuple2(k, mult) })).withFilter(((x$1) => x$1: @scala.unchecked match { case scala.Tuple2((k @ _), (mult @ _)) => mult.$percent(2).$eq$eq(0) })).map(((x$2) => x$2: @scala.unchecked match { case scala.Tuple2((k @ _), (mult @ _)) => mult })))))) } }","title":"09.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#0904","text":"$ scalac -Xshow-phases phase name id description ---------- -- ----------- parser 1 parse source into ASTs, perform simple desugaring namer 2 resolve names, attach symbols to named trees packageobjects 3 load package objects typer 4 the meat and potatoes: type the trees patmat 5 translate match expressions superaccessors 6 add super accessors in traits and nested classes extmethods 7 add extension methods for inline classes pickler 8 serialize symbol tables refchecks 9 reference/override checking, translate nested objects uncurry 10 uncurry, translate function values to anonymous classes tailcalls 11 replace tail calls by jumps specialize 12 @specialized-driven class and method specialization explicitouter 13 this refs to outer pointers erasure 14 erase types, add interfaces for traits posterasure 15 clean up erased inline classes lazyvals 16 allocate bitmaps, translate lazy vals into lazified defs lambdalift 17 move nested functions to top level constructors 18 move field definitions into constructors flatten 19 eliminate inner classes mixin 20 mixin composition cleanup 21 platform-specific cleanups, generate reflective calls delambdafy 22 remove lambdas icode 23 generate portable intermediate code jvm 24 generate JVM bytecode terminal 25 the last phase during a compilation run","title":"09.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#10-other-monads","text":"","title":"10 - Other Monads"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1001","text":"val e1 : Either [ String , Int ] = Right ( 6 ) val e2 : Either [ String , Int ] = Right ( 7 ) for { x <- e1 . right y <- e2 . right } yield x * y // Output e1 : Either [ String , Int ] = Right ( 6 ) e2 : Either [ String , Int ] = Right ( 7 ) res0_2 : Either [ String , Int ] = Right ( 42 )","title":"10.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1002","text":"val e1 : Either [ String , Int ] = Right ( 6 ) val e2 : Either [ String , Int ] = Left ( \"Bad Number\" ) for { x <- e1 . right y <- e2 . right } yield x * y // Output e1 : Either [ String , Int ] = Right ( 6 ) e2 : Either [ String , Int ] = Left ( \"Bad Number\" ) res1_2 : Either [ String , Int ] = Left ( \"Bad Number\" )","title":"10.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1003","text":"// add to classpath: // ---- // classpath.add(\"org.scalactic\" %% \"scalactic\" % \"3.0.0\") // ---- import org . scalactic . _ def parseName ( input : String ): String Or ErrorMessage = { val trimmed = input . trim if ( ! trimmed . isEmpty ) Good ( trimmed ) else Bad ( s\"\"\"\" ${ input } \" is not a valid name\"\"\" ) } def parseAge ( input : String ): Int Or ErrorMessage = { try { val age = input . trim . toInt if ( age >= 0 ) Good ( age ) else Bad ( s\"\"\"\" ${ age } \" is not a valid age\"\"\" ) } catch { case _: NumberFormatException => Bad ( s\"\"\"\" ${ input } \" is not a valid integer\"\"\" ) } } case class Person ( name : String , age : Int ) def parsePerson ( inputName : String , inputAge : String ): Person Or ErrorMessage = for { name <- parseName ( inputName ) age <- parseAge ( inputAge ) } yield Person ( name , age ) parsePerson ( \"Sally\" , \"25\" ) parsePerson ( \" \" , \"22\" ) parsePerson ( \"Sally\" , \"twenty eight\" ) // Output res5_0 : Or [ Person , ErrorMessage ] = Good ( Person ( \"Sally\" , 25 )) res5_1 : Or [ Person , ErrorMessage ] = Bad ( \"\"\" \" \" is not a valid name \"\"\" ) res5_2 : Or [ Person , ErrorMessage ] = Bad ( \"\"\" twenty eight\" is not a valid integer \"\"\" )","title":"10.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1004","text":"// add to classpath: // ---- // classpath.add(\"org.typelevel\" %% \"cats\" % \"0.7.2\") // ---- import cats . data . _ type IndexState [ A ] = State [ Int , A ] // This returns a next `State` and the index to use for the current node. def nextIdx : State [ Int , Int ] = State { currentIndex => ( currentIndex + 1 , currentIndex ) } val program : State [ Int , ( Int , Int , Int )] = for { x <- nextIdx y <- nextIdx z <- nextIdx } yield ( x , y , z ) program . run ( 1 ). value","title":"10.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#11-scala-arm","text":"// add to classpath: // ---- // classpath.add(\"com.jsuereth\" %% \"scala-arm\" % \"1.4\") // ---- import java . io . _ import resource . _ // Copy input into output. for { input <- managed ( new java . io . FileInputStream ( \"test.txt\" )) output <- managed ( new java . io . FileOutputStream ( \"test2.txt\" )) } { val buffer = new Array [ Byte ]( 512 ) def read (): Unit = input . read ( buffer ) match { case - 1 => () case n => output . write ( buffer , 0 , n ) read () } read () }","title":"11 - scala-arm"},{"location":"blog/2018/2018-12-20-scala-for-compr/#12-monads-dont-mix","text":"","title":"12 - Monads don't mix"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1201","text":"case class Passenger ( name : String , cellPhoneNumber : Option [ String ]) case class Carriage ( passengers : List [ Passenger ]) case class Train ( name : String , carriages : List [ Carriage ]) case class Route ( name : String , activeTrain : Option [ Train ]) val route1 = Route ( \"Glen Gach to Glen Pach\" , Some ( Train ( \"The Flying Scotsman\" , List ( Carriage ( List ( Passenger ( \"Rob Roy\" , Some ( \"121-212-1212\" )), Passenger ( \"Connor McCleod\" , None ))), Carriage ( List ( Passenger ( \"Joey McDougall\" , Some ( \"454-545-4545\" ))))) )) ) val route2 = Route ( \"Defuncto 1\" , None ) val route3 = Route ( \"Busy Route of Luddites\" , Some ( Train ( \"The Tech Express\" , List ( Carriage ( List ( Passenger ( \"Ug\" , None ), Passenger ( \"Glug\" , None ))), Carriage ( Nil ), Carriage ( List ( Passenger ( \"Smug\" , Some ( \"323-232-3232\" ))))) )) ) val routes = List ( route1 , route2 , route3 ) // --- for { route <- routes active <- route . activeTrain // huh! carriage <- active . carriages passenger <- carriage . passengers number <- passenger . cellPhoneNumber } yield number // Output Main . scala : 28 : type mismatch ; found : List [ String ] required : Option [ ? ] carriage <- active . carriages ^","title":"12.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1202","text":"routes . flatMap { route => // Seq (flatMap A => Seq[B]) route . activeTrain . flatMap { active => // Option (flatMap A => Option[B]) // these two active . carriages . flatMap { carriage => // Seq (flatMap A => Seq[B]) // are the problem... carriage . passengers . flatMap { passenger => // Seq passenger . cellPhoneNumber . map { number => // Option number } } } } } // Output Main . scala : 27 : type mismatch ; found : List [ String ] required : Option [ ? ] active . carriages . flatMap { carriage => // Seq (flatMap A => Seq[B]) // are the problem... ^","title":"12.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1203","text":"for { route <- routes active <- route . activeTrain . toSeq // recommended whenever mixing options and seqs carriage <- active . carriages passenger <- carriage . passengers number <- passenger . cellPhoneNumber . toSeq // unnecessary here, but still clear } yield number // Output res2 : List [ String ] = List ( \"121-212-1212\" , \"454-545-4545\" , \"323-232-3232\" )","title":"12.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1204","text":"import scala . concurrent . _ import ExecutionContext . Implicits . global import duration . _ val fListONums = Future ( List ( 1 , 2 , 3 , 4 , 5 )) def square ( x : Int ): Future [ Int ] = Future ( x * x ) for { nums <- fListONums num <- nums // doh! - no mixie! sq <- square ( num ) } yield sq // Output Main . scala : 43 : type mismatch ; found : scala . concurrent . Future [ Int ] required : scala . collection . GenTraversableOnce [ ? ] sq <- square ( num ) ^ Main . scala : 42 : type mismatch ; found : List [ Nothing ] required : scala . concurrent . Future [ ? ] num <- nums // doh! - no mixie! ^","title":"12.04"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1205","text":"val fListONums = Future ( List ( 1 , 2 , 3 , 4 , 5 )) def square ( x : Int ): Future [ Int ] = Future ( x * x ) for { nums <- fListONums squares <- Future . traverse ( nums )( x => square ( x )) // Seq[Int] & Int => Future[Int] => Future[Seq[Int]] } yield squares // Output fListONums : Future [ List [ Int ]] = Success ( List ( 1 , 2 , 3 , 4 , 5 )) res4_2 : Future [ List [ Int ]] = Success ( List ( 1 , 4 , 9 , 16 , 25 ))","title":"12.05"},{"location":"blog/2018/2018-12-20-scala-for-compr/#13-emm-m_","text":"","title":"13 - Emm  &amp; M[_]"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1301","text":"// classpath.addRepository(\"https://dl.bintray.com/djspiewak/maven\") // classpath.add(\"com.codecommit\" %% \"emm-cats\" % \"0.2.1\") // --- import emm . _ import emm . compat . cats . _ import cats . std . list . _ import cats . std . option . _ import cats . std . future . _ import scala . concurrent .{ Await , Future } import scala . concurrent . duration . _ implicit val ec = scala . concurrent . ExecutionContext . global type E = Future |: Option |: Base val effect1 = Option ( 3 ). liftM [ E ] val effect2 = Option ( 2 ). liftM [ E ] //val effect2 = (None: Option[Int]).liftM[E] val effect3 = Future { Thread . sleep ( 5000 ); 7 }. liftM [ E ] val effect4 = for { x <- effect1 y <- effect2 z <- effect3 } yield x * y * z effect4 . run . value effect1 effect2 effect3 Await . result ( effect4 . run , 10 seconds )","title":"13.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#14-how-to-option-your-futures","text":"","title":"14 - How to Option Your Futures"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1401","text":"import scala . concurrent . _ import scala . concurrent . ExecutionContext . Implicits . global import duration . _ val f1 = Future ( 10 ) val o2 = Option ( 20 ) val f3 = Future ( 30 ) val result = for { x <- f1 y <- o2 z <- f3 } yield x * y * z // Sad Vader... // Output Main . scala : 44 : type mismatch ; found : scala . concurrent . Future [ Int ] required : Option [ ? ] z <- f3 ^ Main . scala : 43 : type mismatch ; found : Option [ Nothing ] required : scala . concurrent . Future [ ? ] y <- o2 ^","title":"14.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1402","text":"val result = for { x <- f1 z <- f3 res = for ( y <- o2 ) yield x * y * z } yield res Await . result ( result , 1 . second ) // Output result : Future [ Option [ Int ]] = Success ( Some ( 6000 )) res2_1 : Option [ Int ] = Some ( 6000 )","title":"14.02"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1403","text":"def multOptions ( o1 : Option [ Int ], o2 : Option [ Int ], o3 : Option [ Int ]): Option [ Int ] = for { x <- o1 y <- o2 z <- o3 } yield x * y * z val result = for { v1 <- f1 v3 <- f3 } yield multOptions ( Some ( v1 ), o2 , Some ( v3 )) Await . result ( result , 1 . second ) // Output result : Future [ Option [ Int ]] = Success ( Some ( 6000 )) res3_2 : Option [ Int ] = Some ( 6000 )","title":"14.03"},{"location":"blog/2018/2018-12-20-scala-for-compr/#15-sink","text":"","title":"15 - Sink"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1501","text":"trait Sink [ To ] { sink => def apply ( t : To ): Unit final def stage [ E ]: StagedSink [ E , E , To ] = StagedSink ( StagedSink . stagedIdentity [ E ], this ) } final case class StagedSink [ First , Current , Final ]( staged : First => Traversable [ Current ], sink : Sink [ Final ]) { def map [ B , To ]( f : Current => B )( implicit isDone : CanSink [ First , B , Final , To ]): To = isDone . result ( this , f ) def flatMap [ B , To ]( f : Current => TraversableOnce [ B ])( implicit isDone : CanSink [ First , B , Final , To ]): To = isDone . result2 ( this , f ) def withFilter ( f : Current => Boolean ): StagedSink [ First , Current , Final ] = StagedSink ( staged andThen { xs => for ( x <- xs ; if f ( x )) yield x }, sink ) } object StagedSink { def stagedIdentity [ E ]: E => Traversable [ E ] = ( e : E ) => List ( e ) } trait CanSink [ First , Now , Final , To ] { def result [ E ]( in : StagedSink [ First , E , Final ], f : E => Now ): To def result2 [ E ]( in : StagedSink [ First , E , Final ], f : E => TraversableOnce [ Now ]): To } trait LowPrioritySinkImplicits { implicit def sinkChain [ First , Now , Final ]: CanSink [ First , Now , Final , StagedSink [ First , Now , Final ]] = new CanSink [ First , Now , Final , StagedSink [ First , Now , Final ]] { def result [ E ]( in : StagedSink [ First , E , Final ], f : E => Now ): StagedSink [ First , Now , Final ] = StagedSink ( in . staged andThen ( x => x map f ), in . sink ) def result2 [ E ]( in : StagedSink [ First , E , Final ], f : E => TraversableOnce [ Now ]): StagedSink [ First , Now , Final ] = StagedSink ( in . staged andThen ( x => x flatMap f ), in . sink ) } } object CanSink extends LowPrioritySinkImplicits { implicit def finalSink [ First , E ]: CanSink [ First , E , E , Sink [ First ]] = new CanSink [ First , E , E , Sink [ First ]] { def result [ A ]( ss : StagedSink [ First , A , E ], f : A => E ): Sink [ First ] = new Sink [ First ] { def apply ( in : First ): Unit = { val staged = ss . staged . andThen { xs => xs map f } for { x <- staged ( in ) } ss . sink ( x ) } } def result2 [ A ]( ss : StagedSink [ First , A , E ], f : A => TraversableOnce [ E ]): Sink [ First ] = new Sink [ First ] { def apply ( in : First ): Unit = { val staged = ss . staged . andThen { xs => xs flatMap f } for { x <- staged ( in ) } ss . sink ( x ) } } } }","title":"15.01"},{"location":"blog/2018/2018-12-20-scala-for-compr/#1502","text":"case class User ( name : String , city : String ) { def livesIn ( in : String ): Boolean = city == in } object stdout extends Sink [ String ] { override def apply ( in : String ): Unit = System . out . println ( in ); } def userSink : Sink [ User ] = for { user <- stdout . stage [ User ] if user livesIn \"pittsburgh\" } yield user . name for { user <- List ( User ( \"josh\" , \"pittsburgh\" ), User ( \"dick\" , \"morgan hill\" )) } userSink ( user ) // Output josh defined class User defined object stdout defined function userSink","title":"15.02"},{"location":"blog/2018/2018-12-21-scala-vs-haskell/","text":"[WIP] Scala vs Haskell | scala | haskell | vs | comparison | References \u201cHaskell and Scala comparison\u201d by Adam Szlachta, 2013-03-30 \u201cComparing Haskell and Scala\u201d by Martin Ockajak \u201cThe Next Great Functional Programming Language\u201d by John De Goes, \u201cDo you like Scala? Give Haskell a try\u201d. by Philipp Kant, 2016-11-29 \u201cHaskell for Scala Developers\u201d by Claire Neveu, 2014-06-12 \u201cMy Take on Haskell vs Scala\u201d by Jesper Nordenberg, 2012-05-08 Haskell vs. Scala programming language: which should you learn in 2017 The Origins of Scala, A Conversation with Martin Odersky, Part I\u201d by Bill Venners and Frank Sommers, 2009-05-04 Reddit r/ProgrammingLanguages - Functional programming in Haskell vs Scala r/scala - Functional programming in Haskell vs Scala","title":"[WIP] Scala vs Haskell"},{"location":"blog/2018/2018-12-21-scala-vs-haskell/#wip-scala-vs-haskell","text":"| scala | haskell | vs | comparison |","title":"[WIP] Scala vs Haskell"},{"location":"blog/2018/2018-12-21-scala-vs-haskell/#references","text":"\u201cHaskell and Scala comparison\u201d by Adam Szlachta, 2013-03-30 \u201cComparing Haskell and Scala\u201d by Martin Ockajak \u201cThe Next Great Functional Programming Language\u201d by John De Goes, \u201cDo you like Scala? Give Haskell a try\u201d. by Philipp Kant, 2016-11-29 \u201cHaskell for Scala Developers\u201d by Claire Neveu, 2014-06-12 \u201cMy Take on Haskell vs Scala\u201d by Jesper Nordenberg, 2012-05-08 Haskell vs. Scala programming language: which should you learn in 2017 The Origins of Scala, A Conversation with Martin Odersky, Part I\u201d by Bill Venners and Frank Sommers, 2009-05-04 Reddit r/ProgrammingLanguages - Functional programming in Haskell vs Scala r/scala - Functional programming in Haskell vs Scala","title":"References"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/","text":"Resources for Practicing Coding Interview | interview | Table of Contents Coding challenges Main resources Others resources Not so good Articles/Stories Books Courses Coding challenges Main resources This section contains the most \u201cimportant\u201d resources/sites. It\u2019s simply not possible to work with difference Coding Challenges platforms. We should select one or two platform(s) and stick to it since our goal is to master codding challenges skill in limited amount of time. LeetCode HackerRank Youtube Channel Others resources Hackerearth - In general it is a Competitive programming site, but except this it contains some tutorials/learning materials and sample programming challenges. CS Academy - This resource has nice tutorials/learning materials and sample programming challenges CodeSignal InterviewBit Codewars - Looks like interesting site, I have to check it Codebyte is not free (monthly/annual Subscription). But it has open tutorials. Topcoder CodeForces CodeChef projecteuler.net Kattis Not so good Spoj - Sphere online judge AtCoder Virtual Judge Articles/Stories Coding Interview University Preparing for Programming interview with Python \u2018How to Get a Job at the Big 4 - Amazon, Facebook, Google & Microsoft\u2019 by Sean Lee : Youtube and Slides \u041a\u0430\u043a \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 Google: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 by Sergey Sema Quora wiki - How do I prepare to answer design questions in a technical interview? - Here you can find a lot of useful resources Google Doc - Algorithms and Data Structures - Notes Larrr.com - Resume check Careercup - This Is What A GOOD Resume Should Look Like Books Cracking the Coding Interview: 189 Programming Questions and Solutions 6th Edition by Gayle Laakmann McDowell Cracking the Coding Interview 6th Ed. Solutions in 16 programming languages Python Solutions to Cracking the Coding Interview, 6th Edition Programming Interviews Exposed: Secrets to Landing Your Next Job 3rd Edition by John Mongan, Noah Suojanen Kindler, Eric Giguere Courses Coursera : Algorithms, Part I and Algorithms, Part II HiredInTech - Algorithm Design for Tech Interviews","title":"Resources for Practicing Coding Interview"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#resources-for-practicing-coding-interview","text":"| interview | Table of Contents Coding challenges Main resources Others resources Not so good Articles/Stories Books Courses","title":"Resources for Practicing Coding Interview"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#coding-challenges","text":"","title":"Coding challenges"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#main-resources","text":"This section contains the most \u201cimportant\u201d resources/sites. It\u2019s simply not possible to work with difference Coding Challenges platforms. We should select one or two platform(s) and stick to it since our goal is to master codding challenges skill in limited amount of time. LeetCode HackerRank Youtube Channel","title":"Main resources"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#others-resources","text":"Hackerearth - In general it is a Competitive programming site, but except this it contains some tutorials/learning materials and sample programming challenges. CS Academy - This resource has nice tutorials/learning materials and sample programming challenges CodeSignal InterviewBit Codewars - Looks like interesting site, I have to check it Codebyte is not free (monthly/annual Subscription). But it has open tutorials. Topcoder CodeForces CodeChef projecteuler.net Kattis","title":"Others resources"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#not-so-good","text":"Spoj - Sphere online judge AtCoder Virtual Judge","title":"Not so good"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#articlesstories","text":"Coding Interview University Preparing for Programming interview with Python \u2018How to Get a Job at the Big 4 - Amazon, Facebook, Google & Microsoft\u2019 by Sean Lee : Youtube and Slides \u041a\u0430\u043a \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 Google: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 by Sergey Sema Quora wiki - How do I prepare to answer design questions in a technical interview? - Here you can find a lot of useful resources Google Doc - Algorithms and Data Structures - Notes Larrr.com - Resume check Careercup - This Is What A GOOD Resume Should Look Like","title":"Articles/Stories"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#books","text":"Cracking the Coding Interview: 189 Programming Questions and Solutions 6th Edition by Gayle Laakmann McDowell Cracking the Coding Interview 6th Ed. Solutions in 16 programming languages Python Solutions to Cracking the Coding Interview, 6th Edition Programming Interviews Exposed: Secrets to Landing Your Next Job 3rd Edition by John Mongan, Noah Suojanen Kindler, Eric Giguere","title":"Books"},{"location":"blog/2018/2018-12-28-tech-interview-coding-prep-res/#courses","text":"Coursera : Algorithms, Part I and Algorithms, Part II HiredInTech - Algorithm Design for Tech Interviews","title":"Courses"},{"location":"blog/2018/2018-12-29-system-design-interview-prep/","text":"Resources for System Design Interview | interview | Related posts: 2018-12-29 - Resources for System Design Interview 2018-12-28 - Resources for Practicing Coding Interview Courses Grokking the System Design Interview HiredInTech - System Design for Tech Interviews Videos ( Coding and System Design Interview Questions ) Youtube - Jackson Gabbard (worked at Facebook) Episode 06: Intro to Architecture and Systems Design Interviews Episode 07: Intro to Behavioural Interviews Coding Interview Problems Coding Interview Problem: Calendar Conflicts Coding Interview Problem: Dinner Party Coding Interview Problem: Largest Rectangle in a Histogram Coding Interview Problem: Permutation Generator Youtube - Byte By Byte - Coding interviews channel. There are around 50+ videos: code challenges, advices etc. Youtube - Success in Tech by Ramon Lopez - System Design Interview (~6 videos, nice cases ) Youtube - Coding Made Simple by Tushar Roy - System Design Interview (~5 videos, nice cases ) and Coding interview tasks Youtube - Tech Dummies - Narendra L - System Design Interview samples (~20 videos, interesting cases ) Youtube - Gaurav Sen - System Design Interview (~15 videos, basics ) and Coding Challenges Youtuby - Code Report by Conor Hoekstra - Channel about competitive programming","title":"Resources for System Design Interview"},{"location":"blog/2018/2018-12-29-system-design-interview-prep/#resources-for-system-design-interview","text":"| interview | Related posts: 2018-12-29 - Resources for System Design Interview 2018-12-28 - Resources for Practicing Coding Interview","title":"Resources for System Design Interview"},{"location":"blog/2018/2018-12-29-system-design-interview-prep/#courses","text":"Grokking the System Design Interview HiredInTech - System Design for Tech Interviews","title":"Courses"},{"location":"blog/2018/2018-12-29-system-design-interview-prep/#videos-coding-and-system-design-interview-questions","text":"Youtube - Jackson Gabbard (worked at Facebook) Episode 06: Intro to Architecture and Systems Design Interviews Episode 07: Intro to Behavioural Interviews Coding Interview Problems Coding Interview Problem: Calendar Conflicts Coding Interview Problem: Dinner Party Coding Interview Problem: Largest Rectangle in a Histogram Coding Interview Problem: Permutation Generator Youtube - Byte By Byte - Coding interviews channel. There are around 50+ videos: code challenges, advices etc. Youtube - Success in Tech by Ramon Lopez - System Design Interview (~6 videos, nice cases ) Youtube - Coding Made Simple by Tushar Roy - System Design Interview (~5 videos, nice cases ) and Coding interview tasks Youtube - Tech Dummies - Narendra L - System Design Interview samples (~20 videos, interesting cases ) Youtube - Gaurav Sen - System Design Interview (~15 videos, basics ) and Coding Challenges Youtuby - Code Report by Conor Hoekstra - Channel about competitive programming","title":"Videos (Coding and System Design Interview Questions)"},{"location":"blog/2018/2018-12-30-fp-in-haskell-part1/","text":"Functional programming in Haskell - Part 1 | haskell | functional programming | UPD (2018-0114): I put this MOOC on hold. Unfortunatelly, my plan has been changed and I have decided to stop doing this course due to overload on other directions. But this particular course is cool and teacher is cool. I highly recommend it. These notes are related to MOOC Stepik cource \u201c\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell\u201d . This course is in Russian language and I decided to make notes. It might be useful for me in future or for somebody else. General thoughts which are not related to this course In general, I\u2019ve been doing programming language ecosystem discovery before jump into it. And here is the initial findings: What I Wish I Knew When Learning Haskell by Stephen Diehl - it\u2019s a huge writeup with tons of information. State of the Haskell ecosystem - it\u2019s a big report about ecosystem Educational resources - this part is especially important for beginners How I Start. Haskell With Chris Allen - Tutorial \u201chow to write a package in Haskell and interact with the code inside of it.\u201d Learn Haskell, by Chris Allen - advices Blog: \u201cHaskell for all\u201d by Gabriel Gonzalez . Gabriel blogs a lot about Haskell. But the next post might be interesting for beginners: Detailed walkthrough for a beginner Haskell program Exercism - Haskell - Exercism is an online platform designed to help you improve your coding skills through practice and mentorship The Haskell Tool Stack - Stack is a cross-platform program for developing Haskell projects Haskell Docker image Cheat Sheets Basic Haskell Cheat Sheet The Haskell Cheatsheet by Justin Bailey Book \u201cLearn You a Haskell for Great Good!\u201d by Miran Lipova\u010da . This book is very cool if you\u2019d like to know basics. I read 10 of 15 chapters and I am very satisfied. Development environment for this course Right now I do not want to concentrate my attention on Haskell build tools. Also, I know that people do not recommend using Haskell Platform (see here ). That\u2019s why I\u2019ve decided to use docker image. docker run -it --rm haskell:8 or you can mount current folder (assuming with source code) and run ghci or ghc from the container docker run -it --rm -v $( pwd ) :/home haskell:8 /bin/bash This approach is not perfect, but now you can avoid build tool issues.","title":"Functional programming in Haskell - Part 1"},{"location":"blog/2018/2018-12-30-fp-in-haskell-part1/#functional-programming-in-haskell-part-1","text":"| haskell | functional programming | UPD (2018-0114): I put this MOOC on hold. Unfortunatelly, my plan has been changed and I have decided to stop doing this course due to overload on other directions. But this particular course is cool and teacher is cool. I highly recommend it. These notes are related to MOOC Stepik cource \u201c\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Haskell\u201d . This course is in Russian language and I decided to make notes. It might be useful for me in future or for somebody else.","title":"Functional programming in Haskell - Part 1"},{"location":"blog/2018/2018-12-30-fp-in-haskell-part1/#general-thoughts-which-are-not-related-to-this-course","text":"In general, I\u2019ve been doing programming language ecosystem discovery before jump into it. And here is the initial findings: What I Wish I Knew When Learning Haskell by Stephen Diehl - it\u2019s a huge writeup with tons of information. State of the Haskell ecosystem - it\u2019s a big report about ecosystem Educational resources - this part is especially important for beginners How I Start. Haskell With Chris Allen - Tutorial \u201chow to write a package in Haskell and interact with the code inside of it.\u201d Learn Haskell, by Chris Allen - advices Blog: \u201cHaskell for all\u201d by Gabriel Gonzalez . Gabriel blogs a lot about Haskell. But the next post might be interesting for beginners: Detailed walkthrough for a beginner Haskell program Exercism - Haskell - Exercism is an online platform designed to help you improve your coding skills through practice and mentorship The Haskell Tool Stack - Stack is a cross-platform program for developing Haskell projects Haskell Docker image Cheat Sheets Basic Haskell Cheat Sheet The Haskell Cheatsheet by Justin Bailey Book \u201cLearn You a Haskell for Great Good!\u201d by Miran Lipova\u010da . This book is very cool if you\u2019d like to know basics. I read 10 of 15 chapters and I am very satisfied.","title":"General thoughts which are not related to this course"},{"location":"blog/2018/2018-12-30-fp-in-haskell-part1/#development-environment-for-this-course","text":"Right now I do not want to concentrate my attention on Haskell build tools. Also, I know that people do not recommend using Haskell Platform (see here ). That\u2019s why I\u2019ve decided to use docker image. docker run -it --rm haskell:8 or you can mount current folder (assuming with source code) and run ghci or ghc from the container docker run -it --rm -v $( pwd ) :/home haskell:8 /bin/bash This approach is not perfect, but now you can avoid build tool issues.","title":"Development environment for this course"},{"location":"blog/2018/2018-12-31-about-blogging/","text":"Thoughts about Blogging | blog | I started blogging in 2009 using Blogger.com . I had been using it from 2009 till 2014. In total, I wrote there 116 posts (the last one I don\u2019t count), see grouped by year below: 2014 (8) 2013 (29) 2012 (32) 2011 (26) 2010 (14) 2009 (7) I do not remember the reason \u201cwhy I started blogging\u201d. But, the posts were/are not so good. (You can check it halyph.blogspot.com ) Then I decided to move away from Blogger platform and use Github Pages as a blog hosting platform. In that time Octopress looks appealing. Check out my post 2014-09-07 - Migration to Octopress about this \u201cgreat\u201d migration. Octopress has very nice features. The most attractive for me was the markdown as a source for my posts. I thought it will speed up the post creation and give a boost for creativity. So, I wrote 22 posts from 2014 till 2015. 2015 (18) 2014 (4) Also, I tried to migrate all posts from Blogger to new engine. I did it. And it was a fail. Octopress could not handle big amount of pages. Don\u2019t get me wrong. It can render all these pages, but it was painfully slow. And it has pieced me off. Then I though about migration from Octopress to JBake . This engine supports Asciidoc and Markdown formats. Wow, I need this. \ud83d\ude09 New tool and new post\u2019s format ( Asciidoc ) helps me to be productive. LOL Well, something was really better: the speed of page rendering, re-rendering and Asciidoc is much powerful format. I was happy. I could create much more complicated posts, with different components (tables, cool lists, quotes, etc). At the beginning it was fun, but I\u2019ve been spending a lot of time in Asciidoc instead of writing the actual content. And here is a BIG F-A-I-L \ud83d\udca3 I created 10 posts from 2015 till 2018: 2016 (5) 2017 (2) 2018 (3) So, I\u2019ve decided to reflect on my blogging and what it is for me: I like to write in my private wiki, but do not share it with the world. And I write a lot. It\u2019s not something super useful, but it might be interesting for somebody I cared about content. But why did I produced so poor content or no content at all (see period 2016-2018)? Markdown format is not perfect, but it gives a freedom for writing. It\u2019s super simple and support \u201cmind flow\u201d approach for content creation I don\u2019t need to use super complicated blog engine. Pure Github repo as a blog is good for me Since now, I will write for myself only. Anybody can read and gain something from it. It won\u2019t be a traditional blogging. It will be a personal (but public ) wiki/notes/thoughts Let\u2019s see how it will be implemented in 2019!!!","title":"Thoughts about Blogging"},{"location":"blog/2018/2018-12-31-about-blogging/#thoughts-about-blogging","text":"| blog | I started blogging in 2009 using Blogger.com . I had been using it from 2009 till 2014. In total, I wrote there 116 posts (the last one I don\u2019t count), see grouped by year below: 2014 (8) 2013 (29) 2012 (32) 2011 (26) 2010 (14) 2009 (7) I do not remember the reason \u201cwhy I started blogging\u201d. But, the posts were/are not so good. (You can check it halyph.blogspot.com ) Then I decided to move away from Blogger platform and use Github Pages as a blog hosting platform. In that time Octopress looks appealing. Check out my post 2014-09-07 - Migration to Octopress about this \u201cgreat\u201d migration. Octopress has very nice features. The most attractive for me was the markdown as a source for my posts. I thought it will speed up the post creation and give a boost for creativity. So, I wrote 22 posts from 2014 till 2015. 2015 (18) 2014 (4) Also, I tried to migrate all posts from Blogger to new engine. I did it. And it was a fail. Octopress could not handle big amount of pages. Don\u2019t get me wrong. It can render all these pages, but it was painfully slow. And it has pieced me off. Then I though about migration from Octopress to JBake . This engine supports Asciidoc and Markdown formats. Wow, I need this. \ud83d\ude09 New tool and new post\u2019s format ( Asciidoc ) helps me to be productive. LOL Well, something was really better: the speed of page rendering, re-rendering and Asciidoc is much powerful format. I was happy. I could create much more complicated posts, with different components (tables, cool lists, quotes, etc). At the beginning it was fun, but I\u2019ve been spending a lot of time in Asciidoc instead of writing the actual content. And here is a BIG F-A-I-L \ud83d\udca3 I created 10 posts from 2015 till 2018: 2016 (5) 2017 (2) 2018 (3) So, I\u2019ve decided to reflect on my blogging and what it is for me: I like to write in my private wiki, but do not share it with the world. And I write a lot. It\u2019s not something super useful, but it might be interesting for somebody I cared about content. But why did I produced so poor content or no content at all (see period 2016-2018)? Markdown format is not perfect, but it gives a freedom for writing. It\u2019s super simple and support \u201cmind flow\u201d approach for content creation I don\u2019t need to use super complicated blog engine. Pure Github repo as a blog is good for me Since now, I will write for myself only. Anybody can read and gain something from it. It won\u2019t be a traditional blogging. It will be a personal (but public ) wiki/notes/thoughts Let\u2019s see how it will be implemented in 2019!!!","title":"Thoughts about Blogging"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/","text":"Top \u201cAlgorithms and Data Structures\u201d Books | book | algorithm | data structure | I have a my list several books related to this topic. I\u2019ve decided to list it here for easy referencing Algorithms, 4th Edition Introduction to Algorithms, 3rd Edition The Algorithm Design Manual, 2nd Edition Data Structures and Algorithms in Python, 1st Edition Algorithms, 4th Edition - \u201cAlgorithms\u201d 4th Edition by Robert Sedgewick, Kevin Wayne - Hardcover: 976 pages - Publisher: Addison-Wesley Professional; 4th edition (March 19, 2011) Table of Contents : 1 Fundamentals 1.1 Basic Programming Model 1.2. Data Abstraction 1.3. Bags, Queues, and Stacks 1.4. Analysis of Algorithms 1.5. Case Study: Union-Find 2 Sorting 2.1. Elementary Sorts 2.2. Mergesort 2.3. Quicksort 2.4. Priority Queues 2.5. Applications 3 Searching 3.1. Symbol Tables 3.2. Binary Search Trees 3.3. Balanced Search Trees 3.4. Hash Tables 3.5. Applications 4 Graphs 4.1. Undirected Graphs 4.2. Directed Graphs 4.3. Minimum Spanning Trees 4.4. Shortest Paths 5 Strings 5.1. String Sorts 5.2. Tries 5.3. Substring Search 5.4. Regular Expressions 5.5. Data Compression 6 Context Introduction to Algorithms, 3rd Edition \u201cIntroduction to Algorithms\u201d, 3rd Edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein Hardcover: 1312 pages Publisher: The MIT Press; 3rd edition (July 31, 2009) Table of Contents : I Foundations 1 The Role of Algorithms in Computing 2 Getting Started 3 Growth of Function 4 Divide-and-Conquer 5 Probabilistic Analysis and Randomized Algorithms II Sorting and Order Statistics 6 Heapsort 7 Quicksort 8 Sorting in Linear Time 9 Medians and Order Statistics III Data Structures 10 Elementary Data Structures 11 Hash Tables 12 Binary Search Trees 13 Red-Black Trees 14 Augmenting Data Structures IV Advanced Design and Analysis Techniques 15 Dynamic Programming 16 Greedy Algorithms 17 Amortized Analysis V Advanced Data Structures 18 B-Trees 19 Fibonacci Heap 20 Van Emde Boas Trees 21 Data Structures for Disjoint Sets VI Graph Algorithms 22 Elementary Graph Algorithms 23 Minimum Spanning Trees 24 Single-Source Shortest Paths 25 All-Pairs Shortest Paths 26 Maximum Flow VII Selected Topics 27 Multithreaded Algorithms 28 Matrix Operations 29 Linear Programming 30 Polynomials and the FFT 31 Number-Theoretic Algorithms 32 String Matching 33 Computational Geometry 34 NP-Completeness 35 Approximation Algorithms VIII Appendix: Mathematical Background A Summations B Sets, Etc. C Counting and Probability D Matrices The Algorithm Design Manual, 2nd Edition \u201cThe Algorithm Design Manual\u201d, 2nd ed. 2008 Edition by Steven S. Skiena Paperback: 730 pages Publisher: Springer; 2nd ed. 2008 edition (November 5, 2010) Table of Contents : I Practical Algorithm Design 1 Introduction to Algorithm Design 2 Algorithm Analysis 3 Data Structures 4 Sorting and Searching 5 Graph Traversal 6 Weighted Graph Algorithms 7 Combinatorial Search and Heuristic Methods 8 Dynamic Programming 9 Intractable Problems and Approximation Algorithms 10 How to Design Algorithms II The Hitchhiker\u2019s Guide to Algorithms 11 A Catalog of Algorithmic Problems 12 Data Structures 13 Numerical Problems 14 Combinatorial Problems 15 Graph Problems: Polynomial-Time 16 Graph Problems: Hard Problems 17 Computational Geometry 18 Set and String Problems 19 Algorithmic Resources Data Structures and Algorithms in Python, 1st Edition \u201cData Structures and Algorithms in Python\u201d, 1st Edition by Michael T. Goodrich, Roberto Tamassia, Michael H. Goldwasser Hardcover: 768 pages Publisher: Wiley; 1 edition (March 18, 2013) Table of Contents : Python Primer Object-Oriented Programming Algorithm Analysis Recursion Array-Based Sequences Stacks, Queues, and Deques Linked Lists Trees Priority Queues Maps, Hash Tables, and Skip Lists Search Trees Sorting and Selection Text Processing Graph Algorithms Memory Management and B-Trees A. Character Strings in Python B. Useful Mathematical Facts","title":"Top \"Algorithms and Data Structures\" Books"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/#top-algorithms-and-data-structures-books","text":"| book | algorithm | data structure | I have a my list several books related to this topic. I\u2019ve decided to list it here for easy referencing Algorithms, 4th Edition Introduction to Algorithms, 3rd Edition The Algorithm Design Manual, 2nd Edition Data Structures and Algorithms in Python, 1st Edition","title":"Top \"Algorithms and Data Structures\" Books"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/#algorithms-4th-edition","text":"- \u201cAlgorithms\u201d 4th Edition by Robert Sedgewick, Kevin Wayne - Hardcover: 976 pages - Publisher: Addison-Wesley Professional; 4th edition (March 19, 2011) Table of Contents : 1 Fundamentals 1.1 Basic Programming Model 1.2. Data Abstraction 1.3. Bags, Queues, and Stacks 1.4. Analysis of Algorithms 1.5. Case Study: Union-Find 2 Sorting 2.1. Elementary Sorts 2.2. Mergesort 2.3. Quicksort 2.4. Priority Queues 2.5. Applications 3 Searching 3.1. Symbol Tables 3.2. Binary Search Trees 3.3. Balanced Search Trees 3.4. Hash Tables 3.5. Applications 4 Graphs 4.1. Undirected Graphs 4.2. Directed Graphs 4.3. Minimum Spanning Trees 4.4. Shortest Paths 5 Strings 5.1. String Sorts 5.2. Tries 5.3. Substring Search 5.4. Regular Expressions 5.5. Data Compression 6 Context","title":"Algorithms, 4th Edition"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/#introduction-to-algorithms-3rd-edition","text":"\u201cIntroduction to Algorithms\u201d, 3rd Edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein Hardcover: 1312 pages Publisher: The MIT Press; 3rd edition (July 31, 2009) Table of Contents : I Foundations 1 The Role of Algorithms in Computing 2 Getting Started 3 Growth of Function 4 Divide-and-Conquer 5 Probabilistic Analysis and Randomized Algorithms II Sorting and Order Statistics 6 Heapsort 7 Quicksort 8 Sorting in Linear Time 9 Medians and Order Statistics III Data Structures 10 Elementary Data Structures 11 Hash Tables 12 Binary Search Trees 13 Red-Black Trees 14 Augmenting Data Structures IV Advanced Design and Analysis Techniques 15 Dynamic Programming 16 Greedy Algorithms 17 Amortized Analysis V Advanced Data Structures 18 B-Trees 19 Fibonacci Heap 20 Van Emde Boas Trees 21 Data Structures for Disjoint Sets VI Graph Algorithms 22 Elementary Graph Algorithms 23 Minimum Spanning Trees 24 Single-Source Shortest Paths 25 All-Pairs Shortest Paths 26 Maximum Flow VII Selected Topics 27 Multithreaded Algorithms 28 Matrix Operations 29 Linear Programming 30 Polynomials and the FFT 31 Number-Theoretic Algorithms 32 String Matching 33 Computational Geometry 34 NP-Completeness 35 Approximation Algorithms VIII Appendix: Mathematical Background A Summations B Sets, Etc. C Counting and Probability D Matrices","title":"Introduction to Algorithms, 3rd Edition"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/#the-algorithm-design-manual-2nd-edition","text":"\u201cThe Algorithm Design Manual\u201d, 2nd ed. 2008 Edition by Steven S. Skiena Paperback: 730 pages Publisher: Springer; 2nd ed. 2008 edition (November 5, 2010) Table of Contents : I Practical Algorithm Design 1 Introduction to Algorithm Design 2 Algorithm Analysis 3 Data Structures 4 Sorting and Searching 5 Graph Traversal 6 Weighted Graph Algorithms 7 Combinatorial Search and Heuristic Methods 8 Dynamic Programming 9 Intractable Problems and Approximation Algorithms 10 How to Design Algorithms II The Hitchhiker\u2019s Guide to Algorithms 11 A Catalog of Algorithmic Problems 12 Data Structures 13 Numerical Problems 14 Combinatorial Problems 15 Graph Problems: Polynomial-Time 16 Graph Problems: Hard Problems 17 Computational Geometry 18 Set and String Problems 19 Algorithmic Resources","title":"The Algorithm Design Manual, 2nd Edition"},{"location":"blog/2019/2019-01-13-alg-and-ds-books/#data-structures-and-algorithms-in-python-1st-edition","text":"\u201cData Structures and Algorithms in Python\u201d, 1st Edition by Michael T. Goodrich, Roberto Tamassia, Michael H. Goldwasser Hardcover: 768 pages Publisher: Wiley; 1 edition (March 18, 2013) Table of Contents : Python Primer Object-Oriented Programming Algorithm Analysis Recursion Array-Based Sequences Stacks, Queues, and Deques Linked Lists Trees Priority Queues Maps, Hash Tables, and Skip Lists Search Trees Sorting and Selection Text Processing Graph Algorithms Memory Management and B-Trees A. Character Strings in Python B. Useful Mathematical Facts","title":"Data Structures and Algorithms in Python, 1st Edition"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/","text":"Algorithms, System Design, Interview Preparation - Github Repos | github | java | python | data science | machine learning | interview | algorithms | I\u2019ve notice very interesting tendency on Github - people likes to share non-code repos. The most popular is \u201cawesome\u201d and \u201cinterview preparation\u201d repos. I have collected some amount of these repos. Coding Interview Preparation System design Algorithms Design Patters Miscellaneous Web Coding Interview Preparation \u2764\ufe0f jwasham/coding-interview-university tags: [algorithm] [interview] [study plan] [data structure] Comments: very detailed learning plan for coding interview. donnemartin/interactive-coding-challenges tags: [python] [algorithm] [interview] Comments: Interactive Python coding interview challenges (algorithms and data structures). Includes Anki flashcards MaximAbramchuck/awesome-interview-questions tags: [awesome] [interview] Comments: it\u2019s just collection of links to another interview resources. It might be good starting point. yangshun/tech-interview-handbook tags: [interview] [algorithm] [behavioral] [system design] [tips] Comments: Algorithms study materials, behavioral content and tips for rocking your coding interview kdn251/interviews tags: [interview] [algorithm] [company] Comments: Coding interview grouped by companies. It might be interesting. Tushar Roy wiki tags: [interview] [algorithm] Comments: This guy also has a YouTube Channel System design \u2764\ufe0f donnemartin/system-design-primer tags: [interview] [system design] Comments: very detailed notes about preparation to \u201csystem design interview\u201d \ud83d\udc9b checkcheckzz/system-design-interview tags: [system design] Comments: System design interview for IT companies. It contains many references about the subject. The biggest value - it\u2019s collected in one place and somehow grouped. \ud83d\udc9b binhnguyennus/awesome-scalability tags: [system design] [devops] [interview] [awesome] [sre] Comments: Scalable, Available, Stable, Performant, and Intelligent System Design Patterns. Again, it\u2019s a huge collection a links. \ud83d\udc9b theanalyst/awesome-distributed-systems tags: [awersome] [system design] [distributed system] Comments: List on awesome material on distributed systems kilimchoi/engineering-blogs tags: [blog] [company] Comments: : A curated list of engineering blogs Algorithms iiitv/algos tags: [java] [python] [algorithm] Comments: Popular Algorithms and Data Structures implemented in popular languages tayllan/awesome-algorithms tags: [java] [python] [awersome] [algorithm] Comments: huge collection trekhleb/javascript-algorithms tags: [javascript] [algorithm] Comments: Algorithms and data structures implemented in JavaScript with explanations and links to further readings Algorithm Visualizer and github tags: [javascript] [algorithm] Comments: Algorithm Visualizer is an interactive online platform that visualizes algorithms from code. This project is impressive keon/algorithms tags: [python] [algorithm] Comments: big collection of algorithms implemented in Python lnishan/awesome-competitive-programming tags: [algorithm] [book] [tips] [mooc] Comments: A curated list of awesome Competitive Programming, Algorithm and Data Structure resources. The list is huge. ChangeMyUsername/algorithms-sedgewick-python tags: [algorithm] [book] [python] Comments: Algorithms(4th edition) by Robert Sedgewick and Kevin Wayne exercises in python gzc/CLRS tags: [algorithm] [book] [C++] Comments: Solutions to Introduction to Algorithms by Charles E. Leiserson, Clifford Stein, Ronald Rivest, and Thomas H. Cormen (CLRS). Design Patters \u2764\ufe0f Design patterns implemented in Java and ( github ) tags: [java] [gof] [design patterns] Comments: High quality collection of Design Patters DovAmir/awesome-design-patterns tags: [gof] [design patterns] [cloud] [db] [devops] [awesome] Comments: A curated list of software and architecture related design patterns. Miscellaneous karan/Projects tags: [java] [python] [coding] Comments: A list of practical projects that anyone can solve in any programming language and solutions . It\u2019s not only algorithmic small tasks. Web kamranahmedse/developer-roadmap tags: [web] [css] [javascript] [devops] Comments: Roadmap to becoming a Web Developer in 2019","title":"Algorithms, System Design, Interview Preparation - Github Repos"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#algorithms-system-design-interview-preparation-github-repos","text":"| github | java | python | data science | machine learning | interview | algorithms | I\u2019ve notice very interesting tendency on Github - people likes to share non-code repos. The most popular is \u201cawesome\u201d and \u201cinterview preparation\u201d repos. I have collected some amount of these repos. Coding Interview Preparation System design Algorithms Design Patters Miscellaneous Web","title":"Algorithms, System Design, Interview Preparation - Github Repos"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#coding-interview-preparation","text":"\u2764\ufe0f jwasham/coding-interview-university tags: [algorithm] [interview] [study plan] [data structure] Comments: very detailed learning plan for coding interview. donnemartin/interactive-coding-challenges tags: [python] [algorithm] [interview] Comments: Interactive Python coding interview challenges (algorithms and data structures). Includes Anki flashcards MaximAbramchuck/awesome-interview-questions tags: [awesome] [interview] Comments: it\u2019s just collection of links to another interview resources. It might be good starting point. yangshun/tech-interview-handbook tags: [interview] [algorithm] [behavioral] [system design] [tips] Comments: Algorithms study materials, behavioral content and tips for rocking your coding interview kdn251/interviews tags: [interview] [algorithm] [company] Comments: Coding interview grouped by companies. It might be interesting. Tushar Roy wiki tags: [interview] [algorithm] Comments: This guy also has a YouTube Channel","title":"Coding Interview Preparation"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#system-design","text":"\u2764\ufe0f donnemartin/system-design-primer tags: [interview] [system design] Comments: very detailed notes about preparation to \u201csystem design interview\u201d \ud83d\udc9b checkcheckzz/system-design-interview tags: [system design] Comments: System design interview for IT companies. It contains many references about the subject. The biggest value - it\u2019s collected in one place and somehow grouped. \ud83d\udc9b binhnguyennus/awesome-scalability tags: [system design] [devops] [interview] [awesome] [sre] Comments: Scalable, Available, Stable, Performant, and Intelligent System Design Patterns. Again, it\u2019s a huge collection a links. \ud83d\udc9b theanalyst/awesome-distributed-systems tags: [awersome] [system design] [distributed system] Comments: List on awesome material on distributed systems kilimchoi/engineering-blogs tags: [blog] [company] Comments: : A curated list of engineering blogs","title":"System design"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#algorithms","text":"iiitv/algos tags: [java] [python] [algorithm] Comments: Popular Algorithms and Data Structures implemented in popular languages tayllan/awesome-algorithms tags: [java] [python] [awersome] [algorithm] Comments: huge collection trekhleb/javascript-algorithms tags: [javascript] [algorithm] Comments: Algorithms and data structures implemented in JavaScript with explanations and links to further readings Algorithm Visualizer and github tags: [javascript] [algorithm] Comments: Algorithm Visualizer is an interactive online platform that visualizes algorithms from code. This project is impressive keon/algorithms tags: [python] [algorithm] Comments: big collection of algorithms implemented in Python lnishan/awesome-competitive-programming tags: [algorithm] [book] [tips] [mooc] Comments: A curated list of awesome Competitive Programming, Algorithm and Data Structure resources. The list is huge. ChangeMyUsername/algorithms-sedgewick-python tags: [algorithm] [book] [python] Comments: Algorithms(4th edition) by Robert Sedgewick and Kevin Wayne exercises in python gzc/CLRS tags: [algorithm] [book] [C++] Comments: Solutions to Introduction to Algorithms by Charles E. Leiserson, Clifford Stein, Ronald Rivest, and Thomas H. Cormen (CLRS).","title":"Algorithms"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#design-patters","text":"\u2764\ufe0f Design patterns implemented in Java and ( github ) tags: [java] [gof] [design patterns] Comments: High quality collection of Design Patters DovAmir/awesome-design-patterns tags: [gof] [design patterns] [cloud] [db] [devops] [awesome] Comments: A curated list of software and architecture related design patterns.","title":"Design Patters"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#miscellaneous","text":"karan/Projects tags: [java] [python] [coding] Comments: A list of practical projects that anyone can solve in any programming language and solutions . It\u2019s not only algorithmic small tasks.","title":"Miscellaneous"},{"location":"blog/2019/2019-01-17-algorithms-system-design-interview-preparation/#web","text":"kamranahmedse/developer-roadmap tags: [web] [css] [javascript] [devops] Comments: Roadmap to becoming a Web Developer in 2019","title":"Web"},{"location":"blog/2019/2019-01-19-python-vs-javascript/","text":"Python vs Javascript comparison | python | javascript | vs | comparison | First of all it\u2019s not my writing and it\u2019s just a copy of the posts from @DjangoTricks blog by Aidas Bendoraitis (see References below) References Parsing integers Conditional assignment Object attribute value by attribute name Dictionary value by key Slicing lists and strings Operations with list items Joining lists of strings JSON Working with Strings Splitting strings by regular expressions Matching regular expression patterns in strings Search sub-string Replacing patterns in strings using regular expressions Replacing patterns in strings using a function call Error handling Variables in strings Unpacking lists Lambda functions Iteration without indexes Generators Sets Function arguments Classes and inheritance Class properties: getters and setters References Equivalents in Python and JavaScript. Part 1 Equivalents in Python and JavaScript. Part 2 Equivalents in Python and JavaScript. Part 3 Equivalents in Python and JavaScript. Part 4 Parsing integers Python number = int ( text ) JavaScript number = parseInt ( text , 10 ); parseInt ( '012' ) == 10 ; // in some older browsers parseInt ( '012' , 10 ) == 12 ; Conditional assignment Python value = 'ADULT' if age >= 18 else 'CHILD' JavaScript value = age >= 18 ? 'ADULT' : 'CHILD' ; Object attribute value by attribute name Python and JavaScript obj.color = 'YELLOW' Python attribute = 'color' value = getattr ( obj , attribute , 'GREEN' ) setattr ( obj , attribute , value ) JavaScript attribute = 'color' ; value = obj [ attribute ] || 'GREEN' ; obj [ attribute ] = value ; Dictionary value by key Python and JavaScript dictionary = {} dictionary['color'] = 'YELLOW' Python key = 'color' val1 = dictionary [ key ] val2 = dictionary . get ( 'non-existing keys' ) # The more flexible way is to use the get() method which returns None for non-existing keys. value = dictionary . get ( key , 'GREEN' ) # you can pass an optional default value as the second parameter JavaScript key = 'color' ; value = dictionary [ key ] || 'GREEN' ; Slicing lists and strings Python items = [ 1 , 2 , 3 , 4 , 5 ] first_two = items [: 2 ] # [1, 2] last_two = items [ - 2 :] # [4, 5] middle_three = items [ 1 : 4 ] # [2, 3, 4] # The [:] slice operator in Python also works for strings: text = 'ABCDE' first_two = text [: 2 ] # 'AB' last_two = text [ - 2 :] # 'DE' middle_three = text [ 1 : 4 ] # 'BCD' JavaScript items = [ 1 , 2 , 3 , 4 , 5 ]; first_two = items . slice ( 0 , 2 ); // [1, 2] last_two = items . slice ( - 2 ); // [4, 5] middle_three = items . slice ( 1 , 4 ); // [2, 3, 4] // In JavaScript strings just like arrays have the slice() method: text = 'ABCDE' ; first_two = text . slice ( 0 , 2 ); // 'AB' last_two = text . slice ( - 2 ); // 'DE' middle_three = text . slice ( 1 , 4 ); // 'BCD' Operations with list items Python items1 = [ 'A' ] items2 = [ 'B' ] items = items1 + items2 # items == ['A', 'B'] items . append ( 'C' ) # ['A', 'B', 'C'] items . insert ( 0 , 'D' ) # ['D', 'A', 'B', 'C'] first = items . pop ( 0 ) # ['A', 'B', 'C'] last = items . pop () # ['A', 'B'] items . delete ( 0 ) # ['B'] JavaScript items1 = [ 'A' ]; items2 = [ 'B' ]; items = items1 . concat ( items2 ); // items === ['A', 'B'] items . push ( 'C' ); // ['A', 'B', 'C'] items . unshift ( 'D' ); // ['D', 'A', 'B', 'C'] first = items . shift (); // ['A', 'B', 'C'] last = items . pop (); // ['A', 'B'] items . splice ( 0 , 1 ); // ['B'] Joining lists of strings Python items = [ 'A' , 'B' , 'C' ] text = ', ' . join ( items ) # 'A, B, C' JavaScript items = [ 'A' , 'B' , 'C' ]; text = items . join ( ', ' ); // 'A, B, C' JSON Python import json json_data = json . dumps ( dictionary , indent = 4 ) dictionary = json . loads ( json_data ) JavaScript json_data = JSON . stringify ( dictionary , null , 4 ); dictionary = JSON . parse ( json_data ); Working with Strings Splitting strings by regular expressions Python import re # One or more characters of \"!?.\" followed by whitespace delimiter = re . compile ( r '[!?\\.]+\\s*' ) text = \"Hello!!! What's new? Follow me.\" sentences = delimiter . split ( text ) # sentences == ['Hello', \"What's new\", 'Follow me', ''] JavaScript // One or more characters of \"!?.\" followed by whitespace delimiter = /[!?\\.]+\\s*/ ; text = \"Hello!!! What's new? Follow me.\" ; sentences = text . split ( delimiter ) // sentences === [\"Hello\", \"What's new\", \"Follow me\", \"\"] Matching regular expression patterns in strings Python import re # name, \"@\", and domain pattern = re . compile ( r '([\\w.+\\-]+)@([\\w\\-]+\\.[\\w\\-.]+)' ) match = pattern . match ( 'hi@example.com' ) # match.group(0) == 'hi@example.com' # match.group(1) == 'hi' # match.group(2) == 'example.com' JavaScript // name, \"@\", and domain pattern = /([\\w.+\\-]+)@([\\w\\-]+\\.[\\w\\-.]+)/ ; match = 'hi@example.com' . match ( pattern ); // match[0] === 'hi@example.com' // match[1] === 'hi' // match[2] === 'example.com' Search sub-string Python text = 'Say hi at hi@example.com' first_match = pattern . search ( text ) if first_match : start = first_match . start () # start == 10 JavaScript text = 'Say hi at hi@example.com' ; first_match = text . search ( pattern ); if ( first_match > - 1 ) { start = first_match ; // start === 10 } Replacing patterns in strings using regular expressions Python # In Python the captures, also called as \"backreferences\", are accessible in the replacement string as \\g<0>, \\g<1>, \\g<2> html = pattern . sub ( r '<a href=\"mailto:\\g<0>\">\\g<0></a>' , 'Say hi at hi@example.com' , ) # html == 'Say hi at <a href=\"mailto:hi@example.com\">hi@example.com</a>' JavaScript // In JavaScript the same is accessible as $&, $1, $2, etc. html = 'Say hi at hi@example.com' . replace ( pattern , '<a href=\"mailto:$&\">$&</a>' , ); // html === 'Say hi at <a href=\"mailto:hi@example.com\">hi@example.com</a>' Replacing patterns in strings using a function call Python text = pattern . sub ( lambda match : match . group ( 0 ) . upper (), 'Say hi at hi@example.com' , ) # text == 'Say hi at HI@EXAMPLE.COM' JavaScript text = 'Say hi at hi@example.com' . replace ( pattern , function ( match , p1 , p2 ) { return match . toUpperCase (); } ); // text === 'Say hi at HI@EXAMPLE.COM' Error handling Python class MyException ( Exception ): def __init__ ( self , message ): self . message = message def __str__ ( self ): return self . message def proceed (): raise MyException ( 'Error happened!' ) try : proceed () except MyException as err : print ( 'Sorry! {} ' . format ( err )) finally : print ( 'Finishing' ) JavaScript function MyException ( message ) { this . message = message ; this . toString = function () { return this . message ; } } function proceed () { throw new MyException ( 'Error happened!' ); } try { proceed (); } catch ( err ) { if ( err instanceof MyException ) { console . log ( 'Sorry! ' + err ); } } finally { console . log ( 'Finishing' ); } Variables in strings name = 'World' value = 'Hello, ' + name + '!\\nWelcome!' Python name = 'World' value = f \"\"\"Hello, { name } ! Welcome!\"\"\" price = 14.9 value = f 'Price: { price : .2f } \u20ac' # 'Price: 14.90 \u20ac' JavaScript name = 'World' ; value = `Hello, ${ name } ! Welcome!` ; price = 14.9 ; value = `Price ${ price . toFixed ( 2 ) } \u20ac` ; // 'Price: 14.90 \u20ac' Unpacking lists Python [ a , b , c ] = [ 1 , 2 , 3 ] # E.g. popular variable swap a = 1 b = 2 a , b = b , a # swap values # Python 3.6 first , second , * the_rest = [ 1 , 2 , 3 , 4 ] # first == 1 # second == 2 # the_rest == [3, 4] JavaScript // ECMAScript 6 [ first , second , ... the_rest ] = [ 1 , 2 , 3 , 4 ]; // first === 1 // last === 2 // the_rest === [3, 4] Lambda functions Python sum = lambda x , y : x + y square = lambda x : x ** 2 JavaScript sum = ( x , y ) => x + y ; square = x => Math . pow ( x , 2 ); Iteration without indexes Python for item in [ 'A' , 'B' , 'C' ]: print ( item ) for character in 'ABC' : print ( character ) JavaScript for ( let item of [ 'A' , 'B' , 'C' ]) { console . log ( item ); } for ( let character of 'ABC' ) { console . log ( character ); } Generators Python def countdown ( counter ): while counter > 0 : yield counter counter -= 1 for counter in countdown ( 10 ): print ( counter ) JavaScript function * countdown ( counter ) { while ( counter > 0 ) { yield counter ; counter -- ; } } for ( let counter of countdown ( 10 )) { console . log ( counter ); } Sets Python s = set ([ 'A' ]) s . add ( 'B' ); s . add ( 'C' ) 'A' in s len ( s ) == 3 for elem in s : print ( elem ) s . remove ( 'C' ) JavaScript s = new Set ([ 'A' ]); s . add ( 'B' ). add ( 'C' ); s . has ( 'A' ) === true ; s . size === 3 ; for ( let elem of s . values ()) { console . log ( elem ); } s . delete ( 'C' ) Function arguments Python from pprint import pprint def report ( post_id , reason = 'not-relevant' ): pprint ({ 'post_id' : post_id , 'reason' : reason }) report ( 42 ) report ( post_id = 24 , reason = 'spam' ) # Positional arguments def add_tags ( post_id , * tags ): pprint ({ 'post_id' : post_id , 'tags' : tags }) add_tags ( 42 , 'python' , 'javascript' , 'django' ) # Keyword arguments def create_post ( ** options ): pprint ( options ) create_post ( title = 'Hello, World!' , content = 'This is our first post.' , is_published = True , ) create_post ( title = 'Hello again!' , content = 'This is our second post.' , ) JavaScript function report ( post_id , reason = 'not-relevant' ) { console . log ({ post_id : post_id , reason : reason }); } report ( 42 ); report ( post_id = 24 , reason = 'spam' ); // Positional arguments function add_tags ( post_id , ... tags ) { console . log ({ post_id : post_id , tags : tags }); } add_tags ( 42 , 'python' , 'javascript' , 'django' ); // Keyword arguments function create_post ( options ) { console . log ( options ); } create_post ({ 'title' : 'Hello, World!' , 'content' : 'This is our first post.' , 'is_published' : true }); create_post ({ 'title' : 'Hello again!' , 'content' : 'This is our second post.' }); Classes and inheritance Python class Post ( object ): def __init__ ( self , id , title ): self . id = id self . title = title def __str__ ( self ): return self . title post = Post ( 42 , 'Hello, World!' ) isinstance ( post , Post ) == True print ( post ) # Hello, World! # Inheritance class Article ( Post ): def __init__ ( self , id , title , content ): super ( Article , self ) . __init__ ( id , title ) self . content = content class Link ( Post ): def __init__ ( self , id , title , url ): super ( Link , self ) . __init__ ( id , title ) self . url = url def __str__ ( self ): return ' {} ( {} )' . format ( super ( Link , self ) . __str__ (), self . url , ) article = Article ( 1 , 'Hello, World!' , 'This is my first article.' ) link = Link ( 2 , 'DjangoTricks' , 'https://djangotricks.blogspot.com' ) isinstance ( article , Post ) == True isinstance ( link , Post ) == True print ( link ) # DjangoTricks (https://djangotricks.blogspot.com) JavaScript class Post { constructor ( id , title ) { this . id = id ; this . title = title ; } toString () { return this . title ; } } post = new Post ( 42 , 'Hello, World!' ); post instanceof Post === true ; console . log ( post . toString ()); // Hello, World! // Inheritance class Article extends Post { constructor ( id , title , content ) { super ( id , title ); this . content = content ; } } class Link extends Post { constructor ( id , title , url ) { super ( id , title ); this . url = url ; } toString () { return super . toString () + ' (' + this . url + ')' ; } } article = new Article ( 1 , 'Hello, World!' , 'This is my first article.' ); link = new Link ( 2 , 'DjangoTricks' , 'https://djangotricks.blogspot.com' ); article instanceof Post === true ; link instanceof Post === true ; console . log ( link . toString ()); // DjangoTricks (https://djangotricks.blogspot.com) Class properties: getters and setters Python class Post ( object ): def __init__ ( self , id , title ): self . id = id self . title = title self . _slug = '' @property def slug ( self ): return self . _slug @slug . setter def slug ( self , value ): self . _slug = value post = new Post ( 1 , 'Hello, World!' ) post . slug = 'hello-world' print ( post . slug ) JavaScript class Post { constructor ( id , title ) { this . id = id ; this . title = title ; this . _slug = '' ; } set slug ( value ) { this . _slug = value ; } get slug () { return this . _slug ; } } post = new Post ( 1 , 'Hello, World!' ); post . slug = 'hello-world' ; console . log ( post . slug );","title":"Python vs Javascript comparison"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#python-vs-javascript-comparison","text":"| python | javascript | vs | comparison | First of all it\u2019s not my writing and it\u2019s just a copy of the posts from @DjangoTricks blog by Aidas Bendoraitis (see References below) References Parsing integers Conditional assignment Object attribute value by attribute name Dictionary value by key Slicing lists and strings Operations with list items Joining lists of strings JSON Working with Strings Splitting strings by regular expressions Matching regular expression patterns in strings Search sub-string Replacing patterns in strings using regular expressions Replacing patterns in strings using a function call Error handling Variables in strings Unpacking lists Lambda functions Iteration without indexes Generators Sets Function arguments Classes and inheritance Class properties: getters and setters","title":"Python vs Javascript comparison"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#references","text":"Equivalents in Python and JavaScript. Part 1 Equivalents in Python and JavaScript. Part 2 Equivalents in Python and JavaScript. Part 3 Equivalents in Python and JavaScript. Part 4","title":"References"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#parsing-integers","text":"Python number = int ( text ) JavaScript number = parseInt ( text , 10 ); parseInt ( '012' ) == 10 ; // in some older browsers parseInt ( '012' , 10 ) == 12 ;","title":"Parsing integers"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#conditional-assignment","text":"Python value = 'ADULT' if age >= 18 else 'CHILD' JavaScript value = age >= 18 ? 'ADULT' : 'CHILD' ;","title":"Conditional assignment"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#object-attribute-value-by-attribute-name","text":"Python and JavaScript obj.color = 'YELLOW' Python attribute = 'color' value = getattr ( obj , attribute , 'GREEN' ) setattr ( obj , attribute , value ) JavaScript attribute = 'color' ; value = obj [ attribute ] || 'GREEN' ; obj [ attribute ] = value ;","title":"Object attribute value by attribute name"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#dictionary-value-by-key","text":"Python and JavaScript dictionary = {} dictionary['color'] = 'YELLOW' Python key = 'color' val1 = dictionary [ key ] val2 = dictionary . get ( 'non-existing keys' ) # The more flexible way is to use the get() method which returns None for non-existing keys. value = dictionary . get ( key , 'GREEN' ) # you can pass an optional default value as the second parameter JavaScript key = 'color' ; value = dictionary [ key ] || 'GREEN' ;","title":"Dictionary value by key"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#slicing-lists-and-strings","text":"Python items = [ 1 , 2 , 3 , 4 , 5 ] first_two = items [: 2 ] # [1, 2] last_two = items [ - 2 :] # [4, 5] middle_three = items [ 1 : 4 ] # [2, 3, 4] # The [:] slice operator in Python also works for strings: text = 'ABCDE' first_two = text [: 2 ] # 'AB' last_two = text [ - 2 :] # 'DE' middle_three = text [ 1 : 4 ] # 'BCD' JavaScript items = [ 1 , 2 , 3 , 4 , 5 ]; first_two = items . slice ( 0 , 2 ); // [1, 2] last_two = items . slice ( - 2 ); // [4, 5] middle_three = items . slice ( 1 , 4 ); // [2, 3, 4] // In JavaScript strings just like arrays have the slice() method: text = 'ABCDE' ; first_two = text . slice ( 0 , 2 ); // 'AB' last_two = text . slice ( - 2 ); // 'DE' middle_three = text . slice ( 1 , 4 ); // 'BCD'","title":"Slicing lists and strings"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#operations-with-list-items","text":"Python items1 = [ 'A' ] items2 = [ 'B' ] items = items1 + items2 # items == ['A', 'B'] items . append ( 'C' ) # ['A', 'B', 'C'] items . insert ( 0 , 'D' ) # ['D', 'A', 'B', 'C'] first = items . pop ( 0 ) # ['A', 'B', 'C'] last = items . pop () # ['A', 'B'] items . delete ( 0 ) # ['B'] JavaScript items1 = [ 'A' ]; items2 = [ 'B' ]; items = items1 . concat ( items2 ); // items === ['A', 'B'] items . push ( 'C' ); // ['A', 'B', 'C'] items . unshift ( 'D' ); // ['D', 'A', 'B', 'C'] first = items . shift (); // ['A', 'B', 'C'] last = items . pop (); // ['A', 'B'] items . splice ( 0 , 1 ); // ['B']","title":"Operations with list items"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#joining-lists-of-strings","text":"Python items = [ 'A' , 'B' , 'C' ] text = ', ' . join ( items ) # 'A, B, C' JavaScript items = [ 'A' , 'B' , 'C' ]; text = items . join ( ', ' ); // 'A, B, C'","title":"Joining lists of strings"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#json","text":"Python import json json_data = json . dumps ( dictionary , indent = 4 ) dictionary = json . loads ( json_data ) JavaScript json_data = JSON . stringify ( dictionary , null , 4 ); dictionary = JSON . parse ( json_data );","title":"JSON"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#working-with-strings","text":"","title":"Working with Strings"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#splitting-strings-by-regular-expressions","text":"Python import re # One or more characters of \"!?.\" followed by whitespace delimiter = re . compile ( r '[!?\\.]+\\s*' ) text = \"Hello!!! What's new? Follow me.\" sentences = delimiter . split ( text ) # sentences == ['Hello', \"What's new\", 'Follow me', ''] JavaScript // One or more characters of \"!?.\" followed by whitespace delimiter = /[!?\\.]+\\s*/ ; text = \"Hello!!! What's new? Follow me.\" ; sentences = text . split ( delimiter ) // sentences === [\"Hello\", \"What's new\", \"Follow me\", \"\"]","title":"Splitting strings by regular expressions"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#matching-regular-expression-patterns-in-strings","text":"Python import re # name, \"@\", and domain pattern = re . compile ( r '([\\w.+\\-]+)@([\\w\\-]+\\.[\\w\\-.]+)' ) match = pattern . match ( 'hi@example.com' ) # match.group(0) == 'hi@example.com' # match.group(1) == 'hi' # match.group(2) == 'example.com' JavaScript // name, \"@\", and domain pattern = /([\\w.+\\-]+)@([\\w\\-]+\\.[\\w\\-.]+)/ ; match = 'hi@example.com' . match ( pattern ); // match[0] === 'hi@example.com' // match[1] === 'hi' // match[2] === 'example.com'","title":"Matching regular expression patterns in strings"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#search-sub-string","text":"Python text = 'Say hi at hi@example.com' first_match = pattern . search ( text ) if first_match : start = first_match . start () # start == 10 JavaScript text = 'Say hi at hi@example.com' ; first_match = text . search ( pattern ); if ( first_match > - 1 ) { start = first_match ; // start === 10 }","title":"Search sub-string"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#replacing-patterns-in-strings-using-regular-expressions","text":"Python # In Python the captures, also called as \"backreferences\", are accessible in the replacement string as \\g<0>, \\g<1>, \\g<2> html = pattern . sub ( r '<a href=\"mailto:\\g<0>\">\\g<0></a>' , 'Say hi at hi@example.com' , ) # html == 'Say hi at <a href=\"mailto:hi@example.com\">hi@example.com</a>' JavaScript // In JavaScript the same is accessible as $&, $1, $2, etc. html = 'Say hi at hi@example.com' . replace ( pattern , '<a href=\"mailto:$&\">$&</a>' , ); // html === 'Say hi at <a href=\"mailto:hi@example.com\">hi@example.com</a>'","title":"Replacing patterns in strings using regular expressions"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#replacing-patterns-in-strings-using-a-function-call","text":"Python text = pattern . sub ( lambda match : match . group ( 0 ) . upper (), 'Say hi at hi@example.com' , ) # text == 'Say hi at HI@EXAMPLE.COM' JavaScript text = 'Say hi at hi@example.com' . replace ( pattern , function ( match , p1 , p2 ) { return match . toUpperCase (); } ); // text === 'Say hi at HI@EXAMPLE.COM'","title":"Replacing patterns in strings using a function call"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#error-handling","text":"Python class MyException ( Exception ): def __init__ ( self , message ): self . message = message def __str__ ( self ): return self . message def proceed (): raise MyException ( 'Error happened!' ) try : proceed () except MyException as err : print ( 'Sorry! {} ' . format ( err )) finally : print ( 'Finishing' ) JavaScript function MyException ( message ) { this . message = message ; this . toString = function () { return this . message ; } } function proceed () { throw new MyException ( 'Error happened!' ); } try { proceed (); } catch ( err ) { if ( err instanceof MyException ) { console . log ( 'Sorry! ' + err ); } } finally { console . log ( 'Finishing' ); }","title":"Error handling"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#variables-in-strings","text":"name = 'World' value = 'Hello, ' + name + '!\\nWelcome!' Python name = 'World' value = f \"\"\"Hello, { name } ! Welcome!\"\"\" price = 14.9 value = f 'Price: { price : .2f } \u20ac' # 'Price: 14.90 \u20ac' JavaScript name = 'World' ; value = `Hello, ${ name } ! Welcome!` ; price = 14.9 ; value = `Price ${ price . toFixed ( 2 ) } \u20ac` ; // 'Price: 14.90 \u20ac'","title":"Variables in strings"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#unpacking-lists","text":"Python [ a , b , c ] = [ 1 , 2 , 3 ] # E.g. popular variable swap a = 1 b = 2 a , b = b , a # swap values # Python 3.6 first , second , * the_rest = [ 1 , 2 , 3 , 4 ] # first == 1 # second == 2 # the_rest == [3, 4] JavaScript // ECMAScript 6 [ first , second , ... the_rest ] = [ 1 , 2 , 3 , 4 ]; // first === 1 // last === 2 // the_rest === [3, 4]","title":"Unpacking lists"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#lambda-functions","text":"Python sum = lambda x , y : x + y square = lambda x : x ** 2 JavaScript sum = ( x , y ) => x + y ; square = x => Math . pow ( x , 2 );","title":"Lambda functions"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#iteration-without-indexes","text":"Python for item in [ 'A' , 'B' , 'C' ]: print ( item ) for character in 'ABC' : print ( character ) JavaScript for ( let item of [ 'A' , 'B' , 'C' ]) { console . log ( item ); } for ( let character of 'ABC' ) { console . log ( character ); }","title":"Iteration without indexes"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#generators","text":"Python def countdown ( counter ): while counter > 0 : yield counter counter -= 1 for counter in countdown ( 10 ): print ( counter ) JavaScript function * countdown ( counter ) { while ( counter > 0 ) { yield counter ; counter -- ; } } for ( let counter of countdown ( 10 )) { console . log ( counter ); }","title":"Generators"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#sets","text":"Python s = set ([ 'A' ]) s . add ( 'B' ); s . add ( 'C' ) 'A' in s len ( s ) == 3 for elem in s : print ( elem ) s . remove ( 'C' ) JavaScript s = new Set ([ 'A' ]); s . add ( 'B' ). add ( 'C' ); s . has ( 'A' ) === true ; s . size === 3 ; for ( let elem of s . values ()) { console . log ( elem ); } s . delete ( 'C' )","title":"Sets"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#function-arguments","text":"Python from pprint import pprint def report ( post_id , reason = 'not-relevant' ): pprint ({ 'post_id' : post_id , 'reason' : reason }) report ( 42 ) report ( post_id = 24 , reason = 'spam' ) # Positional arguments def add_tags ( post_id , * tags ): pprint ({ 'post_id' : post_id , 'tags' : tags }) add_tags ( 42 , 'python' , 'javascript' , 'django' ) # Keyword arguments def create_post ( ** options ): pprint ( options ) create_post ( title = 'Hello, World!' , content = 'This is our first post.' , is_published = True , ) create_post ( title = 'Hello again!' , content = 'This is our second post.' , ) JavaScript function report ( post_id , reason = 'not-relevant' ) { console . log ({ post_id : post_id , reason : reason }); } report ( 42 ); report ( post_id = 24 , reason = 'spam' ); // Positional arguments function add_tags ( post_id , ... tags ) { console . log ({ post_id : post_id , tags : tags }); } add_tags ( 42 , 'python' , 'javascript' , 'django' ); // Keyword arguments function create_post ( options ) { console . log ( options ); } create_post ({ 'title' : 'Hello, World!' , 'content' : 'This is our first post.' , 'is_published' : true }); create_post ({ 'title' : 'Hello again!' , 'content' : 'This is our second post.' });","title":"Function arguments"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#classes-and-inheritance","text":"Python class Post ( object ): def __init__ ( self , id , title ): self . id = id self . title = title def __str__ ( self ): return self . title post = Post ( 42 , 'Hello, World!' ) isinstance ( post , Post ) == True print ( post ) # Hello, World! # Inheritance class Article ( Post ): def __init__ ( self , id , title , content ): super ( Article , self ) . __init__ ( id , title ) self . content = content class Link ( Post ): def __init__ ( self , id , title , url ): super ( Link , self ) . __init__ ( id , title ) self . url = url def __str__ ( self ): return ' {} ( {} )' . format ( super ( Link , self ) . __str__ (), self . url , ) article = Article ( 1 , 'Hello, World!' , 'This is my first article.' ) link = Link ( 2 , 'DjangoTricks' , 'https://djangotricks.blogspot.com' ) isinstance ( article , Post ) == True isinstance ( link , Post ) == True print ( link ) # DjangoTricks (https://djangotricks.blogspot.com) JavaScript class Post { constructor ( id , title ) { this . id = id ; this . title = title ; } toString () { return this . title ; } } post = new Post ( 42 , 'Hello, World!' ); post instanceof Post === true ; console . log ( post . toString ()); // Hello, World! // Inheritance class Article extends Post { constructor ( id , title , content ) { super ( id , title ); this . content = content ; } } class Link extends Post { constructor ( id , title , url ) { super ( id , title ); this . url = url ; } toString () { return super . toString () + ' (' + this . url + ')' ; } } article = new Article ( 1 , 'Hello, World!' , 'This is my first article.' ); link = new Link ( 2 , 'DjangoTricks' , 'https://djangotricks.blogspot.com' ); article instanceof Post === true ; link instanceof Post === true ; console . log ( link . toString ()); // DjangoTricks (https://djangotricks.blogspot.com)","title":"Classes and inheritance"},{"location":"blog/2019/2019-01-19-python-vs-javascript/#class-properties-getters-and-setters","text":"Python class Post ( object ): def __init__ ( self , id , title ): self . id = id self . title = title self . _slug = '' @property def slug ( self ): return self . _slug @slug . setter def slug ( self , value ): self . _slug = value post = new Post ( 1 , 'Hello, World!' ) post . slug = 'hello-world' print ( post . slug ) JavaScript class Post { constructor ( id , title ) { this . id = id ; this . title = title ; this . _slug = '' ; } set slug ( value ) { this . _slug = value ; } get slug () { return this . _slug ; } } post = new Post ( 1 , 'Hello, World!' ); post . slug = 'hello-world' ; console . log ( post . slug );","title":"Class properties: getters and setters"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/","text":"Ruby vs Javascript comparison | ruby | javascript | vs | comparison | First of all it\u2019s not my writings and it\u2019s just a copy of Artem\u2019s Tyurin agentcooper/js-ruby-comparison repo Note: This comparison uses pre- ES6 code snippets. Arrays Manipulation Predicates Array map methong Slices Iterating elements Strings Hash Functions Basic usage Multiple arguments Definition and invocation order Classes Math Other Arrays Manipulation Ruby a = [ \"1\" , \"2\" ] a . push ( \"3\" ) a . map! ( & :to_i ) # [1, 2, 3] a . delete_at ( 1 ) a # [1, 3] a . reverse! # [3, 1] a . unshift ( 777 ) # [777, 3, 1] a . last # [1] JavaScript var a = [ \"1\" , \"2\" ]; a . push ( \"3\" ); a = a . map ( function ( n ) { return parseInt ( n , 10 ); }); a . splice ( 1 , 1 /* how much */ ); a ; // [1, 3] a . reverse () // [3, 1] a . unshift ( 777 ); // 3 a ; // [777, 3, 1] /* or in place: */ var b = [ 3 , 1 ]; [ 777 ]. concat ( b ); // [777, 3, 1] a . slice ( - 1 )[ 0 ]; // 1 /* or */ a [ a . length - 1 ]; // 1 Predicates Ruby a = [ 1 , 2 , 3 ] a . index ( 2 ) # 1 a . all? { | n | n > 4 } # false a . any? { | n | n > 2 } # true a . keep_if { | n | n > 1 } # [2, 3] JavaScript var a = [ 1 , 2 , 3 ]; a . indexOf ( 2 ); // 1 a . every ( function ( n ) { return n > 4 ; }); // false a . some ( function ( n ) { return n > 2 ; }); // true a . filter ( function ( n ) { return n > 1 ;}); // [2, 3] Array map methong Ruby a = [ \"aaa \" , \" bbb\" , \" ccc \" ] a . map ( & :strip ) # [\"aaa\", \"bbb\", \"ccc\"] JavaScript var a = [ \"aaa \" , \" bbb\" , \" ccc \" ] a . map ( function ( x ) { return x . trim (); }); // ['aaa', 'bbb', 'ccc'] a . map ( Function . prototype . call , String . prototype . trim ); // ['aaa', 'bbb', 'ccc'] a . map ( x => x . trim ()); // ['aaa', 'bbb', 'ccc'] Slices Ruby a = [ 1 , 2 , 3 , 4 , 5 ] a . slice ( 1 ..- 2 ) # [2, 3, 4] a [ 1 ..- 2 ] # [2, 3, 4] JavaScript var a = [ 1 , 2 , 3 , 4 , 5 ]; a . slice ( 1 , - 1 ); // [2, 3, 4] Iterating elements a = [ 1 , 2 , 3 ] a . each { | n | puts n } a . each do | n | puts n end for i in 0 .. ( a . length - 1 ) do puts a [ i ] end JavaScript var a = [ 1 , 2 , 3 ]; a . forEach ( function ( n ) { console . log ( n ); }) for ( var i = 0 ; i < a . length ; i ++ ) { console . log ( a [ i ]); } for ( elem of a ) { console . log ( elem ); } Strings Ruby 'hello' . index ( 'e' ) # 1 'hello' . rindex ( 'l' ) # 3 if 'hello' . include? 'lo' then puts 'found' end 'hello' * 3 # 'hellohellohello' 'a/b/c' . split ( '/' ) # ['a', 'b', 'c'] JavaScript 'hello' . indexOf ( 'e' ) // 1 'hello' . lastIndexOf ( 'l' ) // 3 if ( ~ 'hello' . indexOf ( 'lo' )) { console . log ( 'found' ); } ( new Array ( 3 + 1 )). join ( 'hello' ) // 'hellohellohello' 'a/b/c' . split ( '/' ) // ['a', 'b', 'c'] Hash Ruby h = {} h [ 'a' ] = 1 h [ 'b' ] = 2 h . each { | key , value | puts \" #{ key } #{ value } \" } h . keys # ['a', 'b'] h . has_key? ( 'c' ) # false h . length # 2 h . delete ( \"b\" ) JavaScript var h = {}; h [ 'a' ] = 1 ; h [ 'b' ] = 2 ; for ( key in h ) { console . log ( key , h [ key ]); } Object . keys ( h ); // ['a', 'b'] h . hasOwnProperty ( 'c' ) // false Object . keys ( h ). length // 2 delete h . b Functions Basic usage Ruby def plus_5 ( num = 0 ) num + 5 end plus_5 # 5 plus_5 ( 10 ) # 15 [ 5 , 10 , 15 ]. map { | k | plus_5 ( k ) } # [10, 15, 20] JavaScript function plus_5 ( num ) { return ( num || 0 ) + 5 ; } plus_5 (); // 5 plus_5 ( 10 ); // 15 [ 5 , 10 , 15 ]. map ( plus_5 ); // [10, 15, 20] Multiple arguments Ruby def f ( * args ) puts args end JavaScript function f () { var args = Array . prototype . slice . call ( arguments ); console . log ( args ); } Definition and invocation order Ruby sample_func def sample_func puts \"Hello World\" end # => NameError: undefined local # variable or method `sample_func' JavaScript sample_func (); function sample_func () { console . log ( \"Hello World\" ); }; // => Hello World Classes Ruby class Person attr_accessor :firstName , :lastName def initialize ( firstName , lastName ) @firstName = firstName @lastName = lastName end def fullName @firstName + \" \" + @lastName end end john = Person . new ( \"John\" , \"Malkovic\" ) john . fullName # \"John Malkovic\" JavaScript I\u2019m lazy to write this example in ES6 function Person ( firstName , lastName ) { this . firstName = firstName ; this . lastName = lastName ; } Person . prototype . fullName = function () { return this . firstName + \" \" + this . lastName ; } var john = new Person ( \"John\" , \"Malkovic\" ); john . fullName (); // \"John Malkovic\" Math Ruby [- 5 , - 1 , - 8 ]. max # -1 [- 5 , 15 , 20 ]. reduce ( 0 , & :+ ) # 30 JavaScript Math . max . apply ( null , [ - 5 , - 1 , - 8 ]) // -1 [ - 5 , 15 , 20 ]. reduce ( function ( sum , value ) { return sum + value ; }, 0 ) // 30 [ - 5 , 15 , 20 ]. reduce (( sum , value ) => sum + value , 0 ) // 30 Other Ruby prng = Random . new () prng . rand ( 5 .. 9 ) # one of [5, 6, 7, 8, 9] a , b = b , a # switch a and b JavaScript function rand ( a , b ) { return Math . floor ( Math . random () * ( b - a + 1 ) + a ); } rand ( 5 , 9 ); // one of [5, 6, 7, 8, 9] a = [ b , b = a ][ 0 ] // do not try at home :-)","title":"Ruby vs Javascript comparison"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#ruby-vs-javascript-comparison","text":"| ruby | javascript | vs | comparison | First of all it\u2019s not my writings and it\u2019s just a copy of Artem\u2019s Tyurin agentcooper/js-ruby-comparison repo Note: This comparison uses pre- ES6 code snippets. Arrays Manipulation Predicates Array map methong Slices Iterating elements Strings Hash Functions Basic usage Multiple arguments Definition and invocation order Classes Math Other","title":"Ruby vs Javascript comparison"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#arrays","text":"","title":"Arrays"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#manipulation","text":"Ruby a = [ \"1\" , \"2\" ] a . push ( \"3\" ) a . map! ( & :to_i ) # [1, 2, 3] a . delete_at ( 1 ) a # [1, 3] a . reverse! # [3, 1] a . unshift ( 777 ) # [777, 3, 1] a . last # [1] JavaScript var a = [ \"1\" , \"2\" ]; a . push ( \"3\" ); a = a . map ( function ( n ) { return parseInt ( n , 10 ); }); a . splice ( 1 , 1 /* how much */ ); a ; // [1, 3] a . reverse () // [3, 1] a . unshift ( 777 ); // 3 a ; // [777, 3, 1] /* or in place: */ var b = [ 3 , 1 ]; [ 777 ]. concat ( b ); // [777, 3, 1] a . slice ( - 1 )[ 0 ]; // 1 /* or */ a [ a . length - 1 ]; // 1","title":"Manipulation"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#predicates","text":"Ruby a = [ 1 , 2 , 3 ] a . index ( 2 ) # 1 a . all? { | n | n > 4 } # false a . any? { | n | n > 2 } # true a . keep_if { | n | n > 1 } # [2, 3] JavaScript var a = [ 1 , 2 , 3 ]; a . indexOf ( 2 ); // 1 a . every ( function ( n ) { return n > 4 ; }); // false a . some ( function ( n ) { return n > 2 ; }); // true a . filter ( function ( n ) { return n > 1 ;}); // [2, 3]","title":"Predicates"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#array-map-methong","text":"Ruby a = [ \"aaa \" , \" bbb\" , \" ccc \" ] a . map ( & :strip ) # [\"aaa\", \"bbb\", \"ccc\"] JavaScript var a = [ \"aaa \" , \" bbb\" , \" ccc \" ] a . map ( function ( x ) { return x . trim (); }); // ['aaa', 'bbb', 'ccc'] a . map ( Function . prototype . call , String . prototype . trim ); // ['aaa', 'bbb', 'ccc'] a . map ( x => x . trim ()); // ['aaa', 'bbb', 'ccc']","title":"Array map methong"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#slices","text":"Ruby a = [ 1 , 2 , 3 , 4 , 5 ] a . slice ( 1 ..- 2 ) # [2, 3, 4] a [ 1 ..- 2 ] # [2, 3, 4] JavaScript var a = [ 1 , 2 , 3 , 4 , 5 ]; a . slice ( 1 , - 1 ); // [2, 3, 4]","title":"Slices"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#iterating-elements","text":"a = [ 1 , 2 , 3 ] a . each { | n | puts n } a . each do | n | puts n end for i in 0 .. ( a . length - 1 ) do puts a [ i ] end JavaScript var a = [ 1 , 2 , 3 ]; a . forEach ( function ( n ) { console . log ( n ); }) for ( var i = 0 ; i < a . length ; i ++ ) { console . log ( a [ i ]); } for ( elem of a ) { console . log ( elem ); }","title":"Iterating elements"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#strings","text":"Ruby 'hello' . index ( 'e' ) # 1 'hello' . rindex ( 'l' ) # 3 if 'hello' . include? 'lo' then puts 'found' end 'hello' * 3 # 'hellohellohello' 'a/b/c' . split ( '/' ) # ['a', 'b', 'c'] JavaScript 'hello' . indexOf ( 'e' ) // 1 'hello' . lastIndexOf ( 'l' ) // 3 if ( ~ 'hello' . indexOf ( 'lo' )) { console . log ( 'found' ); } ( new Array ( 3 + 1 )). join ( 'hello' ) // 'hellohellohello' 'a/b/c' . split ( '/' ) // ['a', 'b', 'c']","title":"Strings"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#hash","text":"Ruby h = {} h [ 'a' ] = 1 h [ 'b' ] = 2 h . each { | key , value | puts \" #{ key } #{ value } \" } h . keys # ['a', 'b'] h . has_key? ( 'c' ) # false h . length # 2 h . delete ( \"b\" ) JavaScript var h = {}; h [ 'a' ] = 1 ; h [ 'b' ] = 2 ; for ( key in h ) { console . log ( key , h [ key ]); } Object . keys ( h ); // ['a', 'b'] h . hasOwnProperty ( 'c' ) // false Object . keys ( h ). length // 2 delete h . b","title":"Hash"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#functions","text":"","title":"Functions"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#basic-usage","text":"Ruby def plus_5 ( num = 0 ) num + 5 end plus_5 # 5 plus_5 ( 10 ) # 15 [ 5 , 10 , 15 ]. map { | k | plus_5 ( k ) } # [10, 15, 20] JavaScript function plus_5 ( num ) { return ( num || 0 ) + 5 ; } plus_5 (); // 5 plus_5 ( 10 ); // 15 [ 5 , 10 , 15 ]. map ( plus_5 ); // [10, 15, 20]","title":"Basic usage"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#multiple-arguments","text":"Ruby def f ( * args ) puts args end JavaScript function f () { var args = Array . prototype . slice . call ( arguments ); console . log ( args ); }","title":"Multiple arguments"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#definition-and-invocation-order","text":"Ruby sample_func def sample_func puts \"Hello World\" end # => NameError: undefined local # variable or method `sample_func' JavaScript sample_func (); function sample_func () { console . log ( \"Hello World\" ); }; // => Hello World","title":"Definition and invocation order"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#classes","text":"Ruby class Person attr_accessor :firstName , :lastName def initialize ( firstName , lastName ) @firstName = firstName @lastName = lastName end def fullName @firstName + \" \" + @lastName end end john = Person . new ( \"John\" , \"Malkovic\" ) john . fullName # \"John Malkovic\" JavaScript I\u2019m lazy to write this example in ES6 function Person ( firstName , lastName ) { this . firstName = firstName ; this . lastName = lastName ; } Person . prototype . fullName = function () { return this . firstName + \" \" + this . lastName ; } var john = new Person ( \"John\" , \"Malkovic\" ); john . fullName (); // \"John Malkovic\"","title":"Classes"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#math","text":"Ruby [- 5 , - 1 , - 8 ]. max # -1 [- 5 , 15 , 20 ]. reduce ( 0 , & :+ ) # 30 JavaScript Math . max . apply ( null , [ - 5 , - 1 , - 8 ]) // -1 [ - 5 , 15 , 20 ]. reduce ( function ( sum , value ) { return sum + value ; }, 0 ) // 30 [ - 5 , 15 , 20 ]. reduce (( sum , value ) => sum + value , 0 ) // 30","title":"Math"},{"location":"blog/2019/2019-01-20-ruby-vs-javascript/#other","text":"Ruby prng = Random . new () prng . rand ( 5 .. 9 ) # one of [5, 6, 7, 8, 9] a , b = b , a # switch a and b JavaScript function rand ( a , b ) { return Math . floor ( Math . random () * ( b - a + 1 ) + a ); } rand ( 5 , 9 ); // one of [5, 6, 7, 8, 9] a = [ b , b = a ][ 0 ] // do not try at home :-)","title":"Other"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/","text":"PostgreSQL command line cheatsheet | postgresql | cheatsheet | database | Install Postgres.app Run psql bundled with Postgres.app psql commands psql automated shell examples psql Interactive mode References Install Postgres.app The most convenient way to use PostgreSQL server locally is to install Postgres.app Run psql bundled with Postgres.app /Applications/Postgres.app/Contents/Versions/10/bin/psql psql commands Just type \\? in psql console and get the list below You are using psql, the command-line interface to PostgreSQL. Type: \\copyright for distribution terms \\h for help with SQL commands \\? for help with psql commands \\g or terminate with semicolon to execute query \\q to quit halyph=# \\? General \\copyright show PostgreSQL usage and distribution terms \\crosstabview [COLUMNS] execute query and display results in crosstab \\errverbose show most recent error message at maximum verbosity \\g [FILE] or ; execute query (and send results to file or |pipe) \\gexec execute query, then execute each value in its result \\gset [PREFIX] execute query and store results in psql variables \\gx [FILE] as \\g, but forces expanded output mode \\q quit psql \\watch [SEC] execute query every SEC seconds Help \\? [commands] show help on backslash commands \\? options show help on psql command-line options \\? variables show help on special variables \\h [NAME] help on syntax of SQL commands, * for all commands Query Buffer \\e [FILE] [LINE] edit the query buffer (or file) with external editor \\ef [FUNCNAME [LINE]] edit function definition with external editor \\ev [VIEWNAME [LINE]] edit view definition with external editor \\p show the contents of the query buffer \\r reset (clear) the query buffer \\s [FILE] display history or save it to file \\w FILE write query buffer to file Input/Output \\copy ... perform SQL COPY with data stream to the client host \\echo [STRING] write string to standard output \\i FILE execute commands from file \\ir FILE as \\i, but relative to location of current script \\o [FILE] send all query results to file or |pipe \\qecho [STRING] write string to query output stream (see \\o) Conditional \\if EXPR begin conditional block \\elif EXPR alternative within current conditional block \\else final alternative within current conditional block \\endif end conditional block Informational (options: S = show system objects, + = additional detail) \\d[S+] list tables, views, and sequences \\d[S+] NAME describe table, view, sequence, or index \\da[S] [PATTERN] list aggregates \\dA[+] [PATTERN] list access methods \\db[+] [PATTERN] list tablespaces \\dc[S+] [PATTERN] list conversions \\dC[+] [PATTERN] list casts \\dd[S] [PATTERN] show object descriptions not displayed elsewhere \\dD[S+] [PATTERN] list domains \\ddp [PATTERN] list default privileges \\dE[S+] [PATTERN] list foreign tables \\det[+] [PATTERN] list foreign tables \\des[+] [PATTERN] list foreign servers \\deu[+] [PATTERN] list user mappings \\dew[+] [PATTERN] list foreign-data wrappers \\df[antw][S+] [PATRN] list [only agg/normal/trigger/window] functions \\dF[+] [PATTERN] list text search configurations \\dFd[+] [PATTERN] list text search dictionaries \\dFp[+] [PATTERN] list text search parsers \\dFt[+] [PATTERN] list text search templates \\dg[S+] [PATTERN] list roles \\di[S+] [PATTERN] list indexes \\dl list large objects, same as \\lo_list \\dL[S+] [PATTERN] list procedural languages \\dm[S+] [PATTERN] list materialized views \\dn[S+] [PATTERN] list schemas \\do[S] [PATTERN] list operators \\dO[S+] [PATTERN] list collations \\dp [PATTERN] list table, view, and sequence access privileges \\drds [PATRN1 [PATRN2]] list per-database role settings \\dRp[+] [PATTERN] list replication publications \\dRs[+] [PATTERN] list replication subscriptions \\ds[S+] [PATTERN] list sequences \\dt[S+] [PATTERN] list tables \\dT[S+] [PATTERN] list data types \\du[S+] [PATTERN] list roles \\dv[S+] [PATTERN] list views \\dx[+] [PATTERN] list extensions \\dy [PATTERN] list event triggers \\l[+] [PATTERN] list databases \\sf[+] FUNCNAME show a function's definition \\sv[+] VIEWNAME show a view's definition \\z [PATTERN] same as \\dp Formatting \\a toggle between unaligned and aligned output mode \\C [STRING] set table title, or unset if none \\f [STRING] show or set field separator for unaligned query output \\H toggle HTML output mode (currently off) \\pset [NAME [VALUE]] set table output option (NAME := {border|columns|expanded|fieldsep|fieldsep_zero| footer|format|linestyle|null|numericlocale|pager| pager_min_lines|recordsep|recordsep_zero|tableattr|title| tuples_only|unicode_border_linestyle| unicode_column_linestyle|unicode_header_linestyle}) \\t [on|off] show only rows (currently off) \\T [STRING] set HTML <table> tag attributes, or unset if none \\x [on|off|auto] toggle expanded output (currently off) Connection \\c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo} connect to new database (currently \"halyph\") \\conninfo display information about current connection \\encoding [ENCODING] show or set client encoding \\password [USERNAME] securely change the password for a user Operating System \\cd [DIR] change the current working directory \\setenv NAME [VALUE] set or unset environment variable \\timing [on|off] toggle timing of commands (currently off) \\! [COMMAND] execute command in shell or start interactive shell Variables \\prompt [TEXT] NAME prompt user to set internal variable \\set [NAME [VALUE]] set internal variable, or list all if no parameters \\unset NAME unset (delete) internal variable Large Objects \\lo_export LOBOID FILE \\lo_import FILE [COMMENT] \\lo_list \\lo_unlink LOBOID large object operations Connection options: -h, --host=HOSTNAME database server host or socket directory -p, --port=PORT database server port number -U, --username=NAME connect as specified database user -W, --password force password prompt (should happen automatically) -e, --exit-on-error exit on error, default is to continue -d DBNAME some database psql automated shell examples restore whole server psql --host=localhost --username=someuser -f /path/to/pgdumpall.sql Run an sql batch script against a database psql -h localhost -U someuser -d somedb -f /path/to/somefile.sql Run an sql batch script against a database and send output to file psql -h localhost -U someuser -d somedb -f /path/to/scriptfile.sql -o /path/to/outputfile.txt Run a single statement against a db psql -U postgres -d pagila -c \"CREATE TABLE test(some_id serial PRIMARY KEY, some_text text);\" Output data in html format psql -h someserver -p 5432 -U someuser -d somedb -H -c \"SELECT * FROM sometable\" -o mydata.html psql Interactive mode Launch Interactive session psql -h localhost -U postgres -d somedb View help for SELECT * LIMIT \\h SELECT * LIMIT List all tables in db w ith descriptions \\dt+ List all tables in db w ith s in the name \\dt *s* Cancel out of MORE screen :q References https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546 http://www.postgresqltutorial.com/postgresql-cheat-sheet/ http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf","title":"PostgreSQL command line cheatsheet"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#postgresql-command-line-cheatsheet","text":"| postgresql | cheatsheet | database | Install Postgres.app Run psql bundled with Postgres.app psql commands psql automated shell examples psql Interactive mode References","title":"PostgreSQL command line cheatsheet"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#install-postgresapp","text":"The most convenient way to use PostgreSQL server locally is to install Postgres.app","title":"Install Postgres.app"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#run-psql-bundled-with-postgresapp","text":"/Applications/Postgres.app/Contents/Versions/10/bin/psql","title":"Run psql bundled with Postgres.app"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#psql-commands","text":"Just type \\? in psql console and get the list below You are using psql, the command-line interface to PostgreSQL. Type: \\copyright for distribution terms \\h for help with SQL commands \\? for help with psql commands \\g or terminate with semicolon to execute query \\q to quit halyph=# \\? General \\copyright show PostgreSQL usage and distribution terms \\crosstabview [COLUMNS] execute query and display results in crosstab \\errverbose show most recent error message at maximum verbosity \\g [FILE] or ; execute query (and send results to file or |pipe) \\gexec execute query, then execute each value in its result \\gset [PREFIX] execute query and store results in psql variables \\gx [FILE] as \\g, but forces expanded output mode \\q quit psql \\watch [SEC] execute query every SEC seconds Help \\? [commands] show help on backslash commands \\? options show help on psql command-line options \\? variables show help on special variables \\h [NAME] help on syntax of SQL commands, * for all commands Query Buffer \\e [FILE] [LINE] edit the query buffer (or file) with external editor \\ef [FUNCNAME [LINE]] edit function definition with external editor \\ev [VIEWNAME [LINE]] edit view definition with external editor \\p show the contents of the query buffer \\r reset (clear) the query buffer \\s [FILE] display history or save it to file \\w FILE write query buffer to file Input/Output \\copy ... perform SQL COPY with data stream to the client host \\echo [STRING] write string to standard output \\i FILE execute commands from file \\ir FILE as \\i, but relative to location of current script \\o [FILE] send all query results to file or |pipe \\qecho [STRING] write string to query output stream (see \\o) Conditional \\if EXPR begin conditional block \\elif EXPR alternative within current conditional block \\else final alternative within current conditional block \\endif end conditional block Informational (options: S = show system objects, + = additional detail) \\d[S+] list tables, views, and sequences \\d[S+] NAME describe table, view, sequence, or index \\da[S] [PATTERN] list aggregates \\dA[+] [PATTERN] list access methods \\db[+] [PATTERN] list tablespaces \\dc[S+] [PATTERN] list conversions \\dC[+] [PATTERN] list casts \\dd[S] [PATTERN] show object descriptions not displayed elsewhere \\dD[S+] [PATTERN] list domains \\ddp [PATTERN] list default privileges \\dE[S+] [PATTERN] list foreign tables \\det[+] [PATTERN] list foreign tables \\des[+] [PATTERN] list foreign servers \\deu[+] [PATTERN] list user mappings \\dew[+] [PATTERN] list foreign-data wrappers \\df[antw][S+] [PATRN] list [only agg/normal/trigger/window] functions \\dF[+] [PATTERN] list text search configurations \\dFd[+] [PATTERN] list text search dictionaries \\dFp[+] [PATTERN] list text search parsers \\dFt[+] [PATTERN] list text search templates \\dg[S+] [PATTERN] list roles \\di[S+] [PATTERN] list indexes \\dl list large objects, same as \\lo_list \\dL[S+] [PATTERN] list procedural languages \\dm[S+] [PATTERN] list materialized views \\dn[S+] [PATTERN] list schemas \\do[S] [PATTERN] list operators \\dO[S+] [PATTERN] list collations \\dp [PATTERN] list table, view, and sequence access privileges \\drds [PATRN1 [PATRN2]] list per-database role settings \\dRp[+] [PATTERN] list replication publications \\dRs[+] [PATTERN] list replication subscriptions \\ds[S+] [PATTERN] list sequences \\dt[S+] [PATTERN] list tables \\dT[S+] [PATTERN] list data types \\du[S+] [PATTERN] list roles \\dv[S+] [PATTERN] list views \\dx[+] [PATTERN] list extensions \\dy [PATTERN] list event triggers \\l[+] [PATTERN] list databases \\sf[+] FUNCNAME show a function's definition \\sv[+] VIEWNAME show a view's definition \\z [PATTERN] same as \\dp Formatting \\a toggle between unaligned and aligned output mode \\C [STRING] set table title, or unset if none \\f [STRING] show or set field separator for unaligned query output \\H toggle HTML output mode (currently off) \\pset [NAME [VALUE]] set table output option (NAME := {border|columns|expanded|fieldsep|fieldsep_zero| footer|format|linestyle|null|numericlocale|pager| pager_min_lines|recordsep|recordsep_zero|tableattr|title| tuples_only|unicode_border_linestyle| unicode_column_linestyle|unicode_header_linestyle}) \\t [on|off] show only rows (currently off) \\T [STRING] set HTML <table> tag attributes, or unset if none \\x [on|off|auto] toggle expanded output (currently off) Connection \\c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo} connect to new database (currently \"halyph\") \\conninfo display information about current connection \\encoding [ENCODING] show or set client encoding \\password [USERNAME] securely change the password for a user Operating System \\cd [DIR] change the current working directory \\setenv NAME [VALUE] set or unset environment variable \\timing [on|off] toggle timing of commands (currently off) \\! [COMMAND] execute command in shell or start interactive shell Variables \\prompt [TEXT] NAME prompt user to set internal variable \\set [NAME [VALUE]] set internal variable, or list all if no parameters \\unset NAME unset (delete) internal variable Large Objects \\lo_export LOBOID FILE \\lo_import FILE [COMMENT] \\lo_list \\lo_unlink LOBOID large object operations Connection options: -h, --host=HOSTNAME database server host or socket directory -p, --port=PORT database server port number -U, --username=NAME connect as specified database user -W, --password force password prompt (should happen automatically) -e, --exit-on-error exit on error, default is to continue -d DBNAME some database","title":"psql commands"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#psql-automated-shell-examples","text":"restore whole server psql --host=localhost --username=someuser -f /path/to/pgdumpall.sql Run an sql batch script against a database psql -h localhost -U someuser -d somedb -f /path/to/somefile.sql Run an sql batch script against a database and send output to file psql -h localhost -U someuser -d somedb -f /path/to/scriptfile.sql -o /path/to/outputfile.txt Run a single statement against a db psql -U postgres -d pagila -c \"CREATE TABLE test(some_id serial PRIMARY KEY, some_text text);\" Output data in html format psql -h someserver -p 5432 -U someuser -d somedb -H -c \"SELECT * FROM sometable\" -o mydata.html","title":"psql automated shell examples"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#psql-interactive-mode","text":"Launch Interactive session psql -h localhost -U postgres -d somedb View help for SELECT * LIMIT \\h SELECT * LIMIT List all tables in db w ith descriptions \\dt+ List all tables in db w ith s in the name \\dt *s* Cancel out of MORE screen :q","title":"psql Interactive mode"},{"location":"blog/2019/2019-01-22-postgresql-command-line-cheatsheet/#references","text":"https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546 http://www.postgresqltutorial.com/postgresql-cheat-sheet/ http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf","title":"References"},{"location":"blog/2019/2019-01-23-go-vs-python/","text":"Go vs Python comparison | python | golang | vs | comparison | It\u2019s not my writings and it\u2019s just a copy of Go vs. Python by Peter Bengtsson (see References below) References Hello World Print Comments Multiline Strings Lists Maps Booleans Forloop Range Switch Variadic Functions Time Elapsed Closure Functions Defer Panic Recover Mutables Structs Methods Goroutines Args Import Alias Sprintf Uniqify Dotdict References http://govspy.peterbe.com/ Hello World Go package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } Python print ( \"Hello world\" ) Print Go package main import \"fmt\" func main () { fmt . Println ( \"Some string\" ) fmt . Print ( \"Some string\" ) fmt . Printf ( \"Name: %s, Age: %d\\n\" , \"Peter\" , 35 ) } Python print ( \"Some string\" ) print ( \"Some string\" , end = \"\" ) # no newline character printed print ( \"Name: {} , Age: {} \" . format ( \"Peter\" , 35 )) Comments Go package main // This is a general comment /* This is also a comment but on multiple lines. */ /* This is the multi-line comment for the function main(). To get access to this from the command line, run: godoc comments.go */ func main () { } Python \"\"\"This is a doc string for the whole module\"\"\" # This is a inline comment class Class ( object ): \"\"\"This is the doc string for the class\"\"\" print ( __doc__ ) print ( Class . __doc__ ) Multiline Strings Go package main import \"fmt\" func main () { fmt . Println ( `This is a multi-line string. ` ) fmt . Println ( \"O'word \" + \"Another \\\"word\\\" \" + \"Last word.\" ) } Python print ( \"\"\"This is a multi-line string. \"\"\" ) print ( \"O'word \" 'Another \"word\" ' \"Last word.\" ) Lists Go package main import \"fmt\" func main () { // initialized array var numbers [ 5 ] int // becomes [0, 0, 0, 0, 0] // change one of them numbers [ 2 ] = 100 // create a new slice from an array some_numbers := numbers [ 1 : 3 ] fmt . Println ( some_numbers ) // [0, 100] // length of it fmt . Println ( len ( numbers )) // initialize a slice var scores [] float64 scores = append ( scores , 1.1 ) // recreate to append scores [ 0 ] = 2.2 // change your mind fmt . Println ( scores ) // prints [2.2] // when you don't know for sure how much you're going // to put in it, one way is to var things [ 100 ] string things [ 0 ] = \"Peter\" things [ 1 ] = \"Anders\" fmt . Println ( len ( things )) // 100 } Python # initialize list numbers = [ 0 ] * 5 # change one of them numbers [ 2 ] = 100 some_numbers = numbers [ 1 : 3 ] print ( some_numbers ) # [0, 100] # length of it print ( len ( numbers )) # 5 # initialize another scores = [] scores . append ( 1.1 ) scores [ 0 ] = 2.2 print ( scores ) # [2.2] Maps Go //You can make a map of maps with: elements : make ( map [ string ] map [ string ] int ) elements [ \"H\" ] = map [ string ] int { \"protons\" : 1 , \"neutrons\" : 0 , } //But note, this is what you have struct for. package main import \"fmt\" func main () { elements := make ( map [ string ] int ) elements [ \"H\" ] = 1 fmt . Println ( elements [ \"H\" ]) // remove by key elements [ \"O\" ] = 8 delete ( elements , \"O\" ) // only do something with a element if it's in the map if number , ok := elements [ \"O\" ]; ok { fmt . Println ( number ) // won't be printed } if number , ok := elements [ \"H\" ]; ok { fmt . Println ( number ) // 1 } } Python elements = {} elements [ \"H\" ] = 1 print ( elements [ \"H\" ]) # 1 # remove by key elements [ \"O\" ] = 8 elements . pop ( \"O\" ) # do something depending on the being there if \"O\" in elements : print ( elements [ \"O\" ]) if \"H\" in elements : print ( elements [ \"H\" ]) Booleans Go x := 1 if x != 0 { fmt . Println ( \"Yes\" ) } var y [] string if len ( y ) != 0 { fmt . Println ( \"this won't be printed\" ) } Python x = 1 if x : print \"Yes\" y = [] if y : print \"this won't be printed\" Go package main import \"fmt\" func main () { fmt . Println ( true && false ) // false fmt . Println ( true || false ) // true fmt . Println (! true ) // false x := 1 if x != 0 { fmt . Println ( \"Yes\" ) } var y [] string if len ( y ) != 0 { fmt . Println ( \"this won't be printed\" ) } } Python print ( True and False ) # False print ( True or False ) # True print ( not True ) # False Forloop package main import \"fmt\" func main () { i := 1 for i <= 10 { fmt . Println ( i ) i += 1 } // same thing more but more convenient for i := 1 ; i <= 10 ; i ++ { fmt . Println ( i ) } } Python i = 1 while i <= 10 : print ( i ) i += 1 # ...or... for i in range ( 1 , 11 ): print ( i ) Range Go package main import \"fmt\" func main () { names := [] string { \"Peter\" , \"Anders\" , \"Bengt\" , } /* This will print 1. Peter 2. Anders 3. Bengt */ for i , name := range names { fmt . Printf ( \"%d. %s\\n\" , i + 1 , name ) } } Python names = [ \"Peter\" , \"Anders\" , \"Bengt\" ] for i , name in enumerate ( names ): print ( \" {} . {} \" . format ( i + 1 , name )) Switch Go package main import ( \"fmt\" \"strconv\" ) func str2int ( s string ) int { i , err := strconv . Atoi ( s ) if err != nil { panic ( \"Not a number\" ) } return i } func main () { var number_string string fmt . Scanln ( & number_string ) number := str2int ( number_string ) switch number { case 8 : fmt . Println ( \"Oxygen\" ) case 1 : fmt . Println ( \"Hydrogen\" ) case 2 : fmt . Println ( \"Helium\" ) case 11 : fmt . Println ( \"Sodium\" ) default : fmt . Printf ( \"I have no idea what %d is\\n\" , number ) } // Alternative solution fmt . Scanln ( & number_string ) db := map [ int ] string { 1 : \"Hydrogen\" , 2 : \"Helium\" , 8 : \"Oxygen\" , 11 : \"Sodium\" , } number = str2int ( number_string ) if name , exists := db [ number ]; exists { fmt . Println ( name ) } else { fmt . Printf ( \"I have no idea what %d is\\n\" , number ) } } Python def input_ (): return int ( input ()) number = input_ () if number == 8 : print ( \"Oxygen\" ) elif number == 1 : print ( \"Hydrogen\" ) elif number == 2 : print ( \"Helium\" ) elif number == 11 : print ( \"Sodium\" ) else : print ( \"I have no idea what %d is\" % number ) # Alternative solution number = input_ () db = { 1 : \"Hydrogen\" , 2 : \"Helium\" , 8 : \"Oxygen\" , 11 : \"Sodium\" } print ( db . get ( number , \"I have no idea what %d is\" % number )) Variadic Functions package main import \"fmt\" func average ( numbers ... float64 ) float64 { total := 0.0 for _ , number := range numbers { total += number } return total / float64 ( len ( numbers )) } func main () { fmt . Println ( average ( 1 , 2 , 3 , 4 )) // 2.5 } Python def average ( * numbers ): return sum ( numbers ) / len ( numbers ) print ( average ( 1 , 2 , 3 , 4 )) # 10/4 = 2.5 Time Elapsed Go package main import \"fmt\" import \"time\" func main () { t0 := time . Now () elapsed := time . Since ( t0 ) fmt . Printf ( \"Took %s\" , elapsed ) } Python import time t0 = time . time () time . sleep ( 3.5 ) # for example t1 = time . time () print ( \"Took {:.2f} seconds\" . format ( t1 - t0 )) Closure Functions Go package main import \"fmt\" func main () { number := 0 /* It has to be a local variable like this. You can't do `func increment(amount int) {` */ increment := func ( amount int ) { number += amount } increment ( 1 ) increment ( 2 ) fmt . Println ( number ) // 3 } Python def run (): def increment ( amount ): return number + amount number = 0 number = increment ( 1 ) number = increment ( 2 ) print ( number ) # 3 run () Defer Go package main import ( \"os\" ) func main () { f , _ := os . Open ( \"defer.py\" ) defer f . Close () // you can now read from this // `f` thing and it'll be closed later } Python f = open ( \"defer.py\" ) try : f . read () finally : f . close () Panic Recover Go package main import \"fmt\" func main () { // Running this will print out: // error was: Shit! defer func () { fmt . Println ( \"error was:\" , recover ()) }() panic ( \"Shit!\" ) } Python try : raise Exception ( \"Shit\" ) except Exception as e : print ( \"error was:\" , e ) Mutables Go package main import ( \"fmt\" \"strings\" ) func upone_list ( thing [] string , index int ) { thing [ index ] = strings . ToUpper ( thing [ index ]) } func upone_map ( thing map [ string ] string , index string ) { thing [ index ] = strings . ToUpper ( thing [ index ]) } func main () { // mutable list := [] string { \"a\" , \"b\" , \"c\" } upone_list ( list , 1 ) fmt . Println ( list ) // [a B c] // mutable dict := map [ string ] string { \"a\" : \"anders\" , \"b\" : \"bengt\" , } upone_map ( dict , \"b\" ) fmt . Println ( dict ) // map[a:anders b:BENGT] } Python def upone ( mutable , index ): mutable [ index ] = mutable [ index ] . upper () list_ = [ \"a\" , \"b\" , \"c\" ] upone ( list_ , 1 ) print ( list_ ) # ['a', 'B', 'c'] dict_ = { \"a\" : \"anders\" , \"b\" : \"bengt\" } upone ( dict_ , \"b\" ) print ( dict_ ) # {'a': 'anders', 'b': 'BENGT'} Structs Go package main import ( \"fmt\" \"math\" ) type Point struct { x float64 y float64 } func distance ( point1 Point , point2 Point ) float64 { return math . Sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) } // Since structs get automatically copied, // it's better to pass it as pointer. func distance_better ( point1 * Point , point2 * Point ) float64 { return math . Sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) } func main () { p1 := Point { 1 , 3 } p2 := Point { 2 , 4 } fmt . Println ( distance ( p1 , p2 )) // 3.7416573867739413 fmt . Println ( distance_better ( & p1 , & p2 )) // 3.7416573867739413 } Python from math import sqrt class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y def distance ( point1 , point2 ): return sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) p1 = Point ( 1 , 3 ) p2 = Point ( 2 , 4 ) print ( distance ( p1 , p2 )) # 3.74165738677 Methods Go package main import ( \"fmt\" \"math\" ) type Point struct { x float64 y float64 } func ( this Point ) distance ( other Point ) float64 { return math . Sqrt ( this . x * other . x + this . y * other . y ) } // Dince structs get automatically copied, // it's better to pass it as pointer. func ( this * Point ) distance_better ( other * Point ) float64 { return math . Sqrt ( this . x * other . x + this . y * other . y ) } func main () { p1 := Point { 1 , 3 } p2 := Point { 2 , 4 } fmt . Println ( p1 . distance ( p2 )) // 3.7416573867739413 fmt . Println ( p1 . distance_better ( & p2 )) // 3.7416573867739413 } Python from math import sqrt class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y def distance ( self , other ): return sqrt ( self . x * other . x + self . y * other . y ) p1 = Point ( 1 , 3 ) p2 = Point ( 2 , 4 ) print ( p1 . distance ( p2 )) # 3.74165738677 print ( p2 . distance ( p1 )) # 3.74165738677 Goroutines Go package main import ( \"fmt\" \"io/ioutil\" \"net/http\" \"sync\" ) func f ( url string ) { response , err := http . Get ( url ) if err != nil { panic ( err ) } defer response . Body . Close () body , err := ioutil . ReadAll ( response . Body ) if err != nil { panic ( err ) } fmt . Println ( len ( body )) } // See the example in https://golang.org/pkg/sync/#WaitGroup func main () { var wg sync . WaitGroup urls := [] string { \"https://www.peterbe.com\" , \"https://python.org\" , \"https://golang.org\" , } for _ , url := range urls { wg . Add ( 1 ) go func ( url string ) { defer wg . Done () f ( url ) }( url ) } // Wait for the goroutines to finish wg . Wait () } Python import urllib2 import multiprocessing def f ( url ): req = urllib2 . urlopen ( url ) try : print ( len ( req . read ())) finally : req . close () urls = ( \"https://www.peterbe.com\" , \"https://python.org\" , \"https://golang.org\" ) if __name__ == \"__main__\" : p = multiprocessing . Pool ( 3 ) p . map ( f , urls ) Args Go package main import ( \"fmt\" \"os\" \"strings\" ) func transform ( args [] string ) { for _ , arg := range args { fmt . Println ( strings . ToUpper ( arg )) } } func main () { args := os . Args [ 1 :] transform ( args ) } Python import sys def transform ( * args ): for arg in args : print ( arg . upper ()) if __name__ == \"__main__\" : transform ( * sys . argv [ 1 :]) Import Alias Go import ( pb \"github.com/golang/groupcache/groupcachepb\" ) // or import ( _ \"image/png\" // You can also import packages that you won't actually use ) // or package main import ( \"fmt\" s \"strings\" ) func main () { fmt . Println ( s . ToUpper ( \"world\" )) } Python import string as s print ( s . upper ( \"world\" )) Sprintf Go package main import \"fmt\" func main () { max := 10 panic ( fmt . Sprintf ( \"The max. number is %d\" , max )) } Python max = 10 raise Exception ( f \"The max. number is { max } \" ) Uniqify Go package main import \"fmt\" func uniqify ( items [] string ) [] string { uniq := make ([] string , 0 ) seen := make ( map [ string ] bool ) // For the highest memory efficiency, do: // seen := make(map[string]struct{}) // see: https://stackoverflow.com/questions/37320287/maptstruct-and-maptbool-in-golang for _ , i := range items { if _ , exists := seen [ i ]; ! exists { uniq = append ( uniq , i ) seen [ i ] = true } } return uniq } func main () { items := [] string { \"B\" , \"B\" , \"E\" , \"Q\" , \"Q\" , \"Q\" } items = uniqify ( items ) fmt . Println ( items ) // prints [B E Q] } Python def uniqify ( seq ): seen = {} unique = [] for item in seq : if item not in seen : seen [ item ] = 1 unique . append ( item ) return unique items = [ \"B\" , \"B\" , \"E\" , \"Q\" , \"Q\" , \"Q\" ] print ( uniqify ( items )) # prints ['B', 'E', 'Q'] Dotdict Go package main import \"fmt\" func main () { names := [] string { \"peter\" , \"anders\" , \"bengt\" , \"bengtsson\" } initials := make ( map [ string ] int ) for _ , name := range names { initial := string ( name [ 0 ]) initials [ initial ] ++ } fmt . Println ( initials ) // outputs // map[p:1 a:1 b:2] } Python initials = {} for name in ( \"peter\" , \"anders\" , \"bengt\" , \"bengtsson\" ): initial = name [ 0 ] # if initial not in initials: # initials[initial] = 0 initials . setdefault ( initial , 0 ) initials [ initial ] += 1 print ( initials ) # outputs # {'a': 1, 'p': 1, 'b': 2}","title":"Go vs Python comparison"},{"location":"blog/2019/2019-01-23-go-vs-python/#go-vs-python-comparison","text":"| python | golang | vs | comparison | It\u2019s not my writings and it\u2019s just a copy of Go vs. Python by Peter Bengtsson (see References below) References Hello World Print Comments Multiline Strings Lists Maps Booleans Forloop Range Switch Variadic Functions Time Elapsed Closure Functions Defer Panic Recover Mutables Structs Methods Goroutines Args Import Alias Sprintf Uniqify Dotdict","title":"Go vs Python comparison"},{"location":"blog/2019/2019-01-23-go-vs-python/#references","text":"http://govspy.peterbe.com/","title":"References"},{"location":"blog/2019/2019-01-23-go-vs-python/#hello-world","text":"Go package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } Python print ( \"Hello world\" )","title":"Hello World"},{"location":"blog/2019/2019-01-23-go-vs-python/#print","text":"Go package main import \"fmt\" func main () { fmt . Println ( \"Some string\" ) fmt . Print ( \"Some string\" ) fmt . Printf ( \"Name: %s, Age: %d\\n\" , \"Peter\" , 35 ) } Python print ( \"Some string\" ) print ( \"Some string\" , end = \"\" ) # no newline character printed print ( \"Name: {} , Age: {} \" . format ( \"Peter\" , 35 ))","title":"Print"},{"location":"blog/2019/2019-01-23-go-vs-python/#comments","text":"Go package main // This is a general comment /* This is also a comment but on multiple lines. */ /* This is the multi-line comment for the function main(). To get access to this from the command line, run: godoc comments.go */ func main () { } Python \"\"\"This is a doc string for the whole module\"\"\" # This is a inline comment class Class ( object ): \"\"\"This is the doc string for the class\"\"\" print ( __doc__ ) print ( Class . __doc__ )","title":"Comments"},{"location":"blog/2019/2019-01-23-go-vs-python/#multiline-strings","text":"Go package main import \"fmt\" func main () { fmt . Println ( `This is a multi-line string. ` ) fmt . Println ( \"O'word \" + \"Another \\\"word\\\" \" + \"Last word.\" ) } Python print ( \"\"\"This is a multi-line string. \"\"\" ) print ( \"O'word \" 'Another \"word\" ' \"Last word.\" )","title":"Multiline Strings"},{"location":"blog/2019/2019-01-23-go-vs-python/#lists","text":"Go package main import \"fmt\" func main () { // initialized array var numbers [ 5 ] int // becomes [0, 0, 0, 0, 0] // change one of them numbers [ 2 ] = 100 // create a new slice from an array some_numbers := numbers [ 1 : 3 ] fmt . Println ( some_numbers ) // [0, 100] // length of it fmt . Println ( len ( numbers )) // initialize a slice var scores [] float64 scores = append ( scores , 1.1 ) // recreate to append scores [ 0 ] = 2.2 // change your mind fmt . Println ( scores ) // prints [2.2] // when you don't know for sure how much you're going // to put in it, one way is to var things [ 100 ] string things [ 0 ] = \"Peter\" things [ 1 ] = \"Anders\" fmt . Println ( len ( things )) // 100 } Python # initialize list numbers = [ 0 ] * 5 # change one of them numbers [ 2 ] = 100 some_numbers = numbers [ 1 : 3 ] print ( some_numbers ) # [0, 100] # length of it print ( len ( numbers )) # 5 # initialize another scores = [] scores . append ( 1.1 ) scores [ 0 ] = 2.2 print ( scores ) # [2.2]","title":"Lists"},{"location":"blog/2019/2019-01-23-go-vs-python/#maps","text":"Go //You can make a map of maps with: elements : make ( map [ string ] map [ string ] int ) elements [ \"H\" ] = map [ string ] int { \"protons\" : 1 , \"neutrons\" : 0 , } //But note, this is what you have struct for. package main import \"fmt\" func main () { elements := make ( map [ string ] int ) elements [ \"H\" ] = 1 fmt . Println ( elements [ \"H\" ]) // remove by key elements [ \"O\" ] = 8 delete ( elements , \"O\" ) // only do something with a element if it's in the map if number , ok := elements [ \"O\" ]; ok { fmt . Println ( number ) // won't be printed } if number , ok := elements [ \"H\" ]; ok { fmt . Println ( number ) // 1 } } Python elements = {} elements [ \"H\" ] = 1 print ( elements [ \"H\" ]) # 1 # remove by key elements [ \"O\" ] = 8 elements . pop ( \"O\" ) # do something depending on the being there if \"O\" in elements : print ( elements [ \"O\" ]) if \"H\" in elements : print ( elements [ \"H\" ])","title":"Maps"},{"location":"blog/2019/2019-01-23-go-vs-python/#booleans","text":"Go x := 1 if x != 0 { fmt . Println ( \"Yes\" ) } var y [] string if len ( y ) != 0 { fmt . Println ( \"this won't be printed\" ) } Python x = 1 if x : print \"Yes\" y = [] if y : print \"this won't be printed\" Go package main import \"fmt\" func main () { fmt . Println ( true && false ) // false fmt . Println ( true || false ) // true fmt . Println (! true ) // false x := 1 if x != 0 { fmt . Println ( \"Yes\" ) } var y [] string if len ( y ) != 0 { fmt . Println ( \"this won't be printed\" ) } } Python print ( True and False ) # False print ( True or False ) # True print ( not True ) # False","title":"Booleans"},{"location":"blog/2019/2019-01-23-go-vs-python/#forloop","text":"package main import \"fmt\" func main () { i := 1 for i <= 10 { fmt . Println ( i ) i += 1 } // same thing more but more convenient for i := 1 ; i <= 10 ; i ++ { fmt . Println ( i ) } } Python i = 1 while i <= 10 : print ( i ) i += 1 # ...or... for i in range ( 1 , 11 ): print ( i )","title":"Forloop"},{"location":"blog/2019/2019-01-23-go-vs-python/#range","text":"Go package main import \"fmt\" func main () { names := [] string { \"Peter\" , \"Anders\" , \"Bengt\" , } /* This will print 1. Peter 2. Anders 3. Bengt */ for i , name := range names { fmt . Printf ( \"%d. %s\\n\" , i + 1 , name ) } } Python names = [ \"Peter\" , \"Anders\" , \"Bengt\" ] for i , name in enumerate ( names ): print ( \" {} . {} \" . format ( i + 1 , name ))","title":"Range"},{"location":"blog/2019/2019-01-23-go-vs-python/#switch","text":"Go package main import ( \"fmt\" \"strconv\" ) func str2int ( s string ) int { i , err := strconv . Atoi ( s ) if err != nil { panic ( \"Not a number\" ) } return i } func main () { var number_string string fmt . Scanln ( & number_string ) number := str2int ( number_string ) switch number { case 8 : fmt . Println ( \"Oxygen\" ) case 1 : fmt . Println ( \"Hydrogen\" ) case 2 : fmt . Println ( \"Helium\" ) case 11 : fmt . Println ( \"Sodium\" ) default : fmt . Printf ( \"I have no idea what %d is\\n\" , number ) } // Alternative solution fmt . Scanln ( & number_string ) db := map [ int ] string { 1 : \"Hydrogen\" , 2 : \"Helium\" , 8 : \"Oxygen\" , 11 : \"Sodium\" , } number = str2int ( number_string ) if name , exists := db [ number ]; exists { fmt . Println ( name ) } else { fmt . Printf ( \"I have no idea what %d is\\n\" , number ) } } Python def input_ (): return int ( input ()) number = input_ () if number == 8 : print ( \"Oxygen\" ) elif number == 1 : print ( \"Hydrogen\" ) elif number == 2 : print ( \"Helium\" ) elif number == 11 : print ( \"Sodium\" ) else : print ( \"I have no idea what %d is\" % number ) # Alternative solution number = input_ () db = { 1 : \"Hydrogen\" , 2 : \"Helium\" , 8 : \"Oxygen\" , 11 : \"Sodium\" } print ( db . get ( number , \"I have no idea what %d is\" % number ))","title":"Switch"},{"location":"blog/2019/2019-01-23-go-vs-python/#variadic-functions","text":"package main import \"fmt\" func average ( numbers ... float64 ) float64 { total := 0.0 for _ , number := range numbers { total += number } return total / float64 ( len ( numbers )) } func main () { fmt . Println ( average ( 1 , 2 , 3 , 4 )) // 2.5 } Python def average ( * numbers ): return sum ( numbers ) / len ( numbers ) print ( average ( 1 , 2 , 3 , 4 )) # 10/4 = 2.5","title":"Variadic Functions"},{"location":"blog/2019/2019-01-23-go-vs-python/#time-elapsed","text":"Go package main import \"fmt\" import \"time\" func main () { t0 := time . Now () elapsed := time . Since ( t0 ) fmt . Printf ( \"Took %s\" , elapsed ) } Python import time t0 = time . time () time . sleep ( 3.5 ) # for example t1 = time . time () print ( \"Took {:.2f} seconds\" . format ( t1 - t0 ))","title":"Time Elapsed"},{"location":"blog/2019/2019-01-23-go-vs-python/#closure-functions","text":"Go package main import \"fmt\" func main () { number := 0 /* It has to be a local variable like this. You can't do `func increment(amount int) {` */ increment := func ( amount int ) { number += amount } increment ( 1 ) increment ( 2 ) fmt . Println ( number ) // 3 } Python def run (): def increment ( amount ): return number + amount number = 0 number = increment ( 1 ) number = increment ( 2 ) print ( number ) # 3 run ()","title":"Closure Functions"},{"location":"blog/2019/2019-01-23-go-vs-python/#defer","text":"Go package main import ( \"os\" ) func main () { f , _ := os . Open ( \"defer.py\" ) defer f . Close () // you can now read from this // `f` thing and it'll be closed later } Python f = open ( \"defer.py\" ) try : f . read () finally : f . close ()","title":"Defer"},{"location":"blog/2019/2019-01-23-go-vs-python/#panic-recover","text":"Go package main import \"fmt\" func main () { // Running this will print out: // error was: Shit! defer func () { fmt . Println ( \"error was:\" , recover ()) }() panic ( \"Shit!\" ) } Python try : raise Exception ( \"Shit\" ) except Exception as e : print ( \"error was:\" , e )","title":"Panic Recover"},{"location":"blog/2019/2019-01-23-go-vs-python/#mutables","text":"Go package main import ( \"fmt\" \"strings\" ) func upone_list ( thing [] string , index int ) { thing [ index ] = strings . ToUpper ( thing [ index ]) } func upone_map ( thing map [ string ] string , index string ) { thing [ index ] = strings . ToUpper ( thing [ index ]) } func main () { // mutable list := [] string { \"a\" , \"b\" , \"c\" } upone_list ( list , 1 ) fmt . Println ( list ) // [a B c] // mutable dict := map [ string ] string { \"a\" : \"anders\" , \"b\" : \"bengt\" , } upone_map ( dict , \"b\" ) fmt . Println ( dict ) // map[a:anders b:BENGT] } Python def upone ( mutable , index ): mutable [ index ] = mutable [ index ] . upper () list_ = [ \"a\" , \"b\" , \"c\" ] upone ( list_ , 1 ) print ( list_ ) # ['a', 'B', 'c'] dict_ = { \"a\" : \"anders\" , \"b\" : \"bengt\" } upone ( dict_ , \"b\" ) print ( dict_ ) # {'a': 'anders', 'b': 'BENGT'}","title":"Mutables"},{"location":"blog/2019/2019-01-23-go-vs-python/#structs","text":"Go package main import ( \"fmt\" \"math\" ) type Point struct { x float64 y float64 } func distance ( point1 Point , point2 Point ) float64 { return math . Sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) } // Since structs get automatically copied, // it's better to pass it as pointer. func distance_better ( point1 * Point , point2 * Point ) float64 { return math . Sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) } func main () { p1 := Point { 1 , 3 } p2 := Point { 2 , 4 } fmt . Println ( distance ( p1 , p2 )) // 3.7416573867739413 fmt . Println ( distance_better ( & p1 , & p2 )) // 3.7416573867739413 } Python from math import sqrt class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y def distance ( point1 , point2 ): return sqrt ( point1 . x * point2 . x + point1 . y * point2 . y ) p1 = Point ( 1 , 3 ) p2 = Point ( 2 , 4 ) print ( distance ( p1 , p2 )) # 3.74165738677","title":"Structs"},{"location":"blog/2019/2019-01-23-go-vs-python/#methods","text":"Go package main import ( \"fmt\" \"math\" ) type Point struct { x float64 y float64 } func ( this Point ) distance ( other Point ) float64 { return math . Sqrt ( this . x * other . x + this . y * other . y ) } // Dince structs get automatically copied, // it's better to pass it as pointer. func ( this * Point ) distance_better ( other * Point ) float64 { return math . Sqrt ( this . x * other . x + this . y * other . y ) } func main () { p1 := Point { 1 , 3 } p2 := Point { 2 , 4 } fmt . Println ( p1 . distance ( p2 )) // 3.7416573867739413 fmt . Println ( p1 . distance_better ( & p2 )) // 3.7416573867739413 } Python from math import sqrt class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y def distance ( self , other ): return sqrt ( self . x * other . x + self . y * other . y ) p1 = Point ( 1 , 3 ) p2 = Point ( 2 , 4 ) print ( p1 . distance ( p2 )) # 3.74165738677 print ( p2 . distance ( p1 )) # 3.74165738677","title":"Methods"},{"location":"blog/2019/2019-01-23-go-vs-python/#goroutines","text":"Go package main import ( \"fmt\" \"io/ioutil\" \"net/http\" \"sync\" ) func f ( url string ) { response , err := http . Get ( url ) if err != nil { panic ( err ) } defer response . Body . Close () body , err := ioutil . ReadAll ( response . Body ) if err != nil { panic ( err ) } fmt . Println ( len ( body )) } // See the example in https://golang.org/pkg/sync/#WaitGroup func main () { var wg sync . WaitGroup urls := [] string { \"https://www.peterbe.com\" , \"https://python.org\" , \"https://golang.org\" , } for _ , url := range urls { wg . Add ( 1 ) go func ( url string ) { defer wg . Done () f ( url ) }( url ) } // Wait for the goroutines to finish wg . Wait () } Python import urllib2 import multiprocessing def f ( url ): req = urllib2 . urlopen ( url ) try : print ( len ( req . read ())) finally : req . close () urls = ( \"https://www.peterbe.com\" , \"https://python.org\" , \"https://golang.org\" ) if __name__ == \"__main__\" : p = multiprocessing . Pool ( 3 ) p . map ( f , urls )","title":"Goroutines"},{"location":"blog/2019/2019-01-23-go-vs-python/#args","text":"Go package main import ( \"fmt\" \"os\" \"strings\" ) func transform ( args [] string ) { for _ , arg := range args { fmt . Println ( strings . ToUpper ( arg )) } } func main () { args := os . Args [ 1 :] transform ( args ) } Python import sys def transform ( * args ): for arg in args : print ( arg . upper ()) if __name__ == \"__main__\" : transform ( * sys . argv [ 1 :])","title":"Args"},{"location":"blog/2019/2019-01-23-go-vs-python/#import-alias","text":"Go import ( pb \"github.com/golang/groupcache/groupcachepb\" ) // or import ( _ \"image/png\" // You can also import packages that you won't actually use ) // or package main import ( \"fmt\" s \"strings\" ) func main () { fmt . Println ( s . ToUpper ( \"world\" )) } Python import string as s print ( s . upper ( \"world\" ))","title":"Import Alias"},{"location":"blog/2019/2019-01-23-go-vs-python/#sprintf","text":"Go package main import \"fmt\" func main () { max := 10 panic ( fmt . Sprintf ( \"The max. number is %d\" , max )) } Python max = 10 raise Exception ( f \"The max. number is { max } \" )","title":"Sprintf"},{"location":"blog/2019/2019-01-23-go-vs-python/#uniqify","text":"Go package main import \"fmt\" func uniqify ( items [] string ) [] string { uniq := make ([] string , 0 ) seen := make ( map [ string ] bool ) // For the highest memory efficiency, do: // seen := make(map[string]struct{}) // see: https://stackoverflow.com/questions/37320287/maptstruct-and-maptbool-in-golang for _ , i := range items { if _ , exists := seen [ i ]; ! exists { uniq = append ( uniq , i ) seen [ i ] = true } } return uniq } func main () { items := [] string { \"B\" , \"B\" , \"E\" , \"Q\" , \"Q\" , \"Q\" } items = uniqify ( items ) fmt . Println ( items ) // prints [B E Q] } Python def uniqify ( seq ): seen = {} unique = [] for item in seq : if item not in seen : seen [ item ] = 1 unique . append ( item ) return unique items = [ \"B\" , \"B\" , \"E\" , \"Q\" , \"Q\" , \"Q\" ] print ( uniqify ( items )) # prints ['B', 'E', 'Q']","title":"Uniqify"},{"location":"blog/2019/2019-01-23-go-vs-python/#dotdict","text":"Go package main import \"fmt\" func main () { names := [] string { \"peter\" , \"anders\" , \"bengt\" , \"bengtsson\" } initials := make ( map [ string ] int ) for _ , name := range names { initial := string ( name [ 0 ]) initials [ initial ] ++ } fmt . Println ( initials ) // outputs // map[p:1 a:1 b:2] } Python initials = {} for name in ( \"peter\" , \"anders\" , \"bengt\" , \"bengtsson\" ): initial = name [ 0 ] # if initial not in initials: # initials[initial] = 0 initials . setdefault ( initial , 0 ) initials [ initial ] += 1 print ( initials ) # outputs # {'a': 1, 'p': 1, 'b': 2}","title":"Dotdict"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/","text":"Machine Learning and Data Science MOOCs | data science | machine learning | mooc | There are a lot of difference Courses and Specialization on Coursera. But bookmarking (absent) and search is not very convenient. That\u2019s why I\u2019ve decided to track all interested resources here and a reference for easier navigation. I hope these courses will transform into knowledge \ud83e\udd13 References Organizations which offer MOOC Level: Beginner Level: Intermediate Level: Advanced References https://www.mooc-list.com Organizations which offer MOOC Stanford University Imperial College London Johns Hopkins University University of Michigan Moscow Institute of Physics and Technology Duke University University of Washington University of Minnesota deeplearning.ai University of Illinois at Urbana-Champaign National Research University Higher School of Economics Mail.Ru IBM Level: Beginner Machine Learning by Stanford University (Andrew Ng) Mathematics for Machine Learning Specialization by Imperial College London Mathematics for Machine Learning: Linear Algebra Mathematics for Machine Learning: Multivariate Calculus Mathematics for Machine Learning: PCA Data Science Specialization by Johns Hopkins University The Data Scientist\u2019s Toolbox R Programming Getting and Cleaning Data Exploratory Data Analysis Reproducible Research Statistical Inference Regression Models Practical Machine Learning Developing Data Products Data Science Capstone Data Science Math Skills by Duke University IBM Data Science Professional Certificate by IBM What is Data Science? Open Source tools for Data Science Data Science Methodology Python for Data Science Databases and SQL for Data Science Data Analysis with Python Data Visualization with Python Machine Learning with Python Applied Data Science Capstone Level: Intermediate Applied Data Science with Python Specialization by University of Michigan Introduction to Data Science in Python Applied Plotting, Charting & Data Representation in Python Applied Machine Learning in Python Applied Text Mining in Python Applied Social Network Analysis in Python \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 Specialization by Moscow Institute of Physics and Technology \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0438 Python \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445: \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 Introduction to Machine Learning by Duke University Statistics with R Specialization by Duke University Introduction to Probability and Data Inferential Statistics Linear Regression and Modeling Bayesian Statistics Statistics with R Capstone Machine Learning Specialization by University of Washington Machine Learning Foundations: A Case Study Approach Machine Learning: Regression Machine Learning: Classification Machine Learning: Clustering & Retrieval Recommender Systems Specialization by University of Minnesota Introduction to Recommender Systems: Non-Personalized and Content-Based Nearest Neighbor Collaborative Filtering Recommender Systems: Evaluation and Metrics Matrix Factorization and Advanced Techniques Recommender Systems Capstone Deep Learning Specialization by deeplearning.ai Neural Networks and Deep Learning Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization Structuring Machine Learning Projects Convolutional Neural Networks Sequence Models Data Mining Specialization by University of Illinois at Urbana-Champaign Data Visualization Text Retrieval and Search Engines Text Mining and Analytics Pattern Discovery in Data Mining Cluster Analysis in Data Mining Data Mining Project \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a by Moscow Institute of Physics and Technology / Mail.Ru Group / \u0424\u0420\u041e\u041e \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u0431\u0443\u043b\u0435\u0432 \u043f\u043e\u0438\u0441\u043a \u041f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u041d\u0435\u0447\u0451\u0442\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u0420\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0421\u0441\u044b\u043b\u043e\u0447\u043d\u043e\u0435 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 Level: Advanced Advanced Machine Learning Specialization by National Research University Higher School of Economics Introduction to Deep Learning How to Win a Data Science Competition: Learn from Top Kagglers Bayesian Methods for Machine Learning Practical Reinforcement Learning Deep Learning in Computer Vision Natural Language Processing Addressing Large Hadron Collider Challenges by Machine Learning","title":"Machine Learning and Data Science MOOCs"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#machine-learning-and-data-science-moocs","text":"| data science | machine learning | mooc | There are a lot of difference Courses and Specialization on Coursera. But bookmarking (absent) and search is not very convenient. That\u2019s why I\u2019ve decided to track all interested resources here and a reference for easier navigation. I hope these courses will transform into knowledge \ud83e\udd13 References Organizations which offer MOOC Level: Beginner Level: Intermediate Level: Advanced","title":"Machine Learning and Data Science MOOCs"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#references","text":"https://www.mooc-list.com","title":"References"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#organizations-which-offer-mooc","text":"Stanford University Imperial College London Johns Hopkins University University of Michigan Moscow Institute of Physics and Technology Duke University University of Washington University of Minnesota deeplearning.ai University of Illinois at Urbana-Champaign National Research University Higher School of Economics Mail.Ru IBM","title":"Organizations which offer MOOC"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#level-beginner","text":"Machine Learning by Stanford University (Andrew Ng) Mathematics for Machine Learning Specialization by Imperial College London Mathematics for Machine Learning: Linear Algebra Mathematics for Machine Learning: Multivariate Calculus Mathematics for Machine Learning: PCA Data Science Specialization by Johns Hopkins University The Data Scientist\u2019s Toolbox R Programming Getting and Cleaning Data Exploratory Data Analysis Reproducible Research Statistical Inference Regression Models Practical Machine Learning Developing Data Products Data Science Capstone Data Science Math Skills by Duke University IBM Data Science Professional Certificate by IBM What is Data Science? Open Source tools for Data Science Data Science Methodology Python for Data Science Databases and SQL for Data Science Data Analysis with Python Data Visualization with Python Machine Learning with Python Applied Data Science Capstone","title":"Level: Beginner"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#level-intermediate","text":"Applied Data Science with Python Specialization by University of Michigan Introduction to Data Science in Python Applied Plotting, Charting & Data Representation in Python Applied Machine Learning in Python Applied Text Mining in Python Applied Social Network Analysis in Python \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 Specialization by Moscow Institute of Physics and Technology \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0438 Python \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445: \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 Introduction to Machine Learning by Duke University Statistics with R Specialization by Duke University Introduction to Probability and Data Inferential Statistics Linear Regression and Modeling Bayesian Statistics Statistics with R Capstone Machine Learning Specialization by University of Washington Machine Learning Foundations: A Case Study Approach Machine Learning: Regression Machine Learning: Classification Machine Learning: Clustering & Retrieval Recommender Systems Specialization by University of Minnesota Introduction to Recommender Systems: Non-Personalized and Content-Based Nearest Neighbor Collaborative Filtering Recommender Systems: Evaluation and Metrics Matrix Factorization and Advanced Techniques Recommender Systems Capstone Deep Learning Specialization by deeplearning.ai Neural Networks and Deep Learning Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization Structuring Machine Learning Projects Convolutional Neural Networks Sequence Models Data Mining Specialization by University of Illinois at Urbana-Champaign Data Visualization Text Retrieval and Search Engines Text Mining and Analytics Pattern Discovery in Data Mining Cluster Analysis in Data Mining Data Mining Project \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a by Moscow Institute of Physics and Technology / Mail.Ru Group / \u0424\u0420\u041e\u041e \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u0431\u0443\u043b\u0435\u0432 \u043f\u043e\u0438\u0441\u043a \u041f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u041d\u0435\u0447\u0451\u0442\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u0420\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0421\u0441\u044b\u043b\u043e\u0447\u043d\u043e\u0435 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430","title":"Level: Intermediate"},{"location":"blog/2019/2019-01-26-ml-ds-mooc/#level-advanced","text":"Advanced Machine Learning Specialization by National Research University Higher School of Economics Introduction to Deep Learning How to Win a Data Science Competition: Learn from Top Kagglers Bayesian Methods for Machine Learning Practical Reinforcement Learning Deep Learning in Computer Vision Natural Language Processing Addressing Large Hadron Collider Challenges by Machine Learning","title":"Level: Advanced"},{"location":"blog/2019/2019-02-07-py-r-youtube-channels/","text":"Data Science YouTube Channels (Python, R) | python | R | data science | video | There are tons of different YouTube channels dedicated to Python and R. Some of them are really cool. I\u2019ve collected a small list of them. R Programming Tutorials Playlist Official playlist for thenewboston R Programming Tutorials! This playlist contains 18 short videos related to R basics. There might be other interesting videos. Introduction to Data Science with R by David Langer. This playlist contains long and detail Data Science tutorial. I highly recommnend watching them. Data Science Dojo . I can say that 80% of this channel is R. But there are some tutorials related to Python. Also, I have found some interviews with Data Scientists. Data Science Tutorials . Both Python and R tutorials. Big amount of videos. LearnR . This channel is dedicated to R. MarinStatsLectures-R Programming & Statistics . Statistics, Data Science and R Programming. Data School - Data Science Python and R video series. Introduction to Statistical Learning - Playlists - it\u2019s a set of playlists accompanying the book An Introduction to Statistical Learning with Applications in R by Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani Video screencast tutorials on introductory topics in R and RStudio by Hefin Rhys R Programming 101 - it\u2019s a new channel and the author is planning to publish R tutorials.","title":"Data Science YouTube Channels (Python, R)"},{"location":"blog/2019/2019-02-07-py-r-youtube-channels/#data-science-youtube-channels-python-r","text":"| python | R | data science | video | There are tons of different YouTube channels dedicated to Python and R. Some of them are really cool. I\u2019ve collected a small list of them. R Programming Tutorials Playlist Official playlist for thenewboston R Programming Tutorials! This playlist contains 18 short videos related to R basics. There might be other interesting videos. Introduction to Data Science with R by David Langer. This playlist contains long and detail Data Science tutorial. I highly recommnend watching them. Data Science Dojo . I can say that 80% of this channel is R. But there are some tutorials related to Python. Also, I have found some interviews with Data Scientists. Data Science Tutorials . Both Python and R tutorials. Big amount of videos. LearnR . This channel is dedicated to R. MarinStatsLectures-R Programming & Statistics . Statistics, Data Science and R Programming. Data School - Data Science Python and R video series. Introduction to Statistical Learning - Playlists - it\u2019s a set of playlists accompanying the book An Introduction to Statistical Learning with Applications in R by Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani Video screencast tutorials on introductory topics in R and RStudio by Hefin Rhys R Programming 101 - it\u2019s a new channel and the author is planning to publish R tutorials.","title":"Data Science YouTube Channels (Python, R)"},{"location":"blog/2019/2019-02-10-ds-learning-res/","text":"Data Science Learning Resources | data science | video | python | R | I\u2019ve been following Python Programmer YouTube channel by Giles McMullen . Mr. Giles has collected amazing collection of resources in the next video Can you LEARN DATA SCIENCE for FREE? YES! I\u2019ll show you HOW! . I do not like YouTube as a reference and copied all content here. Probably, I will comment/modify it based on my preferenes, but for now it is as is. Python Basics Math Linear Algebra Calculus Practice Python Projects More Python Data Exploration Probability and Statistics Statistical Learning Python and Data Science Data Structure and Algorithms in Python Tensorflow SQL R Supplementary Material Slack Groups Python Basics Quantitative Economics with Python Introduction to Python, The Scientific Libraries, Advanced Python Programming and the Pandas Section of Data and Empirics Github - Book - \u201c Python Data Science Handbook \u201d by Jake VanderPlas Chapters 1 - 4 Pandas tutorial Materials and IPython notebooks for \u201c Python for Data Analysis \u201d by Wes McKinney , published by O\u2019Reilly Media Here are some excellent pandas code examples Math Linear Algebra YouTube - 3Blue1Brown - Essence of linear algebra Khan Academy - Linear algebra An Intuitive Guide to Linear Algebra I must admit that Better Explained is awesome site on its own. There are many math tutorials. PDF - Introduction to Methods of Applied Mathematics This book has many exercises and solutions PDF - Mathematical Tools for Physics PDF - Linear Algebra Reference Calculus YouTube - 3Blue1Brown - Essence of Calculus Khan Academy Calculus 1 Calculus 2 Multivariable calculus Practice Python Projects https://github.com/tuvtran/project-based-learning#python More Python \u201cLearning Scientific Programming with Python\u201d by Christian Hil Work through as many of the examples as you fancy in Chapters 6 and 7 (NumPy and Matplotlib) Data Exploration Python Visualization for Exploration of Data Kaggle - Titanic: Machine Learning from Disaster Probability and Statistics Khan Academy - Statistics and probability PDF - Think Stats: Probability and Statistics for Programmers Book - \u201cApplied Statistics\u201d by Mohammed A. Shayib Probability Cheatsheet v2.0 Statistical Learning An Introduction to Statistical Learning with Applications in R Caltech - Learning From Data (Introductory Machine Learning Course) Elements of Statistical Learning (Extremely useful) Python and Data Science Github - Book - \u201c Python Data Science Handbook \u201d by Jake VanderPlas Chapter 5 - Machine Learning scikit-learn Tutorials Book - \u201cHands-On Machine Learning with Scikit-Learn and TensorFlow. Concepts, Tools, and Techniques to Build Intelligent Systems\u201d by Aur\u00e9lien G\u00e9ron Harvard - CS109 Data Science Data Structure and Algorithms in Python Problem Solving with Algorithms and Data Structures using Python Udacity - Data Structures & Algorithms in Python Tensorflow Machine Learning Crash Course with TensorFlow APIs SQL Intro to SQL: Querying and managing data R Tutorials for learning R Supplementary Material The Python Tutorial Reddit - Python Reddit - Data Science StackExchange - Data Science Jupyer How to Think Like a Computer Scientist Slack Groups KaggleNoobs datadiscourse","title":"Data Science Learning Resources"},{"location":"blog/2019/2019-02-10-ds-learning-res/#data-science-learning-resources","text":"| data science | video | python | R | I\u2019ve been following Python Programmer YouTube channel by Giles McMullen . Mr. Giles has collected amazing collection of resources in the next video Can you LEARN DATA SCIENCE for FREE? YES! I\u2019ll show you HOW! . I do not like YouTube as a reference and copied all content here. Probably, I will comment/modify it based on my preferenes, but for now it is as is. Python Basics Math Linear Algebra Calculus Practice Python Projects More Python Data Exploration Probability and Statistics Statistical Learning Python and Data Science Data Structure and Algorithms in Python Tensorflow SQL R Supplementary Material Slack Groups","title":"Data Science Learning Resources"},{"location":"blog/2019/2019-02-10-ds-learning-res/#python-basics","text":"Quantitative Economics with Python Introduction to Python, The Scientific Libraries, Advanced Python Programming and the Pandas Section of Data and Empirics Github - Book - \u201c Python Data Science Handbook \u201d by Jake VanderPlas Chapters 1 - 4 Pandas tutorial Materials and IPython notebooks for \u201c Python for Data Analysis \u201d by Wes McKinney , published by O\u2019Reilly Media Here are some excellent pandas code examples","title":"Python Basics"},{"location":"blog/2019/2019-02-10-ds-learning-res/#math","text":"","title":"Math"},{"location":"blog/2019/2019-02-10-ds-learning-res/#linear-algebra","text":"YouTube - 3Blue1Brown - Essence of linear algebra Khan Academy - Linear algebra An Intuitive Guide to Linear Algebra I must admit that Better Explained is awesome site on its own. There are many math tutorials. PDF - Introduction to Methods of Applied Mathematics This book has many exercises and solutions PDF - Mathematical Tools for Physics PDF - Linear Algebra Reference","title":"Linear Algebra"},{"location":"blog/2019/2019-02-10-ds-learning-res/#calculus","text":"YouTube - 3Blue1Brown - Essence of Calculus Khan Academy Calculus 1 Calculus 2 Multivariable calculus","title":"Calculus"},{"location":"blog/2019/2019-02-10-ds-learning-res/#practice-python-projects","text":"https://github.com/tuvtran/project-based-learning#python","title":"Practice Python Projects"},{"location":"blog/2019/2019-02-10-ds-learning-res/#more-python","text":"\u201cLearning Scientific Programming with Python\u201d by Christian Hil Work through as many of the examples as you fancy in Chapters 6 and 7 (NumPy and Matplotlib)","title":"More Python"},{"location":"blog/2019/2019-02-10-ds-learning-res/#data-exploration","text":"Python Visualization for Exploration of Data Kaggle - Titanic: Machine Learning from Disaster","title":"Data Exploration"},{"location":"blog/2019/2019-02-10-ds-learning-res/#probability-and-statistics","text":"Khan Academy - Statistics and probability PDF - Think Stats: Probability and Statistics for Programmers Book - \u201cApplied Statistics\u201d by Mohammed A. Shayib Probability Cheatsheet v2.0","title":"Probability and Statistics"},{"location":"blog/2019/2019-02-10-ds-learning-res/#statistical-learning","text":"An Introduction to Statistical Learning with Applications in R Caltech - Learning From Data (Introductory Machine Learning Course) Elements of Statistical Learning (Extremely useful)","title":"Statistical Learning"},{"location":"blog/2019/2019-02-10-ds-learning-res/#python-and-data-science","text":"Github - Book - \u201c Python Data Science Handbook \u201d by Jake VanderPlas Chapter 5 - Machine Learning scikit-learn Tutorials Book - \u201cHands-On Machine Learning with Scikit-Learn and TensorFlow. Concepts, Tools, and Techniques to Build Intelligent Systems\u201d by Aur\u00e9lien G\u00e9ron Harvard - CS109 Data Science","title":"Python and Data Science"},{"location":"blog/2019/2019-02-10-ds-learning-res/#data-structure-and-algorithms-in-python","text":"Problem Solving with Algorithms and Data Structures using Python Udacity - Data Structures & Algorithms in Python","title":"Data Structure and Algorithms in Python"},{"location":"blog/2019/2019-02-10-ds-learning-res/#tensorflow","text":"Machine Learning Crash Course with TensorFlow APIs","title":"Tensorflow"},{"location":"blog/2019/2019-02-10-ds-learning-res/#sql","text":"Intro to SQL: Querying and managing data","title":"SQL"},{"location":"blog/2019/2019-02-10-ds-learning-res/#r","text":"Tutorials for learning R","title":"R"},{"location":"blog/2019/2019-02-10-ds-learning-res/#supplementary-material","text":"The Python Tutorial Reddit - Python Reddit - Data Science StackExchange - Data Science Jupyer How to Think Like a Computer Scientist","title":"Supplementary Material"},{"location":"blog/2019/2019-02-10-ds-learning-res/#slack-groups","text":"KaggleNoobs datadiscourse","title":"Slack Groups"},{"location":"blog/2019/2019-02-27-lambda-days/","text":"Lambda Days - Krakow, 2019 - Report | scala | conference | functional programming | haskell | I attended Lambda Days conference (21-22 February, 2019) in Krakow, Poland. So, what\u2019s so special in this conference? The main idea is to attend one conference to check different functional programming communities: Scala, Erlang, Haskell, Elixir, F#, Lisp, Clojure, OCaml, Elm, PureScript, etc. And it\u2019s amazing how different FP languages solve the same/similar problems. Here is the list of talks I\u2019ve attended (some talks have been excluded from this list because I don\u2019t like it at all): Day 1 (February 21, 2019) 1 - Keynote: F# Code I Love by Don Syme ( F# Language Designer ) 2 - FP Design Patterns in Micro-Service Inter-Process Communication by Via\u010deslav Pozdniakov 3 - Empowering the Quantum revolution with Q# by John Azariah From Haskell to C#, A story of culture shocks and happy reunions by \u00d8ystein Kolsrud 4 - Elm, Fable, and the Practical Implications of Programming Language Philosophy by Michael Newton 5 - One year of using F# in production at SBTech by Anton Moldovan 6 - (Dys)functional DDD by Jarek Ratajski Day 2 (February 22, 2019) 7 - Scala superpowers: effortless domain driven design by Bartosz Mikulski 8 - Effective Data Engineering using higher kinded types by Animesh Kumar 9 - Fast & Functional by Micha\u0142 P\u0142achta 10 - Behind collaborative text editing by Bartosz Sypytkowski 11 - Teaching Functional Programming by Michael Sperber Day 1 (February 21, 2019) 1 - Keynote: F# Code I Love by Don Syme ( F# Language Designer ) Video @dsyme The most interesting for me was this paper: The Early History of F# (HOPL IV - first draft) . This paper has 36 pages, you will like it if you like IT history . 2 - FP Design Patterns in Micro-Service Inter-Process Communication by Via\u010deslav Pozdniakov Design of correct and yet simple inter-process communication in micro-service architecture is a tough thing to do: communication protocols might be sync or async, some APIs use request/response model while others use streaming and so on. In this talk we will discuss which micro-service IPC design problems we (Wix.com) faced and how we solve them using FP building blocks: monads, semigroups, etc. Obviously, introduction of FP design patterns at our scale (>500 developers) is a huge effort, so we will also discuss an execution process of such changes. Video Slides @poznia The talk was interesting in terms of introducing FP concepts in big legacy Scala code base. 3 - Empowering the Quantum revolution with Q# by John Azariah This talk was a little bit strange. The only outcome - I am motivated to study this subject. From Haskell to C#, A story of culture shocks and happy reunions by \u00d8ystein Kolsrud Six years ago, I joined Qlik as a software engineer in a group developing products in C#. My previous experience came primarily from Haskell and C++, but with C# I quickly realized that I could leverage my knowledge of functional programming also in this object oriented language! And (to the great confusion of my colleagues) I did! This talk focuses on my experience of using C# with a touch of Haskell and the reactions I got from my colleagues when doing so. Video @oystein_kolsrud Shared experience of FP \u201cinjection\u201d in OOP C# world, social aspects etc. There were some interesting ideas and case studies. 4 - Elm, Fable, and the Practical Implications of Programming Language Philosophy by Michael Newton On the surface, Elm and Fable (the F# to JavaScript compiler) look very similar - functional, ML based languages with a focus on pragmatism over complexity. In fact, the most common way of writing JavaScript in Fable is via the \u201cElmish\u201d library which implements the, well, Elm architecture. But the philosophy behind the two languages is very different. Take a tour of the two languages with someone who\u2019s used both professionally, and we\u2019ll investigate how the different ideas behind them have lead to different features, different ecosystems, and even differences in how teams work with them. Site @mavnn Actually, it was \u201ccomparison\u201d of two languages design, their origins and motivation. 5 - One year of using F# in production at SBTech by Anton Moldovan In 2017 we started using F# for building high-load push-based queryable API and complex stateful stream processing for our core platform. At that time almost nobody has had F# experience but we decided to give a try. And on this talk, I will share our experience with adopting F# on real projects at SBTech. Agenda: Why did we choose F# over C#? A high-level overview of the architecture of our push-based queryable API. Adopting F# for C#/OOP developers (inconveniences, C# interoperability, code style, DDD, TDD) medium @AntyaDev https://nbomber.com/ - Load test any system The speaker shared his experience with F# and what motivated him to implement NBbomber . 6 - (Dys)functional DDD by Jarek Ratajski Domain Driven Design patterns are commonly used in business applications. There is, however, a visible mismatch when we look at them from a functional programming perspective. Some concepts seem to fit perfectly: like event sourcing. Some, however, seem to be built around mutability or side effects like aggregates or commands in CQRS. Some are just hard to grasp like domain events, integration events. In this talk we will try to revisit the core concepts of DDD from a functional perspective and build a simple system using a little bit more functional approach. @jarek000000 Github: talk-related sources Day 2 (February 22, 2019) 7 - Scala superpowers: effortless domain driven design by Bartosz Mikulski Scala superpowers: effortless domain driven design Don\u2019t come to this talk. You will not hear anything cool. No new libraries, languages. No clever code. No buzzwords even. I want to show you how you can use the features you already know to write less code and make the code so easy to understand that people who join your project can be productive on their first day. You didn\u2019t come to a tech conference to see that, did you? Your new, shiny toys are not here. Go somewhere else ;) I want to show the audience how to use built-in Scala features (like case classes, value classes, structural types) to create the basis of a domain model. I want to show them the benefits of taking advantage of the type system and not using primitive types everywhere. In particular, I want to show how types can encode validation rules and make the code shorter and easier to test. Slides @mikulskibartosz medium 8 - Effective Data Engineering using higher kinded types by Animesh Kumar In order to create a canonical framework for real-time and batch data processing in the order of 10s of TBs per day, a general purpose framework to instantiate and extend data pipelines is presented here that can be used to ingest, process, and derive ML based inferences from the base data. The speaker has shared his experience of building abstractions on top of Flink and Spark. He said that Flink it\u2019s for real-time process and Spark is for batch data processing. 9 - Fast & Functional by Micha\u0142 P\u0142achta In this talk we are going to create a functional and blazingly fast microservice. We will use functional programming abstractions to quickly mix & match different HTTP libraries, state implementations and concurrency configurations. Each step will be followed by a performance analysis using different tools from JVM toolbox. This talk is for you if you want to see how cats IO monad, async-profiler, flame graphs and wrk are used together to create nanoseconds-fast Scala service for YouTube videos statistics. Slides Github - influencer-stats - related repo Site Talks @miciek This talk was very interesting: Scala, abstraction, functional programming, performance, etc. 10 - Behind collaborative text editing by Bartosz Sypytkowski We\u2019ll discuss the topic, that is well known from products such as Google Docs or Etherpad, and explain how Conflict-free Replicated Data Types will allow us to expand it into new territories. We\u2019ll take a peer-to-peer approach, with no central servers, constant internet connectivity or human assisted conflict resolution. During this talk we\u2019ll focus on Replicated Growable Array data structure and how it allows us to build peer-to-peer collaborative text editors. What\u2019s more, we\u2019ll also cover how to properly optimize it to address issues of most common implementations. Slides References : Operational transformation discussion on HN Video: JSON CRDT by Martin Kleppman Article: Rope data structure PDF: Blockwise Replicated Growable Arrays Github: Examples of CRDT implementations This talk was interesting. The speaker highlighted the different approaches for handling \u201ccollaborative text editing\u201d. The slides are pretty detailed and can be used as an entry point into the subject. 11 - Teaching Functional Programming by Michael Sperber You want to teach functional programming to someone else: To enable fellow developers, as a professional trainer, or to teach students. However, as natural as functional programming feels to us, it is hard to teach well. In particular, professional functional languages are powerful tools for development, but are not necessarily the best tools beginners. This talk is about teaching functional programming well using the Program by Design / DeinProgramm approach. It will give an overview of effective teaching approaches, techniques and tools, and highlight pitfalls. Site @sperbsen The speaker has tried to present his FP teaching methods. The speaker has been using Racket language (based on the Scheme dialect of Lisp) while teaching the students. He claims that this tool is quite effective. A lot of people have questions about the proposed methods. I suggest watching the video. Another interesting point: he said the Python is not very good for teaching beginners programming (we had offline discussion about this).","title":"Lambda Days - Krakow, 2019 - Report"},{"location":"blog/2019/2019-02-27-lambda-days/#lambda-days-krakow-2019-report","text":"| scala | conference | functional programming | haskell | I attended Lambda Days conference (21-22 February, 2019) in Krakow, Poland. So, what\u2019s so special in this conference? The main idea is to attend one conference to check different functional programming communities: Scala, Erlang, Haskell, Elixir, F#, Lisp, Clojure, OCaml, Elm, PureScript, etc. And it\u2019s amazing how different FP languages solve the same/similar problems. Here is the list of talks I\u2019ve attended (some talks have been excluded from this list because I don\u2019t like it at all): Day 1 (February 21, 2019) 1 - Keynote: F# Code I Love by Don Syme ( F# Language Designer ) 2 - FP Design Patterns in Micro-Service Inter-Process Communication by Via\u010deslav Pozdniakov 3 - Empowering the Quantum revolution with Q# by John Azariah From Haskell to C#, A story of culture shocks and happy reunions by \u00d8ystein Kolsrud 4 - Elm, Fable, and the Practical Implications of Programming Language Philosophy by Michael Newton 5 - One year of using F# in production at SBTech by Anton Moldovan 6 - (Dys)functional DDD by Jarek Ratajski Day 2 (February 22, 2019) 7 - Scala superpowers: effortless domain driven design by Bartosz Mikulski 8 - Effective Data Engineering using higher kinded types by Animesh Kumar 9 - Fast & Functional by Micha\u0142 P\u0142achta 10 - Behind collaborative text editing by Bartosz Sypytkowski 11 - Teaching Functional Programming by Michael Sperber","title":"Lambda Days - Krakow, 2019 - Report"},{"location":"blog/2019/2019-02-27-lambda-days/#day-1-february-21-2019","text":"","title":"Day 1 (February 21, 2019)"},{"location":"blog/2019/2019-02-27-lambda-days/#1-keynote-f-code-i-love-by-don-syme-f-language-designer","text":"Video @dsyme The most interesting for me was this paper: The Early History of F# (HOPL IV - first draft) . This paper has 36 pages, you will like it if you like IT history .","title":"1 - Keynote: F# Code I Love by Don Syme (F# Language Designer)"},{"location":"blog/2019/2019-02-27-lambda-days/#2-fp-design-patterns-in-micro-service-inter-process-communication-by-viaceslav-pozdniakov","text":"Design of correct and yet simple inter-process communication in micro-service architecture is a tough thing to do: communication protocols might be sync or async, some APIs use request/response model while others use streaming and so on. In this talk we will discuss which micro-service IPC design problems we (Wix.com) faced and how we solve them using FP building blocks: monads, semigroups, etc. Obviously, introduction of FP design patterns at our scale (>500 developers) is a huge effort, so we will also discuss an execution process of such changes. Video Slides @poznia The talk was interesting in terms of introducing FP concepts in big legacy Scala code base.","title":"2 - FP Design Patterns in Micro-Service Inter-Process Communication by Via\u010deslav Pozdniakov"},{"location":"blog/2019/2019-02-27-lambda-days/#3-empowering-the-quantum-revolution-with-q-by-john-azariah","text":"This talk was a little bit strange. The only outcome - I am motivated to study this subject.","title":"3 - Empowering the Quantum revolution with Q# by John Azariah"},{"location":"blog/2019/2019-02-27-lambda-days/#from-haskell-to-c-a-story-of-culture-shocks-and-happy-reunions-by-ystein-kolsrud","text":"Six years ago, I joined Qlik as a software engineer in a group developing products in C#. My previous experience came primarily from Haskell and C++, but with C# I quickly realized that I could leverage my knowledge of functional programming also in this object oriented language! And (to the great confusion of my colleagues) I did! This talk focuses on my experience of using C# with a touch of Haskell and the reactions I got from my colleagues when doing so. Video @oystein_kolsrud Shared experience of FP \u201cinjection\u201d in OOP C# world, social aspects etc. There were some interesting ideas and case studies.","title":"From Haskell to C#, A story of culture shocks and happy reunions by \u00d8ystein Kolsrud"},{"location":"blog/2019/2019-02-27-lambda-days/#4-elm-fable-and-the-practical-implications-of-programming-language-philosophy-by-michael-newton","text":"On the surface, Elm and Fable (the F# to JavaScript compiler) look very similar - functional, ML based languages with a focus on pragmatism over complexity. In fact, the most common way of writing JavaScript in Fable is via the \u201cElmish\u201d library which implements the, well, Elm architecture. But the philosophy behind the two languages is very different. Take a tour of the two languages with someone who\u2019s used both professionally, and we\u2019ll investigate how the different ideas behind them have lead to different features, different ecosystems, and even differences in how teams work with them. Site @mavnn Actually, it was \u201ccomparison\u201d of two languages design, their origins and motivation.","title":"4 - Elm, Fable, and the Practical Implications of Programming Language Philosophy by Michael Newton"},{"location":"blog/2019/2019-02-27-lambda-days/#5-one-year-of-using-f-in-production-at-sbtech-by-anton-moldovan","text":"In 2017 we started using F# for building high-load push-based queryable API and complex stateful stream processing for our core platform. At that time almost nobody has had F# experience but we decided to give a try. And on this talk, I will share our experience with adopting F# on real projects at SBTech. Agenda: Why did we choose F# over C#? A high-level overview of the architecture of our push-based queryable API. Adopting F# for C#/OOP developers (inconveniences, C# interoperability, code style, DDD, TDD) medium @AntyaDev https://nbomber.com/ - Load test any system The speaker shared his experience with F# and what motivated him to implement NBbomber .","title":"5 - One year of using F# in production at SBTech by Anton Moldovan"},{"location":"blog/2019/2019-02-27-lambda-days/#6-dysfunctional-ddd-by-jarek-ratajski","text":"Domain Driven Design patterns are commonly used in business applications. There is, however, a visible mismatch when we look at them from a functional programming perspective. Some concepts seem to fit perfectly: like event sourcing. Some, however, seem to be built around mutability or side effects like aggregates or commands in CQRS. Some are just hard to grasp like domain events, integration events. In this talk we will try to revisit the core concepts of DDD from a functional perspective and build a simple system using a little bit more functional approach. @jarek000000 Github: talk-related sources","title":"6 - (Dys)functional DDD by Jarek Ratajski"},{"location":"blog/2019/2019-02-27-lambda-days/#day-2-february-22-2019","text":"","title":"Day 2 (February 22, 2019)"},{"location":"blog/2019/2019-02-27-lambda-days/#7-scala-superpowers-effortless-domain-driven-design-by-bartosz-mikulski","text":"Scala superpowers: effortless domain driven design Don\u2019t come to this talk. You will not hear anything cool. No new libraries, languages. No clever code. No buzzwords even. I want to show you how you can use the features you already know to write less code and make the code so easy to understand that people who join your project can be productive on their first day. You didn\u2019t come to a tech conference to see that, did you? Your new, shiny toys are not here. Go somewhere else ;) I want to show the audience how to use built-in Scala features (like case classes, value classes, structural types) to create the basis of a domain model. I want to show them the benefits of taking advantage of the type system and not using primitive types everywhere. In particular, I want to show how types can encode validation rules and make the code shorter and easier to test. Slides @mikulskibartosz medium","title":"7 - Scala superpowers: effortless domain driven design by Bartosz Mikulski"},{"location":"blog/2019/2019-02-27-lambda-days/#8-effective-data-engineering-using-higher-kinded-types-by-animesh-kumar","text":"In order to create a canonical framework for real-time and batch data processing in the order of 10s of TBs per day, a general purpose framework to instantiate and extend data pipelines is presented here that can be used to ingest, process, and derive ML based inferences from the base data. The speaker has shared his experience of building abstractions on top of Flink and Spark. He said that Flink it\u2019s for real-time process and Spark is for batch data processing.","title":"8 - Effective Data Engineering using higher kinded types by Animesh Kumar"},{"location":"blog/2019/2019-02-27-lambda-days/#9-fast-functional-by-micha-pachta","text":"In this talk we are going to create a functional and blazingly fast microservice. We will use functional programming abstractions to quickly mix & match different HTTP libraries, state implementations and concurrency configurations. Each step will be followed by a performance analysis using different tools from JVM toolbox. This talk is for you if you want to see how cats IO monad, async-profiler, flame graphs and wrk are used together to create nanoseconds-fast Scala service for YouTube videos statistics. Slides Github - influencer-stats - related repo Site Talks @miciek This talk was very interesting: Scala, abstraction, functional programming, performance, etc.","title":"9 - Fast &amp; Functional by Micha\u0142 P\u0142achta"},{"location":"blog/2019/2019-02-27-lambda-days/#10-behind-collaborative-text-editing-by-bartosz-sypytkowski","text":"We\u2019ll discuss the topic, that is well known from products such as Google Docs or Etherpad, and explain how Conflict-free Replicated Data Types will allow us to expand it into new territories. We\u2019ll take a peer-to-peer approach, with no central servers, constant internet connectivity or human assisted conflict resolution. During this talk we\u2019ll focus on Replicated Growable Array data structure and how it allows us to build peer-to-peer collaborative text editors. What\u2019s more, we\u2019ll also cover how to properly optimize it to address issues of most common implementations. Slides References : Operational transformation discussion on HN Video: JSON CRDT by Martin Kleppman Article: Rope data structure PDF: Blockwise Replicated Growable Arrays Github: Examples of CRDT implementations This talk was interesting. The speaker highlighted the different approaches for handling \u201ccollaborative text editing\u201d. The slides are pretty detailed and can be used as an entry point into the subject.","title":"10 - Behind collaborative text editing by Bartosz Sypytkowski"},{"location":"blog/2019/2019-02-27-lambda-days/#11-teaching-functional-programming-by-michael-sperber","text":"You want to teach functional programming to someone else: To enable fellow developers, as a professional trainer, or to teach students. However, as natural as functional programming feels to us, it is hard to teach well. In particular, professional functional languages are powerful tools for development, but are not necessarily the best tools beginners. This talk is about teaching functional programming well using the Program by Design / DeinProgramm approach. It will give an overview of effective teaching approaches, techniques and tools, and highlight pitfalls. Site @sperbsen The speaker has tried to present his FP teaching methods. The speaker has been using Racket language (based on the Scheme dialect of Lisp) while teaching the students. He claims that this tool is quite effective. A lot of people have questions about the proposed methods. I suggest watching the video. Another interesting point: he said the Python is not very good for teaching beginners programming (we had offline discussion about this).","title":"11 - Teaching Functional Programming by Michael Sperber"},{"location":"blog/2019/2019-03-02-scala-conferences/","text":"Scala and FP Conferences | scala | conference | functional programming | Scala Days - Videos . Location : Lausanne / New York / Berlin / Amsterdam / San Francisco / Copenhagen / Chicago Lambda World - Videos . Location : Seattle, USA / C\u00e1diz, Spain Typelevel Summit - Videos . Too many locations to name it here. Curry On - Videos . Location : Prague / Rome / Barcelona / Amsterdam / London. ECOOP - Scala - Videos . Location : UK, US, Canada, Netherlands. UK Scala World - Videos . Location : The Lake District skillsmatter - Location : London. Scala eXchange Haskell eXchangee UK - Meetups Scala in the City - Meetup - Videos . Location : London. Scala Central - Meetup - Videos . Location : London. USA Scala By the Bay - Videos . Location : San Francisco. Northeast Scala Symposium - Videos . Location : Philadelphia / Boston / New York City. LambdaConf - Videos . Location : Boulder, Colorado. Poland ScalaWave - Videos . Location : Gda\u0144sk. Scalar - Videos . Location : Warsaw. Lambda Days - Video . Location : Krakow. Scala.sphere.it - Videos . Location : Krakow. Portugal Scala Swarm - Videos . Location : Porto. LX Scala - Videos . Location : Lisbon. Europe Scala UA - Videos . Location : Kyiv, Ukraine. f(by) - Videos . Location : Minsk, Belarus. BeeScala - Videos . Location : Ljubljana, Slovenia ScalaIO FR - Videos . Location : Lyon, France. flatMap - Videos . Location : Oslo, Norway. Scala Italy - Videos . Location : Florence / Rome / Venice / Bologna, Italy. Other Scalape\u00f1o - Videos . Location : Tel-Aviv / Ramat Gan / Beersheba, Israel. Scala Up North - Videos . Location : Toronto, Canada. ScalaSyd - Meetup - Videos . Location : Sydney, Australia Functional Conf - Videos . Location : Bangalore, India. ScalaMatsuri - Videos . Location : Tokyo, Japan.","title":"Scala and FP Conferences"},{"location":"blog/2019/2019-03-02-scala-conferences/#scala-and-fp-conferences","text":"| scala | conference | functional programming | Scala Days - Videos . Location : Lausanne / New York / Berlin / Amsterdam / San Francisco / Copenhagen / Chicago Lambda World - Videos . Location : Seattle, USA / C\u00e1diz, Spain Typelevel Summit - Videos . Too many locations to name it here. Curry On - Videos . Location : Prague / Rome / Barcelona / Amsterdam / London. ECOOP - Scala - Videos . Location : UK, US, Canada, Netherlands.","title":"Scala and FP Conferences"},{"location":"blog/2019/2019-03-02-scala-conferences/#uk","text":"Scala World - Videos . Location : The Lake District skillsmatter - Location : London. Scala eXchange Haskell eXchangee","title":"UK"},{"location":"blog/2019/2019-03-02-scala-conferences/#uk-meetups","text":"Scala in the City - Meetup - Videos . Location : London. Scala Central - Meetup - Videos . Location : London.","title":"UK - Meetups"},{"location":"blog/2019/2019-03-02-scala-conferences/#usa","text":"Scala By the Bay - Videos . Location : San Francisco. Northeast Scala Symposium - Videos . Location : Philadelphia / Boston / New York City. LambdaConf - Videos . Location : Boulder, Colorado.","title":"USA"},{"location":"blog/2019/2019-03-02-scala-conferences/#poland","text":"ScalaWave - Videos . Location : Gda\u0144sk. Scalar - Videos . Location : Warsaw. Lambda Days - Video . Location : Krakow. Scala.sphere.it - Videos . Location : Krakow.","title":"Poland"},{"location":"blog/2019/2019-03-02-scala-conferences/#portugal","text":"Scala Swarm - Videos . Location : Porto. LX Scala - Videos . Location : Lisbon.","title":"Portugal"},{"location":"blog/2019/2019-03-02-scala-conferences/#europe","text":"Scala UA - Videos . Location : Kyiv, Ukraine. f(by) - Videos . Location : Minsk, Belarus. BeeScala - Videos . Location : Ljubljana, Slovenia ScalaIO FR - Videos . Location : Lyon, France. flatMap - Videos . Location : Oslo, Norway. Scala Italy - Videos . Location : Florence / Rome / Venice / Bologna, Italy.","title":"Europe"},{"location":"blog/2019/2019-03-02-scala-conferences/#other","text":"Scalape\u00f1o - Videos . Location : Tel-Aviv / Ramat Gan / Beersheba, Israel. Scala Up North - Videos . Location : Toronto, Canada. ScalaSyd - Meetup - Videos . Location : Sydney, Australia Functional Conf - Videos . Location : Bangalore, India. ScalaMatsuri - Videos . Location : Tokyo, Japan.","title":"Other"},{"location":"blog/2019/2019-04-10-java8-misuse/","text":"Common misuses of Java 8+ features | java | These notes are copy of xpinjection/java8-misuses repository. Domain Model 1 - Optional 1.1 - Internal Optional Usage 1.2 - Optional Constructor Parameters 1.3 - Optional for resulted (method returns) Collections 1.4 - Use flatMap for getting nested Optional values 1.5 - if statement with Optional is not always bad thing 1.6 - Optional \u201celvis\u201d 1.7 - Optional Over Engineering ( if not null might be simpler ) 1.8 - Value presence strict check (chained ifPresent ) 2 - Lambdas 2.1 - Avoid Complex Lambdas 2.2 - Avoid Long Lambdas 2.3 - Class Design (methods\u2019 naming) 2.4 - Lambdas are not always the best option (method reference works as well) 2.5 - Lazy calculations improve performance ( log if logger.isDebugEnabled() ) 2.6 - Emulate Multimap 2.7 - Sorting the list using existing predefined comparator 2.8 - Iterating the map ( forEach and map transform) 2.9 - Remove with predicate 2.10 - Avoid code-duplication with lambdas 2.11 - List of optionals 2.12 - Checked Exceptions & Lambda 3 - Stream API Incorrect usage 3.1 - Forgotten termin operation 3.2 - Infinite stream 3.3 - Use stream more than once Collectors 3.4 - Avoid forEach and apply mapping to target type 3.5 - Collectors chain 3.6 - Do not use external collection for grouping 3.7 - Calculate statistics in single run with collector 3.8 - Convert stream to array 3.9 - Use functional approach when \u201cmap-reduce\u201d Misuses 3.10 - Stream generation 3.11 - Use data structure features 3.12 - Do not mix imperative code with streams 3.13 - Match element in functional style 3.14 - Nested forEach is anti-pattern 3.15 - Prefer specialized streams 3.16 - Poor Domain Model causes complex Data Access code 3.17 - Do not use old-style code with new constructs 3.18 - Know when to use skip and limit 3.19 - Type of stream could be changed 3.20 - Use stream to build map is over-complication 4 - Time API 4.1 - Ignore Java 8 Time API References Domain Model All the cases are based on the next domain model: package com.xpinjection.java8.misused ; public class Annotations { public @interface Good {} public @interface Bad {} public @interface Ugly {} } public enum Permission { ADD , EDIT , SEARCH , DELETE } public class Role { private String name ; private Set < Permission > permissions = EnumSet . noneOf ( Permission . class ); public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public Set < Permission > getPermissions () { return permissions ; } public void setPermissions ( Set < Permission > permissions ) { this . permissions = permissions ; } @Override public boolean equals ( Object o ) { // ... the details are not important } @Override public int hashCode () { return name . hashCode (); } } public class User { private Long id ; private String name ; private int age ; private Set < Role > roles = new HashSet <> (); public User ( long id , String name , int age ) { this . id = id ; this . name = name ; this . age = age ; } public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } public Set < Role > getRoles () { return roles ; } public void setRoles ( Set < Role > roles ) { this . roles = roles ; } } public class UserDto { private Long id ; private String name ; public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } 1 - Optional Do not overuse Optional, never use it for parameters Do not check for value presence, operate on it instead Do not overuse Optional, don\u2019t be too clever Optional container should be short lived Wrap nullable values in Optional to operate on them Use chained methods Carefully choose what to wrap 1.1 - Internal Optional Usage package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Optional ; public class InternalOptionalUsage { @Ugly class UnclearOptionalDependencyWithCheckForNull { private Printer printer ; public void process ( User user ) { //some processing if ( printer != null ) { printer . print ( user ); } } public void setPrinter ( Printer printer ) { this . printer = printer ; } } @Good class ValidInternalOptionalDependency { private Optional < Printer > printer = Optional . empty (); public void process ( User user ) { //some processing printer . ifPresent ( p -> p . print ( user )); } public void setPrinter ( Printer printer ) { this . printer = Optional . ofNullable ( printer ); } } interface Printer { void print ( User user ); } } 1.2 - Optional Constructor Parameters package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.io.Serializable ; import java.util.Arrays ; import java.util.List ; import java.util.Optional ; public class OptionalConstructorParameters { @Ugly class OptionalLeaksOutsideClass { public List < Email > create () { Email noAttachment = new Email ( \"First!\" , \"No attachment\" , Optional . empty ()); Attachment attachment = new Attachment ( \"/mnt/files/image.png\" , 370 ); Email withAttachment = new Email ( \"Second!\" , \"With attachment\" , Optional . of ( attachment )); return Arrays . asList ( noAttachment , withAttachment ); } class Email implements Serializable { private final String subject ; private final String body ; private final Optional < Attachment > attachment ; Email ( String subject , String body , Optional < Attachment > attachment ) { this . subject = subject ; this . body = body ; this . attachment = attachment ; } String getSubject () { return subject ; } String getBody () { return body ; } Optional < Attachment > getAttachment () { return attachment ;} } } @Good class OverloadedConstructors { public List < Email > create () { Email noAttachment = new Email ( \"First!\" , \"No attachment\" ); Attachment attachment = new Attachment ( \"/mnt/files/image.png\" , 370 ); Email withAttachment = new Email ( \"Second!\" , \"With attachment\" , attachment ); return Arrays . asList ( noAttachment , withAttachment ); } class Email implements Serializable { private final String subject ; private final String body ; private final Attachment attachment ; Email ( String subject , String body , Attachment attachment ) { this . subject = subject ; this . body = body ; this . attachment = attachment ; } Email ( String subject , String body ) { this ( subject , body , null ); } String getSubject () { return subject ; } String getBody () { return body ; } boolean hasAttachment () { return attachment != null ; } Attachment getAttachment () { return attachment ; } } } class Attachment { private final String path ; private final int size ; Attachment ( String path , int size ) { this . path = path ; this . size = size ; } String getPath () { return path ; } int getSize () { return size ; } } } 1.3 - Optional for resulted (method returns) Collections package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Collections ; import java.util.List ; import java.util.Optional ; public class OptionalForCollections { private static final String ADMIN_ROLE = \"admin\" ; @Ugly class TooVerbose { public User findAnyAdmin () { Optional < List < User >> users = findUsersByRole ( ADMIN_ROLE ); if ( users . isPresent () && ! users . get (). isEmpty ()) { return users . get (). get ( 0 ); } throw new IllegalStateException ( \"No admins found\" ); } private Optional < List < User >> findUsersByRole ( String role ) { //real search in DB return Optional . empty (); } } @Good class NiceAndClean { public User findAnyAdmin () { return findUsersByRole ( ADMIN_ROLE ). stream () . findAny () . orElseThrow (() -> new IllegalStateException ( \"No admins found\" )); } private List < User > findUsersByRole ( String role ) { //real search in DB return Collections . emptyList (); } } } 1.4 - Use flatMap for getting nested Optional values package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Bad ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; import static java.util.Optional.empty ; import static java.util.Optional.ofNullable ; public class HundredAndOneApproach { @Ugly class SameOldImperativeStyle { public String getPersonCarInsuranceName ( Person person ) { String name = \"Unknown\" ; if ( ofNullable ( person ). isPresent ()) { if ( person . getCar (). isPresent ()) { if ( person . getCar (). get (). getInsurance (). isPresent ()) { name = person . getCar (). get (). getInsurance (). get (). getName (); } } } return name ; } } @Ugly class UsingIfPresentInSameImperativeWayWithDirtyHack { public String getPersonCarInsuranceName ( Person person ) { final StringBuilder builder = new StringBuilder (); ofNullable ( person ). ifPresent ( p -> p . getCar (). ifPresent ( c -> c . getInsurance (). ifPresent ( i -> builder . append ( i . getName ()) ) ) ); return builder . toString (); } } @Bad class UsingMapWithUncheckedGet { public String getPersonCarInsuranceName ( Person person ) { return ofNullable ( person ) . map ( Person :: getCar ) . map ( car -> car . get (). getInsurance ()) . map ( insurance -> insurance . get (). getName ()) . orElse ( \"Unknown\" ); } } @Ugly class UsingMapWithOrElseEmptyObjectToFixUncheckedGet { public String getPersonCarInsuranceName ( Person person ) { return ofNullable ( person ) . map ( Person :: getCar ) . map ( car -> car . orElseGet ( Car :: new ). getInsurance ()) . map ( insurance -> insurance . orElseGet ( Insurance :: new ). getName ()) . orElse ( \"Unknown\" ); } } @Good class UsingFlatMap { public String getCarInsuranceNameFromPersonUsingFlatMap ( Person person ) { return ofNullable ( person ) . flatMap ( Person :: getCar ) . flatMap ( Car :: getInsurance ) . map ( Insurance :: getName ) . orElse ( \"Unknown\" ); } } class Person { Optional < Car > getCar () { return empty (); //stub } } class Car { Optional < Insurance > getInsurance () { return empty (); //stub } } class Insurance { String getName () { return \"\" ; //stub } } } 1.5 - if statement with Optional is not always bad thing package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; import java.util.stream.Stream ; public class IfStatementIsNotAlwaysBadThing { @Ugly class CombineSomeOptionalsInCleverWay { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { return Stream . of ( first , second ) . filter ( Optional :: isPresent ) . map ( Optional :: get ) . reduce ( Integer :: sum ); } } @Ugly class PlayMapGameInEvenMoreCleverWay { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { return first . map ( b -> second . map ( a -> b + a ). orElse ( b )) . map ( Optional :: of ) . orElse ( second ); } } @Good class OldSchoolButTotallyClearCode { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { if ( ! first . isPresent () && ! second . isPresent ()) { return Optional . empty (); } return Optional . of ( first . orElse ( 0 ) + second . orElse ( 0 )); } } } 1.6 - Optional \u201celvis\u201d package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import static java.util.Optional.ofNullable ; public class OptionalElvis { @Ugly class BeforeJava8 { public String getUserName ( User user ) { return ( user != null && user . getName () != null ) ? user . getName () : \"default\" ; } } @Ugly class UsingOptionalIsPresent { public String getUserName ( User user ) { if ( ofNullable ( user ). isPresent ()) { if ( ofNullable ( user . getName ()). isPresent ()) { return user . getName (); } } return \"default\" ; } } @Good class UsingOrElse { String getUserName ( User user ) { return ofNullable ( user ) . map ( User :: getName ) . orElse ( \"default\" ); } } } 1.7 - Optional Over Engineering ( if not null might be simpler ) package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Role ; import java.util.Optional ; public class OptionalOverEngineering { @Ugly class NullProtectionOverEngineering { public Role copyRole ( Role role ) { Role copy = new Role (); Optional . ofNullable ( role . getName ()) . ifPresent ( copy :: setName ); copy . setPermissions ( role . getPermissions ()); return copy ; } } @Good class SimpleConditionalCopying { public Role copyRole ( Role role ) { Role copy = new Role (); if ( role . getName () != null ) { copy . setName ( role . getName ()); } copy . setPermissions ( role . getPermissions ()); return copy ; } } } 1.8 - Value presence strict check (chained ifPresent ) package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Optional ; public class StrictCheckOfValuePresence { @Ugly class ManualCheckForPresenceToThrowException { public String getUserName ( Long userId ) { Optional < User > user = findById ( userId ); if ( user . isPresent ()) { return user . get (). getName (); } throw new IllegalStateException ( \"User not found\" ); } public void deleteUser ( Long userId ) { Optional < User > user = findById ( userId ); if ( user . isPresent ()) { delete ( user . get ()); } } private void delete ( User user ) { //delete from DB } } @Good class OrElseThrowUsage { public String getUserName ( Long userId ) { return findById ( userId ) . orElseThrow (() -> new IllegalStateException ( \"User not found\" )) . getName (); } public void deleteUser ( Long userId ) { findById ( userId ). ifPresent ( this :: delete ); } private void delete ( User user ) { //delete from DB } } private Optional < User > findById ( Long userId ) { //search in DB return Optional . of ( new User ( 5L , \"Mikalai\" , 33 )); } } 2 - Lambdas Be concrete with functional interfaces Avoid long or complex lambda expressions! Prefer reusable method reference Use specific methods on collections Lazy calculation improve performance Check popular API changes for lambda support 2.1 - Avoid Complex Lambdas package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.Role ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Set ; import java.util.function.Predicate ; import static java.util.stream.Collectors.toSet ; public class AvoidComplexLambdas { private final Set < User > users = new HashSet <> (); @Ugly class UsingComplexLambdaInPlace { public Set < User > findEditors () { return users . stream () . filter ( u -> u . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( Permission . EDIT ))) . collect ( toSet ()); } } @Good class ComplexityExtractedToMethodReference { public Set < User > checkPermission ( Permission permission ) { return users . stream () //.filter(this::hasEditPermission) . filter ( hasPermission ( Permission . EDIT )) . collect ( toSet ()); } private Predicate < User > hasPermission ( Permission permission ) { return user -> user . getRoles (). stream () . map ( Role :: getPermissions ) . anyMatch ( permissions -> permissions . contains ( permission )); } private boolean hasEditPermission ( User user ) { return hasPermission ( Permission . EDIT ). test ( user ); } } } 2.2 - Avoid Long Lambdas package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import com.xpinjection.java8.misused.UserDto ; import java.util.List ; import java.util.function.Function ; import static java.util.stream.Collectors.toList ; public class AvoidLongLambdas { @Ugly class LongLambdaInPlace { public List < UserDto > convertToDto ( List < User > users ){ return users . stream () . map ( user -> { UserDto dto = new UserDto (); dto . setId ( user . getId ()); dto . setName ( user . getName ()); //it happens to be much more fields // and much more logic in terms of remapping these fields return dto ; }) . collect ( toList ()); } } @Good class MethodReferenceInsteadOfLambda { //particular toDto could be implemented as a separate class or as a lambda function private final Function < User , UserDto > toDto = this :: convertToDto ; public List < UserDto > convertToDto ( List < User > users ){ return users . stream () . map ( toDto ) . collect ( toList ()); } private UserDto convertToDto ( User user ){ UserDto dto = new UserDto (); dto . setId ( user . getId ()); dto . setName ( user . getName ()); return dto ; } } } 2.3 - Class Design (methods\u2019 naming) package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Bad ; import com.xpinjection.java8.misused.Annotations.Good ; import java.util.function.Function ; import java.util.function.UnaryOperator ; public class ClassDesign { @Bad static class AmbiguousOverloadedMethods { interface AmbiguousService < T > { < R > R process ( Function < T , R > fn ); T process ( UnaryOperator < T > fn ); } public void usage ( AmbiguousService < String > service ) { //which method you intended to call??? both are acceptable. service . process ( String :: toUpperCase ); } } @Good static class SeparateSpecializedMethods { interface ClearService < T > { < R > R convert ( Function < T , R > fn ); T process ( UnaryOperator < T > fn ); } public void usage ( ClearService < String > service ) { //now it's clear which method will be called. service . convert ( String :: toUpperCase ); } } } 2.4 - Lambdas are not always the best option (method reference works as well) package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; public class LambdasAreNotAlwaysTheBestOption { @Ugly class UnneededLambdasUsage { public void processAndPrint ( String name ) { Optional . ofNullable ( name ) //.filter(s -> !s.isEmpty()) . map ( s -> s . toUpperCase ()) . map ( s -> doProcess ( s )) . ifPresent ( s -> System . out . print ( s )); } private String doProcess ( String name ) { return \"MR. \" + name ; } } @Good class MethodReferenceUsage { public void processAndPrint ( String name ) { Optional . ofNullable ( name ) //.filter(StringUtils::isNotEmpty) // replace with appropriate library method ref . map ( String :: toUpperCase ) . map ( this :: doProcess ) . ifPresent ( System . out :: print ); } private String doProcess ( String name ) { return \"MR. \" + name ; } } } 2.5 - Lazy calculations improve performance ( log if logger.isDebugEnabled() ) package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Set ; import java.util.function.Supplier ; public class LazyCalculationsImprovePerformance { @Ugly static class LoggingWithAdditionalCheckToAvoidCalculations { private static final Log LOG = null ; // init logger with factory public void sendWelcomeEmailToUsers ( Set < User > users ) { // send email if ( LOG . isDebugEnabled ()) { LOG . debug ( \"Emails have been sent for users: \" + users ); } } interface Log { void debug ( String message ); boolean isDebugEnabled (); } } @Good static class PassLambdaToLazyCalculateValueForLogMessage { private static final Log LOG = null ; // init logger with factory public void sendWelcomeEmailToUsers ( Set < User > users ) { // send email LOG . debug (() -> \"Emails have been sent for users: \" + users ); } interface Log { void debug ( String message ); boolean isDebugEnabled (); default void debug ( Supplier < String > message ) { if ( isDebugEnabled ()) { debug ( message . get ()); } } } } } 2.6 - Emulate Multimap package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.* ; public class EmulateMultimap { private final Map < String , Set < User >> usersByRole = new HashMap <> (); @Ugly class ManuallyInsertSetOnFirstValueForTheKey { public void addUser ( User user ) { user . getRoles (). forEach ( r -> { Set < User > usersInRole = usersByRole . get ( r . getName ()); if ( usersInRole == null ) { usersInRole = new HashSet <> (); usersByRole . put ( r . getName (), usersInRole ); } usersInRole . add ( user ); }); } public Set < User > getUsersInRole ( String role ) { Set < User > users = usersByRole . get ( role ); return users == null ? Collections . emptySet () : users ; } } @Good class ComputeEmptySetIfKeyIsAbsent { public void addUser ( User user ) { user . getRoles (). forEach ( r -> usersByRole . computeIfAbsent ( r . getName (), k -> new HashSet <> ()) . add ( user )); } public Set < User > getUsersInRole ( String role ) { return usersByRole . getOrDefault ( role , Collections . emptySet ()); } } } 2.7 - Sorting the list using existing predefined comparator package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.User ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.List ; import static java.util.Comparator.comparing ; public class ListSorting { @Ugly class UsingCustomComparator { public void sortUsersById ( List < User > users ) { users . sort (( x , y ) -> Long . compare ( x . getId (), y . getId ())); } } @Good class UsingExistingPredefinedComparator { public void sortUsersById ( List < User > users ) { users . sort ( comparing ( User :: getId )); } } } 2.8 - Iterating the map ( forEach and map transform) package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.HashMap ; import java.util.Map ; import static java.util.stream.Collectors.toMap ; public class MapIterating { @Ugly class UsingOldGoodEntrySet { public Map < String , String > getUserNames ( Map < String , User > users ) { Map < String , String > userNames = new HashMap <> (); users . entrySet (). forEach ( user -> userNames . put ( user . getKey (), user . getValue (). getName ())); return userNames ; } } @Good class UsingMapForEach { public Map < String , String > getUserNames ( Map < String , User > users ) { Map < String , String > userNames = new HashMap <> (); users . forEach (( key , value ) -> userNames . put ( key , value . getName ())); return userNames ; } } @Good class UsingMapTransform { public Map < String , String > getUserNames ( Map < String , User > users ) { return users . entrySet (). stream () . collect ( toMap ( Map . Entry :: getKey , entry -> entry . getValue (). getName ())); } } } 2.9 - Remove with predicate package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Iterator ; import java.util.Set ; public class RemoveElementWithIterator { private final Set < User > users = new HashSet <> (); @Ugly class ManuallyRemoveElementWithIteratorRemove { public void removeUsersWithPermission ( Permission permission ) { Iterator < User > iterator = users . iterator (); while ( iterator . hasNext ()) { User user = iterator . next (); if ( user . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( permission ))) { iterator . remove (); } } } } @Good class RemoveWithPredicate { public void removeUsersWithPermission ( Permission permission ) { users . removeIf ( user -> user . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( permission ))); } } } 2.10 - Avoid code-duplication with lambdas // @Ugly private void logUpper ( String str ) { //super interesting code System . out . println ( str . toUpperCase ()); //even more interesting code } private void logLower ( String str ) { //super interesting code System . out . println ( str . toLowerCase ()); //even more interesting code } // @Good private void logUpper ( String string ) { doSuperCoolStuff ( string , s -> s . toUpperCase ()); } private void logLower ( String string ) { doSuperCoolStuff ( string , s -> s . toLowerCase ()); } private void doFoo ( String str , Function < String , String > func ) { //super interesting code System . out . println ( func . apply ( str )); //even more interesting code } 2.11 - List of optionals beerLib . stream () . map ( Beer :: getDescription ) //returns optional //java 8 style beerLib . stream () . map ( Beer :: getDescription ) //returns optional . filter ( Optional :: isPresent ) . map ( Optional :: get ) . forEach ( System . out :: println ); //java 8 flatMap beerLib . stream () . map ( Beer :: getDescription ) //returns optional . flatMap ( o -> o . map ( Stream :: of ). orElse ( Stream . empty ())) . forEach ( System . out :: println ); //java 9 flatMap beerLib . stream () . map ( Beer :: getDescription ) //returns optional . flatMap ( Optional :: stream ) . forEach ( System . out :: println ); 2.12 - Checked Exceptions & Lambda public Beer doSomething ( Beer beer ) throws IsEmptyException { ... } Function < Beer , Beer > fBeer = beer -> doSomething ( beer ) // Don't do this // @Ugly public Beer doSomething ( Beer beer ) throws IsEmptyException { ... } beerLib . stream () . map ( beer -> { try { return doSomething ( beer ); } catch ( IsEmptyException e ) { throw new RuntimeException ( e ); } };) . collect ( Collectors . toList ()); beerLib . stream () . map ( this :: wrappedDoSomeThing ) . collect ( Collectors . toList ()); Exception Utility // @Better @FunctionalInterface public interface CheckedFunction < T , R > { public R apply ( T t ) throws Exception ; } public static < T , R > Function < T , R > wrap ( CheckedFunction < T , R > function ) { return t -> { try { return function . apply ( t ); } catch ( Exception ex ) { throw new RuntimeException ( ex ); } }; }; beerLib . stream () . map ( wrap ( beer -> doSomething ( beer ))) . collect ( Collectors . toList ()); 3 - Stream API Don\u2019t use external state with streams Don\u2019t mix streams and imperative code Avoid complex nested streams Avoid loop by design, think in pipeline Follow true functional approach without side effects Use typed streams for primitives Take a look at extension like jool, StreamEx Stream is not a data structure Incorrect usage 3.1 - Forgotten termin operation package com.xpinjection.java8.misused.stream.incorrect ; import com.xpinjection.java8.misused.Annotations.Bad ; import java.util.stream.IntStream ; public class ForgotTerminalOperation { @Bad public void willDoNothingInReality () { IntStream . range ( 1 , 5 ) . peek ( System . out :: println ) . peek ( i -> { if ( i == 5 ) throw new RuntimeException ( \"bang\" ); }); } } 3.2 - Infinite stream package com.xpinjection.java8.misused.stream.incorrect ; import com.xpinjection.java8.misused.Annotations.Bad ; import com.xpinjection.java8.misused.Annotations.Good ; import java.util.stream.IntStream ; public class InfiniteStreams { @Bad public void infinite (){ IntStream . iterate ( 0 , i -> i + 1 ) . forEach ( System . out :: println ); } @Good public void validOne (){ IntStream . iterate ( 0 , i -> i + 1 ) . limit ( 10 ) . forEach ( System . out :: println ); } @Bad public void stillInfinite (){ IntStream . iterate ( 0 , i -> ( i + 1 ) % 2 ) . distinct () . limit ( 10 ) . forEach ( System . out :: println ); } @Good public void butThisOneIfFine (){ IntStream . iterate ( 0 , i -> ( i + 1 ) % 2 ) . limit ( 10 ) . distinct () . forEach ( System . out :: println ); } } Look closer at the order of operations Only use infinite streams when absolute necessary Solution : IntStrean . range ( 0 , 10 ); IntStrean . rangeClosed ( 0 , 10 ); IntStrean . iterate ( 0 , i -> i < 10 , i -> i + 10 ); // Java 9 and up 3.3 - Use stream more than once package com.xpinjection.java8.misused.stream.incorrect ; import com.xpinjection.java8.misused.Annotations.Bad ; import java.util.Arrays ; import java.util.stream.IntStream ; public class UseStreamMoreThanOnce { @Bad public void streamIsClosedAfterTerminalOperation () { int [] array = new int [] { 1 , 2 }; IntStream stream = Arrays . stream ( array ); stream . forEach ( System . out :: println ); array [ 0 ] = 2 ; stream . forEach ( System . out :: println ); //IllegalStateException: stream has already been operated upon or closed } } Collectors 3.4 - Avoid forEach and apply mapping to target type package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Set ; import java.util.concurrent.atomic.AtomicInteger ; public class AvoidLoopsInStreams { private final Set < User > users = new HashSet <> (); @Ugly class UseExternalCounter { public double countAverageRolesPerUser () { if ( users . isEmpty ()) { return 0 ; } AtomicInteger totalCount = new AtomicInteger (); users . forEach ( u -> totalCount . addAndGet ( u . getRoles (). size ())); return totalCount . doubleValue () / users . size (); } } @Good class ApplyMappingsToTargetType { public double countAverageRolesPerUser () { return users . stream () . mapToDouble ( u -> u . getRoles (). size ()) . average () . orElse ( 0 ); } } } 3.5 - Collectors chain package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.List ; import java.util.Map ; import static java.util.Comparator.comparing ; import static java.util.stream.Collectors.* ; public class CollectorsChain { @Ugly class GroupByAndTransformResultingMap { public Map < String , Integer > getMaxAgeByUserName ( List < User > users ) { return users . stream () . collect ( groupingBy ( User :: getName )) . entrySet (). stream () . collect ( toMap ( Map . Entry :: getKey , e -> e . getValue (). stream () . map ( User :: getAge ) . reduce ( 0 , Integer :: max ) )); } } @Ugly class GroupByWithMaxCollectorUnwrappingOptionalWithFinisher { public Map < String , Integer > getMaxAgeByUserName ( List < User > users ) { return users . stream (). collect ( groupingBy ( User :: getName , collectingAndThen ( maxBy ( comparing ( User :: getAge )), user -> user . get (). getAge ()))); } } @Good class CollectToMapWithMergeFunction { public Map < String , Integer > getMaxAgeByUserName ( List < User > users ) { return users . stream () . collect ( toMap ( User :: getName , User :: getAge , Integer :: max )); } } @Good class ApplyReduceCollectorAsDownstream { public Map < String , Integer > getMaxAgeByUserName ( List < User > users ) { return users . stream () . collect ( groupingBy ( User :: getName , mapping ( User :: getAge , reducing ( 0 , Integer :: max )))); } } } 3.6 - Do not use external collection for grouping package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.User ; import java.util.HashMap ; import java.util.HashSet ; import java.util.Map ; import java.util.Set ; import static java.util.stream.Collectors.* ; public class ExternalCollectionForGrouping { private final Set < User > users = new HashSet <> (); @Ugly class ExternalStateIsUsedForStreamOperations { public Map < String , Set < User >> findEditors () { Map < String , Set < User >> editors = new HashMap <> (); users . forEach ( u -> u . getRoles (). stream () . filter ( r -> r . getPermissions (). contains ( Permission . EDIT )) . forEach ( r -> { //is it better to use Multiset and avoid this complex code Set < User > usersInRole = editors . get ( r . getName ()); if ( usersInRole == null ) { usersInRole = new HashSet <> (); editors . put ( r . getName (), usersInRole ); } usersInRole . add ( u ); }) ); return editors ; } } @Good class TuplesAreUsedWhenStateIsNeededOnLaterPhase { public Map < String , Set < User >> findEditors () { return users . stream () . flatMap ( u -> u . getRoles (). stream () . filter ( r -> r . getPermissions (). contains ( Permission . EDIT )) . map ( r -> new Pair <> ( r , u )) ). collect ( groupingBy ( p -> p . getKey (). getName (), mapping ( Pair :: getValue , toSet ()))); } } //any tuple implementation from 3rd party libraries class Pair < K , V > { private final K key ; private final V value ; Pair ( K key , V value ) { this . key = key ; this . value = value ; } K getKey () { return key ; } V getValue () { return value ; } } } 3.7 - Calculate statistics in single run with collector package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.IntSummaryStatistics ; import java.util.List ; import java.util.stream.IntStream ; import static java.util.stream.Collectors.summarizingInt ; public class StatisticsCalculation { @Ugly class IterateThroughValuesSeveralTimes { public void printNameStats ( List < User > users ) { getNameLengthStream ( users ) . max () . ifPresent ( max -> System . out . println ( \"MAX: \" + max )); getNameLengthStream ( users ) . min () . ifPresent ( min -> System . out . println ( \"MIN: \" + min )); } private IntStream getNameLengthStream ( List < User > users ) { return users . stream () . mapToInt ( user -> user . getName (). length ()); } } @Good class CalculateStatisticsInSingleRunWithCollector { public void registerUsers ( List < User > users ) { IntSummaryStatistics statistics = users . stream () . collect ( summarizingInt ( user -> user . getName (). length ())); System . out . println ( \"MAX: \" + statistics . getMax ()); System . out . println ( \"MIN: \" + statistics . getMin ()); } } } 3.8 - Convert stream to array package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.List ; import java.util.stream.Collectors ; public class StreamMayBeConvertedToArray { @Ugly class ConvertToArrayViaList { public String [] getUserNames ( List < User > users ) { List < String > names = users . stream () . map ( User :: getName ) . collect ( Collectors . toList ()); return names . toArray ( new String [ names . size () ] ); } } @Good class ConvertToArrayDirectly { public String [] getUserNames ( List < User > users ) { return users . stream () . map ( User :: getName ) . toArray ( String [] :: new ); } } } 3.9 - Use functional approach when \u201cmap-reduce\u201d package com.xpinjection.java8.misused.stream.collectors ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.List ; import static java.util.Comparator.comparingInt ; public class TrueFunctionalApproach { @Ugly class BeforeJava8 { public User findUsersWithMostRoles ( List < User > users ) { if ( users . isEmpty ()) { return null ; } User mostPowerful = users . iterator (). next (); for ( User user : users ) { if ( user . getRoles (). size () > mostPowerful . getRoles (). size ()) { mostPowerful = user ; } } return mostPowerful ; } } @Ugly class NaiveStreamsApproach { public User findUsersWithMostRoles ( List < User > users ) { return users . stream () . sorted ( comparingInt ( u -> u . getRoles (). size ())) . findFirst () . orElse ( null ); } } @Ugly class StreamsWithReduction { public User findUsersWithMostRoles ( List < User > users ) { return users . stream () . reduce (( u1 , u2 ) -> u1 . getRoles (). size () > u2 . getRoles (). size () ? u1 : u2 ) . orElse ( null ); } } @Good class MaxWithComparator { public User findUsersWithMostRoles ( List < User > users ) { return users . stream () . max ( comparingInt ( u -> u . getRoles (). size ())) . orElse ( null ); } } } Misuses 3.10 - Stream generation package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.Role ; import java.util.Arrays ; import java.util.Collections ; import java.util.stream.IntStream ; import java.util.stream.Stream ; public class CreationOptions { @Ugly public Stream < Permission > getStreamFromList () { return Arrays . asList ( Permission . ADD , Permission . DELETE ). stream (); } @Good public Stream < Permission > getStreamFromElements () { return Stream . of ( Permission . ADD , Permission . DELETE ); } @Ugly public Stream < Role > generateStreamByMappingCopies ( int n ) { return Collections . nCopies ( n , \"ignored\" ). stream () . map ( s -> new Role ()); } @Ugly public Stream < Role > generateStreamFromRange ( int n ) { return IntStream . range ( 0 , n ). mapToObj ( i -> new Role ()); } @Good public Stream < Role > generateStreamFromSupplierWithLimit ( int n ) { return Stream . generate ( Role :: new ). limit ( n ); } @Ugly public Stream < Role > generateStreamFromArrayWithRange ( Role [] roles , int max ) { int to = Integer . min ( roles . length , max ); return IntStream . range ( 0 , to ). mapToObj ( i -> roles [ i ] ); } @Good public Stream < Role > generateStreamFromArrayWithLimit ( Role [] roles , int max ) { return Stream . of ( roles ). limit ( max ); } } 3.11 - Use data structure features package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.* ; import static java.util.stream.Collectors.toList ; public class DoNotNeglectDataStructures { @Ugly class UnnecessaryUseOfNestedStreamOperations { public List < Order > filterOrdersByStatuses ( List < Order > orders , Set < Status > appropriateStatuses ) { return orders . stream () . filter ( order -> appropriateStatuses . stream (). anyMatch ( order . getStatus ():: equals )) . collect ( toList ()); } } @Good class UseOfDataStructure { public List < Order > filterOrdersByStatuses ( List < Order > orders , Set < Status > appropriateStatuses ) { return orders . stream () . filter ( order -> appropriateStatuses . contains ( order . getStatus ())) . collect ( toList ()); } } @Ugly class StateIsStoredInBadDataStructure { private final List < Order > orders = new ArrayList <> (); public void placeOrder ( Order order ) { orders . add ( order ); } public List < Order > getOrdersInStatus ( Status status ) { return orders . stream () . filter ( order -> order . getStatus () == status ) . collect ( toList ()); } } @Good class InternalDataStructureMayBeOptimizedForAccessMethods { //Use multimap instead from external collections like Guava private final Map < Status , List < Order >> orders = new EnumMap <> ( Status . class ); public void placeOrder ( Order order ) { orders . computeIfAbsent ( order . getStatus (), status -> new ArrayList <> ()). add ( order ); } public List < Order > getOrdersInStatus ( Status status ) { return orders . get ( status ); } } class Order { private Status status = Status . ACTIVE ; Status getStatus () { return status ; } void setStatus ( Status status ) { this . status = status ; } } enum Status { ACTIVE , SUSPENDED , CLOSED } } 3.12 - Do not mix imperative code with streams package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.Role ; import com.xpinjection.java8.misused.User ; import java.util.ArrayList ; import java.util.List ; import java.util.Objects ; public class ImperativeCodeMix { private static final String ADMIN_ROLE = \"admin\" ; private final List < User > users = new ArrayList <> (); @Ugly class TooVerboseMixOfStreamOperationsAndImperativeCode { public boolean hasAdmin () { return users . stream () . map ( u -> { if ( u == null ) { throw new NullPointerException (); } return u ; }) . flatMap ( u -> u . getRoles (). stream ()) . map ( Role :: getName ) . anyMatch ( name -> ADMIN_ROLE . equals ( name )); } } @Good class NiceAndCleanStreamOperationsChain { public boolean hasAdmin ( Permission permission ) { return users . stream () . map ( Objects :: requireNonNull ) . flatMap ( u -> u . getRoles (). stream ()) . map ( Role :: getName ) . anyMatch ( ADMIN_ROLE :: equals ); } } } 3.13 - Match element in functional style package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Set ; import java.util.concurrent.atomic.AtomicBoolean ; public class MatchElementInFunctionalStyle { private final Set < User > users = new HashSet <> (); @Ugly class UseOldSchoolIterationsWithForEachAndExternalBoolean { public boolean checkPermission ( Permission permission ) { AtomicBoolean found = new AtomicBoolean (); users . forEach ( u -> u . getRoles (). forEach ( r -> { if ( r . getPermissions (). contains ( permission )) { found . set ( true ); } } ) ); return found . get (); } } @Ugly class TryToUseFunctionalStyleWithStreamFilter { public boolean checkPermission ( Permission permission ) { return users . stream (). filter ( u -> u . getRoles (). stream () . filter ( r -> r . getPermissions (). contains ( permission )) . count () > 0 ) . findFirst (). isPresent (); } } @Ugly class TryToUseStreamMatching { public boolean checkPermission ( Permission permission ) { return users . stream () . anyMatch ( u -> u . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( permission ))); } } @Good class UseFlatMapForSubCollections { public boolean checkPermission ( Permission permission ) { return users . stream () . flatMap ( u -> u . getRoles (). stream ()) . anyMatch ( r -> r . getPermissions (). contains ( permission )); } } @Good class UseFlatMapWithMethodReferencesForSubCollections { public boolean checkPermission ( Permission permission ) { return users . stream () . map ( User :: getRoles ) . flatMap ( Set :: stream ) . anyMatch ( r -> r . getPermissions (). contains ( permission )); } } } 3.14 - Nested forEach is anti-pattern package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.ArrayList ; import java.util.HashSet ; import java.util.List ; import java.util.Set ; import static java.util.stream.Collectors.toSet ; public class NestedForEach { @Ugly class NestedForEachWithExternalCollection { public Set < String > retrievePromoRuleNames ( List < BusinessTransaction > transactions ) { Set < String > ruleNamesWithPromo = new HashSet <> (); transactions . forEach ( transaction -> transaction . getRules (). stream () . filter ( BusinessRule :: isPromotion ) . forEach ( rule -> ruleNamesWithPromo . add ( rule . getRuleName ()))); return ruleNamesWithPromo ; } } @Good class StreamOperationsChain { public Set < String > retrievePromoRuleNames ( List < BusinessTransaction > transactions ) { return transactions . stream () . flatMap ( t -> t . getRules (). stream ()) . filter ( BusinessRule :: isPromotion ) . map ( BusinessRule :: getRuleName ) . collect ( toSet ()); } } class BusinessTransaction { List < BusinessRule > getRules () { return new ArrayList <> (); //stub } } class BusinessRule { String getRuleName () { return \"\" ; //stub } boolean isPromotion () { return false ; //stub } } } 3.15 - Prefer specialized streams package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.List ; import java.util.Map ; import java.util.Set ; public class PreferSpecializedStreams { private final Set < User > users = new HashSet <> (); @Ugly class GeneralStreamUsage { public int getTotalAge () { return users . stream () . map ( User :: getAge ) . reduce ( 0 , Integer :: sum ); } } @Good class SpecializedStreamUsage { public int getTotalAge () { return users . stream () . mapToInt ( User :: getAge ) . sum (); } } @Ugly class FlatMapToCountElementsInAllCollections { public int countEmployees ( Map < String , List < User >> departments ) { return ( int ) departments . values (). stream () . flatMap ( List :: stream ) . count (); } } @Good class MapToIntToSimplifyCalculation { public long countEmployees ( Map < String , List < User >> departments ) { return departments . values (). stream () . mapToInt ( List :: size ) . sum (); } } } 3.16 - Poor Domain Model causes complex Data Access code package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Role ; import com.xpinjection.java8.misused.User ; import java.util.ArrayList ; import java.util.List ; public class RichDomainModel { @Ugly class PoorDomainModelCausesComplexDataAccessCode { private final List < User > users = new ArrayList <> (); public User findUserInRole ( String roleName ) { for ( User user : users ) { for ( Role role : user . getRoles ()) { if ( roleName . equals ( role . getName ())) { return user ; } } } return null ; } } @Ugly class StreamVersionLooksNotMuchBetter { private final List < User > users = new ArrayList <> (); public User findUserInRole ( String roleName ) { return users . stream (). filter ( user -> user . getRoles (). stream () . map ( Role :: getName ) . anyMatch ( roleName :: equals )) . findAny () . orElse ( null ); } } @Good class RichDomainModelCouldSimplifyAccessCode { private final List < BetterUser > users = new ArrayList <> (); public User findUserInRole ( String roleName ) { return users . stream () . filter ( user -> user . hasRole ( roleName )) . findAny () . orElse ( null ); } class BetterUser extends User { BetterUser ( long id , String name , int age ) { super ( id , name , age ); } boolean hasRole ( String roleName ) { return getRoles (). stream () . map ( Role :: getName ) . anyMatch ( roleName :: equals ); } } } } 3.17 - Do not use old-style code with new constructs package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.User ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Collection ; import java.util.Objects ; import static java.util.Optional.ofNullable ; public class SameOldCodeStyleWithNewConstructs { @Ugly class NoMoreThanSameOldLoopWithIf { public void registerUsers ( Collection < User > users ) { users . stream (). forEach ( user -> ofNullable ( user ). ifPresent ( u -> { //register user }) ); } } @Good class NewStreamStyleWithMethodReference { public void registerUsers ( Collection < User > users ) { users . stream () . filter ( Objects :: nonNull ) . forEach ( this :: registerUser ); } private void registerUser ( User user ){ //register user } } } 3.18 - Know when to use skip and limit package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.User ; import java.util.List ; import static com.xpinjection.java8.misused.Annotations.Good ; import static com.xpinjection.java8.misused.Annotations.Ugly ; public class SkipAndLimitOnListIsWaste { @Ugly class SkipSomeElementsAndThenTakeSomeForProcessing { public void registerUsers ( List < User > users ) { users . stream (). skip ( 5 ). limit ( 10 ) . forEach ( SkipAndLimitOnListIsWaste . this :: registerUser ); } } @Good class SublistDoNotWasteProcessingTime { public void registerUsers ( List < User > users ) { users . subList ( 5 , 15 ) . forEach ( SkipAndLimitOnListIsWaste . this :: registerUser ); } } private void registerUser ( User user ) { //register user } } 3.19 - Type of stream could be changed package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.List ; public class UntypedStreamsCouldBeConverted { @Ugly class ProcessOnlyValuesOfSpecialType { public int countDoubleNaNs ( List numbers ) { int count = 0 ; for ( Object e : numbers ) { if ( e instanceof Double ) { Double d = ( Double ) e ; if ( d . isNaN ()) { count ++ ; } } } return count ; } } @Good class TypeOfStreamCouldBeChanged { public int countDoubleNaNs ( List numbers ) { return ( int ) numbers . stream () . filter ( Double . class :: isInstance ) . mapToDouble ( Double . class :: cast ) . filter ( Double :: isNaN ) . count (); } } } 3.20 - Use stream to build map is over-complication package com.xpinjection.java8.misused.stream ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.AbstractMap ; import java.util.Collections ; import java.util.HashMap ; import java.util.Map ; import java.util.stream.Stream ; import static java.util.stream.Collectors.collectingAndThen ; import static java.util.stream.Collectors.toMap ; public class WantToUseStreamsEverywhere { @Ugly class UseStreamToBuildMap { public Map < String , Object > getJpaProperties () { return Stream . of ( new AbstractMap . SimpleEntry <> ( \"hibernate.show_sql\" , \"true\" ), new AbstractMap . SimpleEntry <> ( \"hibernate.format_sql\" , \"true\" ) ). collect ( collectingAndThen ( toMap ( Map . Entry :: getKey , Map . Entry :: getValue ), Collections :: unmodifiableMap ) ); } } @Good class UseOldPlainMap { public Map < String , Object > getJpaProperties () { Map < String , Object > properties = new HashMap <> (); properties . put ( \"hibernate.show_sql\" , \"true\" ); properties . put ( \"hibernate.format_sql\" , \"true\" ); return Collections . unmodifiableMap ( properties ); } } } 4 - Time API 4.1 - Ignore Java 8 Time API package com.xpinjection.java8.misused.time ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.time.LocalDate ; import java.util.Calendar ; import java.util.Date ; import static java.time.temporal.ChronoUnit.DAYS ; public class TimeApiIgnorance { @Ugly class AddDayInPreJava8Style { public Date tomorrow () { Calendar now = Calendar . getInstance (); now . add ( Calendar . DAY_OF_MONTH , 1 ); return now . getTime (); } } @Ugly class AddDayInefficient { public LocalDate tomorrow () { return LocalDate . now (). plus ( 1 , DAYS ); } } @Good class AddDayInJava8Style { public LocalDate tomorrow () { return LocalDate . now (). plusDays ( 1 ); } } } References Repo - xpinjection/java8-misuses Video - JUGLviv meetup: Java 8 \u2013 The Good, the Bad and the Ugly Video - Java 8, the Good, the Bad and the Ugly [updated version] ( Mikalai Alimenkou, XP Injection) Video - Common Mistakes Made in Functional Java by Brian Vermeer Slides - Writing better functional java code devnexus by Brian Vermeer Libraries: jOOL StreamEx","title":"Common misuses of Java 8+ features"},{"location":"blog/2019/2019-04-10-java8-misuse/#common-misuses-of-java-8-features","text":"| java | These notes are copy of xpinjection/java8-misuses repository. Domain Model 1 - Optional 1.1 - Internal Optional Usage 1.2 - Optional Constructor Parameters 1.3 - Optional for resulted (method returns) Collections 1.4 - Use flatMap for getting nested Optional values 1.5 - if statement with Optional is not always bad thing 1.6 - Optional \u201celvis\u201d 1.7 - Optional Over Engineering ( if not null might be simpler ) 1.8 - Value presence strict check (chained ifPresent ) 2 - Lambdas 2.1 - Avoid Complex Lambdas 2.2 - Avoid Long Lambdas 2.3 - Class Design (methods\u2019 naming) 2.4 - Lambdas are not always the best option (method reference works as well) 2.5 - Lazy calculations improve performance ( log if logger.isDebugEnabled() ) 2.6 - Emulate Multimap 2.7 - Sorting the list using existing predefined comparator 2.8 - Iterating the map ( forEach and map transform) 2.9 - Remove with predicate 2.10 - Avoid code-duplication with lambdas 2.11 - List of optionals 2.12 - Checked Exceptions & Lambda 3 - Stream API Incorrect usage 3.1 - Forgotten termin operation 3.2 - Infinite stream 3.3 - Use stream more than once Collectors 3.4 - Avoid forEach and apply mapping to target type 3.5 - Collectors chain 3.6 - Do not use external collection for grouping 3.7 - Calculate statistics in single run with collector 3.8 - Convert stream to array 3.9 - Use functional approach when \u201cmap-reduce\u201d Misuses 3.10 - Stream generation 3.11 - Use data structure features 3.12 - Do not mix imperative code with streams 3.13 - Match element in functional style 3.14 - Nested forEach is anti-pattern 3.15 - Prefer specialized streams 3.16 - Poor Domain Model causes complex Data Access code 3.17 - Do not use old-style code with new constructs 3.18 - Know when to use skip and limit 3.19 - Type of stream could be changed 3.20 - Use stream to build map is over-complication 4 - Time API 4.1 - Ignore Java 8 Time API References","title":"Common misuses of Java 8+ features"},{"location":"blog/2019/2019-04-10-java8-misuse/#domain-model","text":"All the cases are based on the next domain model: package com.xpinjection.java8.misused ; public class Annotations { public @interface Good {} public @interface Bad {} public @interface Ugly {} } public enum Permission { ADD , EDIT , SEARCH , DELETE } public class Role { private String name ; private Set < Permission > permissions = EnumSet . noneOf ( Permission . class ); public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public Set < Permission > getPermissions () { return permissions ; } public void setPermissions ( Set < Permission > permissions ) { this . permissions = permissions ; } @Override public boolean equals ( Object o ) { // ... the details are not important } @Override public int hashCode () { return name . hashCode (); } } public class User { private Long id ; private String name ; private int age ; private Set < Role > roles = new HashSet <> (); public User ( long id , String name , int age ) { this . id = id ; this . name = name ; this . age = age ; } public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } public Set < Role > getRoles () { return roles ; } public void setRoles ( Set < Role > roles ) { this . roles = roles ; } } public class UserDto { private Long id ; private String name ; public Long getId () { return id ; } public void setId ( Long id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } }","title":"Domain Model"},{"location":"blog/2019/2019-04-10-java8-misuse/#1-optional","text":"Do not overuse Optional, never use it for parameters Do not check for value presence, operate on it instead Do not overuse Optional, don\u2019t be too clever Optional container should be short lived Wrap nullable values in Optional to operate on them Use chained methods Carefully choose what to wrap","title":"1 - Optional"},{"location":"blog/2019/2019-04-10-java8-misuse/#11-internal-optional-usage","text":"package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Optional ; public class InternalOptionalUsage { @Ugly class UnclearOptionalDependencyWithCheckForNull { private Printer printer ; public void process ( User user ) { //some processing if ( printer != null ) { printer . print ( user ); } } public void setPrinter ( Printer printer ) { this . printer = printer ; } } @Good class ValidInternalOptionalDependency { private Optional < Printer > printer = Optional . empty (); public void process ( User user ) { //some processing printer . ifPresent ( p -> p . print ( user )); } public void setPrinter ( Printer printer ) { this . printer = Optional . ofNullable ( printer ); } } interface Printer { void print ( User user ); } }","title":"1.1 - Internal Optional Usage"},{"location":"blog/2019/2019-04-10-java8-misuse/#12-optional-constructor-parameters","text":"package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.io.Serializable ; import java.util.Arrays ; import java.util.List ; import java.util.Optional ; public class OptionalConstructorParameters { @Ugly class OptionalLeaksOutsideClass { public List < Email > create () { Email noAttachment = new Email ( \"First!\" , \"No attachment\" , Optional . empty ()); Attachment attachment = new Attachment ( \"/mnt/files/image.png\" , 370 ); Email withAttachment = new Email ( \"Second!\" , \"With attachment\" , Optional . of ( attachment )); return Arrays . asList ( noAttachment , withAttachment ); } class Email implements Serializable { private final String subject ; private final String body ; private final Optional < Attachment > attachment ; Email ( String subject , String body , Optional < Attachment > attachment ) { this . subject = subject ; this . body = body ; this . attachment = attachment ; } String getSubject () { return subject ; } String getBody () { return body ; } Optional < Attachment > getAttachment () { return attachment ;} } } @Good class OverloadedConstructors { public List < Email > create () { Email noAttachment = new Email ( \"First!\" , \"No attachment\" ); Attachment attachment = new Attachment ( \"/mnt/files/image.png\" , 370 ); Email withAttachment = new Email ( \"Second!\" , \"With attachment\" , attachment ); return Arrays . asList ( noAttachment , withAttachment ); } class Email implements Serializable { private final String subject ; private final String body ; private final Attachment attachment ; Email ( String subject , String body , Attachment attachment ) { this . subject = subject ; this . body = body ; this . attachment = attachment ; } Email ( String subject , String body ) { this ( subject , body , null ); } String getSubject () { return subject ; } String getBody () { return body ; } boolean hasAttachment () { return attachment != null ; } Attachment getAttachment () { return attachment ; } } } class Attachment { private final String path ; private final int size ; Attachment ( String path , int size ) { this . path = path ; this . size = size ; } String getPath () { return path ; } int getSize () { return size ; } } }","title":"1.2 - Optional Constructor Parameters"},{"location":"blog/2019/2019-04-10-java8-misuse/#13-optional-for-resulted-method-returns-collections","text":"package com.xpinjection.java8.misused.optional.usage ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Collections ; import java.util.List ; import java.util.Optional ; public class OptionalForCollections { private static final String ADMIN_ROLE = \"admin\" ; @Ugly class TooVerbose { public User findAnyAdmin () { Optional < List < User >> users = findUsersByRole ( ADMIN_ROLE ); if ( users . isPresent () && ! users . get (). isEmpty ()) { return users . get (). get ( 0 ); } throw new IllegalStateException ( \"No admins found\" ); } private Optional < List < User >> findUsersByRole ( String role ) { //real search in DB return Optional . empty (); } } @Good class NiceAndClean { public User findAnyAdmin () { return findUsersByRole ( ADMIN_ROLE ). stream () . findAny () . orElseThrow (() -> new IllegalStateException ( \"No admins found\" )); } private List < User > findUsersByRole ( String role ) { //real search in DB return Collections . emptyList (); } } }","title":"1.3 - Optional for resulted (method returns) Collections"},{"location":"blog/2019/2019-04-10-java8-misuse/#14-use-flatmap-for-getting-nested-optional-values","text":"package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Bad ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; import static java.util.Optional.empty ; import static java.util.Optional.ofNullable ; public class HundredAndOneApproach { @Ugly class SameOldImperativeStyle { public String getPersonCarInsuranceName ( Person person ) { String name = \"Unknown\" ; if ( ofNullable ( person ). isPresent ()) { if ( person . getCar (). isPresent ()) { if ( person . getCar (). get (). getInsurance (). isPresent ()) { name = person . getCar (). get (). getInsurance (). get (). getName (); } } } return name ; } } @Ugly class UsingIfPresentInSameImperativeWayWithDirtyHack { public String getPersonCarInsuranceName ( Person person ) { final StringBuilder builder = new StringBuilder (); ofNullable ( person ). ifPresent ( p -> p . getCar (). ifPresent ( c -> c . getInsurance (). ifPresent ( i -> builder . append ( i . getName ()) ) ) ); return builder . toString (); } } @Bad class UsingMapWithUncheckedGet { public String getPersonCarInsuranceName ( Person person ) { return ofNullable ( person ) . map ( Person :: getCar ) . map ( car -> car . get (). getInsurance ()) . map ( insurance -> insurance . get (). getName ()) . orElse ( \"Unknown\" ); } } @Ugly class UsingMapWithOrElseEmptyObjectToFixUncheckedGet { public String getPersonCarInsuranceName ( Person person ) { return ofNullable ( person ) . map ( Person :: getCar ) . map ( car -> car . orElseGet ( Car :: new ). getInsurance ()) . map ( insurance -> insurance . orElseGet ( Insurance :: new ). getName ()) . orElse ( \"Unknown\" ); } } @Good class UsingFlatMap { public String getCarInsuranceNameFromPersonUsingFlatMap ( Person person ) { return ofNullable ( person ) . flatMap ( Person :: getCar ) . flatMap ( Car :: getInsurance ) . map ( Insurance :: getName ) . orElse ( \"Unknown\" ); } } class Person { Optional < Car > getCar () { return empty (); //stub } } class Car { Optional < Insurance > getInsurance () { return empty (); //stub } } class Insurance { String getName () { return \"\" ; //stub } } }","title":"1.4 - Use flatMap for getting nested Optional values"},{"location":"blog/2019/2019-04-10-java8-misuse/#15-if-statement-with-optional-is-not-always-bad-thing","text":"package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; import java.util.stream.Stream ; public class IfStatementIsNotAlwaysBadThing { @Ugly class CombineSomeOptionalsInCleverWay { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { return Stream . of ( first , second ) . filter ( Optional :: isPresent ) . map ( Optional :: get ) . reduce ( Integer :: sum ); } } @Ugly class PlayMapGameInEvenMoreCleverWay { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { return first . map ( b -> second . map ( a -> b + a ). orElse ( b )) . map ( Optional :: of ) . orElse ( second ); } } @Good class OldSchoolButTotallyClearCode { public Optional < Integer > sum ( Optional < Integer > first , Optional < Integer > second ) { if ( ! first . isPresent () && ! second . isPresent ()) { return Optional . empty (); } return Optional . of ( first . orElse ( 0 ) + second . orElse ( 0 )); } } }","title":"1.5 - if statement with Optional is not always bad thing"},{"location":"blog/2019/2019-04-10-java8-misuse/#16-optional-elvis","text":"package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import static java.util.Optional.ofNullable ; public class OptionalElvis { @Ugly class BeforeJava8 { public String getUserName ( User user ) { return ( user != null && user . getName () != null ) ? user . getName () : \"default\" ; } } @Ugly class UsingOptionalIsPresent { public String getUserName ( User user ) { if ( ofNullable ( user ). isPresent ()) { if ( ofNullable ( user . getName ()). isPresent ()) { return user . getName (); } } return \"default\" ; } } @Good class UsingOrElse { String getUserName ( User user ) { return ofNullable ( user ) . map ( User :: getName ) . orElse ( \"default\" ); } } }","title":"1.6 - Optional \"elvis\""},{"location":"blog/2019/2019-04-10-java8-misuse/#17-optional-over-engineering-if-not-null-might-be-simpler","text":"package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Role ; import java.util.Optional ; public class OptionalOverEngineering { @Ugly class NullProtectionOverEngineering { public Role copyRole ( Role role ) { Role copy = new Role (); Optional . ofNullable ( role . getName ()) . ifPresent ( copy :: setName ); copy . setPermissions ( role . getPermissions ()); return copy ; } } @Good class SimpleConditionalCopying { public Role copyRole ( Role role ) { Role copy = new Role (); if ( role . getName () != null ) { copy . setName ( role . getName ()); } copy . setPermissions ( role . getPermissions ()); return copy ; } } }","title":"1.7 - Optional Over Engineering (if not null might be simpler)"},{"location":"blog/2019/2019-04-10-java8-misuse/#18-value-presence-strict-check-chained-ifpresent","text":"package com.xpinjection.java8.misused.optional ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Optional ; public class StrictCheckOfValuePresence { @Ugly class ManualCheckForPresenceToThrowException { public String getUserName ( Long userId ) { Optional < User > user = findById ( userId ); if ( user . isPresent ()) { return user . get (). getName (); } throw new IllegalStateException ( \"User not found\" ); } public void deleteUser ( Long userId ) { Optional < User > user = findById ( userId ); if ( user . isPresent ()) { delete ( user . get ()); } } private void delete ( User user ) { //delete from DB } } @Good class OrElseThrowUsage { public String getUserName ( Long userId ) { return findById ( userId ) . orElseThrow (() -> new IllegalStateException ( \"User not found\" )) . getName (); } public void deleteUser ( Long userId ) { findById ( userId ). ifPresent ( this :: delete ); } private void delete ( User user ) { //delete from DB } } private Optional < User > findById ( Long userId ) { //search in DB return Optional . of ( new User ( 5L , \"Mikalai\" , 33 )); } }","title":"1.8 - Value presence strict check (chained ifPresent)"},{"location":"blog/2019/2019-04-10-java8-misuse/#2-lambdas","text":"Be concrete with functional interfaces Avoid long or complex lambda expressions! Prefer reusable method reference Use specific methods on collections Lazy calculation improve performance Check popular API changes for lambda support","title":"2 - Lambdas"},{"location":"blog/2019/2019-04-10-java8-misuse/#21-avoid-complex-lambdas","text":"package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.Role ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Set ; import java.util.function.Predicate ; import static java.util.stream.Collectors.toSet ; public class AvoidComplexLambdas { private final Set < User > users = new HashSet <> (); @Ugly class UsingComplexLambdaInPlace { public Set < User > findEditors () { return users . stream () . filter ( u -> u . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( Permission . EDIT ))) . collect ( toSet ()); } } @Good class ComplexityExtractedToMethodReference { public Set < User > checkPermission ( Permission permission ) { return users . stream () //.filter(this::hasEditPermission) . filter ( hasPermission ( Permission . EDIT )) . collect ( toSet ()); } private Predicate < User > hasPermission ( Permission permission ) { return user -> user . getRoles (). stream () . map ( Role :: getPermissions ) . anyMatch ( permissions -> permissions . contains ( permission )); } private boolean hasEditPermission ( User user ) { return hasPermission ( Permission . EDIT ). test ( user ); } } }","title":"2.1 - Avoid Complex Lambdas"},{"location":"blog/2019/2019-04-10-java8-misuse/#22-avoid-long-lambdas","text":"package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import com.xpinjection.java8.misused.UserDto ; import java.util.List ; import java.util.function.Function ; import static java.util.stream.Collectors.toList ; public class AvoidLongLambdas { @Ugly class LongLambdaInPlace { public List < UserDto > convertToDto ( List < User > users ){ return users . stream () . map ( user -> { UserDto dto = new UserDto (); dto . setId ( user . getId ()); dto . setName ( user . getName ()); //it happens to be much more fields // and much more logic in terms of remapping these fields return dto ; }) . collect ( toList ()); } } @Good class MethodReferenceInsteadOfLambda { //particular toDto could be implemented as a separate class or as a lambda function private final Function < User , UserDto > toDto = this :: convertToDto ; public List < UserDto > convertToDto ( List < User > users ){ return users . stream () . map ( toDto ) . collect ( toList ()); } private UserDto convertToDto ( User user ){ UserDto dto = new UserDto (); dto . setId ( user . getId ()); dto . setName ( user . getName ()); return dto ; } } }","title":"2.2 - Avoid Long Lambdas"},{"location":"blog/2019/2019-04-10-java8-misuse/#23-class-design-methods-naming","text":"package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Bad ; import com.xpinjection.java8.misused.Annotations.Good ; import java.util.function.Function ; import java.util.function.UnaryOperator ; public class ClassDesign { @Bad static class AmbiguousOverloadedMethods { interface AmbiguousService < T > { < R > R process ( Function < T , R > fn ); T process ( UnaryOperator < T > fn ); } public void usage ( AmbiguousService < String > service ) { //which method you intended to call??? both are acceptable. service . process ( String :: toUpperCase ); } } @Good static class SeparateSpecializedMethods { interface ClearService < T > { < R > R convert ( Function < T , R > fn ); T process ( UnaryOperator < T > fn ); } public void usage ( ClearService < String > service ) { //now it's clear which method will be called. service . convert ( String :: toUpperCase ); } } }","title":"2.3 - Class Design (methods' naming)"},{"location":"blog/2019/2019-04-10-java8-misuse/#24-lambdas-are-not-always-the-best-option-method-reference-works-as-well","text":"package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.Optional ; public class LambdasAreNotAlwaysTheBestOption { @Ugly class UnneededLambdasUsage { public void processAndPrint ( String name ) { Optional . ofNullable ( name ) //.filter(s -> !s.isEmpty()) . map ( s -> s . toUpperCase ()) . map ( s -> doProcess ( s )) . ifPresent ( s -> System . out . print ( s )); } private String doProcess ( String name ) { return \"MR. \" + name ; } } @Good class MethodReferenceUsage { public void processAndPrint ( String name ) { Optional . ofNullable ( name ) //.filter(StringUtils::isNotEmpty) // replace with appropriate library method ref . map ( String :: toUpperCase ) . map ( this :: doProcess ) . ifPresent ( System . out :: print ); } private String doProcess ( String name ) { return \"MR. \" + name ; } } }","title":"2.4 - Lambdas are not always the best option (method reference works as well)"},{"location":"blog/2019/2019-04-10-java8-misuse/#25-lazy-calculations-improve-performance-log-if-loggerisdebugenabled","text":"package com.xpinjection.java8.misused.lambda ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.Set ; import java.util.function.Supplier ; public class LazyCalculationsImprovePerformance { @Ugly static class LoggingWithAdditionalCheckToAvoidCalculations { private static final Log LOG = null ; // init logger with factory public void sendWelcomeEmailToUsers ( Set < User > users ) { // send email if ( LOG . isDebugEnabled ()) { LOG . debug ( \"Emails have been sent for users: \" + users ); } } interface Log { void debug ( String message ); boolean isDebugEnabled (); } } @Good static class PassLambdaToLazyCalculateValueForLogMessage { private static final Log LOG = null ; // init logger with factory public void sendWelcomeEmailToUsers ( Set < User > users ) { // send email LOG . debug (() -> \"Emails have been sent for users: \" + users ); } interface Log { void debug ( String message ); boolean isDebugEnabled (); default void debug ( Supplier < String > message ) { if ( isDebugEnabled ()) { debug ( message . get ()); } } } } }","title":"2.5 - Lazy calculations improve performance (log if logger.isDebugEnabled())"},{"location":"blog/2019/2019-04-10-java8-misuse/#26-emulate-multimap","text":"package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.* ; public class EmulateMultimap { private final Map < String , Set < User >> usersByRole = new HashMap <> (); @Ugly class ManuallyInsertSetOnFirstValueForTheKey { public void addUser ( User user ) { user . getRoles (). forEach ( r -> { Set < User > usersInRole = usersByRole . get ( r . getName ()); if ( usersInRole == null ) { usersInRole = new HashSet <> (); usersByRole . put ( r . getName (), usersInRole ); } usersInRole . add ( user ); }); } public Set < User > getUsersInRole ( String role ) { Set < User > users = usersByRole . get ( role ); return users == null ? Collections . emptySet () : users ; } } @Good class ComputeEmptySetIfKeyIsAbsent { public void addUser ( User user ) { user . getRoles (). forEach ( r -> usersByRole . computeIfAbsent ( r . getName (), k -> new HashSet <> ()) . add ( user )); } public Set < User > getUsersInRole ( String role ) { return usersByRole . getOrDefault ( role , Collections . emptySet ()); } } }","title":"2.6 - Emulate Multimap"},{"location":"blog/2019/2019-04-10-java8-misuse/#27-sorting-the-list-using-existing-predefined-comparator","text":"package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.User ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.util.List ; import static java.util.Comparator.comparing ; public class ListSorting { @Ugly class UsingCustomComparator { public void sortUsersById ( List < User > users ) { users . sort (( x , y ) -> Long . compare ( x . getId (), y . getId ())); } } @Good class UsingExistingPredefinedComparator { public void sortUsersById ( List < User > users ) { users . sort ( comparing ( User :: getId )); } } }","title":"2.7 - Sorting the list using existing predefined comparator"},{"location":"blog/2019/2019-04-10-java8-misuse/#28-iterating-the-map-foreach-and-map-transform","text":"package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.User ; import java.util.HashMap ; import java.util.Map ; import static java.util.stream.Collectors.toMap ; public class MapIterating { @Ugly class UsingOldGoodEntrySet { public Map < String , String > getUserNames ( Map < String , User > users ) { Map < String , String > userNames = new HashMap <> (); users . entrySet (). forEach ( user -> userNames . put ( user . getKey (), user . getValue (). getName ())); return userNames ; } } @Good class UsingMapForEach { public Map < String , String > getUserNames ( Map < String , User > users ) { Map < String , String > userNames = new HashMap <> (); users . forEach (( key , value ) -> userNames . put ( key , value . getName ())); return userNames ; } } @Good class UsingMapTransform { public Map < String , String > getUserNames ( Map < String , User > users ) { return users . entrySet (). stream () . collect ( toMap ( Map . Entry :: getKey , entry -> entry . getValue (). getName ())); } } }","title":"2.8 - Iterating the map (forEach and map transform)"},{"location":"blog/2019/2019-04-10-java8-misuse/#29-remove-with-predicate","text":"package com.xpinjection.java8.misused.lambda.collections ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import com.xpinjection.java8.misused.Permission ; import com.xpinjection.java8.misused.User ; import java.util.HashSet ; import java.util.Iterator ; import java.util.Set ; public class RemoveElementWithIterator { private final Set < User > users = new HashSet <> (); @Ugly class ManuallyRemoveElementWithIteratorRemove { public void removeUsersWithPermission ( Permission permission ) { Iterator < User > iterator = users . iterator (); while ( iterator . hasNext ()) { User user = iterator . next (); if ( user . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( permission ))) { iterator . remove (); } } } } @Good class RemoveWithPredicate { public void removeUsersWithPermission ( Permission permission ) { users . removeIf ( user -> user . getRoles (). stream () . anyMatch ( r -> r . getPermissions (). contains ( permission ))); } } }","title":"2.9 - Remove with predicate"},{"location":"blog/2019/2019-04-10-java8-misuse/#210-avoid-code-duplication-with-lambdas","text":"// @Ugly private void logUpper ( String str ) { //super interesting code System . out . println ( str . toUpperCase ()); //even more interesting code } private void logLower ( String str ) { //super interesting code System . out . println ( str . toLowerCase ()); //even more interesting code } // @Good private void logUpper ( String string ) { doSuperCoolStuff ( string , s -> s . toUpperCase ()); } private void logLower ( String string ) { doSuperCoolStuff ( string , s -> s . toLowerCase ()); } private void doFoo ( String str , Function < String , String > func ) { //super interesting code System . out . println ( func . apply ( str )); //even more interesting code }","title":"2.10 - Avoid code-duplication with lambdas"},{"location":"blog/2019/2019-04-10-java8-misuse/#211-list-of-optionals","text":"beerLib . stream () . map ( Beer :: getDescription ) //returns optional //java 8 style beerLib . stream () . map ( Beer :: getDescription ) //returns optional . filter ( Optional :: isPresent ) . map ( Optional :: get ) . forEach ( System . out :: println ); //java 8 flatMap beerLib . stream () . map ( Beer :: getDescription ) //returns optional . flatMap ( o -> o . map ( Stream :: of ). orElse ( Stream . empty ())) . forEach ( System . out :: println ); //java 9 flatMap beerLib . stream () . map ( Beer :: getDescription ) //returns optional . flatMap ( Optional :: stream ) . forEach ( System . out :: println );","title":"2.11 - List of optionals"},{"location":"blog/2019/2019-04-10-java8-misuse/#212-checked-exceptions-lambda","text":"public Beer doSomething ( Beer beer ) throws IsEmptyException { ... } Function < Beer , Beer > fBeer = beer -> doSomething ( beer ) // Don't do this // @Ugly public Beer doSomething ( Beer beer ) throws IsEmptyException { ... } beerLib . stream () . map ( beer -> { try { return doSomething ( beer ); } catch ( IsEmptyException e ) { throw new RuntimeException ( e ); } };) . collect ( Collectors . toList ()); beerLib . stream () . map ( this :: wrappedDoSomeThing ) . collect ( Collectors . toList ()); Exception Utility // @Better @FunctionalInterface public interface CheckedFunction < T , R > { public R apply ( T t ) throws Exception ; } public static < T , R > Function < T , R > wrap ( CheckedFunction < T , R > function ) { return t -> { try { return function . apply ( t ); } catch ( Exception ex ) { throw new RuntimeException ( ex ); } }; }; beerLib . stream () . map ( wrap ( beer -> doSomething ( beer ))) . collect ( Collectors . toList ());","title":"2.12 - Checked Exceptions &amp; Lambda"},{"location":"blog/2019/2019-04-10-java8-misuse/#3-stream-api","text":"Don\u2019t use external state with streams Don\u2019t mix streams and imperative code Avoid complex nested streams Avoid loop by design, think in pipeline Follow true functional approach without side effects Use typed streams for primitives Take a look at extension like jool, StreamEx Stream is not a data structure","title":"3 - Stream API"},{"location":"blog/2019/2019-04-10-java8-misuse/#incorrect-usage","text":"","title":"Incorrect usage"},{"location":"blog/2019/2019-04-10-java8-misuse/#collectors","text":"","title":"Collectors"},{"location":"blog/2019/2019-04-10-java8-misuse/#misuses","text":"","title":"Misuses"},{"location":"blog/2019/2019-04-10-java8-misuse/#4-time-api","text":"","title":"4 - Time API"},{"location":"blog/2019/2019-04-10-java8-misuse/#41-ignore-java-8-time-api","text":"package com.xpinjection.java8.misused.time ; import com.xpinjection.java8.misused.Annotations.Good ; import com.xpinjection.java8.misused.Annotations.Ugly ; import java.time.LocalDate ; import java.util.Calendar ; import java.util.Date ; import static java.time.temporal.ChronoUnit.DAYS ; public class TimeApiIgnorance { @Ugly class AddDayInPreJava8Style { public Date tomorrow () { Calendar now = Calendar . getInstance (); now . add ( Calendar . DAY_OF_MONTH , 1 ); return now . getTime (); } } @Ugly class AddDayInefficient { public LocalDate tomorrow () { return LocalDate . now (). plus ( 1 , DAYS ); } } @Good class AddDayInJava8Style { public LocalDate tomorrow () { return LocalDate . now (). plusDays ( 1 ); } } }","title":"4.1 - Ignore Java 8 Time API"},{"location":"blog/2019/2019-04-10-java8-misuse/#references","text":"Repo - xpinjection/java8-misuses Video - JUGLviv meetup: Java 8 \u2013 The Good, the Bad and the Ugly Video - Java 8, the Good, the Bad and the Ugly [updated version] ( Mikalai Alimenkou, XP Injection) Video - Common Mistakes Made in Functional Java by Brian Vermeer Slides - Writing better functional java code devnexus by Brian Vermeer Libraries: jOOL StreamEx","title":"References"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/","text":"Scala vs Kotlin | java | kotlin | vs | comparison | This page is just collection of notes from \u201cKotlin vs Scala\u201d by Urs Peter & Joost Heijkoop Object Orientation Class Comparing OO between Inheritance Value Classes Functional Programming Declaring and Calling Functions Curring and partially applied functions Functions under the hood and Types Type Aliases Null Safety Optional Value Nullable Types Pattern Matching Destructuring Composition Composition with Traits Composition with Delegation Extensions Extensions ++ (Function types with receiver) Collections Collection Examples Concurrency Scala Futures Kotlin Coroutines Kotlin Coroutines to the rescue Kotlin Coroutines under the hood Kotlin Coroutines Interoperability Some final words on Coroutines Object Orientation Class Scala class Person ( val name : String , var age : Int = 0 ) Kotlin class Person ( val name : String , var age : Int = 0 ) Comparing OO between Scala class Person ( var name : String , var age : Int = 0 ) extends Ordered [ Person ] { def sayHi (): String = { \"Hi\" } override def compare ( other : Person ): Int = age - other . age def + ( lifetime : Int ): Person = { age += lifetime this } } object Person { def newBorn ( name : String ) = new Person ( name , 0 ) def apply () = new Person ( \"John Doe\" , - 1 ) } Kotlin class Person ( var name : String , var age : Int = 0 ): Comparable < Person > { fun sayHi (): String { return \"Hi\" } operator fun plus ( lifetime : Int ): Person { age += lifetime return this } override operator fun compareTo ( p : Person ) = age - p . age companion object { fun newBorn ( name : String ) = Person ( name ) operator fun invoke () = Person ( \"John Doe\" ) } } Inheritance Scala class Species ( val kind : String ) { def eats : Seq [ String ] = Seq () } class Person ( val name : String , var age : Int ) extends Species ( \"Homo Sapiens\" ) { override def eats : Seq [ String ] = Seq ( \"...\" ) } Kotlin open class Species ( val kind : String ) { open fun eats (): List < String > = emptyList () } class Person ( val name : String , var age : Int = 0 ): Species ( \"Homo Sapiens\" ) { override fun eats (): List < String > = listOf ( \"...\" ) } Value Classes Scala case class Person ( name : String , var age : Int = 0 ) Kotlin data class Person ( val name : String , var age : Int = 0 ) val jack = Person ( \"Jack\" , 42 ) // jack: Person(name=Jack, age=32) jack == Person ( \"Jack\" , 42 ) // res1: true val fred = jack . copy ( name = \"Fred\" ) // fred: Person(name=Jack, age=32) Functional Programming Declaring and Calling Functions Scala def doWithText ( path : File , transFun : ( String ) => String ): String = transFun ( FileUtils . readFileToString ( path )) doWithText ( new File ( \"/news.txt\" ), txt => txt . toUpperCase ()) doWithText ( new File ( \"/news.txt\" ), _ . toUpperCase ()) def writeToFile ( file : File , block : => String ) { if ( file . isFile ) FileUtils . writeStringToFile ( file , block ) } writeToFile ( new File ( \"/srocks.txt\" ), \"Scala rocks! \" * 1000 ) Kotlin fun doWithText ( path : File , transFun : ( String ) -> String ): String = transFun ( FileUtils . readFileToString ( path )) // On the call-side a function must be wrapped within {} doWithText ( File ( \"/text.txt\" )){ txt -> txt . toUpperCase () } // it serves as placeholder of the function parameter. doWithText ( File ( \"/text.txt\" )){ it . toUpperCase () } // Kotlin supports no-argument functions, similar to Scala\u2019s call-by name arguments fun writeToFile ( file : File , block : () -> String ) { if ( file . isFile ) FileUtils . writeStringToFile ( file , block ()) } // On the call-side the empty argument and arrow can be omitted writeToFile ( File ( \"/krocks.txt\" )){ \"Kotlin rocks! \" . repeat ( 1000 )} Curring and partially applied functions Scala def modN ( n : Int )( x : Int ) = (( x % n ) == 0 ) val modTwo = modN ( 2 )( _ ) Seq ( 1 , 2 , 3 ) filter modTwo val greaterThan100 = Math . max ( 100 , _: Int ) greaterThan100 ( 200 ) Kotlin Currying and partially applied functions are not available in Kotlin Functions under the hood and Types Scala Abstract Types Higher-kinded Types Type Classes, Phantom Types Structural Types Specialized Types Dynamic Types Self-Types Union Types trait Function1 [ - T1 , + R ] extends AnyRef { def apply ( v1 : T1 ): R } Kotlin Identical approach for Kotlin Functions, counting up to Function22 like Scala Kotlin\u2019s type features are identical to Java with the addition of Variance (contra-, co- invariant) and Type Aliases interface Function1 < in P1 , out R > : Function < R > { operator fun invoke ( p1 : P1 ): R } Type Aliases Scala type IntToStringFun = Function1 [ Int , String ] Kotlin typealias IntToStringFun = Function1 < Int , String > Null Safety Optional Value Scala Scala solves optionality with the Option type, which is well adopted in Scala APIs case class Booking ( destination : Option [ Destination ] = None ) case class Destination ( hotel : Option [ Hotel ] = None ) case class Hotel ( name : String , stars : Option [ Int ] = None ) // The functional approach val bOpt = Some ( Booking ( Some ( Destination ( Some ( Hotel ( \"Sunset Paradise\" , Some ( 5 ))))))) var stars = \"*\" * bOpt . flatMap ( _ . destination ). flatMap ( _ . hotel ). flatMap ( _ . stars ). getOrElse ( 0 ) // or `for` expressions can be used to access optional values stars = \"*\" * ( for { booking <- bOpt dest <- booking . destination hotel <- dest . hotel stars <- hotel . stars } yield stars ). getOrElse ( 0 ) Kotlin solves optionality on the language level with Nullable types. Every type can also be a Nullable Type: Syntax: ? Kotlin class Booking ( val destination : Destination? = null ) class Destination ( val hotel : Hotel? = null ) class Hotel ( val name : String , val stars : Int? = null ) Since nullability is part of the type system no wrapper is needed: The required type or null can be used. val booking : Booking? = Booking ( Destination ( Hotel ( \"Sunset Paradise\" , 5 ))) // To safely access nullable types the ? can be used with ?: for the alternative case. val stars = \"*\" . repeat ( booking ?. destination ?. hotel ?. stars ?: 0 ) //-> \"*****\" // After checking for not null a type is \u2018smart casted\u2019 to its non-null type: here from Booking? to Booking if ( booking != null ) { println ( booking . destination ) } Nullable Types At first awkward, but eventually they are great to work with Less verbose than Options on the declaration and usage side Offers much better interoperability with Java than Scala Options Most loved feature in Kotlin! Pattern Matching Scala def matchItAll ( p : Any ): Any = { p match { case x : Int => s\" $ x \" // (1) case \"Scala\" => \"Scala\" // (2) case Seq ( _ , 3 , _* ) => \"Seq(?, 3, *)\" // (3) case head :: tail => s\" $ head $ tail \" // (4) case ( firstEl , _ ) => s\" $ firstEl \" // (5) case Some ( s : Long ) => s\"Some Long $ s \" // (6) case x : Int if 1 to 10 contains x => s\" $ x \" // (7) case x : String if x . endsWith ( \"!\" ) => s\" $ x \" // (8) case _ => \"The default\" // (9) } } Kotlin fun matchItAll ( p : Any? ): Any = when ( p ) { is Int -> \" $ p \" // Smart case to Int // (1) \u2705 \"Kotlin\" -> \"Kotlin\" // (2) \u2705 // N/A // (3) \u274c // N/A // (4) \u274c Pair ( \"literal\" , \"only\" ) -> \"...\" // (5) \ufe0f\ufe0f\ufe0f\ud83d\udd36 is Long? -> \"null or Long\" \ufe0f // (6) \ud83d\udd36 in 1. . 10 -> \"Value in 1..10\" // (7) \ud83d\udd36 // // (8) \ud83d\udd36 else -> \"The default\" // (9) \ud83d\udd36 when without arguments provides a more readable if else condition tree fun matchItAll ( p : Any? ): Any = when { p is String && p . endsWith ( \"!\" ) -> \" $ p \" else -> \"The default\" // No smart cast } Destructuring Scala case class Person ( name : String , age : Int ) val john = Person ( \"John\" , 42 ) val Person ( name , age ) = john // ... object Person { def unapply ( person : Person ): Option [( String , Int )] = Some (( person . name , person . age )) } Every class with an unapply method in Scala can be destructured. By default generated in case classes. Kotlin data class Person ( val name : String , val age : Int ) val john = Person ( \"John\" , 42 ) val ( name , age ) = john // // Kotlin support destructuring too. john . component1 () //-> John john . component2 () //-> 45 // ... fun component1 () = name fun component2 () = age For destructuring to work operator component<extractor-param-nr> methods need to be available, which are by default generated in data classes. Kotlin\u2019s when is no \u2018match\u2019 for Scala\u2019s Pattern Matching features No PartialFunctions support Destructuring allows not for Pattern Matching when is more of an advanced switch statement Composition Composition with Traits Scala abstract class Ship ( var health : Int = 100 ) trait Gun { val strength : Int = 1 def fireAt ( ship : Ship ) = { ship . health -= ( 1 * strength ) } } trait Medic { val lives : Int = 10 def repair ( ship : Ship ) = { ship . health += lives } } Scala traits allow mixing in state and behavior a.o. class Commander extends Ship () with Gun with Medic { val info = s\"Gun strength: $ strength , Medic capacity: $ lives \" } Besides state and behavior the mixed-in types are unified in the implementing class val commander = new Commander () commander . fireAt (...) commander . strength //-> 1 commander . isInstanceOf [ Gun ] //-> true commander . isInstanceOf [ Medic ] //-> true Composition with Delegation Kotlin abstract class Ship ( var health : Int = 100 ) interface Gun { val strength : Int fun fireAt ( ship : Ship ) { ship . health =- ( 1 * strength ) } } interface Medic { val lives : Int fun repair ( ship : Ship ) { ship . health =+ lives } } Using by , all public members of the given interface will be delegated to its implementation class LazerGun ( override val strength : Int = 5 ) : Gun class MinorRepair ( override val lives : Int = 10 ) : Medic class Commander ( gun : Gun , repair : Medic ): Ship (), Gun by gun , Medic by repair val commander = Commander ( LazerGun (), MinorRepair ()) commander . fireAt (...) // yielding more or less the same results like traits commander . strength // -> 5 commander is Gun // -> true commander is Medic // -> true Extensions Scala implicits are a (too?) powerful language feature which allows implementing a variety of patterns: Extensions for existing classes (implicit classes) Implicit contexts (implicit parameters) Implicit conversions (implicit methods) Type-classes (Context Bounds) Kotlin\u2019s extension mechanism is more limited and similar to: Extensions for existing classes Scala implicit class RichInt ( val value : Int ) extends AnyVal { def square = value * value } 2 . square //-> 4 Kotlin The syntax for an extension is: <type-to-extend>.methodName() {...} . The type to extend can also be a generic // this refers to the instance of the extended class fun Int . square (): Int = this * this 2. square () //-> 4 listOf ( 1 , 2 , 3 ). sum () // Convenience methods on Collections listOf ( \"a\" , \"a\" , \"a\" ). map { it . toUpperCase ()} // Higher-Order Functions \"hi\" . reversed () // Convenience methods on Collections File ( \"/tmp.txt\" ). useLines { lines -> lines . joinToString ( \" \" ) // Loans on IO APIs } val x : Int? = null x ?. let { it * it } ?: - 1 // counterpart of Scala\u2019s Option.map(...) Extensions ++ (Function types with receiver) Kotlin supports Function Types with Receiver which are the key ingredient for type safe builders and DSLs . Kotlin class PersonBuilder ( var name : String? = null , var age : Int? = null ) { fun toPerson () = Person ( name ?: \"John Doe\" , age ?: 0 ) } // Function Types with Receiver // read like: when invoking create() on PersonBuilder, the builder instance is provided fun person ( create : PersonBuilder .() -> Unit ): Person { val builder = PersonBuilder () builder . create () return builder . toPerson () } Consequently, DSL-like syntax can be used to create complex objects person { name = \"Super Trooper\" age = 42 } Example Spring\u2019s Routing DSL solely built on Extensions router { accept ( TEXT_HTML ). nest { GET ( \"/\" ) { ok (). render ( \"index\" ) } GET ( \"/sse\" ) { ok (). render ( \"sse\" ) } GET ( \"/users\" , userHandler :: findAllView ) } \"/api\" . nest { accept ( APPLICATION_JSON ). nest { GET ( \"/users\" , userHandler :: findAll ) } accept ( TEXT_EVENT_STREAM ). nest { GET ( \"/users\" , userHandler :: stream ) } } resources ( \"/**\" , ClassPathResource ( \"static/\" )) } Collections Scala created its own (very advanced) mutable, immutable and parallel collections Vector , List , Stream , Map , Set etc. Scala collections can be extended with little effort Interoperability with Java is achieved with implicit conversions scala.collection.JavaConversions Kotlin relies - for the time being - on Java collections with some additions: Builder methods: listOf(1,2,3) , mapOf(\"a\" to 1) Rich set of higher-order functions ( zip , windowed , fold ) Additions on numeric collections ( sum() , average() ) Immutable Views on mutable collections Collection Examples Scala // (1) Immutable coll. (default) val l = Seq ( 1 , 2 , 3 ) val l2 = l :+ 4 // l -> 1,2,3 // l 2 -> 1,2,3,4 // (2) Mutable coll. val ml = ListBuffer ( 1 , 2 , 3 ) ml :+ 4 // ml -> 1,2,3,4 // (3) Ranges ( 1 to 3 ). map ( _ + 1 ) // (4) Higher Order functions Map ( \"a\" -> 1 ). forall ( _ . _2 > 10 ) // true // (5) Advanced methods List ( 1 , 2 , 3 ). sliding ( 2 ) // List(List(1,2), List(2,3)) // (6) Conversion from coll. X->Y Set ( \"a\" -> 1 ). toMap // (7) Union List ( 1 , 2 ) ++ List ( 3 , 4 ) //1,2,3,4 Kotlin // (1) Immutable coll. (default) val l = listOf ( 1 , 2 , 3 ) val l2 = l + 4 // l -> 1,2,3 // l2 -> 1,2,3,4 // (2) Mutable coll. val ml = mutableListOf ( 1 , 2 , 3 ) ml + 4 //ml -> 1,2,3,4 // (3) Ranges ( 1. . 3 ). map { it + 1 } // (4) Higher Order functions mapOf ( \"a\" to 1 ). all { it . value > 10 } // true // (5) Advanced methods listOf ( 1 , 2 , 3 ). windowed ( 2 ) // List(List(1,2), List(2,3)) // (6) Conversion from coll. X->Y setOf ( \"a\" to 1 ). toMap () // (7) Union listOf ( 1 , 2 ) + listOf ( 3 , 4 ) // 1,2,3,4 Concurrency Scala Futures Sequential Programming\u2026 def temperatureIn ( city : String ): Int = Random . nextInt ( 30 ) val ams = temperatureIn ( \"Amsterdam\" ) val zrh = temperatureIn ( \"Zurich\" ) println ( s\"AMS: ${ ams } ZRH: ${ zrh } \" ) //AMS: 24 ZRH: 26 Async on the other hand\u2026 Futures, Streams and Actors are the common building blocks for concurrency in Scala def temperatureIn ( city : String ): Future [ Int ] = Future { Thread . sleep ( 1000 ) Random . nextInt ( 30 ) } val amsFuture = temperatureIn ( \"Amsterdam\" ) val zrhFuture = temperatureIn ( \"Zurich\" ) // Since they are libraries - and not language features - // they force you to tightly bind your code to their API and abstractions. val temperatures = amsFuture . flatMap ( ams => zrhFuture . map ( zrh => s\"AMS: ${ ams } ZRH: ${ zrh } \" ) ) println ( Await . result ( temperatures , 5 seconds )) //AMS: 24 ZRH: 26 The business intent of my code gets lost in all the \u2018combinator jungle\u2019 Kotlin Coroutines Kotlin Coroutines to the rescue The concurrency building blocks of Kotlin rely on Coroutines. With Coroutines logic can be expressed sequentially whereas the underlying implementation figures out the asynchrony. // A method marked suspend can be run within a coroutine that can suspend it without blocking a Thread suspend fun temperatureIn ( city : String ): Int { delay ( 1000 ) return Random (). nextInt ( 30 ) } // To start a coroutine at least one suspending function is required (here async) val ams = async { temperatureIn ( \"Amsterdam\" ) } val zrh = async { temperatureIn ( \"Zurich\" ) } // await suspends the coroutine until some computation is done and returns the result println ( \"AMS: ${ ams . await () } ZRH: ${ zrh . await () } \" ) //AMS: 24 ZRH: 26 Kotlin Coroutines under the hood suspend fun temperatureIn ( city : String ): Int { delay ( 1000 ) return Random (). nextInt ( 30 ) } suspend methods get an additional Continuation parameter compiled in // Java Object temperatureIn ( String city , Continuation < Int > cont ){...} Continuation is a callback interface used by the underlying async processor public interface Continuation < in T > { public val context : CoroutineContext public fun resume ( value : T ) public fun resumeWithException ( exception : Throwable ) } Kotlin Coroutines Interoperability public CompletableFuture < Integer > temperatureIn ( String city ) { return CompletableFuture . supplyAsync (() -> { return new Random (). nextInt ( 30 ); }); } suspend fun < T > CompletableFuture < T > . await (): T = suspendCoroutine < T > { cont : Continuation < T > -> whenComplete { result , exception -> if ( exception == null ) // the future has been completed normally cont . resume ( result ) else // the future has completed with an exception cont . resumeWithException ( exception ) } } Kotlin\u2019s coroutine integration library offers suspended extension methods that \u2018lift\u2019 other concurrency abstractions into coroutines Some final words on Coroutines Kotlin Coroutines is not a new concept. It already exists in a variety of languages: async/await in C#, ECMAScript channels and select in Go generators/yield in C# and Python Besides basic Coroutines Kotlin also supports: channels for stateless communication between Coroutines actors for stateful communication between Coroutines Scala scala/scala-async","title":"Scala vs Kotlin"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#scala-vs-kotlin","text":"| java | kotlin | vs | comparison | This page is just collection of notes from \u201cKotlin vs Scala\u201d by Urs Peter & Joost Heijkoop Object Orientation Class Comparing OO between Inheritance Value Classes Functional Programming Declaring and Calling Functions Curring and partially applied functions Functions under the hood and Types Type Aliases Null Safety Optional Value Nullable Types Pattern Matching Destructuring Composition Composition with Traits Composition with Delegation Extensions Extensions ++ (Function types with receiver) Collections Collection Examples Concurrency Scala Futures Kotlin Coroutines Kotlin Coroutines to the rescue Kotlin Coroutines under the hood Kotlin Coroutines Interoperability Some final words on Coroutines","title":"Scala vs Kotlin"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#object-orientation","text":"","title":"Object Orientation"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#class","text":"Scala class Person ( val name : String , var age : Int = 0 ) Kotlin class Person ( val name : String , var age : Int = 0 )","title":"Class"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#comparing-oo-between","text":"Scala class Person ( var name : String , var age : Int = 0 ) extends Ordered [ Person ] { def sayHi (): String = { \"Hi\" } override def compare ( other : Person ): Int = age - other . age def + ( lifetime : Int ): Person = { age += lifetime this } } object Person { def newBorn ( name : String ) = new Person ( name , 0 ) def apply () = new Person ( \"John Doe\" , - 1 ) } Kotlin class Person ( var name : String , var age : Int = 0 ): Comparable < Person > { fun sayHi (): String { return \"Hi\" } operator fun plus ( lifetime : Int ): Person { age += lifetime return this } override operator fun compareTo ( p : Person ) = age - p . age companion object { fun newBorn ( name : String ) = Person ( name ) operator fun invoke () = Person ( \"John Doe\" ) } }","title":"Comparing OO between"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#inheritance","text":"Scala class Species ( val kind : String ) { def eats : Seq [ String ] = Seq () } class Person ( val name : String , var age : Int ) extends Species ( \"Homo Sapiens\" ) { override def eats : Seq [ String ] = Seq ( \"...\" ) } Kotlin open class Species ( val kind : String ) { open fun eats (): List < String > = emptyList () } class Person ( val name : String , var age : Int = 0 ): Species ( \"Homo Sapiens\" ) { override fun eats (): List < String > = listOf ( \"...\" ) }","title":"Inheritance"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#value-classes","text":"Scala case class Person ( name : String , var age : Int = 0 ) Kotlin data class Person ( val name : String , var age : Int = 0 ) val jack = Person ( \"Jack\" , 42 ) // jack: Person(name=Jack, age=32) jack == Person ( \"Jack\" , 42 ) // res1: true val fred = jack . copy ( name = \"Fred\" ) // fred: Person(name=Jack, age=32)","title":"Value Classes"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#functional-programming","text":"","title":"Functional Programming"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#declaring-and-calling-functions","text":"Scala def doWithText ( path : File , transFun : ( String ) => String ): String = transFun ( FileUtils . readFileToString ( path )) doWithText ( new File ( \"/news.txt\" ), txt => txt . toUpperCase ()) doWithText ( new File ( \"/news.txt\" ), _ . toUpperCase ()) def writeToFile ( file : File , block : => String ) { if ( file . isFile ) FileUtils . writeStringToFile ( file , block ) } writeToFile ( new File ( \"/srocks.txt\" ), \"Scala rocks! \" * 1000 ) Kotlin fun doWithText ( path : File , transFun : ( String ) -> String ): String = transFun ( FileUtils . readFileToString ( path )) // On the call-side a function must be wrapped within {} doWithText ( File ( \"/text.txt\" )){ txt -> txt . toUpperCase () } // it serves as placeholder of the function parameter. doWithText ( File ( \"/text.txt\" )){ it . toUpperCase () } // Kotlin supports no-argument functions, similar to Scala\u2019s call-by name arguments fun writeToFile ( file : File , block : () -> String ) { if ( file . isFile ) FileUtils . writeStringToFile ( file , block ()) } // On the call-side the empty argument and arrow can be omitted writeToFile ( File ( \"/krocks.txt\" )){ \"Kotlin rocks! \" . repeat ( 1000 )}","title":"Declaring and Calling Functions"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#curring-and-partially-applied-functions","text":"Scala def modN ( n : Int )( x : Int ) = (( x % n ) == 0 ) val modTwo = modN ( 2 )( _ ) Seq ( 1 , 2 , 3 ) filter modTwo val greaterThan100 = Math . max ( 100 , _: Int ) greaterThan100 ( 200 ) Kotlin Currying and partially applied functions are not available in Kotlin","title":"Curring and partially applied functions"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#functions-under-the-hood-and-types","text":"Scala Abstract Types Higher-kinded Types Type Classes, Phantom Types Structural Types Specialized Types Dynamic Types Self-Types Union Types trait Function1 [ - T1 , + R ] extends AnyRef { def apply ( v1 : T1 ): R } Kotlin Identical approach for Kotlin Functions, counting up to Function22 like Scala Kotlin\u2019s type features are identical to Java with the addition of Variance (contra-, co- invariant) and Type Aliases interface Function1 < in P1 , out R > : Function < R > { operator fun invoke ( p1 : P1 ): R }","title":"Functions under the hood and Types"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#type-aliases","text":"Scala type IntToStringFun = Function1 [ Int , String ] Kotlin typealias IntToStringFun = Function1 < Int , String >","title":"Type Aliases"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#null-safety","text":"","title":"Null Safety"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#optional-value","text":"Scala Scala solves optionality with the Option type, which is well adopted in Scala APIs case class Booking ( destination : Option [ Destination ] = None ) case class Destination ( hotel : Option [ Hotel ] = None ) case class Hotel ( name : String , stars : Option [ Int ] = None ) // The functional approach val bOpt = Some ( Booking ( Some ( Destination ( Some ( Hotel ( \"Sunset Paradise\" , Some ( 5 ))))))) var stars = \"*\" * bOpt . flatMap ( _ . destination ). flatMap ( _ . hotel ). flatMap ( _ . stars ). getOrElse ( 0 ) // or `for` expressions can be used to access optional values stars = \"*\" * ( for { booking <- bOpt dest <- booking . destination hotel <- dest . hotel stars <- hotel . stars } yield stars ). getOrElse ( 0 ) Kotlin solves optionality on the language level with Nullable types. Every type can also be a Nullable Type: Syntax: ? Kotlin class Booking ( val destination : Destination? = null ) class Destination ( val hotel : Hotel? = null ) class Hotel ( val name : String , val stars : Int? = null ) Since nullability is part of the type system no wrapper is needed: The required type or null can be used. val booking : Booking? = Booking ( Destination ( Hotel ( \"Sunset Paradise\" , 5 ))) // To safely access nullable types the ? can be used with ?: for the alternative case. val stars = \"*\" . repeat ( booking ?. destination ?. hotel ?. stars ?: 0 ) //-> \"*****\" // After checking for not null a type is \u2018smart casted\u2019 to its non-null type: here from Booking? to Booking if ( booking != null ) { println ( booking . destination ) }","title":"Optional Value"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#pattern-matching","text":"Scala def matchItAll ( p : Any ): Any = { p match { case x : Int => s\" $ x \" // (1) case \"Scala\" => \"Scala\" // (2) case Seq ( _ , 3 , _* ) => \"Seq(?, 3, *)\" // (3) case head :: tail => s\" $ head $ tail \" // (4) case ( firstEl , _ ) => s\" $ firstEl \" // (5) case Some ( s : Long ) => s\"Some Long $ s \" // (6) case x : Int if 1 to 10 contains x => s\" $ x \" // (7) case x : String if x . endsWith ( \"!\" ) => s\" $ x \" // (8) case _ => \"The default\" // (9) } } Kotlin fun matchItAll ( p : Any? ): Any = when ( p ) { is Int -> \" $ p \" // Smart case to Int // (1) \u2705 \"Kotlin\" -> \"Kotlin\" // (2) \u2705 // N/A // (3) \u274c // N/A // (4) \u274c Pair ( \"literal\" , \"only\" ) -> \"...\" // (5) \ufe0f\ufe0f\ufe0f\ud83d\udd36 is Long? -> \"null or Long\" \ufe0f // (6) \ud83d\udd36 in 1. . 10 -> \"Value in 1..10\" // (7) \ud83d\udd36 // // (8) \ud83d\udd36 else -> \"The default\" // (9) \ud83d\udd36 when without arguments provides a more readable if else condition tree fun matchItAll ( p : Any? ): Any = when { p is String && p . endsWith ( \"!\" ) -> \" $ p \" else -> \"The default\" // No smart cast }","title":"Pattern Matching"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#destructuring","text":"Scala case class Person ( name : String , age : Int ) val john = Person ( \"John\" , 42 ) val Person ( name , age ) = john // ... object Person { def unapply ( person : Person ): Option [( String , Int )] = Some (( person . name , person . age )) } Every class with an unapply method in Scala can be destructured. By default generated in case classes. Kotlin data class Person ( val name : String , val age : Int ) val john = Person ( \"John\" , 42 ) val ( name , age ) = john // // Kotlin support destructuring too. john . component1 () //-> John john . component2 () //-> 45 // ... fun component1 () = name fun component2 () = age For destructuring to work operator component<extractor-param-nr> methods need to be available, which are by default generated in data classes. Kotlin\u2019s when is no \u2018match\u2019 for Scala\u2019s Pattern Matching features No PartialFunctions support Destructuring allows not for Pattern Matching when is more of an advanced switch statement","title":"Destructuring"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#composition","text":"","title":"Composition"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#composition-with-traits","text":"Scala abstract class Ship ( var health : Int = 100 ) trait Gun { val strength : Int = 1 def fireAt ( ship : Ship ) = { ship . health -= ( 1 * strength ) } } trait Medic { val lives : Int = 10 def repair ( ship : Ship ) = { ship . health += lives } } Scala traits allow mixing in state and behavior a.o. class Commander extends Ship () with Gun with Medic { val info = s\"Gun strength: $ strength , Medic capacity: $ lives \" } Besides state and behavior the mixed-in types are unified in the implementing class val commander = new Commander () commander . fireAt (...) commander . strength //-> 1 commander . isInstanceOf [ Gun ] //-> true commander . isInstanceOf [ Medic ] //-> true","title":"Composition with Traits"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#composition-with-delegation","text":"Kotlin abstract class Ship ( var health : Int = 100 ) interface Gun { val strength : Int fun fireAt ( ship : Ship ) { ship . health =- ( 1 * strength ) } } interface Medic { val lives : Int fun repair ( ship : Ship ) { ship . health =+ lives } } Using by , all public members of the given interface will be delegated to its implementation class LazerGun ( override val strength : Int = 5 ) : Gun class MinorRepair ( override val lives : Int = 10 ) : Medic class Commander ( gun : Gun , repair : Medic ): Ship (), Gun by gun , Medic by repair val commander = Commander ( LazerGun (), MinorRepair ()) commander . fireAt (...) // yielding more or less the same results like traits commander . strength // -> 5 commander is Gun // -> true commander is Medic // -> true","title":"Composition with Delegation"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#extensions","text":"Scala implicits are a (too?) powerful language feature which allows implementing a variety of patterns: Extensions for existing classes (implicit classes) Implicit contexts (implicit parameters) Implicit conversions (implicit methods) Type-classes (Context Bounds) Kotlin\u2019s extension mechanism is more limited and similar to: Extensions for existing classes Scala implicit class RichInt ( val value : Int ) extends AnyVal { def square = value * value } 2 . square //-> 4 Kotlin The syntax for an extension is: <type-to-extend>.methodName() {...} . The type to extend can also be a generic // this refers to the instance of the extended class fun Int . square (): Int = this * this 2. square () //-> 4 listOf ( 1 , 2 , 3 ). sum () // Convenience methods on Collections listOf ( \"a\" , \"a\" , \"a\" ). map { it . toUpperCase ()} // Higher-Order Functions \"hi\" . reversed () // Convenience methods on Collections File ( \"/tmp.txt\" ). useLines { lines -> lines . joinToString ( \" \" ) // Loans on IO APIs } val x : Int? = null x ?. let { it * it } ?: - 1 // counterpart of Scala\u2019s Option.map(...)","title":"Extensions"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#extensions-function-types-with-receiver","text":"Kotlin supports Function Types with Receiver which are the key ingredient for type safe builders and DSLs . Kotlin class PersonBuilder ( var name : String? = null , var age : Int? = null ) { fun toPerson () = Person ( name ?: \"John Doe\" , age ?: 0 ) } // Function Types with Receiver // read like: when invoking create() on PersonBuilder, the builder instance is provided fun person ( create : PersonBuilder .() -> Unit ): Person { val builder = PersonBuilder () builder . create () return builder . toPerson () } Consequently, DSL-like syntax can be used to create complex objects person { name = \"Super Trooper\" age = 42 } Example Spring\u2019s Routing DSL solely built on Extensions router { accept ( TEXT_HTML ). nest { GET ( \"/\" ) { ok (). render ( \"index\" ) } GET ( \"/sse\" ) { ok (). render ( \"sse\" ) } GET ( \"/users\" , userHandler :: findAllView ) } \"/api\" . nest { accept ( APPLICATION_JSON ). nest { GET ( \"/users\" , userHandler :: findAll ) } accept ( TEXT_EVENT_STREAM ). nest { GET ( \"/users\" , userHandler :: stream ) } } resources ( \"/**\" , ClassPathResource ( \"static/\" )) }","title":"Extensions ++ (Function types with receiver)"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#collections","text":"Scala created its own (very advanced) mutable, immutable and parallel collections Vector , List , Stream , Map , Set etc. Scala collections can be extended with little effort Interoperability with Java is achieved with implicit conversions scala.collection.JavaConversions Kotlin relies - for the time being - on Java collections with some additions: Builder methods: listOf(1,2,3) , mapOf(\"a\" to 1) Rich set of higher-order functions ( zip , windowed , fold ) Additions on numeric collections ( sum() , average() ) Immutable Views on mutable collections","title":"Collections"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#collection-examples","text":"Scala // (1) Immutable coll. (default) val l = Seq ( 1 , 2 , 3 ) val l2 = l :+ 4 // l -> 1,2,3 // l 2 -> 1,2,3,4 // (2) Mutable coll. val ml = ListBuffer ( 1 , 2 , 3 ) ml :+ 4 // ml -> 1,2,3,4 // (3) Ranges ( 1 to 3 ). map ( _ + 1 ) // (4) Higher Order functions Map ( \"a\" -> 1 ). forall ( _ . _2 > 10 ) // true // (5) Advanced methods List ( 1 , 2 , 3 ). sliding ( 2 ) // List(List(1,2), List(2,3)) // (6) Conversion from coll. X->Y Set ( \"a\" -> 1 ). toMap // (7) Union List ( 1 , 2 ) ++ List ( 3 , 4 ) //1,2,3,4 Kotlin // (1) Immutable coll. (default) val l = listOf ( 1 , 2 , 3 ) val l2 = l + 4 // l -> 1,2,3 // l2 -> 1,2,3,4 // (2) Mutable coll. val ml = mutableListOf ( 1 , 2 , 3 ) ml + 4 //ml -> 1,2,3,4 // (3) Ranges ( 1. . 3 ). map { it + 1 } // (4) Higher Order functions mapOf ( \"a\" to 1 ). all { it . value > 10 } // true // (5) Advanced methods listOf ( 1 , 2 , 3 ). windowed ( 2 ) // List(List(1,2), List(2,3)) // (6) Conversion from coll. X->Y setOf ( \"a\" to 1 ). toMap () // (7) Union listOf ( 1 , 2 ) + listOf ( 3 , 4 ) // 1,2,3,4","title":"Collection Examples"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#concurrency","text":"","title":"Concurrency"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#scala-futures","text":"Sequential Programming\u2026 def temperatureIn ( city : String ): Int = Random . nextInt ( 30 ) val ams = temperatureIn ( \"Amsterdam\" ) val zrh = temperatureIn ( \"Zurich\" ) println ( s\"AMS: ${ ams } ZRH: ${ zrh } \" ) //AMS: 24 ZRH: 26 Async on the other hand\u2026 Futures, Streams and Actors are the common building blocks for concurrency in Scala def temperatureIn ( city : String ): Future [ Int ] = Future { Thread . sleep ( 1000 ) Random . nextInt ( 30 ) } val amsFuture = temperatureIn ( \"Amsterdam\" ) val zrhFuture = temperatureIn ( \"Zurich\" ) // Since they are libraries - and not language features - // they force you to tightly bind your code to their API and abstractions. val temperatures = amsFuture . flatMap ( ams => zrhFuture . map ( zrh => s\"AMS: ${ ams } ZRH: ${ zrh } \" ) ) println ( Await . result ( temperatures , 5 seconds )) //AMS: 24 ZRH: 26 The business intent of my code gets lost in all the \u2018combinator jungle\u2019","title":"Scala Futures"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#kotlin-coroutines","text":"","title":"Kotlin Coroutines"},{"location":"blog/2019/2019-04-28-scala-vs-kotlin/#some-final-words-on-coroutines","text":"Kotlin Coroutines is not a new concept. It already exists in a variety of languages: async/await in C#, ECMAScript channels and select in Go generators/yield in C# and Python Besides basic Coroutines Kotlin also supports: channels for stateless communication between Coroutines actors for stateful communication between Coroutines Scala scala/scala-async","title":"Some final words on Coroutines"},{"location":"blog/2019/2019-09-26-scala-best-practices/","text":"Scala Best Practices | scala | Here is a small collection of Scala best practices. References Scala Best Practices by Nicolas Rinaudo Slides: Scala Best Practices I Wish Someone\u2019d Told Me About Scala Best Practices by Alexandru Nedelcu Strategic Scala Style: Principle of Least Power by Li Haoyi Wartremover A flexible Scala linter , Built-in Warts Effective Scala by Marius Eriksen SO: What is the advantage of using abstract classes instead of traits? , see answer by Eugene Yokota Safari: Best Practices in Scala Programming by Joshua Backfield Effective Scala: Reloaded! by Mirco Dotta Effective Scala - Recommendations for a Pleasant Scala Experience","title":"Scala Best Practices"},{"location":"blog/2019/2019-09-26-scala-best-practices/#scala-best-practices","text":"| scala | Here is a small collection of Scala best practices.","title":"Scala Best Practices"},{"location":"blog/2019/2019-09-26-scala-best-practices/#references","text":"Scala Best Practices by Nicolas Rinaudo Slides: Scala Best Practices I Wish Someone\u2019d Told Me About Scala Best Practices by Alexandru Nedelcu Strategic Scala Style: Principle of Least Power by Li Haoyi Wartremover A flexible Scala linter , Built-in Warts Effective Scala by Marius Eriksen SO: What is the advantage of using abstract classes instead of traits? , see answer by Eugene Yokota Safari: Best Practices in Scala Programming by Joshua Backfield Effective Scala: Reloaded! by Mirco Dotta Effective Scala - Recommendations for a Pleasant Scala Experience","title":"References"},{"location":"blog/2019/2019-09-27-gof-in-scala/","text":"Design Patterns in Scala/FP Java | scala | java | References Old Design Patterns in Scala by Li Haoyi SO: which GOF Design pattern(s) has entirely different implementation (java vs Scala) Youtube: \u201cg\u2218f patterns\u201d by Mario Fusco , and related source code Youtube: The Interpreter Pattern Revisited by R\u00fanar Bjarnason","title":"Design Patterns in Scala/FP Java"},{"location":"blog/2019/2019-09-27-gof-in-scala/#design-patterns-in-scalafp-java","text":"| scala | java |","title":"Design Patterns in Scala/FP Java"},{"location":"blog/2019/2019-09-27-gof-in-scala/#references","text":"Old Design Patterns in Scala by Li Haoyi SO: which GOF Design pattern(s) has entirely different implementation (java vs Scala) Youtube: \u201cg\u2218f patterns\u201d by Mario Fusco , and related source code Youtube: The Interpreter Pattern Revisited by R\u00fanar Bjarnason","title":"References"},{"location":"blog/2019/2019-09-30-python-bad-practices/","text":"Python Bad Practices | python | I\u2019ve been using Python as scripting language on a non-regular basis. It means I can (I possibly do) write non-idiomatic Python code. I\u2019ve decided to collect in one place popular Python anti-patterns and bad practices to avoid them. References Original sources Python standard library 1 - Collections 1.1 - Iterate over a list 1.2 - Iterate over a list in reverse order 1.3 - Access the last element in a list 1.4 - Use sequence unpacking 1.5 - Use lists comprehensions 1.6 - Use enumerate function 1.7 - Use keys to sort list 1.8 - Use all/any functions 1.9 - Dictionaries: avoid using keys() function 1.10 - Dictionaries: Iterate over keys and values 1.11 - Use dictionaries comprehension 1.12 - Use namedtuple instead of simple class 1.13 - Use defaultdict and/or Counter 1.14 - Modifying a list while iterating over it 2 - Functions 2.1 - Mutable Default Args 2.2 - Generally using lambdas 3 - Variables 3.1 - Misunderstanding Python scope rules 3.2 - Confusing how Python binds variables in closures 3.3 - Variable naming 3.4 - Identifying variable types with prefixes 4 - Classes 4.1 - Implementing Java-style getters and setters 4.2 - Using property setters as action methods 5 - Exceptions 5.1 - Passing Generic Exceptions silently References Original sources Python Patterns (see src ) The Little Book of Python Anti-Patterns (see src ) Python Data Structures Idioms by Ivan Mushketyk Buggy Python Code: The 10 Most Common Mistakes That Python Developers Make by Martin Chikilian Youtube: 5 Common Python Mistakes and How to Fix Them by Corey Schafer Python Worst Practices by Daniel Greenfeld What the f*ck Python! \ud83d\ude31 Python standard library all any range enumerate sorted zip collections.namedtuple collections.defaultdict collections.Counter 1 - Collections 1.1 - Iterate over a list Ref: [ 3 ] Very Bad l = [ 1 , 2 , 3 , 4 , 5 ] i = 0 while i < len ( l ): print ( l [ i ]) i += 1 Bad for i in range ( len ( l )): print ( l [ i ]) Good for v in l : print ( v ) 1.2 - Iterate over a list in reverse order Ref: [ 3 ] Bad for i in range ( len ( l ) - 1 , - 1 , - 1 ): print ( l [ i ]) Good for i in reversed ( l ): print ( i ) 1.3 - Access the last element in a list Ref: [ 3 ] Bad l = [ 1 , 2 , 3 , 4 , 5 ] >>> l [ len ( l ) - 1 ] 5 Good >>> l [ - 1 ] 5 >>> l [ - 2 ] 4 >>> l [ - 3 ] 3 1.4 - Use sequence unpacking Ref: [ 3 ] Bad l1 = l [ 0 ] l2 = l [ 1 ] l3 = l [ 2 ] Good l1 , l2 , l3 = [ 1 , 2 , 3 ] >>> l1 1 >>> l2 2 >>> l3 3 1.5 - Use lists comprehensions Ref: [ 3 ] Bad under_18_grades = [] for grade in grades : if grade . age <= 18 : under_18_grades . append ( grade ) Good under_18_grades = [ grade for grade in grades if grade . age <= 18 ] 1.6 - Use enumerate function Ref: [ 3, 6 ] Sample 1 Bad for i in range ( len ( menu_items )): menu_items = menu_items [ i ] print ( \" {} . {} \" . format ( i , menu_items )) Good for i , menu_items in enumerate ( menu_items ): print ( \" {} . {} \" . format ( i , menu_items )) Sample 2 Bad foo = [ 1 , 2 , 3 ] for i , item in zip ( range ( len ( foo )), foo ): print i , item Good foo = [ 1 , 2 , 3 ] for i , item in enumerate ( foo ): print i , item 1.7 - Use keys to sort list Ref: [ 3 ] people = [ Person ( 'John' , 30 ), Person ( 'Peter' , 28 ), Person ( 'Joe' , 42 )] Bad def compare_people ( p1 , p2 ): if p1 . age < p2 . age : return - 1 if p1 . age > p2 . age : return 1 return 0 sorted ( people , cmp = compare_people ) [ Person ( name = 'Peter' , age = 28 ), Person ( name = 'John' , age = 30 ), Person ( name = 'Joe' , age = 42 )] Good sorted ( people , key = lambda p : p . age ) [ Person ( name = 'Peter' , age = 28 ), Person ( name = 'John' , age = 30 ), Person ( name = 'Joe' , age = 42 )] 1.8 - Use all/any functions Ref: [ 3 ] Bad def all_true ( lst ): for v in lst : if not v : return False return True Good all ([ True , False ]) >> False any ([ True , False ]) >> True all ([ person . age > 18 for person in people ]) # or generator all ( person . age > 18 for person in people ) 1.9 - Dictionaries: avoid using keys() function Ref: [ 3 ] Bad for k in d . keys (): print ( k ) Good for k in d : print ( k ) 1.10 - Dictionaries: Iterate over keys and values Ref: [ 3 ] Bad for k in d : v = d [ k ] print ( k , v ) Good for k , v in d . items (): print ( k , v ) 1.11 - Use dictionaries comprehension Ref: [ 3 ] Bad d = {} for person in people : d [ person . name ] = person Good d = { person . name : person for person in people } 1.12 - Use namedtuple instead of simple class Ref: [ 3 ] Bad class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y Good from collections import namedtuple Point = namedtuple ( 'Point' , [ 'x' , 'y' ]) In addition namedtuple implements __str__ , __repr__ , and __eq__ methods: >>> Point ( 1 , 2 ) Point ( x = 1 , y = 2 ) >>> Point ( 1 , 2 ) == Point ( 1 , 2 ) True 1.13 - Use defaultdict and/or Counter Ref: [ 3 ] We need to count a number of times an element is encountered in a collection Bad d = {} for v in lst : if v not in d : d [ v ] = 1 else : d [ v ] += 1 Good >>> d = defaultdict ( lambda : 42 ) >>> d [ 'key' ] 42 from collections import defaultdict d = defaultdict ( int ) for v in lst : d [ v ] += 1 Good from collections import Counter >>> counter = Counter ( lst ) >>> counter Counter ({ 4 : 3 , 1 : 2 , 2 : 1 , 3 : 1 , 5 : 1 }) 1.14 - Modifying a list while iterating over it Ref: [ 4 ] Bad >>> odd = lambda x : bool ( x % 2 ) >>> numbers = [ n for n in range ( 10 )] >>> for i in range ( len ( numbers )): ... if odd ( numbers [ i ]): ... del numbers [ i ] # BAD: Deleting item from a list while iterating over it ... Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > IndexError : list index out of range Good >>> odd = lambda x : bool ( x % 2 ) >>> numbers = [ n for n in range ( 10 )] >>> numbers [:] = [ n for n in numbers if not odd ( n )] # ahh, the beauty of it all >>> numbers [ 0 , 2 , 4 , 6 , 8 ] 2 - Functions 2.1 - Mutable Default Args Ref: [ 4, 5 ] Bad def foo ( bar = []): # bar is optional and defaults to [] if not specified bar . append ( \"baz\" ) return bar >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" , \"baz\" ] >>> foo () [ \"baz\" , \"baz\" , \"baz\" ] The default value for a function argument is only evaluated once, at the time that the function is defined. Thus, the bar argument is initialized to its default (i.e., an empty list) only when foo() is first defined, but then calls to foo() (i.e., without a bar argument specified) will continue to use the same list to which bar was originally initialized. Good def foo ( bar = None ): if bar is None : # or if not bar: bar = [] bar . append ( \"baz\" ) return bar >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" ] 2.2 - Generally using lambdas Ref: [ 6 ] Bad Too many characters on one line Lambdas by design does not have docstrings Does not necessarily mean less characters I can\u2019t get this sample to work! swap = lambda a , x , y : lambda f = a . __setitem__ : ( f ( x , ( a [ x ], a [ y ])), f ( y , a [ x ][ 0 ]), f ( x , a [ x ][ 1 ]))() Good Doc strings that show up nicely in help/Sphinx Easier to read In Python, functions are first class objects Whenever possible avoid using lambdas def swap ( a , x , y ): \"\"\" Swap two position values in a list \"\"\" a [ x ], a [ y ] = a [ y ], a [ x ] 3 - Variables 3.1 - Misunderstanding Python scope rules Ref: [ 4 ] Python scoping: understanding LEGB Python Frequently Asked Questions: Why am I getting an UnboundLocalError when the variable has a value? Sample 1 Bad def func1 ( param = None ): def func2 (): if not param : param = 'default' print param # Just return func2. return func2 if __name__ == '__main__' : func1 ( 'test' )() $ python test . py Traceback ( most recent call last ): File \"test.py\" , line 11 , in func1 ( 'test' )() File \"test.py\" , line 3 , in func2 if not param : UnboundLocalError : local variable 'param' referenced before assignment Good def func1 ( param = None ): def func2 ( param2 = param ): if not param2 : param2 = 'default' print param2 # Just return func2. return func2 Sample 2 Bad >>> x = 10 >>> def foo (): ... x += 1 ... print x ... >>> foo () Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 2 , in foo UnboundLocalError : local variable 'x' referenced before assignment >>> lst = [ 1 , 2 , 3 ] >>> def foo1 (): ... lst . append ( 5 ) # This works ok... ... >>> foo1 () >>> lst [ 1 , 2 , 3 , 5 ] >>> lst = [ 1 , 2 , 3 ] >>> def foo2 (): ... lst += [ 5 ] # ... but this bombs! ... >>> foo2 () Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"<stdin>\" , line 2 , in foo UnboundLocalError : local variable 'lst' referenced before assignment 3.2 - Confusing how Python binds variables in closures Ref: [ 4 ] Bad >>> def create_multipliers (): ... return [ lambda x : i * x for i in range ( 5 )] >>> for multiplier in create_multipliers (): ... print multiplier ( 2 ) ... Expected 0 2 4 6 8 Actual 8 8 8 8 8 Good >>> def create_multipliers (): ... return [ lambda x , i = i : i * x for i in range ( 5 )] ... >>> for multiplier in create_multipliers (): ... print multiplier ( 2 ) ... 0 2 4 6 8 3.3 - Variable naming Ref: [ 6 ] Bad object = MyObject () map = Map () zip = 90213 # common US developer mistake id = 34 # I still fight this one Good obj = MyObject () # necessary abbreviation object_ = MyObject () # Underscore so we don't overwrite map_obj = Map () # combine name w/necessary abbreviation map_ = Map () zip_code = 90213 # Explicit name with US focus postal_code = 90213 # i18n explicit name zip_ = 90213 pk = 34 # pk is often synonymous with id id_ = 34 3.4 - Identifying variable types with prefixes Ref: [ 6 ] Bad c = \"green\" a = False p = 20 t = \"04/20/2011\" clr = \"green\" ctv = False pythnYrs = 20 pthnFrstSd = \"04/20/2011\" strColor = \"green\" boolActive = False intPythonYears = 20 dtPythonFirstUsed = \"04/20/2011\" Good color = \"green\" active = False python_years = 20 python_first_used = \"04/20/2011\" 4 - Classes 4.1 - Implementing Java-style getters and setters Ref: [ 6 ] Bad import logging log = logging . getLogger () class JavaStyle : \"\"\" Quiz: what else am I doing wrong here? \"\"\" def __init__ ( self ): self . name = \"\" def get_name ( self ): return self . name def set_name ( self , name ): log . debug ( \"Setting the name to %s \" % name ) if isinstance ( name , str ): self . name = name else : raise TypeError () if __name__ == \"__main__\" : j = JavaStyle () j . set_name ( \"pydanny did this back in 2006!\" ) print ( j . get_name ()) Good import logging log = logging . getLogger () class PythonStyle ( object ): def __init__ ( self ): self . _name = \"\" @property def name ( self ): return self . _name @name . setter def name ( self , value ): \"\"\" Because name is probably a string we'll assume that we can infer the type from the variable name\"\"\" log . debug ( \"Setting the name to %s \" % value ) self . _name = value if __name__ == \"__main__\" : p = PythonStyle () p . name = \"pydanny doing it the right way\" print ( p . name ) 4.2 - Using property setters as action methods Ref: [ 6 ] Bad class WebService : @property def connect ( self ): self . proxy = xmlrpc . Server ( \"http://service.xml\" ) if __name__ == '__main__' : ws = WebService () ws . connect Good class WebService : def connect ( self ): self . proxy = xmlrpc . Server ( \"http://service.xml\" ) if __name__ == '__main__' : ws = WebService () ws . connect () 5 - Exceptions 5.1 - Passing Generic Exceptions silently Ref: [ 6 ] Bad try : do_akshun ( value ) except : pass Good Use specific exceptions and/or logging class AkshunDoesNotDo ( Exception ): \"\"\" Custom exceptions makes for maintainable code \"\"\" pass try : do_akshun ( value ) except AttributeError as e : log . info ( \"Can I get attribution for these slides?\" ) do_bakup_akshun ( vlue ) except Exception as e : log . debug ( str ( e )) raise AkshunDoesNotDo ( e )","title":"Python Bad Practices"},{"location":"blog/2019/2019-09-30-python-bad-practices/#python-bad-practices","text":"| python | I\u2019ve been using Python as scripting language on a non-regular basis. It means I can (I possibly do) write non-idiomatic Python code. I\u2019ve decided to collect in one place popular Python anti-patterns and bad practices to avoid them. References Original sources Python standard library 1 - Collections 1.1 - Iterate over a list 1.2 - Iterate over a list in reverse order 1.3 - Access the last element in a list 1.4 - Use sequence unpacking 1.5 - Use lists comprehensions 1.6 - Use enumerate function 1.7 - Use keys to sort list 1.8 - Use all/any functions 1.9 - Dictionaries: avoid using keys() function 1.10 - Dictionaries: Iterate over keys and values 1.11 - Use dictionaries comprehension 1.12 - Use namedtuple instead of simple class 1.13 - Use defaultdict and/or Counter 1.14 - Modifying a list while iterating over it 2 - Functions 2.1 - Mutable Default Args 2.2 - Generally using lambdas 3 - Variables 3.1 - Misunderstanding Python scope rules 3.2 - Confusing how Python binds variables in closures 3.3 - Variable naming 3.4 - Identifying variable types with prefixes 4 - Classes 4.1 - Implementing Java-style getters and setters 4.2 - Using property setters as action methods 5 - Exceptions 5.1 - Passing Generic Exceptions silently","title":"Python Bad Practices"},{"location":"blog/2019/2019-09-30-python-bad-practices/#references","text":"","title":"References"},{"location":"blog/2019/2019-09-30-python-bad-practices/#original-sources","text":"Python Patterns (see src ) The Little Book of Python Anti-Patterns (see src ) Python Data Structures Idioms by Ivan Mushketyk Buggy Python Code: The 10 Most Common Mistakes That Python Developers Make by Martin Chikilian Youtube: 5 Common Python Mistakes and How to Fix Them by Corey Schafer Python Worst Practices by Daniel Greenfeld What the f*ck Python! \ud83d\ude31","title":"Original sources"},{"location":"blog/2019/2019-09-30-python-bad-practices/#python-standard-library","text":"all any range enumerate sorted zip collections.namedtuple collections.defaultdict collections.Counter","title":"Python standard library"},{"location":"blog/2019/2019-09-30-python-bad-practices/#1-collections","text":"","title":"1 - Collections"},{"location":"blog/2019/2019-09-30-python-bad-practices/#11-iterate-over-a-list","text":"Ref: [ 3 ] Very Bad l = [ 1 , 2 , 3 , 4 , 5 ] i = 0 while i < len ( l ): print ( l [ i ]) i += 1 Bad for i in range ( len ( l )): print ( l [ i ]) Good for v in l : print ( v )","title":"1.1 - Iterate over a list"},{"location":"blog/2019/2019-09-30-python-bad-practices/#12-iterate-over-a-list-in-reverse-order","text":"Ref: [ 3 ] Bad for i in range ( len ( l ) - 1 , - 1 , - 1 ): print ( l [ i ]) Good for i in reversed ( l ): print ( i )","title":"1.2 - Iterate over a list in reverse order"},{"location":"blog/2019/2019-09-30-python-bad-practices/#13-access-the-last-element-in-a-list","text":"Ref: [ 3 ] Bad l = [ 1 , 2 , 3 , 4 , 5 ] >>> l [ len ( l ) - 1 ] 5 Good >>> l [ - 1 ] 5 >>> l [ - 2 ] 4 >>> l [ - 3 ] 3","title":"1.3 - Access the last element in a list"},{"location":"blog/2019/2019-09-30-python-bad-practices/#14-use-sequence-unpacking","text":"Ref: [ 3 ] Bad l1 = l [ 0 ] l2 = l [ 1 ] l3 = l [ 2 ] Good l1 , l2 , l3 = [ 1 , 2 , 3 ] >>> l1 1 >>> l2 2 >>> l3 3","title":"1.4 - Use sequence unpacking"},{"location":"blog/2019/2019-09-30-python-bad-practices/#15-use-lists-comprehensions","text":"Ref: [ 3 ] Bad under_18_grades = [] for grade in grades : if grade . age <= 18 : under_18_grades . append ( grade ) Good under_18_grades = [ grade for grade in grades if grade . age <= 18 ]","title":"1.5 - Use lists comprehensions"},{"location":"blog/2019/2019-09-30-python-bad-practices/#16-use-enumerate-function","text":"Ref: [ 3, 6 ]","title":"1.6 - Use enumerate function"},{"location":"blog/2019/2019-09-30-python-bad-practices/#17-use-keys-to-sort-list","text":"Ref: [ 3 ] people = [ Person ( 'John' , 30 ), Person ( 'Peter' , 28 ), Person ( 'Joe' , 42 )] Bad def compare_people ( p1 , p2 ): if p1 . age < p2 . age : return - 1 if p1 . age > p2 . age : return 1 return 0 sorted ( people , cmp = compare_people ) [ Person ( name = 'Peter' , age = 28 ), Person ( name = 'John' , age = 30 ), Person ( name = 'Joe' , age = 42 )] Good sorted ( people , key = lambda p : p . age ) [ Person ( name = 'Peter' , age = 28 ), Person ( name = 'John' , age = 30 ), Person ( name = 'Joe' , age = 42 )]","title":"1.7 - Use keys to sort list"},{"location":"blog/2019/2019-09-30-python-bad-practices/#18-use-allany-functions","text":"Ref: [ 3 ] Bad def all_true ( lst ): for v in lst : if not v : return False return True Good all ([ True , False ]) >> False any ([ True , False ]) >> True all ([ person . age > 18 for person in people ]) # or generator all ( person . age > 18 for person in people )","title":"1.8 - Use all/any functions"},{"location":"blog/2019/2019-09-30-python-bad-practices/#19-dictionaries-avoid-using-keys-function","text":"Ref: [ 3 ] Bad for k in d . keys (): print ( k ) Good for k in d : print ( k )","title":"1.9 - Dictionaries: avoid using keys() function"},{"location":"blog/2019/2019-09-30-python-bad-practices/#110-dictionaries-iterate-over-keys-and-values","text":"Ref: [ 3 ] Bad for k in d : v = d [ k ] print ( k , v ) Good for k , v in d . items (): print ( k , v )","title":"1.10 - Dictionaries: Iterate over keys and values"},{"location":"blog/2019/2019-09-30-python-bad-practices/#111-use-dictionaries-comprehension","text":"Ref: [ 3 ] Bad d = {} for person in people : d [ person . name ] = person Good d = { person . name : person for person in people }","title":"1.11 - Use dictionaries comprehension"},{"location":"blog/2019/2019-09-30-python-bad-practices/#112-use-namedtuple-instead-of-simple-class","text":"Ref: [ 3 ] Bad class Point ( object ): def __init__ ( self , x , y ): self . x = x self . y = y Good from collections import namedtuple Point = namedtuple ( 'Point' , [ 'x' , 'y' ]) In addition namedtuple implements __str__ , __repr__ , and __eq__ methods: >>> Point ( 1 , 2 ) Point ( x = 1 , y = 2 ) >>> Point ( 1 , 2 ) == Point ( 1 , 2 ) True","title":"1.12 - Use namedtuple instead of simple class"},{"location":"blog/2019/2019-09-30-python-bad-practices/#113-use-defaultdict-andor-counter","text":"Ref: [ 3 ] We need to count a number of times an element is encountered in a collection Bad d = {} for v in lst : if v not in d : d [ v ] = 1 else : d [ v ] += 1 Good >>> d = defaultdict ( lambda : 42 ) >>> d [ 'key' ] 42 from collections import defaultdict d = defaultdict ( int ) for v in lst : d [ v ] += 1 Good from collections import Counter >>> counter = Counter ( lst ) >>> counter Counter ({ 4 : 3 , 1 : 2 , 2 : 1 , 3 : 1 , 5 : 1 })","title":"1.13 - Use defaultdict and/or Counter"},{"location":"blog/2019/2019-09-30-python-bad-practices/#114-modifying-a-list-while-iterating-over-it","text":"Ref: [ 4 ] Bad >>> odd = lambda x : bool ( x % 2 ) >>> numbers = [ n for n in range ( 10 )] >>> for i in range ( len ( numbers )): ... if odd ( numbers [ i ]): ... del numbers [ i ] # BAD: Deleting item from a list while iterating over it ... Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > IndexError : list index out of range Good >>> odd = lambda x : bool ( x % 2 ) >>> numbers = [ n for n in range ( 10 )] >>> numbers [:] = [ n for n in numbers if not odd ( n )] # ahh, the beauty of it all >>> numbers [ 0 , 2 , 4 , 6 , 8 ]","title":"1.14 - Modifying a list while iterating over it"},{"location":"blog/2019/2019-09-30-python-bad-practices/#2-functions","text":"","title":"2 - Functions"},{"location":"blog/2019/2019-09-30-python-bad-practices/#21-mutable-default-args","text":"Ref: [ 4, 5 ] Bad def foo ( bar = []): # bar is optional and defaults to [] if not specified bar . append ( \"baz\" ) return bar >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" , \"baz\" ] >>> foo () [ \"baz\" , \"baz\" , \"baz\" ] The default value for a function argument is only evaluated once, at the time that the function is defined. Thus, the bar argument is initialized to its default (i.e., an empty list) only when foo() is first defined, but then calls to foo() (i.e., without a bar argument specified) will continue to use the same list to which bar was originally initialized. Good def foo ( bar = None ): if bar is None : # or if not bar: bar = [] bar . append ( \"baz\" ) return bar >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" ] >>> foo () [ \"baz\" ]","title":"2.1 - Mutable Default Args"},{"location":"blog/2019/2019-09-30-python-bad-practices/#22-generally-using-lambdas","text":"Ref: [ 6 ] Bad Too many characters on one line Lambdas by design does not have docstrings Does not necessarily mean less characters I can\u2019t get this sample to work! swap = lambda a , x , y : lambda f = a . __setitem__ : ( f ( x , ( a [ x ], a [ y ])), f ( y , a [ x ][ 0 ]), f ( x , a [ x ][ 1 ]))() Good Doc strings that show up nicely in help/Sphinx Easier to read In Python, functions are first class objects Whenever possible avoid using lambdas def swap ( a , x , y ): \"\"\" Swap two position values in a list \"\"\" a [ x ], a [ y ] = a [ y ], a [ x ]","title":"2.2 - Generally using lambdas"},{"location":"blog/2019/2019-09-30-python-bad-practices/#3-variables","text":"","title":"3 - Variables"},{"location":"blog/2019/2019-09-30-python-bad-practices/#31-misunderstanding-python-scope-rules","text":"Ref: [ 4 ] Python scoping: understanding LEGB Python Frequently Asked Questions: Why am I getting an UnboundLocalError when the variable has a value?","title":"3.1 - Misunderstanding Python scope rules"},{"location":"blog/2019/2019-09-30-python-bad-practices/#32-confusing-how-python-binds-variables-in-closures","text":"Ref: [ 4 ] Bad >>> def create_multipliers (): ... return [ lambda x : i * x for i in range ( 5 )] >>> for multiplier in create_multipliers (): ... print multiplier ( 2 ) ... Expected 0 2 4 6 8 Actual 8 8 8 8 8 Good >>> def create_multipliers (): ... return [ lambda x , i = i : i * x for i in range ( 5 )] ... >>> for multiplier in create_multipliers (): ... print multiplier ( 2 ) ... 0 2 4 6 8","title":"3.2 - Confusing how Python binds variables in closures"},{"location":"blog/2019/2019-09-30-python-bad-practices/#33-variable-naming","text":"Ref: [ 6 ] Bad object = MyObject () map = Map () zip = 90213 # common US developer mistake id = 34 # I still fight this one Good obj = MyObject () # necessary abbreviation object_ = MyObject () # Underscore so we don't overwrite map_obj = Map () # combine name w/necessary abbreviation map_ = Map () zip_code = 90213 # Explicit name with US focus postal_code = 90213 # i18n explicit name zip_ = 90213 pk = 34 # pk is often synonymous with id id_ = 34","title":"3.3 - Variable naming"},{"location":"blog/2019/2019-09-30-python-bad-practices/#34-identifying-variable-types-with-prefixes","text":"Ref: [ 6 ] Bad c = \"green\" a = False p = 20 t = \"04/20/2011\" clr = \"green\" ctv = False pythnYrs = 20 pthnFrstSd = \"04/20/2011\" strColor = \"green\" boolActive = False intPythonYears = 20 dtPythonFirstUsed = \"04/20/2011\" Good color = \"green\" active = False python_years = 20 python_first_used = \"04/20/2011\"","title":"3.4  - Identifying variable types with prefixes"},{"location":"blog/2019/2019-09-30-python-bad-practices/#4-classes","text":"","title":"4 - Classes"},{"location":"blog/2019/2019-09-30-python-bad-practices/#41-implementing-java-style-getters-and-setters","text":"Ref: [ 6 ] Bad import logging log = logging . getLogger () class JavaStyle : \"\"\" Quiz: what else am I doing wrong here? \"\"\" def __init__ ( self ): self . name = \"\" def get_name ( self ): return self . name def set_name ( self , name ): log . debug ( \"Setting the name to %s \" % name ) if isinstance ( name , str ): self . name = name else : raise TypeError () if __name__ == \"__main__\" : j = JavaStyle () j . set_name ( \"pydanny did this back in 2006!\" ) print ( j . get_name ()) Good import logging log = logging . getLogger () class PythonStyle ( object ): def __init__ ( self ): self . _name = \"\" @property def name ( self ): return self . _name @name . setter def name ( self , value ): \"\"\" Because name is probably a string we'll assume that we can infer the type from the variable name\"\"\" log . debug ( \"Setting the name to %s \" % value ) self . _name = value if __name__ == \"__main__\" : p = PythonStyle () p . name = \"pydanny doing it the right way\" print ( p . name )","title":"4.1 - Implementing Java-style getters and setters"},{"location":"blog/2019/2019-09-30-python-bad-practices/#42-using-property-setters-as-action-methods","text":"Ref: [ 6 ] Bad class WebService : @property def connect ( self ): self . proxy = xmlrpc . Server ( \"http://service.xml\" ) if __name__ == '__main__' : ws = WebService () ws . connect Good class WebService : def connect ( self ): self . proxy = xmlrpc . Server ( \"http://service.xml\" ) if __name__ == '__main__' : ws = WebService () ws . connect ()","title":"4.2 - Using property setters as action methods"},{"location":"blog/2019/2019-09-30-python-bad-practices/#5-exceptions","text":"","title":"5 - Exceptions"},{"location":"blog/2019/2019-09-30-python-bad-practices/#51-passing-generic-exceptions-silently","text":"Ref: [ 6 ] Bad try : do_akshun ( value ) except : pass Good Use specific exceptions and/or logging class AkshunDoesNotDo ( Exception ): \"\"\" Custom exceptions makes for maintainable code \"\"\" pass try : do_akshun ( value ) except AttributeError as e : log . info ( \"Can I get attribution for these slides?\" ) do_bakup_akshun ( vlue ) except Exception as e : log . debug ( str ( e )) raise AkshunDoesNotDo ( e )","title":"5.1 - Passing Generic Exceptions silently"},{"location":"blog/2020/2020-08-25-personal-tech-radar/","text":"Personal Techradar for Programming Languages - 2020 H2 | python | java | scala | Why \u201cpersonal\u201d Tech Radar? Well, Technology Radar was \u201cinvented\u201d by ThoughtWorks company (I guess, and I have zero motivation to prove this). It is used for companies\u2019 technology landscape evaluation. So, how I can use this for personal technology tech stack definition? We are living in a very dynamic world. Things are changing very fast. Software engineers like to try new \u201csilver bullet\u201d here-and-there. You know \u201cthe grass is always greener on the other side \u201d ;-) So, it\u2019s important to follow some guidance even for own personal development, especially in Programming Languages space. I have a weakness look around and try new \u201cshiny\u201d programming languages. But, now, I don\u2019t see any value in this. It\u2019s a waste of time. Better to work on something fundamental like math, instead of learning new syntax every year or two. Some time ago I defined a list of programming languages I am willing to invest in with some reasonnings. This list is defined for 2020 H2 . And I can assume that for 2021 H1 it will be updated. So, following Tech Radar tradition I need to select some criteria. The Radar Ring Semantics (in decreasing level of investment): ADOPT : technologies with broad adoption, in which I am willing to invest long-term. I feel strongly that the industry should be adopting these items. I use them when appropriate on my projects. TRIAL : worth pursuing. It\u2019s important to understand how to build up this capability. I can try this technology on a project that can handle the risk. ASSESS : worth exploring with the goal of understanding how it will affect me. HOLD : Proceed with caution. Technology Domains : Back-End Scripting/Automation Infrastructure Web Desktop Machine Learning System programming Technology Domains Back-End This is the obvious part for me, since I\u2019ve been using mainly two languages: Java and Scala . JVM is my primary platform, so all .Net programming languages are automatically removed from this list (i.e. C#, F# and so on). What about other JVM languages: Kotlin (it is on hype in 2020). This languge could not bring anything new to my current tech stack Java/Scala. Even conceptually, this language is not even close to Scala . Yes, it\u2019s better than Java , but come on, why do I need a slightly different language? Clojure . It\u2019s dynamic, Lisp, and is not popular. Groovy . Unfortunately, I have to put it to the same bucket with Kotlin . Ceylon . According to Github , it\u2019s dead. Other languages: Golang . Yep, it\u2019s very interesting alternative. But, I just could not use it after Scala . Golang syntax is very weak and limited. Ideologically, it\u2019s not my language for the backend. Javascript (via Node.js ). It\u2019s not for me. I don\u2019t see any benefits there. Scripting/Automation Python is my main language in this area: 1) I\u2019ve been using it at work; 2) popularity Ruby I used it many years ago. But now this niche is occupied by Python . But esthetically Ruby is a much better language than Python . I\u2019ve been using Python only because of its total dominance. Sad, but true ;-( Groovy . Another sad story. Groovy was my main scriping languge for several years. Then there was a huge popularity decrease and I switched to Scala / Python . Javascript (via Node.js ). I think it\u2019s pretty good alternative, but I am with Python now. Golang is well suited to CLI application. I think it\u2019s a perfect fit. Infrastructure Golang is very popular in this domain. Kubernetes and Cloud-Native all these are Golang (mainly). Furtunatelly, we can use other languages (e.g. Python ) while implementing Kubernetes operators. But, I would use Golang if it is required. Rust . Another interesting language, but it\u2019s much more complicated than Golang and the community is not as big as for Golang . Web There are only two candidates: Javascript and TypeScript . All other languages ( Clojurescript , CoffeeScript , PureScript , Scala.js , Elm ) are not interested for me because of the popularity. Desktop Java . I haven\u2019t developed for Desktop for some time. But, I would use Java in case I need something right now and right away. Swift . It\u2019s a perfect fit for MacOS native app. Objective-C is slowly declining in popularity (BTW it should be already dead). C++ . I don\u2019t want to touch this monster. Python . I think it\u2019s nice alternative. It has good bindings: Qt , wxPython , etc. Machine Learning Python is a king on the Machine Learning scene. R . This language is losing popularity in ML. But, it\u2019s still big. So, I should consider it. Julia . I know nothing about this languge. System programming C is simple and quite powerful. For something small, it\u2019s good enough. C++ . Again, I don\u2019t want to touch this monster. It doesn\u2019t worth investments. Rust is a very interesting and powerful language. At least, I preffer Rust over C++ . Summary ML = Machine Learning DS = Data Science DA = Data Analysis CLI = Command-line interface Ring Back-End Scripting/Automation Infrastructure Web Desktop ML/DS/DA System programming Java ADOPT ADOPT ADOPT Scala ADOPT ADOPT Python ADOPT ADOPT ASSESS ADOPT Golang TRIAL TRIAL Javascript ADOPT HOLD ADOPT TypeScript ASSESS HOLD ASSESS Haskell ASSESS ASSESS R TRIAL TRIAL C TRIAL TRIAL C++ HOLD HOLD HOLD Rust HOLD HOLD HOLD HOLD Swift HOLD HOLD Kotlin HOLD HOLD Clojure HOLD HOLD Objective-C HOLD HOLD Groovy HOLD HOLD Ruby HOLD HOLD Julia N/A So, for 2020 H2 I have selected languages that are in ring TRIAL and upper: Ring Back-End Scripting/Automation Infrastructure Web Desktop ML/DS/DA System programming Scala ADOPT ADOPT Java ADOPT ADOPT ADOPT Python ADOPT ADOPT ASSESS ADOPT Golang TRIAL TRIAL Javascript ADOPT HOLD ADOPT R TRIAL TRIAL C TRIAL TRIAL","title":"Personal Techradar for Programming Languages - 2020 H2"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#personal-techradar-for-programming-languages-2020-h2","text":"| python | java | scala | Why \u201cpersonal\u201d Tech Radar? Well, Technology Radar was \u201cinvented\u201d by ThoughtWorks company (I guess, and I have zero motivation to prove this). It is used for companies\u2019 technology landscape evaluation. So, how I can use this for personal technology tech stack definition? We are living in a very dynamic world. Things are changing very fast. Software engineers like to try new \u201csilver bullet\u201d here-and-there. You know \u201cthe grass is always greener on the other side \u201d ;-) So, it\u2019s important to follow some guidance even for own personal development, especially in Programming Languages space. I have a weakness look around and try new \u201cshiny\u201d programming languages. But, now, I don\u2019t see any value in this. It\u2019s a waste of time. Better to work on something fundamental like math, instead of learning new syntax every year or two. Some time ago I defined a list of programming languages I am willing to invest in with some reasonnings. This list is defined for 2020 H2 . And I can assume that for 2021 H1 it will be updated. So, following Tech Radar tradition I need to select some criteria. The Radar Ring Semantics (in decreasing level of investment): ADOPT : technologies with broad adoption, in which I am willing to invest long-term. I feel strongly that the industry should be adopting these items. I use them when appropriate on my projects. TRIAL : worth pursuing. It\u2019s important to understand how to build up this capability. I can try this technology on a project that can handle the risk. ASSESS : worth exploring with the goal of understanding how it will affect me. HOLD : Proceed with caution. Technology Domains : Back-End Scripting/Automation Infrastructure Web Desktop Machine Learning System programming","title":"Personal Techradar for Programming Languages - 2020 H2"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#technology-domains","text":"","title":"Technology Domains"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#back-end","text":"This is the obvious part for me, since I\u2019ve been using mainly two languages: Java and Scala . JVM is my primary platform, so all .Net programming languages are automatically removed from this list (i.e. C#, F# and so on). What about other JVM languages: Kotlin (it is on hype in 2020). This languge could not bring anything new to my current tech stack Java/Scala. Even conceptually, this language is not even close to Scala . Yes, it\u2019s better than Java , but come on, why do I need a slightly different language? Clojure . It\u2019s dynamic, Lisp, and is not popular. Groovy . Unfortunately, I have to put it to the same bucket with Kotlin . Ceylon . According to Github , it\u2019s dead. Other languages: Golang . Yep, it\u2019s very interesting alternative. But, I just could not use it after Scala . Golang syntax is very weak and limited. Ideologically, it\u2019s not my language for the backend. Javascript (via Node.js ). It\u2019s not for me. I don\u2019t see any benefits there.","title":"Back-End"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#scriptingautomation","text":"Python is my main language in this area: 1) I\u2019ve been using it at work; 2) popularity Ruby I used it many years ago. But now this niche is occupied by Python . But esthetically Ruby is a much better language than Python . I\u2019ve been using Python only because of its total dominance. Sad, but true ;-( Groovy . Another sad story. Groovy was my main scriping languge for several years. Then there was a huge popularity decrease and I switched to Scala / Python . Javascript (via Node.js ). I think it\u2019s pretty good alternative, but I am with Python now. Golang is well suited to CLI application. I think it\u2019s a perfect fit.","title":"Scripting/Automation"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#infrastructure","text":"Golang is very popular in this domain. Kubernetes and Cloud-Native all these are Golang (mainly). Furtunatelly, we can use other languages (e.g. Python ) while implementing Kubernetes operators. But, I would use Golang if it is required. Rust . Another interesting language, but it\u2019s much more complicated than Golang and the community is not as big as for Golang .","title":"Infrastructure"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#web","text":"There are only two candidates: Javascript and TypeScript . All other languages ( Clojurescript , CoffeeScript , PureScript , Scala.js , Elm ) are not interested for me because of the popularity.","title":"Web"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#desktop","text":"Java . I haven\u2019t developed for Desktop for some time. But, I would use Java in case I need something right now and right away. Swift . It\u2019s a perfect fit for MacOS native app. Objective-C is slowly declining in popularity (BTW it should be already dead). C++ . I don\u2019t want to touch this monster. Python . I think it\u2019s nice alternative. It has good bindings: Qt , wxPython , etc.","title":"Desktop"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#machine-learning","text":"Python is a king on the Machine Learning scene. R . This language is losing popularity in ML. But, it\u2019s still big. So, I should consider it. Julia . I know nothing about this languge.","title":"Machine Learning"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#system-programming","text":"C is simple and quite powerful. For something small, it\u2019s good enough. C++ . Again, I don\u2019t want to touch this monster. It doesn\u2019t worth investments. Rust is a very interesting and powerful language. At least, I preffer Rust over C++ .","title":"System programming"},{"location":"blog/2020/2020-08-25-personal-tech-radar/#summary","text":"ML = Machine Learning DS = Data Science DA = Data Analysis CLI = Command-line interface Ring Back-End Scripting/Automation Infrastructure Web Desktop ML/DS/DA System programming Java ADOPT ADOPT ADOPT Scala ADOPT ADOPT Python ADOPT ADOPT ASSESS ADOPT Golang TRIAL TRIAL Javascript ADOPT HOLD ADOPT TypeScript ASSESS HOLD ASSESS Haskell ASSESS ASSESS R TRIAL TRIAL C TRIAL TRIAL C++ HOLD HOLD HOLD Rust HOLD HOLD HOLD HOLD Swift HOLD HOLD Kotlin HOLD HOLD Clojure HOLD HOLD Objective-C HOLD HOLD Groovy HOLD HOLD Ruby HOLD HOLD Julia N/A So, for 2020 H2 I have selected languages that are in ring TRIAL and upper: Ring Back-End Scripting/Automation Infrastructure Web Desktop ML/DS/DA System programming Scala ADOPT ADOPT Java ADOPT ADOPT ADOPT Python ADOPT ADOPT ASSESS ADOPT Golang TRIAL TRIAL Javascript ADOPT HOLD ADOPT R TRIAL TRIAL C TRIAL TRIAL","title":"Summary"},{"location":"blog/2020/2020-12-30-ruby-3/","text":"Ruby 3 and static typing | ruby | Ruby 3.0.0 was released on Christmas Day in 2020. Ruby 3.0.0 covers those goals by Performance MJIT Concurrency Ractor Fiber Scheduler Typing (Static Analysis) RBS TypeProf The Ruby team is moving into the right direction with JIT and Concurency. But, another \u201cnew\u201d feature spot my eyes - Static Analysis . I started using Ruby in 2007-2008 and I still remember the mood in Ruby-community at that time: dynamic typing is cool, and static typing just sucks . Time flies and even Ruby team decided to have some \u201cStatic types\u201d features. I am not sure whether it will help, since the Ruby community is not diversified as the Python community. IMHO Ruby equals to Ruby on Rails . Even PHP has a more diversified set of web frameworks: Laravel, Symfony, CodeIgniter, etc. And when I am looking at the Ruby community from 13 years perspective I can say it will be really hard to bring here fresh air . And fresh air it\u2019s not only yet another web framework, it\u2019s another problem domain. Interesting programming languages ratings I like programming languages ratings and in the future it will be interesting to check these 2020 ratings, it\u2019s like a time machine. 1 - Tiobe Index TIOBE Index - Ruby is on position 15, Python is 3d: 2 - PYPL PYPL - Ruby is on position 14, Python is 1st: 3 - GitHut 2.0 GitHut 2.0 for Q3 2020 Pushes Python - 2, Ruby - 9 Issues Python - 2, Ruby - 10 Stars Python - 2, Ruby - 12 Pull Requests Python - 2, Ruby - 14 4 - Github Octoverse - 2020 Github: The 2020 State of the Octoverse : Ruby is on position 10, Python - 2: 5 - The RedMonk Programming Language Rankings : June 2020 Python - 2, Ruby - 7","title":"Ruby 3 and static typing"},{"location":"blog/2020/2020-12-30-ruby-3/#ruby-3-and-static-typing","text":"| ruby | Ruby 3.0.0 was released on Christmas Day in 2020. Ruby 3.0.0 covers those goals by Performance MJIT Concurrency Ractor Fiber Scheduler Typing (Static Analysis) RBS TypeProf The Ruby team is moving into the right direction with JIT and Concurency. But, another \u201cnew\u201d feature spot my eyes - Static Analysis . I started using Ruby in 2007-2008 and I still remember the mood in Ruby-community at that time: dynamic typing is cool, and static typing just sucks . Time flies and even Ruby team decided to have some \u201cStatic types\u201d features. I am not sure whether it will help, since the Ruby community is not diversified as the Python community. IMHO Ruby equals to Ruby on Rails . Even PHP has a more diversified set of web frameworks: Laravel, Symfony, CodeIgniter, etc. And when I am looking at the Ruby community from 13 years perspective I can say it will be really hard to bring here fresh air . And fresh air it\u2019s not only yet another web framework, it\u2019s another problem domain.","title":"Ruby 3 and static typing"},{"location":"blog/2020/2020-12-30-ruby-3/#interesting-programming-languages-ratings","text":"I like programming languages ratings and in the future it will be interesting to check these 2020 ratings, it\u2019s like a time machine.","title":"Interesting programming languages ratings"},{"location":"blog/2020/2020-12-30-ruby-3/#1-tiobe-index","text":"TIOBE Index - Ruby is on position 15, Python is 3d:","title":"1 - Tiobe Index"},{"location":"blog/2020/2020-12-30-ruby-3/#2-pypl","text":"PYPL - Ruby is on position 14, Python is 1st:","title":"2 - PYPL"},{"location":"blog/2020/2020-12-30-ruby-3/#3-githut-20","text":"GitHut 2.0 for Q3 2020","title":"3 - GitHut 2.0"},{"location":"blog/2020/2020-12-30-ruby-3/#4-github-octoverse-2020","text":"Github: The 2020 State of the Octoverse : Ruby is on position 10, Python - 2:","title":"4 - Github Octoverse - 2020"},{"location":"blog/2020/2020-12-30-ruby-3/#5-the-redmonk-programming-language-rankings-june-2020","text":"Python - 2, Ruby - 7","title":"5 - The RedMonk Programming Language Rankings: June 2020"},{"location":"blog/2021/2021-02-07-audiobooks/","text":"Thoughts about Audiobooks | book | Last 2020 year was \u201cspecial\u201d in many senses. But, today I\u2019d like to talk about audiobooks. I decided to listen as much I can - 22 books. A vital remark - I\u2019ve been listening to something (podcasts, audiobooks) while walking, i.e. only outside, never at home. Title selection I was sure (and still is) that audiobooks aren\u2019t suitable for something serious (tech, science). That\u2019s why I picked some stories about hackers and cybersecurity, companies and their \u201cpath to success\u201d, IT-history, self-development, and similar. As you can see, there is nothing \u201cimportant\u201d and it\u2019s easy to listen on the walk. But, even this doesn\u2019t work for me. 70% of all books were interesting, but I almost forgot the content. My head cleaned out all information. So, I pay for audiobooks, but the result is as after some ordinary podcast. I continued asking myself \u201cwhat is the value\u201d? Unfortunately, I concluded that there is no real value in audiobooks for me :-(. Waste of time and money. Conclusion It\u2019s better to concentrate on interesting podcasts than on audiobook. The audiobooks can\u2019t replace a real book. I can\u2019t speed up content consumption via audio. The audiobook is like entertaining, nothing serious.","title":"Thoughts about Audiobooks"},{"location":"blog/2021/2021-02-07-audiobooks/#thoughts-about-audiobooks","text":"| book | Last 2020 year was \u201cspecial\u201d in many senses. But, today I\u2019d like to talk about audiobooks. I decided to listen as much I can - 22 books. A vital remark - I\u2019ve been listening to something (podcasts, audiobooks) while walking, i.e. only outside, never at home.","title":"Thoughts about Audiobooks"},{"location":"blog/2021/2021-02-07-audiobooks/#title-selection","text":"I was sure (and still is) that audiobooks aren\u2019t suitable for something serious (tech, science). That\u2019s why I picked some stories about hackers and cybersecurity, companies and their \u201cpath to success\u201d, IT-history, self-development, and similar. As you can see, there is nothing \u201cimportant\u201d and it\u2019s easy to listen on the walk. But, even this doesn\u2019t work for me. 70% of all books were interesting, but I almost forgot the content. My head cleaned out all information. So, I pay for audiobooks, but the result is as after some ordinary podcast. I continued asking myself \u201cwhat is the value\u201d? Unfortunately, I concluded that there is no real value in audiobooks for me :-(. Waste of time and money.","title":"Title selection"},{"location":"blog/2021/2021-02-07-audiobooks/#conclusion","text":"It\u2019s better to concentrate on interesting podcasts than on audiobook. The audiobooks can\u2019t replace a real book. I can\u2019t speed up content consumption via audio. The audiobook is like entertaining, nothing serious.","title":"Conclusion"},{"location":"blog/2021/2021-04-05-remove-bg/","text":"How to remove image background color using JVM? | scala | jvm | computer vision | References Results Notes Code snippets Generate images References SO: How to make a color transparent in a BufferedImage and save as PNG Results The table below shows results of the background removals for sample images. Columns description: Original image Remove color : result of single color removal (color of pixel (0,0) ) Remove color range : result of color range removal ( EEEEEE - EFEFEF ) Since transparency is not easy to present I decided to use \u201cred\u201d color instead. All Orinial images exept #2 have gray background, image #2 has white background. That\u2019s why Remove color works the best for #2. # Original Remove color Remove color range 1. 2. 3. 4. 5. Notes The selected \u201cdefault\u201d range is too aggressive for image #4, we removed/\u201dmade transparent\u201d even the product\u2019s part. Also, I dediced to use a wider color range ( EDEDED - F0F0F0 ) for sample #5. It works well for such type of images. Code snippets import java . awt . image . _ import java . awt .{ Color , Image , Toolkit } import java . io . File import javax . imageio . ImageIO class AddTransparency { /** * https://www.infoworld.com/article/2074105/making-white-image-backgrounds-transparent-with-java-2d-groovy.html * * Make provided image transparent wherever color matches the provided color. * * @param im BufferedImage whose color will be made transparent. * @param color Color in provided image which will be made transparent. * @return Image with transparency applied. */ def transformColorToTransparency ( im : BufferedImage , color : Color ): Image = { val filter : ImageFilter = new RGBImageFilter () { // the color we are looking for (white)... Alpha bits are set to opaque val markerRGB = color . getRGB | 0xFF000000 def filterRGB ( x : Int , y : Int , rgb : Int ) = { if (( rgb | 0xFF000000 ) == markerRGB ) { // Mark the alpha bits as zero - transparent 0x00FFFFFF & rgb } else { // nothing to do rgb } } } val ip : ImageProducer = new FilteredImageSource ( im . getSource , filter ) Toolkit . getDefaultToolkit . createImage ( ip ) } /** * https://stackoverflow.com/questions/665406/how-to-make-a-color-transparent-in-a-bufferedimage-and-save-as-png */ def transformColorRangeToTransparency ( image : BufferedImage , c1 : Color , c2 : Color ): Image = { val ( r1 , g1 , b1 ) = ( c1 . getRed , c1 . getGreen , c1 . getBlue ) val ( r2 , g2 , b2 ) = ( c2 . getRed , c2 . getGreen , c2 . getBlue ) val filter = new RGBImageFilter () { override final def filterRGB ( x : Int , y : Int , rgb : Int ): Int = { val r = ( rgb & 0xFF0000 ) >> 16 val g = ( rgb & 0xFF00 ) >> 8 val b = rgb & 0xFF if ( r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2 ) { // Set fully transparent but keep color return rgb & 0xFFFFFF } rgb } } val ip = new FilteredImageSource ( image . getSource , filter ) Toolkit . getDefaultToolkit . createImage ( ip ) } def imageToBufferedImage ( image : Image , bgColor : Option [ Color ] = None ): BufferedImage = { val bufferedImage = new BufferedImage ( image . getWidth ( null ), image . getHeight ( null ), BufferedImage . TYPE_INT_ARGB ) val g2 = bufferedImage . createGraphics () bgColor . foreach ( c => g2 . setPaint ( c )) g2 . fillRect ( 0 , 0 , bufferedImage . getWidth , bufferedImage . getHeight ) g2 . drawImage ( image , 0 , 0 , null ) g2 . dispose () bufferedImage } def writeImage ( fileName : String , bi : BufferedImage ) = { val outputfile = new File ( s\"tmp/ $ fileName \" ) println ( \"outputfile: \" + outputfile . getAbsolutePath ) ImageIO . write ( bi , \"png\" , outputfile ) } def readBufferedImage ( path : String ): BufferedImage = { val classLoader = getClass . getClassLoader val file = new File ( classLoader . getResource ( path ). getFile ) ImageIO . read ( file ) } } Generate images class AddTransparencySpec extends AnyFlatSpec { behavior of \"AddTransparency\" val at = new AddTransparency () it should \"transformColorRangeToTransparency\" in { val files = List . range ( 1 , 6 ). map ( s => s\"img $ s \" ) println ( files ) files . foreach { file => val source : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) val color = new Color ( source . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val c1 = Color . decode ( \"#EEEEEE\" ) val c2 = Color . decode ( \"#EFEFEF\" ) val imageWithTransparency : Image = at . transformColorRangeToTransparency ( source , c1 , c2 ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , bgColor = Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_range_transparent.png\" , transparentImage ) } } it should \"transformColorToTransparency\" in { val files = List . range ( 1 , 6 ). map ( s => s\"img $ s \" ) println ( files ) files . foreach { file => val image : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) println ( imgInfo ( image )) val color = new Color ( image . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val imageWithTransparency : Image = at . transformColorToTransparency ( image , color ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_transparent.png\" , transparentImage ) } } it should \"img5\" in { val file = \"img5\" val source : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) val color = new Color ( source . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val c1 = Color . decode ( \"#EDEDED\" ) val c2 = Color . decode ( \"#F0F0F0\" ) val imageWithTransparency : Image = at . transformColorRangeToTransparency ( source , c1 , c2 ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , bgColor = Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_range_transparent_special.png\" , transparentImage ) } def imgInfo ( img : BufferedImage ): String = { val info = s\"w: ${ img . getWidth } , h: ${ img . getHeight } \" info } }","title":"How to remove image background color using JVM?"},{"location":"blog/2021/2021-04-05-remove-bg/#how-to-remove-image-background-color-using-jvm","text":"| scala | jvm | computer vision | References Results Notes Code snippets Generate images","title":"How to remove image background color using JVM?"},{"location":"blog/2021/2021-04-05-remove-bg/#references","text":"SO: How to make a color transparent in a BufferedImage and save as PNG","title":"References"},{"location":"blog/2021/2021-04-05-remove-bg/#results","text":"The table below shows results of the background removals for sample images. Columns description: Original image Remove color : result of single color removal (color of pixel (0,0) ) Remove color range : result of color range removal ( EEEEEE - EFEFEF ) Since transparency is not easy to present I decided to use \u201cred\u201d color instead. All Orinial images exept #2 have gray background, image #2 has white background. That\u2019s why Remove color works the best for #2. # Original Remove color Remove color range 1. 2. 3. 4. 5.","title":"Results"},{"location":"blog/2021/2021-04-05-remove-bg/#notes","text":"The selected \u201cdefault\u201d range is too aggressive for image #4, we removed/\u201dmade transparent\u201d even the product\u2019s part. Also, I dediced to use a wider color range ( EDEDED - F0F0F0 ) for sample #5. It works well for such type of images.","title":"Notes"},{"location":"blog/2021/2021-04-05-remove-bg/#code-snippets","text":"import java . awt . image . _ import java . awt .{ Color , Image , Toolkit } import java . io . File import javax . imageio . ImageIO class AddTransparency { /** * https://www.infoworld.com/article/2074105/making-white-image-backgrounds-transparent-with-java-2d-groovy.html * * Make provided image transparent wherever color matches the provided color. * * @param im BufferedImage whose color will be made transparent. * @param color Color in provided image which will be made transparent. * @return Image with transparency applied. */ def transformColorToTransparency ( im : BufferedImage , color : Color ): Image = { val filter : ImageFilter = new RGBImageFilter () { // the color we are looking for (white)... Alpha bits are set to opaque val markerRGB = color . getRGB | 0xFF000000 def filterRGB ( x : Int , y : Int , rgb : Int ) = { if (( rgb | 0xFF000000 ) == markerRGB ) { // Mark the alpha bits as zero - transparent 0x00FFFFFF & rgb } else { // nothing to do rgb } } } val ip : ImageProducer = new FilteredImageSource ( im . getSource , filter ) Toolkit . getDefaultToolkit . createImage ( ip ) } /** * https://stackoverflow.com/questions/665406/how-to-make-a-color-transparent-in-a-bufferedimage-and-save-as-png */ def transformColorRangeToTransparency ( image : BufferedImage , c1 : Color , c2 : Color ): Image = { val ( r1 , g1 , b1 ) = ( c1 . getRed , c1 . getGreen , c1 . getBlue ) val ( r2 , g2 , b2 ) = ( c2 . getRed , c2 . getGreen , c2 . getBlue ) val filter = new RGBImageFilter () { override final def filterRGB ( x : Int , y : Int , rgb : Int ): Int = { val r = ( rgb & 0xFF0000 ) >> 16 val g = ( rgb & 0xFF00 ) >> 8 val b = rgb & 0xFF if ( r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2 ) { // Set fully transparent but keep color return rgb & 0xFFFFFF } rgb } } val ip = new FilteredImageSource ( image . getSource , filter ) Toolkit . getDefaultToolkit . createImage ( ip ) } def imageToBufferedImage ( image : Image , bgColor : Option [ Color ] = None ): BufferedImage = { val bufferedImage = new BufferedImage ( image . getWidth ( null ), image . getHeight ( null ), BufferedImage . TYPE_INT_ARGB ) val g2 = bufferedImage . createGraphics () bgColor . foreach ( c => g2 . setPaint ( c )) g2 . fillRect ( 0 , 0 , bufferedImage . getWidth , bufferedImage . getHeight ) g2 . drawImage ( image , 0 , 0 , null ) g2 . dispose () bufferedImage } def writeImage ( fileName : String , bi : BufferedImage ) = { val outputfile = new File ( s\"tmp/ $ fileName \" ) println ( \"outputfile: \" + outputfile . getAbsolutePath ) ImageIO . write ( bi , \"png\" , outputfile ) } def readBufferedImage ( path : String ): BufferedImage = { val classLoader = getClass . getClassLoader val file = new File ( classLoader . getResource ( path ). getFile ) ImageIO . read ( file ) } }","title":"Code snippets"},{"location":"blog/2021/2021-04-05-remove-bg/#generate-images","text":"class AddTransparencySpec extends AnyFlatSpec { behavior of \"AddTransparency\" val at = new AddTransparency () it should \"transformColorRangeToTransparency\" in { val files = List . range ( 1 , 6 ). map ( s => s\"img $ s \" ) println ( files ) files . foreach { file => val source : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) val color = new Color ( source . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val c1 = Color . decode ( \"#EEEEEE\" ) val c2 = Color . decode ( \"#EFEFEF\" ) val imageWithTransparency : Image = at . transformColorRangeToTransparency ( source , c1 , c2 ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , bgColor = Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_range_transparent.png\" , transparentImage ) } } it should \"transformColorToTransparency\" in { val files = List . range ( 1 , 6 ). map ( s => s\"img $ s \" ) println ( files ) files . foreach { file => val image : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) println ( imgInfo ( image )) val color = new Color ( image . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val imageWithTransparency : Image = at . transformColorToTransparency ( image , color ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_transparent.png\" , transparentImage ) } } it should \"img5\" in { val file = \"img5\" val source : BufferedImage = at . readBufferedImage ( s\"poc/ $ file .jpg\" ) val color = new Color ( source . getRGB ( 0 , 0 )) println ( s\"color = $ color \" ) val c1 = Color . decode ( \"#EDEDED\" ) val c2 = Color . decode ( \"#F0F0F0\" ) val imageWithTransparency : Image = at . transformColorRangeToTransparency ( source , c1 , c2 ) val transparentImage = at . imageToBufferedImage ( imageWithTransparency , bgColor = Some ( Color . RED )) at . writeImage ( s\" ${ file } _color_range_transparent_special.png\" , transparentImage ) } def imgInfo ( img : BufferedImage ): String = { val info = s\"w: ${ img . getWidth } , h: ${ img . getHeight } \" info } }","title":"Generate images"},{"location":"blog/2021/2021-04-13-opencv/","text":"OpenCV tutorials and learning materials | opencv | python | computer vision | The idea was/is to collect practical tutorials in \u201czero to hero\u201d style. Youtube Videos 1 - sentdex : OpenCV with Python for Image and Video Analysis 2 - Murtaza\u2019s Workshop - Robotics and AI Opencv Python Tutorials For Beginners 3 - freeCodeCamp.org OpenCV Course - Full Tutorial with Python Tutorials 1 - Official OpenCV-Python Tutorials Github opencv 2 - RSDharra - Computer Vision: Zero To Hero 3 - Miscellaneous Youtube Videos 1 - sentdex : OpenCV with Python for Image and Video Analysis It\u2019s a nice practical introductory course into the subject. See related text-based tutorial OpenCV with Python Intro and loading Images tutorial Loading Video Source Drawing and Writing on Image Image Operations Image arithmetics and Logic Thresholding Color Filtering Blurring and Smoothing Morphological Transformations Canny Edge Detection and Gradients Template Matching GrabCut Foreground Extraction Corner Detection Feature Matching (Homography) Brute Force MOG Background Reduction Haar Cascade Object Detection Face & Eye Creating your own Haar Cascade 2 - Murtaza\u2019s Workshop - Robotics and AI This is a very interesting Youtube channel. I highly recommend it to anybody interesting in OpenCV and computer vision. Github murtazahassan/OpenCV-Python-Tutorials-and-Projects Opencv Python Tutorials For Beginners Single Video Course Learn OpenCV in 3 Hours Basics How to Install OpenCV Win/Mac How to Read Image-Video-Webcam 5 Must Know OpenCV Basic Functions How to Crop and Resize Images How to Draw Shapes and Text Joining Multiple Images to Display Warp Prespective/BirdView Detecting Clicks on Images Screen Capture Intermidiate Real Time Color Detection (Webcam) Real Time Shape Detection using Contours Tracking Objects Custom Obejct Detection using HaarCascade QRcode and BarCode Detection Text Detection OCR Projects Gesture Controlled Robot Hand Object Tracking with Drone Document Scanner Optical Mark Recognition Object Measurement Face Recognition Angle Finder Drone Face Tracking 3 - freeCodeCamp.org OpenCV Course - Full Tutorial with Python Learn everything you need to know about OpenCV in this full course for beginners. You will learn the very basics (reading images and videos, image transformations) to more advanced concepts (color spaces, edge detection). Tutorials 1 - Official OpenCV-Python Tutorials Here are the main chapters, each contains sub-chapters: Introduction to OpenCV Introduction to OpenCV-Python Tutorials Install OpenCV-Python in Windows Install OpenCV-Python in Fedora Install OpenCV-Python in Ubuntu Gui Features in OpenCV Getting Started with Images Getting Started with Videos Drawing Functions in OpenCV Mouse as a Paint-Brush Trackbar as the Color Palette Core Operations Basic Operations on Images Arithmetic Operations on Images Performance Measurement and Improvement Techniques Image Processing in OpenCV Changing Colorspaces Geometric Transformations of Images Image Thresholding Smoothing Images Morphological Transformations Image Gradients Canny Edge Detection Image Pyramids Contours in OpenCV Histograms in OpenCV Image Transforms in OpenCV Template Matching Hough Line Transform Hough Circle Transform Image Segmentation with Watershed Algorithm Interactive Foreground Extraction using GrabCut Algorithm Feature Detection and Description Understanding Features Harris Corner Detection Shi-Tomasi Corner Detector & Good Features to Track Introduction to SIFT (Scale-Invariant Feature Transform) Introduction to SURF (Speeded-Up Robust Features) FAST Algorithm for Corner Detection BRIEF (Binary Robust Independent Elementary Features) ORB (Oriented FAST and Rotated BRIEF) Feature Matching Feature Matching + Homography to find Objects Video analysis (video module) High Dynamic Range Imaging High level stitching API (Stitcher class) How to Use Background Subtraction Methods Meanshift and Camshift Optical Flow Cascade Classifier Cascade Classifier Training Introduction to Support Vector Machines Support Vector Machines for Non-Linearly Separable Data Introduction to Principal Component Analysis (PCA) Camera Calibration and 3D Reconstruction Camera Calibration Pose Estimation Epipolar Geometry Depth Map from Stereo Images Machine Learning K-Nearest Neighbour Support Vector Machines (SVM) K-Means Clustering Computational Photography Image Denoising Image Inpainting High Dynamic Range (HDR) Object Detection (objdetect module) 1. High Dynamic Range Imaging 2. High level stitching API (Stitcher class) 3. How to Use Background Subtraction Methods 4. Meanshift and Camshift 5. Optical Flow 6. Cascade Classifier 7. Cascade Classifier Training 8. Introduction to Support Vector Machines 9. Support Vector Machines for Non-Linearly Separable Data 10. Introduction to Principal Component Analysis (PCA) OpenCV-Python Bindings 1. How OpenCV-Python Bindings Works? Github opencv samples : python, java, cpp, ios tutorials 2 - RSDharra - Computer Vision: Zero To Hero Introduction OpenCV Installion Basic OpenCV Operation Random Bytes to grayscale and BGR image Accessing image pixels Reading/writing a video file Capturing camera frames Displaying camera frames High pass filter Low Pass filter Canny Edge Detection Contour Detection Area of Object Convex Hull Line Detection Circle Detection Detecting Shapes Finding Object ORB Algorithm ORB For Object Detection GrabCut Watershed Algorithm Haar Cascades Face Detection Face Detection using Webcam HOG Car Detection Basic Motion Detection Intro to Dlib Face Feature Landmark Detection Yawn Detection Face Swap Intro To ML Digit Recognition Face Recognition Detect By Color Background Subtraction 3 - Miscellaneous OpenCV-Python Tutorials . This tutorial might be a bit outdated, but it is good enouth for beginning. PyImageSearch is a website created by Adrian Rosebrock, PhD, professional Computer Vision/Deep Learning developer and researcher. You can find there blog, books, courses. Learn OpenCV is a website created by Satya Mallick, PhD, \u201centrepreneur with a love for Computer Vision and Machine Learning\u201d. The author writes blog, created several cources, and duing AI consultancy.","title":"OpenCV tutorials and learning materials"},{"location":"blog/2021/2021-04-13-opencv/#opencv-tutorials-and-learning-materials","text":"| opencv | python | computer vision | The idea was/is to collect practical tutorials in \u201czero to hero\u201d style. Youtube Videos 1 - sentdex : OpenCV with Python for Image and Video Analysis 2 - Murtaza\u2019s Workshop - Robotics and AI Opencv Python Tutorials For Beginners 3 - freeCodeCamp.org OpenCV Course - Full Tutorial with Python Tutorials 1 - Official OpenCV-Python Tutorials Github opencv 2 - RSDharra - Computer Vision: Zero To Hero 3 - Miscellaneous","title":"OpenCV tutorials and learning materials"},{"location":"blog/2021/2021-04-13-opencv/#youtube-videos","text":"","title":"Youtube Videos"},{"location":"blog/2021/2021-04-13-opencv/#1-sentdex-opencv-with-python-for-image-and-video-analysis","text":"It\u2019s a nice practical introductory course into the subject. See related text-based tutorial OpenCV with Python Intro and loading Images tutorial Loading Video Source Drawing and Writing on Image Image Operations Image arithmetics and Logic Thresholding Color Filtering Blurring and Smoothing Morphological Transformations Canny Edge Detection and Gradients Template Matching GrabCut Foreground Extraction Corner Detection Feature Matching (Homography) Brute Force MOG Background Reduction Haar Cascade Object Detection Face & Eye Creating your own Haar Cascade","title":"1 - sentdex: OpenCV with Python for Image and Video Analysis"},{"location":"blog/2021/2021-04-13-opencv/#2-murtazas-workshop-robotics-and-ai","text":"This is a very interesting Youtube channel. I highly recommend it to anybody interesting in OpenCV and computer vision. Github murtazahassan/OpenCV-Python-Tutorials-and-Projects","title":"2 - Murtaza's Workshop - Robotics and AI"},{"location":"blog/2021/2021-04-13-opencv/#3-freecodecamporg-opencv-course-full-tutorial-with-python","text":"Learn everything you need to know about OpenCV in this full course for beginners. You will learn the very basics (reading images and videos, image transformations) to more advanced concepts (color spaces, edge detection).","title":"3 - freeCodeCamp.org OpenCV Course - Full Tutorial with Python"},{"location":"blog/2021/2021-04-13-opencv/#tutorials","text":"","title":"Tutorials"},{"location":"blog/2021/2021-04-13-opencv/#1-official-opencv-python-tutorials","text":"Here are the main chapters, each contains sub-chapters: Introduction to OpenCV Introduction to OpenCV-Python Tutorials Install OpenCV-Python in Windows Install OpenCV-Python in Fedora Install OpenCV-Python in Ubuntu Gui Features in OpenCV Getting Started with Images Getting Started with Videos Drawing Functions in OpenCV Mouse as a Paint-Brush Trackbar as the Color Palette Core Operations Basic Operations on Images Arithmetic Operations on Images Performance Measurement and Improvement Techniques Image Processing in OpenCV Changing Colorspaces Geometric Transformations of Images Image Thresholding Smoothing Images Morphological Transformations Image Gradients Canny Edge Detection Image Pyramids Contours in OpenCV Histograms in OpenCV Image Transforms in OpenCV Template Matching Hough Line Transform Hough Circle Transform Image Segmentation with Watershed Algorithm Interactive Foreground Extraction using GrabCut Algorithm Feature Detection and Description Understanding Features Harris Corner Detection Shi-Tomasi Corner Detector & Good Features to Track Introduction to SIFT (Scale-Invariant Feature Transform) Introduction to SURF (Speeded-Up Robust Features) FAST Algorithm for Corner Detection BRIEF (Binary Robust Independent Elementary Features) ORB (Oriented FAST and Rotated BRIEF) Feature Matching Feature Matching + Homography to find Objects Video analysis (video module) High Dynamic Range Imaging High level stitching API (Stitcher class) How to Use Background Subtraction Methods Meanshift and Camshift Optical Flow Cascade Classifier Cascade Classifier Training Introduction to Support Vector Machines Support Vector Machines for Non-Linearly Separable Data Introduction to Principal Component Analysis (PCA) Camera Calibration and 3D Reconstruction Camera Calibration Pose Estimation Epipolar Geometry Depth Map from Stereo Images Machine Learning K-Nearest Neighbour Support Vector Machines (SVM) K-Means Clustering Computational Photography Image Denoising Image Inpainting High Dynamic Range (HDR) Object Detection (objdetect module) 1. High Dynamic Range Imaging 2. High level stitching API (Stitcher class) 3. How to Use Background Subtraction Methods 4. Meanshift and Camshift 5. Optical Flow 6. Cascade Classifier 7. Cascade Classifier Training 8. Introduction to Support Vector Machines 9. Support Vector Machines for Non-Linearly Separable Data 10. Introduction to Principal Component Analysis (PCA) OpenCV-Python Bindings 1. How OpenCV-Python Bindings Works?","title":"1 - Official OpenCV-Python Tutorials"},{"location":"blog/2021/2021-04-13-opencv/#2-rsdharra-computer-vision-zero-to-hero","text":"Introduction OpenCV Installion Basic OpenCV Operation Random Bytes to grayscale and BGR image Accessing image pixels Reading/writing a video file Capturing camera frames Displaying camera frames High pass filter Low Pass filter Canny Edge Detection Contour Detection Area of Object Convex Hull Line Detection Circle Detection Detecting Shapes Finding Object ORB Algorithm ORB For Object Detection GrabCut Watershed Algorithm Haar Cascades Face Detection Face Detection using Webcam HOG Car Detection Basic Motion Detection Intro to Dlib Face Feature Landmark Detection Yawn Detection Face Swap Intro To ML Digit Recognition Face Recognition Detect By Color Background Subtraction","title":"2 - RSDharra - Computer Vision: Zero To Hero"},{"location":"blog/2021/2021-04-13-opencv/#3-miscellaneous","text":"OpenCV-Python Tutorials . This tutorial might be a bit outdated, but it is good enouth for beginning. PyImageSearch is a website created by Adrian Rosebrock, PhD, professional Computer Vision/Deep Learning developer and researcher. You can find there blog, books, courses. Learn OpenCV is a website created by Satya Mallick, PhD, \u201centrepreneur with a love for Computer Vision and Machine Learning\u201d. The author writes blog, created several cources, and duing AI consultancy.","title":"3 - Miscellaneous"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/","text":"Haskell: Development Environment Setup | haskell | References Lesson 1 - Getting set up 1. Install Stack 2. Add Haskell stack to PATH 3. Create project from Stack template 4. Install VSCode Haskell extention 5. Initial project\u2019s build 6. Update the app and rebuild 7. Install ghcid 8. Add a \u201chole\u201d to our module and check how ghcid works 9. Play with Stack repl 9.1. How to fix Warning: Multiple files use the same module name: 9.2. REPL in action 10. VSCode: Switch focus between editor and integrated terminal 11. VSCode adjust layout References These notes are based on Youtube playlist Learning Haskell for dummies by Cmdv aka Vincent Orr The Haskell Tool Stack - Stack is a cross-platform program for developing Haskell projects. It is aimed at Haskellers both new and experienced. Hoogle is a Haskell API search engine, which allows you to search the Haskell libraries on Stackage by either function name, or by approximate type signature. Stackage provides consistent sets of Haskell packages, known to build together and pass their tests before becoming Stackage Nightly snapshots and LTS (Long Term Support) releases. Github ghcid - Very low feature GHCi based IDE. Either \u201cGHCi as a daemon\u201d or \u201cGHC + a bit of an IDE\u201d. To a first approximation, it opens ghci and runs :reload whenever your source code changes, formatting the output to fit a fixed height console. Lesson 1 - Getting set up 1. Install Stack See The Haskell Tool Stack - How to install Run: curl -sSL https://get.haskellstack.org/ | sh Log: $ curl -sSL https://get.haskellstack.org/ | sh Using generic bindist... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 138 100 138 0 0 237 0 --:--:-- --:--:-- --:--:-- 237 100 635 100 635 0 0 495 0 0 :00:01 0 :00:01 --:--:-- 620k 100 8462k 100 8462k 0 0 3209k 0 0 :00:02 0 :00:02 --:--:-- 12 .1M Installing Stack to: /usr/local/bin/stack... ------------------------------------------------------------------------------- Stack has been installed to: /usr/local/bin/stack NOTE: You may need to run 'xcode-select --install' and/or 'open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg' to set up the Xcode command-line tools, which Stack uses. WARNING: '/Users/oivasiv/.local/bin' is not on your PATH. Stack will place the binaries it builds in '/Users/oivasiv/.local/bin' so for best results, please add it to the beginning of PATH in your profile. 2. Add Haskell stack to PATH # Haskell Stack will place the binaries it builds in '/Users/$USER/.local/bin' so # for best results, please add it to the beginning of PATH in your profile. export PATH = \"/Users/oivasiv/.local/bin: $PATH \" 3. Create project from Stack template Run: stack new haskell-first-prj Log: $ stack new haskell-first-prj Downloading template \"new-template\" to create project \"haskell-first-prj\" in haskell-first-prj/ ... The following parameters were needed by the template but not provided: author-name You can provide them in /Users/oivasiv/.stack/config.yaml, like this: templates: params: author-name: value Or you can pass each one as parameters like this: stack new haskell-first-prj new-template -p \"author-name:value\" The following parameters were needed by the template but not provided: author-email, author-name, category, copyright, github-username You can provide them in /Users/oivasiv/.stack/config.yaml, like this: templates: params: author-email: value author-name: value category: value copyright: value github-username: value Or you can pass each one as parameters like this: stack new haskell-first-prj new-template -p \"author-email:value\" -p \"author-name:value\" -p \"category:value\" -p \"copyright:value\" -p \"github-username:value\" Looking for .cabal or package.yaml files to use to init the project. Using cabal packages: - haskell-first-prj/ Selecting the best among 19 snapshots... * Matches https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Selected resolver: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Initialising configuration using resolver: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Total number of user packages considered: 1 Writing configuration to file: haskell-first-prj/stack.yaml All done . /Users/oivasiv/.stack/templates/new-template.hsfiles: 6 .06 KiB downloaded... Resulted project layout $ tree . . \u251c\u2500\u2500 ChangeLog.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 Setup.hs \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 Main.hs \u251c\u2500\u2500 haskell-first-prj.cabal \u251c\u2500\u2500 package.yaml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 Lib.hs \u251c\u2500\u2500 stack.yaml \u251c\u2500\u2500 stack.yaml.lock \u2514\u2500\u2500 test \u2514\u2500\u2500 Spec.hs 4. Install VSCode Haskell extention See Haskell Syntax Highlighting Support for the Haskell programming language in Visual Studio Code. 5. Initial project\u2019s build Run: stack build Log: $ stack build Preparing to install GHC to an isolated location. This will not interfere with any system-level installation. Downloaded ghc-8.10.4. xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance ld: unknown option: --version ld: unknown option: --version Configured with: --prefix = /Library/Developer/CommandLineTools/usr --with-gxx-include-dir = /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1 Configured with: --prefix = /Library/Developer/CommandLineTools/usr --with-gxx-include-dir = /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1 /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Disassembler.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( LdvProfile.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( OldARMAtomic.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( ProfilerReport.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( ProfilerReportJson.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Profiling.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RetainerProfile.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RetainerSet.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RtsDllMain.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( SpinLock.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( TraverseHeap.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Evac_thr.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Sanity.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Scav_thr.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Elf.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( PEi386.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_got.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt_aarch64.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt_arm.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_reloc.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_reloc_aarch64.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_util.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Disassembler.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( OldARMAtomic.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( RtsDllMain.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( SpinLock.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Evac_thr.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Sanity.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Scav_thr.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Elf.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( PEi386.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_got.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt_aarch64.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt_arm.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_reloc.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_reloc_aarch64.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_util.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Disassembler.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( LdvProfile.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( OldARMAtomic.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( ProfilerReport.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( ProfilerReportJson.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Profiling.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RetainerProfile.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RetainerSet.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RtsDllMain.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( SpinLock.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( TraverseHeap.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Evac_thr.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Sanity.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Scav_thr.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Elf.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( PEi386.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_got.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt_aarch64.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt_arm.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_reloc.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_reloc_aarch64.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_util.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( LdvProfile.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( OldARMAtomic.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( ProfilerReport.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( ProfilerReportJson.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Profiling.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RetainerProfile.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RetainerSet.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RtsDllMain.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( SpinLock.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( TraverseHeap.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Evac_thr.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Scav_thr.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Elf.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( PEi386.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_got.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt_aarch64.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt_arm.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_reloc.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_reloc_aarch64.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_util.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Disassembler.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( LdvProfile.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( OldARMAtomic.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( ProfilerReport.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( ProfilerReportJson.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Profiling.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RetainerProfile.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RetainerSet.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RtsDllMain.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( TraverseHeap.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Sanity.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Elf.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( PEi386.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_got.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt_aarch64.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt_arm.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_reloc.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_reloc_aarch64.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_util.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Select.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( LdvProfile.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( OldARMAtomic.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( ProfilerReport.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( ProfilerReportJson.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Profiling.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RetainerProfile.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RetainerSet.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RtsDllMain.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( TraverseHeap.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Elf.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( PEi386.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_got.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt_aarch64.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt_arm.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_reloc.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_reloc_aarch64.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_util.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Select.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Disassembler.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( LdvProfile.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( OldARMAtomic.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( ProfilerReport.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( ProfilerReportJson.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Profiling.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RetainerProfile.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RetainerSet.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RtsDllMain.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( TraverseHeap.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Sanity.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Elf.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( PEi386.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_got.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt_aarch64.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt_arm.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_reloc.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_reloc_aarch64.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_util.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Select.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Disassembler.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( OldARMAtomic.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( RtsDllMain.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Sanity.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Elf.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( PEi386.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_got.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt_aarch64.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt_arm.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_reloc.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_reloc_aarch64.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_util.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Select.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( OldARMAtomic.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( RtsDllMain.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( Elf.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( PEi386.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_got.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt_aarch64.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt_arm.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_reloc.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_reloc_aarch64.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_util.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( Select.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( OldARMAtomic.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( RtsDllMain.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( SpinLock.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Evac_thr.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Scav_thr.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Elf.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( PEi386.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_got.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt_aarch64.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt_arm.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_reloc.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_reloc_aarch64.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_util.debug_p_o ) has no symbols Installed GHC. [ 1 of 2 ] Compiling Main ( /Users/oivasiv/.stack/setup-exe-src/setup-mPHDZzAJ.hs, /Users/oivasiv/.stack/setup-exe-src/setup-mPHDZzAJ.o ) [ 2 of 2 ] Compiling StackSetupShim ( /Users/oivasiv/.stack/setup-exe-src/setup-shim-mPHDZzAJ.hs, /Users/oivasiv/.stack/setup-exe-src/setup-shim-mPHDZzAJ.o ) Linking /Users/oivasiv/.stack/setup-exe-cache/x86_64-osx/tmp-Cabal-simple_mPHDZzAJ_3.2.1.0_ghc-8.10.4 ... Building all executables for ` haskell-first-prj ' once. After a successful build of all of them, only specified executables will be rebuilt. haskell-first-prj> configure (lib + exe) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> build (lib + exe) Preprocessing library for haskell-first-prj-0.1.0.0.. Building library for haskell-first-prj-0.1.0.0.. [1 of 2] Compiling Lib [2 of 2] Compiling Paths_haskell_first_prj Preprocessing executable ' haskell-first-prj-exe ' for haskell-first-prj-0.1.0.0.. Building executable ' haskell-first-prj-exe ' for haskell-first-prj-0.1.0.0.. [ 1 of 2 ] Compiling Main [ 2 of 2 ] Compiling Paths_haskell_first_prj Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/haskell-first-prj-exe ... haskell-first-prj> copy/register Installing library in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/haskell-first-prj-0.1.0.0-Cwmb6rEwFEN2sOWocMM0iS Installing executable haskell-first-prj-exe in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin Registering library for haskell-first-prj-0.1.0.0.. 6. Update the app and rebuild update /src/Lib.hs file $ git diff diff --git a/src/Lib.hs b/src/Lib.hs index d36ff27..daec72f 100644 --- a/src/Lib.hs +++ b/src/Lib.hs @@ -3,4 +3,4 @@ module Lib ) where someFunc :: IO () -someFunc = putStrLn \"someFunc\" +someFunc = putStrLn \"haskell-first-prj-exe - Hello from the hell\" build $ stack build haskell-first-prj-0.1.0.0: unregistering ( local file changes: src/Lib.hs ) haskell-first-prj> configure ( lib + exe ) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> build ( lib + exe ) Preprocessing library for haskell-first-prj-0.1.0.0.. Building library for haskell-first-prj-0.1.0.0.. [ 2 of 2 ] Compiling Lib Preprocessing executable 'haskell-first-prj-exe' for haskell-first-prj-0.1.0.0.. Building executable 'haskell-first-prj-exe' for haskell-first-prj-0.1.0.0.. [ 1 of 2 ] Compiling Main [ Lib changed ] Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/haskell-first-prj-exe ... haskell-first-prj> copy/register Installing library in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/haskell-first-prj-0.1.0.0-Cwmb6rEwFEN2sOWocMM0iS Installing executable haskell-first-prj-exe in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin Registering library for haskell-first-prj-0.1.0.0.. run $ stack exec haskell-first-prj-exe haskell-first-prj-exe - Hello from the hell 7. Install ghcid Github ghcid - Very low feature GHCi based IDE Run: stack install ghcid Log: $ stack install ghcid cereal > configure cereal > Configuring cereal-0.5.8.1... cereal > build clock > configure cereal > Preprocessing library for cereal-0.5.8.1.. cereal > Building library for cereal-0.5.8.1.. cereal > [ 1 of 4 ] Compiling Data.Serialize.Get clock > Configuring clock-0.8... clock > build cmdargs > configure clock > Preprocessing library for clock-0.8.. clock > Building library for clock-0.8.. clock > [ 1 of 1 ] Compiling System.Clock cmdargs > Configuring cmdargs-0.10.21... cmdargs > build colour > configure cmdargs > Preprocessing library for cmdargs-0.10.21.. cmdargs > Building library for cmdargs-0.10.21.. cmdargs > [ 1 of 25 ] Compiling Data.Generics.Any colour > Configuring colour-2.3.5... colour > build cmdargs > [ 2 of 25 ] Compiling Data.Generics.Any.Prelude colour > Preprocessing library for colour-2.3.5.. colour > Building library for colour-2.3.5.. colour > [ 1 of 14 ] Compiling Data.Colour.CIE.Chromaticity cmdargs > [ 3 of 25 ] Compiling System.Console.CmdArgs.Annotate colour > [ 2 of 14 ] Compiling Data.Colour.CIE.Illuminant colour > [ 3 of 14 ] Compiling Data.Colour.Chan cmdargs > [ 4 of 25 ] Compiling System.Console.CmdArgs.Default colour > [ 4 of 14 ] Compiling Data.Colour.Internal cmdargs > [ 5 of 25 ] Compiling System.Console.CmdArgs.Explicit.ExpandArgsAt cmdargs > [ 6 of 25 ] Compiling System.Console.CmdArgs.Explicit.SplitJoin cmdargs > [ 7 of 25 ] Compiling System.Console.CmdArgs.Explicit.Type colour > [ 5 of 14 ] Compiling Data.Colour.Matrix clock > copy/register clock > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/clock-0.8-GgyC1t0yogI8KcRGJ3XM3f colour > [ 6 of 14 ] Compiling Data.Colour.RGB clock > Registering library for clock-0.8.. cereal > [ 2 of 4 ] Compiling Data.Serialize.Put cmdargs > [ 8 of 25 ] Compiling System.Console.CmdArgs.Explicit.Process colour > [ 7 of 14 ] Compiling Data.Colour.RGBSpace.HSL colour > [ 8 of 14 ] Compiling Data.Colour.RGBSpace.HSV colour > [ 9 of 14 ] Compiling Data.Colour.SRGB.Linear extra > configure cmdargs > [ 9 of 25 ] Compiling System.Console.CmdArgs.Explicit.Complete colour > [ 10 of 14 ] Compiling Data.Colour.RGBSpace colour > [ 11 of 14 ] Compiling Data.Colour.SRGB cmdargs > [ 10 of 25 ] Compiling System.Console.CmdArgs.Helper extra > Configuring extra-1.7.9... colour > [ 12 of 14 ] Compiling Data.Colour extra > build colour > [ 13 of 14 ] Compiling Data.Colour.Names extra > Preprocessing library for extra-1.7.9.. extra > Building library for extra-1.7.9.. cereal > [ 3 of 4 ] Compiling Data.Serialize.IEEE754 extra > [ 1 of 21 ] Compiling Data.IORef.Extra extra > [ 2 of 21 ] Compiling Data.Tuple.Extra extra > [ 3 of 21 ] Compiling Data.Typeable.Extra cereal > [ 4 of 4 ] Compiling Data.Serialize extra > [ 4 of 21 ] Compiling Numeric.Extra extra > [ 5 of 21 ] Compiling Partial cereal > cereal > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/cereal-0.5.8.1/src/Data/Serialize.hs:291:9: warning: [ -Wincomplete-patterns ] cereal > Pattern match ( es ) are non-exhaustive cereal > In an equation for \u2018findNr\u2019: Patterns not matched: _ _ cereal > | cereal > 291 | findNr lo hi cereal > | ^^^^^^^^^^^^... extra > [ 6 of 21 ] Compiling Data.List.Extra cmdargs > [ 11 of 25 ] Compiling System.Console.CmdArgs.Implicit.Ann colour > [ 14 of 14 ] Compiling Data.Colour.CIE cmdargs > [ 12 of 25 ] Compiling System.Console.CmdArgs.Implicit.UI cmdargs > [ 13 of 25 ] Compiling System.Console.CmdArgs.Text extra > [ 7 of 21 ] Compiling Data.Version.Extra extra > [ 8 of 21 ] Compiling Data.List.NonEmpty.Extra extra > [ 9 of 21 ] Compiling Data.Either.Extra colour > copy/register cmdargs > [ 14 of 25 ] Compiling System.Console.CmdArgs.Explicit.Help extra > [ 10 of 21 ] Compiling Control.Exception.Extra colour > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/colour-2.3.5-C29WD8Qg69AL3qeQgayHy7 extra > [ 11 of 21 ] Compiling Control.Monad.Extra colour > Registering library for colour-2.3.5.. extra > [ 12 of 21 ] Compiling Data.Foldable.Extra cmdargs > [ 15 of 25 ] Compiling System.Console.CmdArgs.Verbosity extra > [ 13 of 21 ] Compiling Control.Concurrent.Extra cmdargs > [ 16 of 25 ] Compiling System.Console.CmdArgs.Implicit.Type extra > [ 14 of 21 ] Compiling System.Directory.Extra ansi-terminal> configure extra > [ 15 of 21 ] Compiling System.Environment.Extra extra > [ 16 of 21 ] Compiling System.IO.Extra ansi-terminal> Configuring ansi-terminal-0.10.3... cmdargs > [ 17 of 25 ] Compiling System.Console.CmdArgs.Explicit ansi-terminal> build ansi-terminal> Preprocessing library for ansi-terminal-0.10.3.. ansi-terminal> Building library for ansi-terminal-0.10.3.. cmdargs > [ 18 of 25 ] Compiling System.Console.CmdArgs.Implicit.Reader ansi-terminal> [ 1 of 4 ] Compiling System.Console.ANSI.Types cmdargs > [ 19 of 25 ] Compiling System.Console.CmdArgs.Implicit.Local extra > [ 17 of 21 ] Compiling System.Info.Extra extra > [ 18 of 21 ] Compiling System.Process.Extra extra > [ 19 of 21 ] Compiling System.Time.Extra extra > [ 20 of 21 ] Compiling Extra extra > [ 21 of 21 ] Compiling Text.Read.Extra cmdargs > [ 20 of 25 ] Compiling System.Console.CmdArgs.Implicit.Reform extra > copy/register cmdargs > [ 21 of 25 ] Compiling System.Console.CmdArgs.Implicit.Global extra > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/extra-1.7.9-JsV7nDKU3P4LIpqfI0ysJo extra > Registering library for extra-1.7.9.. hashable > configure cmdargs > [ 22 of 25 ] Compiling System.Console.CmdArgs.Implicit cmdargs > [ 23 of 25 ] Compiling System.Console.CmdArgs.Quote cereal > cereal > copy/register hashable > Configuring hashable-1.3.0.0... cereal > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/cereal-0.5.8.1-22Ay1xouyZe6jvGIwilboJ ansi-terminal> [ 2 of 4 ] Compiling System.Console.ANSI.Codes cereal > Registering library for cereal-0.5.8.1.. cmdargs > [ 24 of 25 ] Compiling System.Console.CmdArgs hashable > build ansi-terminal> [ 3 of 4 ] Compiling System.Console.ANSI.Unix cmdargs > [ 25 of 25 ] Compiling System.Console.CmdArgs.GetOpt hashable > Preprocessing library for hashable-1.3.0.0.. hashable > Building library for hashable-1.3.0.0.. hashable > [ 1 of 5 ] Compiling Data.Hashable.Class hfsevents > configure ansi-terminal> [ 4 of 4 ] Compiling System.Console.ANSI cmdargs > copy/register hfsevents > Configuring hfsevents-0.1.6... cmdargs > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/cmdargs-0.10.21-KlHphs6sBhIECkIRkNdEOM cmdargs > Registering library for cmdargs-0.10.21.. ansi-terminal> copy/register hfsevents > build hfsevents > Preprocessing library for hfsevents-0.1.6.. hfsevents > Building library for hfsevents-0.1.6.. ansi-terminal> Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/ansi-terminal-0.10.3-Hpd3ONu7miU6c85cFR1uCj hfsevents > [ 1 of 1 ] Compiling System.OSX.FSEvents ansi-terminal> Registering library for ansi-terminal-0.10.3.. terminal-size> configure hashable > [ 2 of 5 ] Compiling Data.Hashable.Generic.Instances hashable > [ 3 of 5 ] Compiling Data.Hashable.Generic hashable > [ 4 of 5 ] Compiling Data.Hashable hashable > [ 5 of 5 ] Compiling Data.Hashable.Lifted terminal-size> Configuring terminal-size-0.3.2.1... terminal-size> build unix-compat > configure terminal-size> Preprocessing library for terminal-size-0.3.2.1.. terminal-size> Building library for terminal-size-0.3.2.1.. hashable > copy/register hashable > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/hashable-1.3.0.0-K3FFBNAmsvaIvBv4Qg15rQ unix-compat > Configuring unix-compat-0.5.3... terminal-size> [ 1 of 3 ] Compiling System.Console.Terminal.Common hashable > Registering library for hashable-1.3.0.0.. unix-compat > build unix-compat > Preprocessing library for unix-compat-0.5.3.. hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:12: error: hfsevents > warning: 'gestaltSystemVersionMajor' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:12: error: hfsevents > warning: ' gestaltSystemVersionMinor ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:12: error: hfsevents > warning: 'gestaltSystemVersionBugFix' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > 6 warnings generated. async > configure terminal-size> [2 of 3] Compiling System.Console.Terminal.Posix hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:12: error: hfsevents > warning: ' gestaltSystemVersionMajor ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:12: error: hfsevents > warning: 'gestaltSystemVersionMinor' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:12: error: hfsevents > warning: ' gestaltSystemVersionBugFix ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > 6 warnings generated. unix-compat > Building library for unix-compat-0.5.3.. async > Configuring async-2.2.3... terminal-size> [ 3 of 3 ] Compiling System.Console.Terminal.Size async > build unix-compat > [ 1 of 8 ] Compiling System.PosixCompat.Files hfsevents > copy/register async > Preprocessing library for async-2.2.3.. async > Building library for async-2.2.3.. hfsevents > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/hfsevents-0.1.6-DmcXi29r7B8LQG2VHsOEts unix-compat > [ 2 of 8 ] Compiling System.PosixCompat.Temp async > [ 1 of 1 ] Compiling Control.Concurrent.Async hfsevents > Registering library for hfsevents-0.1.6.. terminal-size> copy/register unix-compat > [ 3 of 8 ] Compiling System.PosixCompat.Time terminal-size> Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/terminal-size-0.3.2.1-HihNy0RThZk4O1UkYpAxTd unix-compat > [ 4 of 8 ] Compiling System.PosixCompat.Types unix-compat > [ 5 of 8 ] Compiling System.PosixCompat.Extensions terminal-size> Registering library for terminal-size-0.3.2.1.. async > async > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/async-2.2.3/Control/Concurrent/Async.hs:215:1: warning: [ -Wunused-imports ] async > The import of \u2018Data.Semigroup\u2019 is redundant async > except perhaps to import instances from \u2018Data.Semigroup\u2019 async > To import instances alone, use: import Data.Semigroup () async > | async > 215 | import Data.Semigroup ( Semigroup (( <> ))) async > | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unix-compat > [ 6 of 8 ] Compiling System.PosixCompat.Unistd unix-compat > [ 7 of 8 ] Compiling System.PosixCompat.User unix-compat > [ 8 of 8 ] Compiling System.PosixCompat unix-compat > copy/register unix-compat > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/unix-compat-0.5.3-2aWOCxmwkXJ2vKfu7bHqHW async > unix-compat > Registering library for unix-compat-0.5.3.. async > copy/register async > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/async-2.2.3-I4TgeWeEAzqFNG8LMs7HfA async > Registering library for async-2.2.3.. fsnotify > configure fsnotify > Configuring fsnotify-0.3.0.1... fsnotify > build fsnotify > Preprocessing library for fsnotify-0.3.0.1.. fsnotify > Building library for fsnotify-0.3.0.1.. fsnotify > [ 1 of 7 ] Compiling System.FSNotify.Path fsnotify > [ 2 of 7 ] Compiling System.FSNotify.Types fsnotify > [ 3 of 7 ] Compiling System.FSNotify.Listener fsnotify > [ 4 of 7 ] Compiling System.FSNotify.Polling fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/Polling.hs:19:1: warning: [ -Wunused-imports ] fsnotify > The import of \u2018getCurrentTime\u2019 fsnotify > from module \u2018Data.Time.Clock\u2019 is redundant fsnotify > | fsnotify > 19 | import Data.Time.Clock ( UTCTime, getCurrentTime ) fsnotify > | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/Polling.hs:64:17: warning: [ -Wname-shadowing ] fsnotify > This binding for \u2018path\u2019 shadows the existing binding fsnotify > bound at src/System/FSNotify/Polling.hs:58:22 fsnotify > | fsnotify > 64 | pathAndInfo path = handle ( \\( _ :: IOException ) -> return Nothing ) $ do fsnotify > | ^^^^ fsnotify > [ 5 of 7 ] Compiling System.FSNotify.OSX fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/OSX.hs:84:5: warning: [ -Wunused-local-binds ] fsnotify > Defined but not used: \u2018isFile\u2019 fsnotify > | fsnotify > 84 | isFile = hasFlag e FSE.eventFlagItemIsFile fsnotify > | ^^^^^^ fsnotify > [ 6 of 7 ] Compiling System.FSNotify fsnotify > [ 7 of 7 ] Compiling System.FSNotify.Devel fsnotify > fsnotify > copy/register fsnotify > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/fsnotify-0.3.0.1-EO9zWvFrT8K8EYsUHXztbo fsnotify > Registering library for fsnotify-0.3.0.1.. ghcid > configure ghcid > Configuring ghcid-0.8.7... ghcid > build ghcid > Preprocessing library for ghcid-0.8.7.. ghcid > Building library for ghcid-0.8.7.. ghcid > [ 1 of 6 ] Compiling Language.Haskell.Ghcid.Escape ghcid > [ 2 of 6 ] Compiling Language.Haskell.Ghcid.Types ghcid > [ 3 of 6 ] Compiling Language.Haskell.Ghcid.Parser ghcid > [ 4 of 6 ] Compiling Language.Haskell.Ghcid.Util ghcid > [ 5 of 6 ] Compiling Language.Haskell.Ghcid ghcid > [ 6 of 6 ] Compiling Paths_ghcid ghcid > Preprocessing executable 'ghcid' for ghcid-0.8.7.. ghcid > Building executable 'ghcid' for ghcid-0.8.7.. ghcid > [ 1 of 10 ] Compiling Language.Haskell.Ghcid.Escape ghcid > [ 2 of 10 ] Compiling Language.Haskell.Ghcid.Terminal ghcid > [ 3 of 10 ] Compiling Language.Haskell.Ghcid.Types ghcid > [ 4 of 10 ] Compiling Language.Haskell.Ghcid.Parser ghcid > [ 5 of 10 ] Compiling Language.Haskell.Ghcid.Util ghcid > [ 6 of 10 ] Compiling Language.Haskell.Ghcid ghcid > [ 7 of 10 ] Compiling Paths_ghcid ghcid > [ 8 of 10 ] Compiling Session ghcid > [ 9 of 10 ] Compiling Wait ghcid > [ 10 of 10 ] Compiling Ghcid ghcid > Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/ghcid/ghcid ... ghcid > copy/register ghcid > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/ghcid-0.8.7-FScrtpUXk0oGhWchMGUkoD ghcid > Installing executable ghcid in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin ghcid > Registering library for ghcid-0.8.7.. Completed 13 action ( s ) . Copying from /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin/ghcid to /Users/oivasiv/.local/bin/ghcid Copied executables to /Users/oivasiv/.local/bin: - ghcid 8. Add a \u201chole\u201d to our module and check how ghcid works diff --git a/src/Lib.hs b/src/Lib.hs index d36ff27..93c9269 100644 --- a/src/Lib.hs +++ b/src/Lib.hs @@ -3,4 +3,4 @@ module Lib ) where someFunc :: IO () -someFunc = putStrLn \"someFunc\" +someFunc = putStrLn _ \\ No newline at end of file file: src/Lib.hs module Lib ( someFunc ) where someFunc :: IO () someFunc = putStrLn _ /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:6:21: error: \u2022 Found hole: _ :: String \u2022 In the first argument of \u2018putStrLn\u2019, namely \u2018_\u2019 In the expression: putStrLn _ In an equation for \u2018someFunc\u2019: someFunc = putStrLn _ \u2022 Relevant bindings include someFunc :: IO () ( bound at /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:6:1 ) Valid hole fits include [] :: forall a. [ a ] with [] @Char ( bound at <wired into compiler> ) mempty :: forall a. Monoid a = > a with mempty @ [ Char ] ( imported from \u2018Prelude\u2019 at /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:1:8-10 ( and originally defined in \u2018GHC.Base\u2019 )) | 6 | someFunc = putStrLn _ 9. Play with Stack repl Run: stack repl Log: $ stack repl Using main module: 1. Package `haskell-first-prj' component haskell-first-prj:exe:haskell-first-prj-exe with main-is file: /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs haskell-first-prj> configure (lib + exe) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> initial-build-steps (lib + exe) The following GHC options are incompatible with GHCi and have not been passed to it: -threaded Configuring GHCi with the following packages: haskell-first-prj * * * * * * * * Warning: Multiple files use the same module name: * Paths_haskell_first_prj found at the following paths * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs (haskell-first-prj:lib) * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/autogen/Paths_haskell_first_prj.hs (haskell-first-prj:exe:haskell-first-prj-exe) * * * * * * * * GHCi, version 8.10.4: https://www.haskell.org/ghc/ :? for help [1 of 3] Compiling Lib ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs, interpreted ) [2 of 3] Compiling Main ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs, interpreted ) [3 of 3] Compiling Paths_haskell_first_prj ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs, interpreted ) Ok, three modules loaded. Loaded GHCi configuration from /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/haskell-stack-ghci/78718bc1/ghci-script *Main Lib Paths_haskell_first_prj> 9.1. How to fix Warning: Multiple files use the same module name: * * * * * * * * Warning: Multiple files use the same module name: * Paths_haskell_first_prj found at the following paths * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs ( haskell-first-prj:lib ) * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/autogen/Paths_haskell_first_prj.hs ( haskell-first-prj:exe:haskell-first-prj-exe ) * * * * * * * * Well, I have found one interesting post on reddit and github: Reddit Module automatically generated by stack seems to be duplicated? Github: Stack new myproj produces warning with stack ghci #5439 Ppl are suggesting to add: when : - condition : false other-modules : Paths_pkg Update package.yaml file diff --git a/package.yaml b/package.yaml index af9ead7..cf13e7b 100644 --- a/package.yaml +++ b/package.yaml @@ -35,6 +35,9 @@ executables: - -with-rtsopts=-N dependencies: - haskell-first-prj + when: + - condition: false + other-modules: Paths_haskell_first_prj tests: haskell-first-prj-test: Run: stack build Check updated haskell-first-prj.cabal file diff --git a/haskell-first-prj.cabal b/haskell-first-prj.cabal index 7d3d676..2ef8c5d 100644 --- a/haskell-first-prj.cabal +++ b/haskell-first-prj.cabal @@ -36,8 +36,6 @@ library executable halyph-first-exe main-is: Main.hs - other-modules: - Paths_haskell_first_prj hs-source-dirs: app ghc-options: -threaded -rtsopts -with-rtsopts=-N And finally run stack repl $ stack repl Using main module: 1 . Package ` haskell-first-prj ' component haskell-first-prj:exe:halyph-first-exe with main-is file: /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs The following GHC options are incompatible with GHCi and have not been passed to it: -threaded Configuring GHCi with the following packages: haskell-first-prj GHCi, version 8 .10.4: https://www.haskell.org/ghc/ :? for help [ 1 of 3 ] Compiling Lib ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs, interpreted ) [ 2 of 3 ] Compiling Main ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs, interpreted ) [ 3 of 3 ] Compiling Paths_haskell_first_prj ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs, interpreted ) Ok, three modules loaded. Loaded GHCi configuration from /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/haskell-stack-ghci/78718bc1/ghci-script *Main Lib Paths_haskell_first_prj> As you can see this \u201cWarning\u201d has gone. 9.2. REPL in action * Main Lib Paths_haskell_first_prj > * Main Lib Paths_haskell_first_prj > someFunc someFunc * Main Lib Paths_haskell_first_prj > : t someFunc someFunc :: IO () * Main Lib Paths_haskell_first_prj > : r [ 2 of 3 ] Compiling Lib ( / Users / oivasiv / Projects / haskell_prj / haskell - first - prj / src / Lib . hs , interpreted ) Ok , three modules loaded . * Main Lib Paths_haskell_first_prj > someFunc Sunny day in hell * Main Lib Paths_haskell_first_prj > : t someFunc someFunc :: IO () * Main Lib Paths_haskell_first_prj > 10. VSCode: Switch focus between editor and integrated terminal Open the keybindings.json from the editor: Cmd + Shift + P -> \u201cPreferences: Open Keyboard Shortcuts\u201d JSON and add these entries: // Place your key bindings in this file to override the defaults [ // Toggle between terminal and editor focus { \"key\" : \"ctrl+`\" , \"command\" : \"workbench.action.terminal.focus\" }, { \"key\" : \"ctrl+`\" , \"command\" : \"workbench.action.focusActiveEditorGroup\" , \"when\" : \"terminalFocus\" } ] 11. VSCode adjust layout Project Tree Editor REPL/Teminal ghcid terminal","title":"Haskell: Development Environment Setup"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#haskell-development-environment-setup","text":"| haskell | References Lesson 1 - Getting set up 1. Install Stack 2. Add Haskell stack to PATH 3. Create project from Stack template 4. Install VSCode Haskell extention 5. Initial project\u2019s build 6. Update the app and rebuild 7. Install ghcid 8. Add a \u201chole\u201d to our module and check how ghcid works 9. Play with Stack repl 9.1. How to fix Warning: Multiple files use the same module name: 9.2. REPL in action 10. VSCode: Switch focus between editor and integrated terminal 11. VSCode adjust layout","title":"Haskell: Development Environment Setup"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#references","text":"These notes are based on Youtube playlist Learning Haskell for dummies by Cmdv aka Vincent Orr The Haskell Tool Stack - Stack is a cross-platform program for developing Haskell projects. It is aimed at Haskellers both new and experienced. Hoogle is a Haskell API search engine, which allows you to search the Haskell libraries on Stackage by either function name, or by approximate type signature. Stackage provides consistent sets of Haskell packages, known to build together and pass their tests before becoming Stackage Nightly snapshots and LTS (Long Term Support) releases. Github ghcid - Very low feature GHCi based IDE. Either \u201cGHCi as a daemon\u201d or \u201cGHC + a bit of an IDE\u201d. To a first approximation, it opens ghci and runs :reload whenever your source code changes, formatting the output to fit a fixed height console.","title":"References"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#lesson-1-getting-set-up","text":"","title":"Lesson 1 - Getting set up"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#1-install-stack","text":"See The Haskell Tool Stack - How to install Run: curl -sSL https://get.haskellstack.org/ | sh Log: $ curl -sSL https://get.haskellstack.org/ | sh Using generic bindist... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 138 100 138 0 0 237 0 --:--:-- --:--:-- --:--:-- 237 100 635 100 635 0 0 495 0 0 :00:01 0 :00:01 --:--:-- 620k 100 8462k 100 8462k 0 0 3209k 0 0 :00:02 0 :00:02 --:--:-- 12 .1M Installing Stack to: /usr/local/bin/stack... ------------------------------------------------------------------------------- Stack has been installed to: /usr/local/bin/stack NOTE: You may need to run 'xcode-select --install' and/or 'open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg' to set up the Xcode command-line tools, which Stack uses. WARNING: '/Users/oivasiv/.local/bin' is not on your PATH. Stack will place the binaries it builds in '/Users/oivasiv/.local/bin' so for best results, please add it to the beginning of PATH in your profile.","title":"1. Install Stack"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#2-add-haskell-stack-to-path","text":"# Haskell Stack will place the binaries it builds in '/Users/$USER/.local/bin' so # for best results, please add it to the beginning of PATH in your profile. export PATH = \"/Users/oivasiv/.local/bin: $PATH \"","title":"2. Add Haskell stack to PATH"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#3-create-project-from-stack-template","text":"Run: stack new haskell-first-prj Log: $ stack new haskell-first-prj Downloading template \"new-template\" to create project \"haskell-first-prj\" in haskell-first-prj/ ... The following parameters were needed by the template but not provided: author-name You can provide them in /Users/oivasiv/.stack/config.yaml, like this: templates: params: author-name: value Or you can pass each one as parameters like this: stack new haskell-first-prj new-template -p \"author-name:value\" The following parameters were needed by the template but not provided: author-email, author-name, category, copyright, github-username You can provide them in /Users/oivasiv/.stack/config.yaml, like this: templates: params: author-email: value author-name: value category: value copyright: value github-username: value Or you can pass each one as parameters like this: stack new haskell-first-prj new-template -p \"author-email:value\" -p \"author-name:value\" -p \"category:value\" -p \"copyright:value\" -p \"github-username:value\" Looking for .cabal or package.yaml files to use to init the project. Using cabal packages: - haskell-first-prj/ Selecting the best among 19 snapshots... * Matches https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Selected resolver: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Initialising configuration using resolver: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/17/11.yaml Total number of user packages considered: 1 Writing configuration to file: haskell-first-prj/stack.yaml All done . /Users/oivasiv/.stack/templates/new-template.hsfiles: 6 .06 KiB downloaded... Resulted project layout $ tree . . \u251c\u2500\u2500 ChangeLog.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 Setup.hs \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 Main.hs \u251c\u2500\u2500 haskell-first-prj.cabal \u251c\u2500\u2500 package.yaml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 Lib.hs \u251c\u2500\u2500 stack.yaml \u251c\u2500\u2500 stack.yaml.lock \u2514\u2500\u2500 test \u2514\u2500\u2500 Spec.hs","title":"3. Create project from Stack template"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#4-install-vscode-haskell-extention","text":"See Haskell Syntax Highlighting Support for the Haskell programming language in Visual Studio Code.","title":"4. Install VSCode Haskell extention"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#5-initial-projects-build","text":"Run: stack build Log: $ stack build Preparing to install GHC to an isolated location. This will not interfere with any system-level installation. Downloaded ghc-8.10.4. xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance ld: unknown option: --version ld: unknown option: --version Configured with: --prefix = /Library/Developer/CommandLineTools/usr --with-gxx-include-dir = /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1 Configured with: --prefix = /Library/Developer/CommandLineTools/usr --with-gxx-include-dir = /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1 /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Disassembler.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( LdvProfile.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( OldARMAtomic.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( ProfilerReport.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( ProfilerReportJson.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Profiling.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RetainerProfile.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RetainerSet.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( RtsDllMain.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( SpinLock.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( TraverseHeap.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Evac_thr.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Sanity.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Scav_thr.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( Elf.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( PEi386.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_got.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt_aarch64.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_plt_arm.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_reloc.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_reloc_aarch64.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts.a ( elf_util.o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Disassembler.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( OldARMAtomic.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( RtsDllMain.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( SpinLock.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Evac_thr.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Sanity.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Scav_thr.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( Elf.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( PEi386.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_got.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt_aarch64.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_plt_arm.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_reloc.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_reloc_aarch64.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_p.a ( elf_util.p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Disassembler.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( LdvProfile.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( OldARMAtomic.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( ProfilerReport.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( ProfilerReportJson.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Profiling.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RetainerProfile.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RetainerSet.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( RtsDllMain.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( SpinLock.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( TraverseHeap.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Evac_thr.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Sanity.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Scav_thr.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( Elf.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( PEi386.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_got.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt_aarch64.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_plt_arm.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_reloc.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_reloc_aarch64.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_l.a ( elf_util.l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( LdvProfile.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( OldARMAtomic.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( ProfilerReport.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( ProfilerReportJson.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Profiling.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RetainerProfile.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RetainerSet.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( RtsDllMain.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( SpinLock.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( TraverseHeap.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Evac_thr.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Scav_thr.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( Elf.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( PEi386.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_got.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt_aarch64.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_plt_arm.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_reloc.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_reloc_aarch64.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug.a ( elf_util.debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Disassembler.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( LdvProfile.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( OldARMAtomic.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( ProfilerReport.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( ProfilerReportJson.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Profiling.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RetainerProfile.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RetainerSet.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( RtsDllMain.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( TraverseHeap.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Sanity.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Elf.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( PEi386.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_got.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt_aarch64.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_plt_arm.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_reloc.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_reloc_aarch64.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( elf_util.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr.a ( Select.thr_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( LdvProfile.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( OldARMAtomic.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( ProfilerReport.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( ProfilerReportJson.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Profiling.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RetainerProfile.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RetainerSet.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( RtsDllMain.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( TraverseHeap.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Elf.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( PEi386.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_got.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt_aarch64.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_plt_arm.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_reloc.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_reloc_aarch64.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( elf_util.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug.a ( Select.thr_debug_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Disassembler.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( LdvProfile.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( OldARMAtomic.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( ProfilerReport.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( ProfilerReportJson.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Profiling.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RetainerProfile.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RetainerSet.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( RtsDllMain.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( TraverseHeap.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Sanity.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Elf.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( PEi386.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_got.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt_aarch64.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_plt_arm.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_reloc.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_reloc_aarch64.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( elf_util.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_l.a ( Select.thr_l_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Disassembler.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( OldARMAtomic.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( RtsDllMain.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Sanity.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Elf.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( PEi386.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_got.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt_aarch64.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_plt_arm.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_reloc.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_reloc_aarch64.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( elf_util.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_p.a ( Select.thr_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( OldARMAtomic.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( RtsDllMain.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( Elf.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( PEi386.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_got.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt_aarch64.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_plt_arm.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_reloc.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_reloc_aarch64.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( elf_util.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_thr_debug_p.a ( Select.thr_debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( OldARMAtomic.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( RtsDllMain.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( SpinLock.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Evac_thr.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Scav_thr.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( Elf.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( PEi386.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_got.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt_aarch64.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_plt_arm.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_reloc.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_reloc_aarch64.debug_p_o ) has no symbols /Library/Developer/CommandLineTools/usr/bin/ranlib: file: /Users/oivasiv/.stack/programs/x86_64-osx/ghc-8.10.4/lib/ghc-8.10.4/rts/libHSrts_debug_p.a ( elf_util.debug_p_o ) has no symbols Installed GHC. [ 1 of 2 ] Compiling Main ( /Users/oivasiv/.stack/setup-exe-src/setup-mPHDZzAJ.hs, /Users/oivasiv/.stack/setup-exe-src/setup-mPHDZzAJ.o ) [ 2 of 2 ] Compiling StackSetupShim ( /Users/oivasiv/.stack/setup-exe-src/setup-shim-mPHDZzAJ.hs, /Users/oivasiv/.stack/setup-exe-src/setup-shim-mPHDZzAJ.o ) Linking /Users/oivasiv/.stack/setup-exe-cache/x86_64-osx/tmp-Cabal-simple_mPHDZzAJ_3.2.1.0_ghc-8.10.4 ... Building all executables for ` haskell-first-prj ' once. After a successful build of all of them, only specified executables will be rebuilt. haskell-first-prj> configure (lib + exe) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> build (lib + exe) Preprocessing library for haskell-first-prj-0.1.0.0.. Building library for haskell-first-prj-0.1.0.0.. [1 of 2] Compiling Lib [2 of 2] Compiling Paths_haskell_first_prj Preprocessing executable ' haskell-first-prj-exe ' for haskell-first-prj-0.1.0.0.. Building executable ' haskell-first-prj-exe ' for haskell-first-prj-0.1.0.0.. [ 1 of 2 ] Compiling Main [ 2 of 2 ] Compiling Paths_haskell_first_prj Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/haskell-first-prj-exe ... haskell-first-prj> copy/register Installing library in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/haskell-first-prj-0.1.0.0-Cwmb6rEwFEN2sOWocMM0iS Installing executable haskell-first-prj-exe in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin Registering library for haskell-first-prj-0.1.0.0..","title":"5. Initial project's build"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#6-update-the-app-and-rebuild","text":"update /src/Lib.hs file $ git diff diff --git a/src/Lib.hs b/src/Lib.hs index d36ff27..daec72f 100644 --- a/src/Lib.hs +++ b/src/Lib.hs @@ -3,4 +3,4 @@ module Lib ) where someFunc :: IO () -someFunc = putStrLn \"someFunc\" +someFunc = putStrLn \"haskell-first-prj-exe - Hello from the hell\" build $ stack build haskell-first-prj-0.1.0.0: unregistering ( local file changes: src/Lib.hs ) haskell-first-prj> configure ( lib + exe ) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> build ( lib + exe ) Preprocessing library for haskell-first-prj-0.1.0.0.. Building library for haskell-first-prj-0.1.0.0.. [ 2 of 2 ] Compiling Lib Preprocessing executable 'haskell-first-prj-exe' for haskell-first-prj-0.1.0.0.. Building executable 'haskell-first-prj-exe' for haskell-first-prj-0.1.0.0.. [ 1 of 2 ] Compiling Main [ Lib changed ] Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/haskell-first-prj-exe ... haskell-first-prj> copy/register Installing library in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/haskell-first-prj-0.1.0.0-Cwmb6rEwFEN2sOWocMM0iS Installing executable haskell-first-prj-exe in /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/install/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin Registering library for haskell-first-prj-0.1.0.0.. run $ stack exec haskell-first-prj-exe haskell-first-prj-exe - Hello from the hell","title":"6. Update the app and rebuild"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#7-install-ghcid","text":"Github ghcid - Very low feature GHCi based IDE Run: stack install ghcid Log: $ stack install ghcid cereal > configure cereal > Configuring cereal-0.5.8.1... cereal > build clock > configure cereal > Preprocessing library for cereal-0.5.8.1.. cereal > Building library for cereal-0.5.8.1.. cereal > [ 1 of 4 ] Compiling Data.Serialize.Get clock > Configuring clock-0.8... clock > build cmdargs > configure clock > Preprocessing library for clock-0.8.. clock > Building library for clock-0.8.. clock > [ 1 of 1 ] Compiling System.Clock cmdargs > Configuring cmdargs-0.10.21... cmdargs > build colour > configure cmdargs > Preprocessing library for cmdargs-0.10.21.. cmdargs > Building library for cmdargs-0.10.21.. cmdargs > [ 1 of 25 ] Compiling Data.Generics.Any colour > Configuring colour-2.3.5... colour > build cmdargs > [ 2 of 25 ] Compiling Data.Generics.Any.Prelude colour > Preprocessing library for colour-2.3.5.. colour > Building library for colour-2.3.5.. colour > [ 1 of 14 ] Compiling Data.Colour.CIE.Chromaticity cmdargs > [ 3 of 25 ] Compiling System.Console.CmdArgs.Annotate colour > [ 2 of 14 ] Compiling Data.Colour.CIE.Illuminant colour > [ 3 of 14 ] Compiling Data.Colour.Chan cmdargs > [ 4 of 25 ] Compiling System.Console.CmdArgs.Default colour > [ 4 of 14 ] Compiling Data.Colour.Internal cmdargs > [ 5 of 25 ] Compiling System.Console.CmdArgs.Explicit.ExpandArgsAt cmdargs > [ 6 of 25 ] Compiling System.Console.CmdArgs.Explicit.SplitJoin cmdargs > [ 7 of 25 ] Compiling System.Console.CmdArgs.Explicit.Type colour > [ 5 of 14 ] Compiling Data.Colour.Matrix clock > copy/register clock > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/clock-0.8-GgyC1t0yogI8KcRGJ3XM3f colour > [ 6 of 14 ] Compiling Data.Colour.RGB clock > Registering library for clock-0.8.. cereal > [ 2 of 4 ] Compiling Data.Serialize.Put cmdargs > [ 8 of 25 ] Compiling System.Console.CmdArgs.Explicit.Process colour > [ 7 of 14 ] Compiling Data.Colour.RGBSpace.HSL colour > [ 8 of 14 ] Compiling Data.Colour.RGBSpace.HSV colour > [ 9 of 14 ] Compiling Data.Colour.SRGB.Linear extra > configure cmdargs > [ 9 of 25 ] Compiling System.Console.CmdArgs.Explicit.Complete colour > [ 10 of 14 ] Compiling Data.Colour.RGBSpace colour > [ 11 of 14 ] Compiling Data.Colour.SRGB cmdargs > [ 10 of 25 ] Compiling System.Console.CmdArgs.Helper extra > Configuring extra-1.7.9... colour > [ 12 of 14 ] Compiling Data.Colour extra > build colour > [ 13 of 14 ] Compiling Data.Colour.Names extra > Preprocessing library for extra-1.7.9.. extra > Building library for extra-1.7.9.. cereal > [ 3 of 4 ] Compiling Data.Serialize.IEEE754 extra > [ 1 of 21 ] Compiling Data.IORef.Extra extra > [ 2 of 21 ] Compiling Data.Tuple.Extra extra > [ 3 of 21 ] Compiling Data.Typeable.Extra cereal > [ 4 of 4 ] Compiling Data.Serialize extra > [ 4 of 21 ] Compiling Numeric.Extra extra > [ 5 of 21 ] Compiling Partial cereal > cereal > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/cereal-0.5.8.1/src/Data/Serialize.hs:291:9: warning: [ -Wincomplete-patterns ] cereal > Pattern match ( es ) are non-exhaustive cereal > In an equation for \u2018findNr\u2019: Patterns not matched: _ _ cereal > | cereal > 291 | findNr lo hi cereal > | ^^^^^^^^^^^^... extra > [ 6 of 21 ] Compiling Data.List.Extra cmdargs > [ 11 of 25 ] Compiling System.Console.CmdArgs.Implicit.Ann colour > [ 14 of 14 ] Compiling Data.Colour.CIE cmdargs > [ 12 of 25 ] Compiling System.Console.CmdArgs.Implicit.UI cmdargs > [ 13 of 25 ] Compiling System.Console.CmdArgs.Text extra > [ 7 of 21 ] Compiling Data.Version.Extra extra > [ 8 of 21 ] Compiling Data.List.NonEmpty.Extra extra > [ 9 of 21 ] Compiling Data.Either.Extra colour > copy/register cmdargs > [ 14 of 25 ] Compiling System.Console.CmdArgs.Explicit.Help extra > [ 10 of 21 ] Compiling Control.Exception.Extra colour > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/colour-2.3.5-C29WD8Qg69AL3qeQgayHy7 extra > [ 11 of 21 ] Compiling Control.Monad.Extra colour > Registering library for colour-2.3.5.. extra > [ 12 of 21 ] Compiling Data.Foldable.Extra cmdargs > [ 15 of 25 ] Compiling System.Console.CmdArgs.Verbosity extra > [ 13 of 21 ] Compiling Control.Concurrent.Extra cmdargs > [ 16 of 25 ] Compiling System.Console.CmdArgs.Implicit.Type extra > [ 14 of 21 ] Compiling System.Directory.Extra ansi-terminal> configure extra > [ 15 of 21 ] Compiling System.Environment.Extra extra > [ 16 of 21 ] Compiling System.IO.Extra ansi-terminal> Configuring ansi-terminal-0.10.3... cmdargs > [ 17 of 25 ] Compiling System.Console.CmdArgs.Explicit ansi-terminal> build ansi-terminal> Preprocessing library for ansi-terminal-0.10.3.. ansi-terminal> Building library for ansi-terminal-0.10.3.. cmdargs > [ 18 of 25 ] Compiling System.Console.CmdArgs.Implicit.Reader ansi-terminal> [ 1 of 4 ] Compiling System.Console.ANSI.Types cmdargs > [ 19 of 25 ] Compiling System.Console.CmdArgs.Implicit.Local extra > [ 17 of 21 ] Compiling System.Info.Extra extra > [ 18 of 21 ] Compiling System.Process.Extra extra > [ 19 of 21 ] Compiling System.Time.Extra extra > [ 20 of 21 ] Compiling Extra extra > [ 21 of 21 ] Compiling Text.Read.Extra cmdargs > [ 20 of 25 ] Compiling System.Console.CmdArgs.Implicit.Reform extra > copy/register cmdargs > [ 21 of 25 ] Compiling System.Console.CmdArgs.Implicit.Global extra > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/extra-1.7.9-JsV7nDKU3P4LIpqfI0ysJo extra > Registering library for extra-1.7.9.. hashable > configure cmdargs > [ 22 of 25 ] Compiling System.Console.CmdArgs.Implicit cmdargs > [ 23 of 25 ] Compiling System.Console.CmdArgs.Quote cereal > cereal > copy/register hashable > Configuring hashable-1.3.0.0... cereal > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/cereal-0.5.8.1-22Ay1xouyZe6jvGIwilboJ ansi-terminal> [ 2 of 4 ] Compiling System.Console.ANSI.Codes cereal > Registering library for cereal-0.5.8.1.. cmdargs > [ 24 of 25 ] Compiling System.Console.CmdArgs hashable > build ansi-terminal> [ 3 of 4 ] Compiling System.Console.ANSI.Unix cmdargs > [ 25 of 25 ] Compiling System.Console.CmdArgs.GetOpt hashable > Preprocessing library for hashable-1.3.0.0.. hashable > Building library for hashable-1.3.0.0.. hashable > [ 1 of 5 ] Compiling Data.Hashable.Class hfsevents > configure ansi-terminal> [ 4 of 4 ] Compiling System.Console.ANSI cmdargs > copy/register hfsevents > Configuring hfsevents-0.1.6... cmdargs > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/cmdargs-0.10.21-KlHphs6sBhIECkIRkNdEOM cmdargs > Registering library for cmdargs-0.10.21.. ansi-terminal> copy/register hfsevents > build hfsevents > Preprocessing library for hfsevents-0.1.6.. hfsevents > Building library for hfsevents-0.1.6.. ansi-terminal> Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/ansi-terminal-0.10.3-Hpd3ONu7miU6c85cFR1uCj hfsevents > [ 1 of 1 ] Compiling System.OSX.FSEvents ansi-terminal> Registering library for ansi-terminal-0.10.3.. terminal-size> configure hashable > [ 2 of 5 ] Compiling Data.Hashable.Generic.Instances hashable > [ 3 of 5 ] Compiling Data.Hashable.Generic hashable > [ 4 of 5 ] Compiling Data.Hashable hashable > [ 5 of 5 ] Compiling Data.Hashable.Lifted terminal-size> Configuring terminal-size-0.3.2.1... terminal-size> build unix-compat > configure terminal-size> Preprocessing library for terminal-size-0.3.2.1.. terminal-size> Building library for terminal-size-0.3.2.1.. hashable > copy/register hashable > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/hashable-1.3.0.0-K3FFBNAmsvaIvBv4Qg15rQ unix-compat > Configuring unix-compat-0.5.3... terminal-size> [ 1 of 3 ] Compiling System.Console.Terminal.Common hashable > Registering library for hashable-1.3.0.0.. unix-compat > build unix-compat > Preprocessing library for unix-compat-0.5.3.. hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:12: error: hfsevents > warning: 'gestaltSystemVersionMajor' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:12: error: hfsevents > warning: ' gestaltSystemVersionMinor ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:12: error: hfsevents > warning: 'gestaltSystemVersionBugFix' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > 6 warnings generated. async > configure terminal-size> [2 of 3] Compiling System.Console.Terminal.Posix hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt(gestaltSystemVersionMajor, majorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:106:12: error: hfsevents > warning: ' gestaltSystemVersionMajor ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 106 | Gestalt ( gestaltSystemVersionMajor, majorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:4: error: hfsevents > warning: 'Gestalt' is deprecated: first deprecated in macOS 10 .8 [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt ( gestaltSystemVersionMinor, minorVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: 'Gestalt' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt ( hfsevents > | ^ hfsevents > Gestalt ( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:107:12: error: hfsevents > warning: 'gestaltSystemVersionMinor' is deprecated: first deprecated in macOS 10 .8 - Use NSProcessInfo 's operatingSystemVersion property instead. [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > ^ hfsevents > | hfsevents > 107 | Gestalt(gestaltSystemVersionMinor, minorVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:4: error: hfsevents > warning: ' Gestalt ' is deprecated: first deprecated in macOS 10.8 [-Wdeprecated-declarations] hfsevents > Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt(gestaltSystemVersionBugFix, bugFixVersion); hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:123:1: error: hfsevents > note: ' Gestalt ' has been explicitly marked deprecated here hfsevents > | hfsevents > 123 | Gestalt( hfsevents > | ^ hfsevents > Gestalt( hfsevents > ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6/cbits/c_fsevents.m:108:12: error: hfsevents > warning: ' gestaltSystemVersionBugFix ' is deprecated: first deprecated in macOS 10.8 - Use NSProcessInfo' s operatingSystemVersion property instead. [ -Wdeprecated-declarations ] hfsevents > Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > ^ hfsevents > | hfsevents > 108 | Gestalt ( gestaltSystemVersionBugFix, bugFixVersion ) ; hfsevents > | ^ hfsevents > hfsevents > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/hfsevents-0.1.6//Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Gestalt.h:2075:1: error: hfsevents > note: '' has been explicitly marked deprecated here hfsevents > | hfsevents > 2075 | enum { hfsevents > | ^ hfsevents > enum { hfsevents > ^ hfsevents > 6 warnings generated. unix-compat > Building library for unix-compat-0.5.3.. async > Configuring async-2.2.3... terminal-size> [ 3 of 3 ] Compiling System.Console.Terminal.Size async > build unix-compat > [ 1 of 8 ] Compiling System.PosixCompat.Files hfsevents > copy/register async > Preprocessing library for async-2.2.3.. async > Building library for async-2.2.3.. hfsevents > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/hfsevents-0.1.6-DmcXi29r7B8LQG2VHsOEts unix-compat > [ 2 of 8 ] Compiling System.PosixCompat.Temp async > [ 1 of 1 ] Compiling Control.Concurrent.Async hfsevents > Registering library for hfsevents-0.1.6.. terminal-size> copy/register unix-compat > [ 3 of 8 ] Compiling System.PosixCompat.Time terminal-size> Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/terminal-size-0.3.2.1-HihNy0RThZk4O1UkYpAxTd unix-compat > [ 4 of 8 ] Compiling System.PosixCompat.Types unix-compat > [ 5 of 8 ] Compiling System.PosixCompat.Extensions terminal-size> Registering library for terminal-size-0.3.2.1.. async > async > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/async-2.2.3/Control/Concurrent/Async.hs:215:1: warning: [ -Wunused-imports ] async > The import of \u2018Data.Semigroup\u2019 is redundant async > except perhaps to import instances from \u2018Data.Semigroup\u2019 async > To import instances alone, use: import Data.Semigroup () async > | async > 215 | import Data.Semigroup ( Semigroup (( <> ))) async > | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unix-compat > [ 6 of 8 ] Compiling System.PosixCompat.Unistd unix-compat > [ 7 of 8 ] Compiling System.PosixCompat.User unix-compat > [ 8 of 8 ] Compiling System.PosixCompat unix-compat > copy/register unix-compat > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/unix-compat-0.5.3-2aWOCxmwkXJ2vKfu7bHqHW async > unix-compat > Registering library for unix-compat-0.5.3.. async > copy/register async > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/async-2.2.3-I4TgeWeEAzqFNG8LMs7HfA async > Registering library for async-2.2.3.. fsnotify > configure fsnotify > Configuring fsnotify-0.3.0.1... fsnotify > build fsnotify > Preprocessing library for fsnotify-0.3.0.1.. fsnotify > Building library for fsnotify-0.3.0.1.. fsnotify > [ 1 of 7 ] Compiling System.FSNotify.Path fsnotify > [ 2 of 7 ] Compiling System.FSNotify.Types fsnotify > [ 3 of 7 ] Compiling System.FSNotify.Listener fsnotify > [ 4 of 7 ] Compiling System.FSNotify.Polling fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/Polling.hs:19:1: warning: [ -Wunused-imports ] fsnotify > The import of \u2018getCurrentTime\u2019 fsnotify > from module \u2018Data.Time.Clock\u2019 is redundant fsnotify > | fsnotify > 19 | import Data.Time.Clock ( UTCTime, getCurrentTime ) fsnotify > | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/Polling.hs:64:17: warning: [ -Wname-shadowing ] fsnotify > This binding for \u2018path\u2019 shadows the existing binding fsnotify > bound at src/System/FSNotify/Polling.hs:58:22 fsnotify > | fsnotify > 64 | pathAndInfo path = handle ( \\( _ :: IOException ) -> return Nothing ) $ do fsnotify > | ^^^^ fsnotify > [ 5 of 7 ] Compiling System.FSNotify.OSX fsnotify > fsnotify > /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/stack-b64d6bffac318d73/fsnotify-0.3.0.1/src/System/FSNotify/OSX.hs:84:5: warning: [ -Wunused-local-binds ] fsnotify > Defined but not used: \u2018isFile\u2019 fsnotify > | fsnotify > 84 | isFile = hasFlag e FSE.eventFlagItemIsFile fsnotify > | ^^^^^^ fsnotify > [ 6 of 7 ] Compiling System.FSNotify fsnotify > [ 7 of 7 ] Compiling System.FSNotify.Devel fsnotify > fsnotify > copy/register fsnotify > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/fsnotify-0.3.0.1-EO9zWvFrT8K8EYsUHXztbo fsnotify > Registering library for fsnotify-0.3.0.1.. ghcid > configure ghcid > Configuring ghcid-0.8.7... ghcid > build ghcid > Preprocessing library for ghcid-0.8.7.. ghcid > Building library for ghcid-0.8.7.. ghcid > [ 1 of 6 ] Compiling Language.Haskell.Ghcid.Escape ghcid > [ 2 of 6 ] Compiling Language.Haskell.Ghcid.Types ghcid > [ 3 of 6 ] Compiling Language.Haskell.Ghcid.Parser ghcid > [ 4 of 6 ] Compiling Language.Haskell.Ghcid.Util ghcid > [ 5 of 6 ] Compiling Language.Haskell.Ghcid ghcid > [ 6 of 6 ] Compiling Paths_ghcid ghcid > Preprocessing executable 'ghcid' for ghcid-0.8.7.. ghcid > Building executable 'ghcid' for ghcid-0.8.7.. ghcid > [ 1 of 10 ] Compiling Language.Haskell.Ghcid.Escape ghcid > [ 2 of 10 ] Compiling Language.Haskell.Ghcid.Terminal ghcid > [ 3 of 10 ] Compiling Language.Haskell.Ghcid.Types ghcid > [ 4 of 10 ] Compiling Language.Haskell.Ghcid.Parser ghcid > [ 5 of 10 ] Compiling Language.Haskell.Ghcid.Util ghcid > [ 6 of 10 ] Compiling Language.Haskell.Ghcid ghcid > [ 7 of 10 ] Compiling Paths_ghcid ghcid > [ 8 of 10 ] Compiling Session ghcid > [ 9 of 10 ] Compiling Wait ghcid > [ 10 of 10 ] Compiling Ghcid ghcid > Linking .stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/ghcid/ghcid ... ghcid > copy/register ghcid > Installing library in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/lib/x86_64-osx-ghc-8.10.4/ghcid-0.8.7-FScrtpUXk0oGhWchMGUkoD ghcid > Installing executable ghcid in /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin ghcid > Registering library for ghcid-0.8.7.. Completed 13 action ( s ) . Copying from /Users/oivasiv/.stack/snapshots/x86_64-osx/5e51f2123ebe0cb8f05a0b49e4743eebc38bbceea3c01c0e46a8b4871413e296/8.10.4/bin/ghcid to /Users/oivasiv/.local/bin/ghcid Copied executables to /Users/oivasiv/.local/bin: - ghcid","title":"7. Install ghcid"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#8-add-a-hole-to-our-module-and-check-how-ghcid-works","text":"diff --git a/src/Lib.hs b/src/Lib.hs index d36ff27..93c9269 100644 --- a/src/Lib.hs +++ b/src/Lib.hs @@ -3,4 +3,4 @@ module Lib ) where someFunc :: IO () -someFunc = putStrLn \"someFunc\" +someFunc = putStrLn _ \\ No newline at end of file file: src/Lib.hs module Lib ( someFunc ) where someFunc :: IO () someFunc = putStrLn _ /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:6:21: error: \u2022 Found hole: _ :: String \u2022 In the first argument of \u2018putStrLn\u2019, namely \u2018_\u2019 In the expression: putStrLn _ In an equation for \u2018someFunc\u2019: someFunc = putStrLn _ \u2022 Relevant bindings include someFunc :: IO () ( bound at /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:6:1 ) Valid hole fits include [] :: forall a. [ a ] with [] @Char ( bound at <wired into compiler> ) mempty :: forall a. Monoid a = > a with mempty @ [ Char ] ( imported from \u2018Prelude\u2019 at /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs:1:8-10 ( and originally defined in \u2018GHC.Base\u2019 )) | 6 | someFunc = putStrLn _","title":"8. Add a \"hole\" to our module and check how ghcid works"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#9-play-with-stack-repl","text":"Run: stack repl Log: $ stack repl Using main module: 1. Package `haskell-first-prj' component haskell-first-prj:exe:haskell-first-prj-exe with main-is file: /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs haskell-first-prj> configure (lib + exe) Configuring haskell-first-prj-0.1.0.0... haskell-first-prj> initial-build-steps (lib + exe) The following GHC options are incompatible with GHCi and have not been passed to it: -threaded Configuring GHCi with the following packages: haskell-first-prj * * * * * * * * Warning: Multiple files use the same module name: * Paths_haskell_first_prj found at the following paths * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs (haskell-first-prj:lib) * /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/haskell-first-prj-exe/autogen/Paths_haskell_first_prj.hs (haskell-first-prj:exe:haskell-first-prj-exe) * * * * * * * * GHCi, version 8.10.4: https://www.haskell.org/ghc/ :? for help [1 of 3] Compiling Lib ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/src/Lib.hs, interpreted ) [2 of 3] Compiling Main ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/app/Main.hs, interpreted ) [3 of 3] Compiling Paths_haskell_first_prj ( /Users/oivasiv/Projects/haskell_prj/haskell-first-prj/.stack-work/dist/x86_64-osx/Cabal-3.2.1.0/build/autogen/Paths_haskell_first_prj.hs, interpreted ) Ok, three modules loaded. Loaded GHCi configuration from /private/var/folders/y0/kq4s__nj791b01t7zw8pb6dxr2_wl5/T/haskell-stack-ghci/78718bc1/ghci-script *Main Lib Paths_haskell_first_prj>","title":"9. Play with Stack repl"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#10-vscode-switch-focus-between-editor-and-integrated-terminal","text":"Open the keybindings.json from the editor: Cmd + Shift + P -> \u201cPreferences: Open Keyboard Shortcuts\u201d JSON and add these entries: // Place your key bindings in this file to override the defaults [ // Toggle between terminal and editor focus { \"key\" : \"ctrl+`\" , \"command\" : \"workbench.action.terminal.focus\" }, { \"key\" : \"ctrl+`\" , \"command\" : \"workbench.action.focusActiveEditorGroup\" , \"when\" : \"terminalFocus\" } ]","title":"10. VSCode: Switch focus between editor and integrated terminal"},{"location":"blog/2021/2021-05-20-haskell-dev-setup/#11-vscode-adjust-layout","text":"Project Tree Editor REPL/Teminal ghcid terminal","title":"11. VSCode adjust layout"},{"location":"blog/2021/2021-11-22-base64-macos/","text":"base64 encoding/decoding on MacOS base64 coomand $ echo -n \"Input:String\" | base64 SW5wdXQ6U3RyaW5n $ echo -n \"SW5wdXQ6U3RyaW5n\" | base64 -D Input:String Note : you should use base64 -D on MacOS! Python $ echo \"Input:String\" | python3 -m base64 SW5wdXQ6U3RyaW5nCg == $ echo \"SW5wdXQ6U3RyaW5nCg==\" | python3 -m base64 -d Input:String","title":"`base64` encoding/decoding on MacOS"},{"location":"blog/2021/2021-11-22-base64-macos/#base64-encodingdecoding-on-macos","text":"","title":"base64 encoding/decoding on MacOS"},{"location":"blog/2021/2021-11-22-base64-macos/#base64-coomand","text":"$ echo -n \"Input:String\" | base64 SW5wdXQ6U3RyaW5n $ echo -n \"SW5wdXQ6U3RyaW5n\" | base64 -D Input:String Note : you should use base64 -D on MacOS!","title":"base64 coomand"},{"location":"blog/2021/2021-11-22-base64-macos/#python","text":"$ echo \"Input:String\" | python3 -m base64 SW5wdXQ6U3RyaW5nCg == $ echo \"SW5wdXQ6U3RyaW5nCg==\" | python3 -m base64 -d Input:String","title":"Python"},{"location":"blog/2022/2022-08-20-rethinking-bloging/","text":"Rethinking Bloging | blog | Rethinking Bloging with simplest possible tools: Git repo, Markdown, MkDocs and GitHub Actions See my previous posts: 2018-12-31 - Thoughts about Blogging 2014-09-07 - Migration to Octopress Initial thoughts Mind-flow repo-as-a-blog was and is really cool idea. I can concentrate on content only. I can write with a hope it will be useful for other people. Unfortunately, the reality is different. I was/is lazy and didn\u2019t write enough and content is cheap. My initial though that repo-as-a-blog is enough - didn\u2019t work. It\u2019s more convenient for readers to have some site. I had several criterias for my next static site generator: Git repo-as-a-blog is the main concept and I don\u2019t want changing repo layout and page meta data (the status quo is \u201cthere must be no meta data\u201d ) to satisfy some static site generation engine (like Hugo or Jekyll ) Rendered site must have simple design, close to Github Readme Site rendering speed must be acceptable I must like selected tool repo-as-a-blog concept Static site generators come and go, but repo with content remains. I like the feeling: open editor, write something and you are done. You have a new post even without static site generator. Site generator doesn\u2019t work, who cares. I still have my repo with my blog posts. Material for MkDocs And I found Material for MkDocs . This tool is designed for wiki-like documentation, but not for blogging. Nevertheless I like it a lot. It is simple and powerful at the same time. I can adjust it to my minimal needs and it just works. The most important MkDocs feature: it does not need page related metadata, it simply renders folder\u2019s content, amazing. When I am saying \u201cmeta data\u201d I mean this: Hugo --- layout: post title: \"My awesome blog post\" date: 2015-12-15 00:00:01 description: \"An insightful description for this page that Google will like\" --- JBake title=Weekly Links #2 date=2013-02-01 type=post tags=weekly links, java status=published ~~~~~~ Of cause, MkDocs has meta data section, but it is not mandatory and I can skip it if I want/need. Github Action I host my rendered site via Github Pages. I could deploy it manually, but it\u2019s 2022 and I can easily use Github actions for free deployment. I\u2019ve decided to use github-action-push-to-another-repository . It\u2019s pretty simple and transparent, has narrow scope and well documented. Just write post, commit and push to repo and site generation will be done automatically and transparent for me. Profit! Epilogue I don\u2019t think I made any valuable contribution to the world via writing this post. It\u2019s just my mind flow and I like it.","title":"Rethinking Bloging"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#rethinking-bloging","text":"| blog | Rethinking Bloging with simplest possible tools: Git repo, Markdown, MkDocs and GitHub Actions See my previous posts: 2018-12-31 - Thoughts about Blogging 2014-09-07 - Migration to Octopress","title":"Rethinking Bloging"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#initial-thoughts","text":"Mind-flow repo-as-a-blog was and is really cool idea. I can concentrate on content only. I can write with a hope it will be useful for other people. Unfortunately, the reality is different. I was/is lazy and didn\u2019t write enough and content is cheap. My initial though that repo-as-a-blog is enough - didn\u2019t work. It\u2019s more convenient for readers to have some site. I had several criterias for my next static site generator: Git repo-as-a-blog is the main concept and I don\u2019t want changing repo layout and page meta data (the status quo is \u201cthere must be no meta data\u201d ) to satisfy some static site generation engine (like Hugo or Jekyll ) Rendered site must have simple design, close to Github Readme Site rendering speed must be acceptable I must like selected tool","title":"Initial thoughts"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#repo-as-a-blog-concept","text":"Static site generators come and go, but repo with content remains. I like the feeling: open editor, write something and you are done. You have a new post even without static site generator. Site generator doesn\u2019t work, who cares. I still have my repo with my blog posts.","title":"repo-as-a-blog concept"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#material-for-mkdocs","text":"And I found Material for MkDocs . This tool is designed for wiki-like documentation, but not for blogging. Nevertheless I like it a lot. It is simple and powerful at the same time. I can adjust it to my minimal needs and it just works. The most important MkDocs feature: it does not need page related metadata, it simply renders folder\u2019s content, amazing. When I am saying \u201cmeta data\u201d I mean this: Hugo --- layout: post title: \"My awesome blog post\" date: 2015-12-15 00:00:01 description: \"An insightful description for this page that Google will like\" --- JBake title=Weekly Links #2 date=2013-02-01 type=post tags=weekly links, java status=published ~~~~~~ Of cause, MkDocs has meta data section, but it is not mandatory and I can skip it if I want/need.","title":"Material for MkDocs"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#github-action","text":"I host my rendered site via Github Pages. I could deploy it manually, but it\u2019s 2022 and I can easily use Github actions for free deployment. I\u2019ve decided to use github-action-push-to-another-repository . It\u2019s pretty simple and transparent, has narrow scope and well documented. Just write post, commit and push to repo and site generation will be done automatically and transparent for me. Profit!","title":"Github Action"},{"location":"blog/2022/2022-08-20-rethinking-bloging/#epilogue","text":"I don\u2019t think I made any valuable contribution to the world via writing this post. It\u2019s just my mind flow and I like it.","title":"Epilogue"},{"location":"blog/2022/2022-09-09-akka-license/","text":"Lightbend is Changing the License for Akka | scala | akka | References Original Lightbend blog post Why We Are Changing the License for Akka PR Change license #31561 Discuss 2.6.x maintenance proposal - Lightbend will be addressing critical security updates and critical bugs in Akka v2.6.x under the current Apache 2 license until September 2023 Community reaction: Hacker News Reddit 1 and 2 My thoughts TL;DR Lightbend decided to change Akka license from Apache 2.0 to Business Source License (BSL) v1.1. The BSL is a \u201cSource Available\u201d license that freely allows using the code for development and other non-production work such as testing. Production use of the software requires a commercial license from Lightbend. The commercial license will be available at no charge for early-stage companies (less than US $25 million in annual revenue). By enabling early-stage companies to use Akka in production for free, we hope to continue to foster the innovation synonymous with the startup adoption of Akka. It was announced 2 days ago (September 7, 2022), I expected a shit-storm and decided to wait and read comments (see links above). I have nothing against Lightbend\u2019s decision. I used Akka-http , Akka-Streams and Play Framework . I like Akka-http for it\u2019s simplicity. Life is unpredictable and we all must adjust our plans. I will not recommend my team or my current and future employer to use Akka. There are several other libraries and frameworks which can replace Akka. I see the following alternatives for Scala: Typelevel stack or ZIO . One downside of ZIO it\u2019s his opinionated approach. For now, I have decided to check Typelevel stack. But, in case of failure on Scala front, I have Java backup - Spring Boot and Co . People are saying that Java 18 is cool. Historical Notes I forgot to mention that Lightbend has stopped Lagom active development and made Playframework community-led project. Read more here: On the future of Play Framework - October 2021 The future of Lagom - October 2021","title":"Lightbend is Changing the License for Akka"},{"location":"blog/2022/2022-09-09-akka-license/#lightbend-is-changing-the-license-for-akka","text":"| scala | akka |","title":"Lightbend is Changing the License for Akka"},{"location":"blog/2022/2022-09-09-akka-license/#references","text":"Original Lightbend blog post Why We Are Changing the License for Akka PR Change license #31561 Discuss 2.6.x maintenance proposal - Lightbend will be addressing critical security updates and critical bugs in Akka v2.6.x under the current Apache 2 license until September 2023 Community reaction: Hacker News Reddit 1 and 2","title":"References"},{"location":"blog/2022/2022-09-09-akka-license/#my-thoughts","text":"TL;DR Lightbend decided to change Akka license from Apache 2.0 to Business Source License (BSL) v1.1. The BSL is a \u201cSource Available\u201d license that freely allows using the code for development and other non-production work such as testing. Production use of the software requires a commercial license from Lightbend. The commercial license will be available at no charge for early-stage companies (less than US $25 million in annual revenue). By enabling early-stage companies to use Akka in production for free, we hope to continue to foster the innovation synonymous with the startup adoption of Akka. It was announced 2 days ago (September 7, 2022), I expected a shit-storm and decided to wait and read comments (see links above). I have nothing against Lightbend\u2019s decision. I used Akka-http , Akka-Streams and Play Framework . I like Akka-http for it\u2019s simplicity. Life is unpredictable and we all must adjust our plans. I will not recommend my team or my current and future employer to use Akka. There are several other libraries and frameworks which can replace Akka. I see the following alternatives for Scala: Typelevel stack or ZIO . One downside of ZIO it\u2019s his opinionated approach. For now, I have decided to check Typelevel stack. But, in case of failure on Scala front, I have Java backup - Spring Boot and Co . People are saying that Java 18 is cool.","title":"My thoughts"},{"location":"blog/2022/2022-09-09-akka-license/#historical-notes","text":"I forgot to mention that Lightbend has stopped Lagom active development and made Playframework community-led project. Read more here: On the future of Play Framework - October 2021 The future of Lagom - October 2021","title":"Historical Notes"},{"location":"blog/2022/2022-11-17-prog-lang-pop/","text":"Popularity of Programming Languages - 2022 | python | java | scala | golang | rust | References The state of Groovy and other JVM Languages Personal Techradar for Programming Languages - 2020 H2 Thoughts This is a pretty useless post. But I like this topic. \ud83d\ude1b Once per year I\u2019ve been checking programming language popularity on different resources and trying to predict the future for myself. I am interested in the following languages: Java, Scala, Python, JS, Typescript, Golang, Rust, Kotlin. Conclusion Python is the most popular language Java and Javascript are sharing 2nd and 3d places (depends on measuring approach) Typescript is confidently climbing up Golang is in plateau and I guess it defined its own niche Rust and Kotlin are still climbing Scala is stable low in a rating or even declining (depends on the rating) Ratings Here you can check different ratings. I like to have such snapshots, because it will be interesting to check the status quo in the future. 1 - Tiobe - November, 2022 2 - The RedMonk Programming Language Rankings: June 2022 1 JavaScript 2 Python 3 Java 4 PHP 5 C# 6 CSS 7 C++ 7 TypeScript 9 Ruby 10 C 11 Swift 12 R 12 Objective-C 14 Shell 15 Scala 15 Go 17 PowerShell 17 Kotlin 19 Rust 19 Dart 3 - PYPL PopularitY of Programming Language - November, 2022 4 - IEEE Spectrum - Top Programming Languages 2022 Spectrum Jobs Trending","title":"Popularity of Programming Languages - 2022"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#popularity-of-programming-languages-2022","text":"| python | java | scala | golang | rust |","title":"Popularity of Programming Languages - 2022"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#references","text":"The state of Groovy and other JVM Languages Personal Techradar for Programming Languages - 2020 H2","title":"References"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#thoughts","text":"This is a pretty useless post. But I like this topic. \ud83d\ude1b Once per year I\u2019ve been checking programming language popularity on different resources and trying to predict the future for myself. I am interested in the following languages: Java, Scala, Python, JS, Typescript, Golang, Rust, Kotlin.","title":"Thoughts"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#conclusion","text":"Python is the most popular language Java and Javascript are sharing 2nd and 3d places (depends on measuring approach) Typescript is confidently climbing up Golang is in plateau and I guess it defined its own niche Rust and Kotlin are still climbing Scala is stable low in a rating or even declining (depends on the rating)","title":"Conclusion"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#ratings","text":"Here you can check different ratings. I like to have such snapshots, because it will be interesting to check the status quo in the future.","title":"Ratings"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#1-tiobe-november-2022","text":"","title":"1 - Tiobe - November, 2022"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#2-the-redmonk-programming-language-rankings-june-2022","text":"1 JavaScript 2 Python 3 Java 4 PHP 5 C# 6 CSS 7 C++ 7 TypeScript 9 Ruby 10 C 11 Swift 12 R 12 Objective-C 14 Shell 15 Scala 15 Go 17 PowerShell 17 Kotlin 19 Rust 19 Dart","title":"2 - The RedMonk Programming Language Rankings: June 2022"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#3-pypl-popularity-of-programming-language-november-2022","text":"","title":"3 - PYPL PopularitY of Programming Language  - November, 2022"},{"location":"blog/2022/2022-11-17-prog-lang-pop/#4-ieee-spectrum-top-programming-languages-2022","text":"Spectrum Jobs Trending","title":"4 - IEEE Spectrum - Top Programming Languages 2022"},{"location":"blog/2022/2022-12-01-zsh-on-mac/","text":"ZSH on MacOS | zsh | macos | References Make ZSH a default shell on MacOS Install Oh My Zsh Define agnoster theme Update iTerm2 font Update a prompt Update VSCode settings Disclaimer : This post doesn\u2019t have verbose \u201cwhys\u201d only \u201chows\u201d! References Making ZSH default Shell in MacOSX ohmyzsh/wiki Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons) How to set up an amazing terminal for data science with oh-my-zsh plugins Make ZSH a default shell on MacOS $ sudo chsh -s /bin/zsh Changing shell for root. and $ chsh -s /bin/zsh Changing shell for halyph. Check version $ zsh --version zsh 5 .8 ( x86_64-apple-darwin20.0 ) Install Oh My Zsh $ sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" Define agnoster theme Open .zshrc and add the following line: ZSH_THEME=\"agnoster\" Open iTerm2 and you will see this ugly prompt Update iTerm2 font Install Nerd fonts (see more here ) $ brew tap homebrew/cask-fonts $ brew install --cask font-hack-nerd-font Open iTerm2 and update profile settings As you can see ugly ? symbols have been disappeared. Update a prompt The following changes must be added after source $ZSH/oh-my-zsh.sh line remove use name and laptop name Add this line to .zshrc DEFAULT_USER=$USER make PROMPT to occupy two lines and use \u279c symbol as the bigging of a prompt Add this function to .zshrc prompt_end () { echo -n \" \\e[m\\n\u279c%{%f%}\" } So, now our prompt should look like this Update VSCode settings Open VSCode terminal These strange symbols can\u2019t be rendered properly that\u2019s why we should update related setting and adjust terminal\u2019s font: select and open in VSCode \u201cPreferences: Open User Settings (JSON)\u201d and add the following line to settings.json file: \"terminal.integrated.fontFamily\" : \"Hack Nerd Font\" Now our VSCode termial looks much better","title":"ZSH on MacOS"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#zsh-on-macos","text":"| zsh | macos | References Make ZSH a default shell on MacOS Install Oh My Zsh Define agnoster theme Update iTerm2 font Update a prompt Update VSCode settings Disclaimer : This post doesn\u2019t have verbose \u201cwhys\u201d only \u201chows\u201d!","title":"ZSH on MacOS"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#references","text":"Making ZSH default Shell in MacOSX ohmyzsh/wiki Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons) How to set up an amazing terminal for data science with oh-my-zsh plugins","title":"References"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#make-zsh-a-default-shell-on-macos","text":"$ sudo chsh -s /bin/zsh Changing shell for root. and $ chsh -s /bin/zsh Changing shell for halyph. Check version $ zsh --version zsh 5 .8 ( x86_64-apple-darwin20.0 )","title":"Make ZSH a default shell on MacOS"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#install-oh-my-zsh","text":"$ sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \"","title":"Install Oh My Zsh"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#define-agnoster-theme","text":"Open .zshrc and add the following line: ZSH_THEME=\"agnoster\" Open iTerm2 and you will see this ugly prompt","title":"Define agnoster theme"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#update-iterm2-font","text":"Install Nerd fonts (see more here ) $ brew tap homebrew/cask-fonts $ brew install --cask font-hack-nerd-font Open iTerm2 and update profile settings As you can see ugly ? symbols have been disappeared.","title":"Update iTerm2 font"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#update-a-prompt","text":"The following changes must be added after source $ZSH/oh-my-zsh.sh line remove use name and laptop name Add this line to .zshrc DEFAULT_USER=$USER make PROMPT to occupy two lines and use \u279c symbol as the bigging of a prompt Add this function to .zshrc prompt_end () { echo -n \" \\e[m\\n\u279c%{%f%}\" } So, now our prompt should look like this","title":"Update a prompt"},{"location":"blog/2022/2022-12-01-zsh-on-mac/#update-vscode-settings","text":"Open VSCode terminal These strange symbols can\u2019t be rendered properly that\u2019s why we should update related setting and adjust terminal\u2019s font: select and open in VSCode \u201cPreferences: Open User Settings (JSON)\u201d and add the following line to settings.json file: \"terminal.integrated.fontFamily\" : \"Hack Nerd Font\" Now our VSCode termial looks much better","title":"Update VSCode settings"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/","text":"Python is the second best language for anything | python | Main Part Disclaimer : It\u2019s another blah-blah post, feel free to read Hacker News :-P it will be more useful for you. What other programming languages do I associate with Python, or to be precise what other scripting languages? I would say the following: Ruby Groovy Javascript Perl PHP Lua Tcl Bash ( and similar shell scripting languages ) Powershell VBA Autohokey AutoIt newLISP R Matlab Maple Actually, I decided to make this list only as an exercise for myself, to identify from a historical perspective what I touched during all these years. I used some of these languages at the university or early in my career. I.e. I don\u2019t know the status quo for them, new features, their communities, etc. But all of them somehow build Python-association in my brain in a way I can use Python instead of them and be \u201chappy\u201d. If you look closer at this list you will notice some domain-specific language (like GUI automation, scripting, and math tools). But the true Python competitor in general sense is Ruby . These two are very similar in terms of exploitation, and I preferred Ruby before my personal Python era began. I was not too fond of Python. But since everybody around me has been using Python in some or another way, I decided to use it as well, to simplify knowledge/tool sharing, contribution to other tools, etc. Even today, I am not a big Python fan, but there is convenience: a massive amount of libs, books, blogs, etc. It\u2019s like a universal hammer for everything. So, what does it mean \u201cPython is the second best language for anything\u201d for me? It means I will start prototyping any simple things, or throw-away scripts in Python. Even if I don\u2019t know the domain I am 99% sure there is at least some library for my current problem. There are several exceptions: Web : Javascript System Programming : C Back-End : Go, Java, Scala CLI : Go Desktop : Java The following domains will be covered by Python ( PoC , my personal projects): Scripting Infrastructure Machine Learning/Data Science/Data Analysis/Data Engineering CLI: when I don\u2019t need to distribute the app Again, Python is not the best language in the world, it definitely has some sort of ugliness, but it\u2019s popular, and I accepted this. Concerns Concurrency This topic is not well aligned in my head when I am talking about Python and concurrency in the same sentence. I would use JVM languages (Java, Scala) or Go instead of Python when I need to implement something performant and concurrent. Packaging and Distribution It\u2019s not related to Python only, but to other scripting languages as well. If you need to distribute some Python app you have to be prepared. Your users must know how to use Pip and virtual environment . But it\u2019s not the end of story. How do you package/assemble your app? There are so many ways for building your Python app, see PyPA Projects . I don\u2019t understand why such old community haven\u2019t agreed on some one or two recommended build tools. Why do they need such crazy numbers of different tools? But I am talking as seasonal Python user. Maybe there are some reason. Anyway, what I wanted to say: I try to avoid as much as possible any Python tool ceremonies and use only simplest possible standard tools: pip , venv and requirements.txt . Just check Distributing Python Modules , and you will find such creatures: distutils , setuptools , wheel and so on. What? Really? Do not forget, Python went public in 1991 (31 years ago). FTW! P.S. Poetry is a new cool kid in Python community. Maybe it will solve all problems, but it\u2019s not yet a standard and that\u2019s why I am not ready for big investments.","title":"Python is the second best language for anything"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/#python-is-the-second-best-language-for-anything","text":"| python |","title":"Python is the second best language for anything"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/#main-part","text":"Disclaimer : It\u2019s another blah-blah post, feel free to read Hacker News :-P it will be more useful for you. What other programming languages do I associate with Python, or to be precise what other scripting languages? I would say the following: Ruby Groovy Javascript Perl PHP Lua Tcl Bash ( and similar shell scripting languages ) Powershell VBA Autohokey AutoIt newLISP R Matlab Maple Actually, I decided to make this list only as an exercise for myself, to identify from a historical perspective what I touched during all these years. I used some of these languages at the university or early in my career. I.e. I don\u2019t know the status quo for them, new features, their communities, etc. But all of them somehow build Python-association in my brain in a way I can use Python instead of them and be \u201chappy\u201d. If you look closer at this list you will notice some domain-specific language (like GUI automation, scripting, and math tools). But the true Python competitor in general sense is Ruby . These two are very similar in terms of exploitation, and I preferred Ruby before my personal Python era began. I was not too fond of Python. But since everybody around me has been using Python in some or another way, I decided to use it as well, to simplify knowledge/tool sharing, contribution to other tools, etc. Even today, I am not a big Python fan, but there is convenience: a massive amount of libs, books, blogs, etc. It\u2019s like a universal hammer for everything. So, what does it mean \u201cPython is the second best language for anything\u201d for me? It means I will start prototyping any simple things, or throw-away scripts in Python. Even if I don\u2019t know the domain I am 99% sure there is at least some library for my current problem. There are several exceptions: Web : Javascript System Programming : C Back-End : Go, Java, Scala CLI : Go Desktop : Java The following domains will be covered by Python ( PoC , my personal projects): Scripting Infrastructure Machine Learning/Data Science/Data Analysis/Data Engineering CLI: when I don\u2019t need to distribute the app Again, Python is not the best language in the world, it definitely has some sort of ugliness, but it\u2019s popular, and I accepted this.","title":"Main Part"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/#concerns","text":"","title":"Concerns"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/#concurrency","text":"This topic is not well aligned in my head when I am talking about Python and concurrency in the same sentence. I would use JVM languages (Java, Scala) or Go instead of Python when I need to implement something performant and concurrent.","title":"Concurrency"},{"location":"blog/2022/2022-12-20-py_2nd_best_language_for_anything/#packaging-and-distribution","text":"It\u2019s not related to Python only, but to other scripting languages as well. If you need to distribute some Python app you have to be prepared. Your users must know how to use Pip and virtual environment . But it\u2019s not the end of story. How do you package/assemble your app? There are so many ways for building your Python app, see PyPA Projects . I don\u2019t understand why such old community haven\u2019t agreed on some one or two recommended build tools. Why do they need such crazy numbers of different tools? But I am talking as seasonal Python user. Maybe there are some reason. Anyway, what I wanted to say: I try to avoid as much as possible any Python tool ceremonies and use only simplest possible standard tools: pip , venv and requirements.txt . Just check Distributing Python Modules , and you will find such creatures: distutils , setuptools , wheel and so on. What? Really? Do not forget, Python went public in 1991 (31 years ago). FTW! P.S. Poetry is a new cool kid in Python community. Maybe it will solve all problems, but it\u2019s not yet a standard and that\u2019s why I am not ready for big investments.","title":"Packaging and Distribution"},{"location":"blog/2022/2022-12-23-digital-garden-or/","text":"Blog, Digital Garden, Wiki. FTW? | blog | See my previous post about blogging Rethinking Bloging . Recently, I have discovered interesting idea Digital Garden . Digital Garden is a method of storing and maintaining knowledge in an maintainable, scalable and searchable way. They are also known as second brains. Unlike in common blogging where you write an article and forget about it, posts are treated as plants in various stages of growth and nurturing. Some might wither and die, and others will flourish and provide a source of continued knowledge for the gardener and folks in the community that visit. So, for me it sounds like personal Wiki , but for external audience :-). But, I don\u2019t want to stick to \u201cDigital Garden\u201d as is and want to have both ideas simultaneously: Blog and Wiki (\u201cDigital Garden\u201d). Blog is kinda snapshot of your ideas. It\u2019s very interesting to read it in retrospective. Regarding Wiki , currently it\u2019s very small (\u00e0 la initial state) and \u201cdirty\u201d. I will evolve it with one big disclamer: \u201cThis Wiki is for me, but you can read it as well\u201d. I.e. I don\u2019t plan to polish every article to make it perfect. I just make a note, update here and there and that\u2019s it. I have checked other Digital Gartens (see here ) and must say ppl invested a lot. Some use fancy tools, typography etc. I am not ready yet invest so much in design, it\u2019s better for me to have content.","title":"Blog, Digital Garden, Wiki. FTW?"},{"location":"blog/2022/2022-12-23-digital-garden-or/#blog-digital-garden-wiki-ftw","text":"| blog | See my previous post about blogging Rethinking Bloging . Recently, I have discovered interesting idea Digital Garden . Digital Garden is a method of storing and maintaining knowledge in an maintainable, scalable and searchable way. They are also known as second brains. Unlike in common blogging where you write an article and forget about it, posts are treated as plants in various stages of growth and nurturing. Some might wither and die, and others will flourish and provide a source of continued knowledge for the gardener and folks in the community that visit. So, for me it sounds like personal Wiki , but for external audience :-). But, I don\u2019t want to stick to \u201cDigital Garden\u201d as is and want to have both ideas simultaneously: Blog and Wiki (\u201cDigital Garden\u201d). Blog is kinda snapshot of your ideas. It\u2019s very interesting to read it in retrospective. Regarding Wiki , currently it\u2019s very small (\u00e0 la initial state) and \u201cdirty\u201d. I will evolve it with one big disclamer: \u201cThis Wiki is for me, but you can read it as well\u201d. I.e. I don\u2019t plan to polish every article to make it perfect. I just make a note, update here and there and that\u2019s it. I have checked other Digital Gartens (see here ) and must say ppl invested a lot. Some use fancy tools, typography etc. I am not ready yet invest so much in design, it\u2019s better for me to have content.","title":"Blog, Digital Garden, Wiki. FTW?"},{"location":"wiki/mkdocs-tips-tricks/","text":"Mkdocs - Tips and Tricks Plugins mkdocs-awesome-pages-plugin sorts pages in navigation section (descending order) mkdocs-git-revision-date-localized-plugin adds the date on which a Markdown file was last updated at the bottom of each page mkdocs-rss-plugin generates a RSS feeds for created and updated pages, using git log and YAML frontmatter (page.meta) Sample Mkdocs site Here is a collections of MkDocs-based sites and repos for my inspiration https://3os.org mkdocs-material Github Action - clean sample for site deployment Made With ML and corresponding repo The Blue Book - \u201cmy personal digital garden where I share everything I learn about a huge variety of topics\u201d Deployment github-action-push-to-another-repository","title":"Mkdocs - Tips and Tricks"},{"location":"wiki/mkdocs-tips-tricks/#mkdocs-tips-and-tricks","text":"","title":"Mkdocs - Tips and Tricks"},{"location":"wiki/mkdocs-tips-tricks/#plugins","text":"mkdocs-awesome-pages-plugin sorts pages in navigation section (descending order) mkdocs-git-revision-date-localized-plugin adds the date on which a Markdown file was last updated at the bottom of each page mkdocs-rss-plugin generates a RSS feeds for created and updated pages, using git log and YAML frontmatter (page.meta)","title":"Plugins"},{"location":"wiki/mkdocs-tips-tricks/#sample-mkdocs-site","text":"Here is a collections of MkDocs-based sites and repos for my inspiration https://3os.org mkdocs-material Github Action - clean sample for site deployment Made With ML and corresponding repo The Blue Book - \u201cmy personal digital garden where I share everything I learn about a huge variety of topics\u201d","title":"Sample Mkdocs site"},{"location":"wiki/mkdocs-tips-tricks/#deployment","text":"github-action-push-to-another-repository","title":"Deployment"},{"location":"wiki/tools/","text":"Developer and Power Users Tool List Inspired by Scott Hanselman\u2019s 2021 Ultimate Developer and Power Users Tool List for Windows MacOS Homebrew - Package Manager for macOS iTerm2 - terminal emulator VSCode is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux Joplin - open source note-taking app FSNotes - notes manager for macOS and iOS Postgres.app is a full-featured PostgreSQL installation packaged as a standard Mac app Anki - flash cards Dev Tools sdkman is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems sbt - Scala/Java build tool maven - Java build tool jq is a lightweight and flexible command-line JSON processor Postman - powerful REST API client Material for MkDocs - Markdown-based documentation static site generator","title":"Tools"},{"location":"wiki/tools/#developer-and-power-users-tool-list","text":"Inspired by Scott Hanselman\u2019s 2021 Ultimate Developer and Power Users Tool List for Windows","title":"Developer and Power Users Tool List"},{"location":"wiki/tools/#macos","text":"Homebrew - Package Manager for macOS iTerm2 - terminal emulator VSCode is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux Joplin - open source note-taking app FSNotes - notes manager for macOS and iOS Postgres.app is a full-featured PostgreSQL installation packaged as a standard Mac app Anki - flash cards","title":"MacOS"},{"location":"wiki/tools/#dev-tools","text":"sdkman is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems sbt - Scala/Java build tool maven - Java build tool jq is a lightweight and flexible command-line JSON processor Postman - powerful REST API client Material for MkDocs - Markdown-based documentation static site generator","title":"Dev Tools"},{"location":"wiki/languages/Go/libraries/cobra/","text":"cobra spf13/cobra is a library for creating powerful modern CLI applications.","title":"cobra"},{"location":"wiki/languages/Go/libraries/cobra/#cobra","text":"spf13/cobra is a library for creating powerful modern CLI applications.","title":"cobra"},{"location":"wiki/languages/Go/libraries/viper/","text":"viper spf13/viper is a complete configuration solution for Go applications including 12-Factor apps.","title":"viper"},{"location":"wiki/languages/Go/libraries/viper/#viper","text":"spf13/viper is a complete configuration solution for Go applications including 12-Factor apps.","title":"viper"},{"location":"wiki/languages/Java/frameworks/","text":"Frameworks Collection of frameworks I find interesting or important for Java Ecosystem Spring Micronaut Quarkus Vertx Helidon Dropwizard","title":"Frameworks"},{"location":"wiki/languages/Java/frameworks/#frameworks","text":"Collection of frameworks I find interesting or important for Java Ecosystem Spring Micronaut Quarkus Vertx Helidon Dropwizard","title":"Frameworks"},{"location":"wiki/languages/Python/libraries/","text":"Libraries Textualize/rich is a Python library for rich text and beautiful formatting in the terminal.","title":"Libraries"},{"location":"wiki/languages/Python/libraries/#libraries","text":"Textualize/rich is a Python library for rich text and beautiful formatting in the terminal.","title":"Libraries"},{"location":"wiki/system-design/useful-resources/","text":"Useful Resources The Twelve-Factor App Azure Architecture Microsoft - Cloud Design Patterns microservices.io is a microservice pattern catalog AWS Architecture AWS Automating safe, hands-off deployments","title":"Useful Resources"},{"location":"wiki/system-design/useful-resources/#useful-resources","text":"The Twelve-Factor App Azure Architecture Microsoft - Cloud Design Patterns microservices.io is a microservice pattern catalog AWS Architecture AWS Automating safe, hands-off deployments","title":"Useful Resources"}]}